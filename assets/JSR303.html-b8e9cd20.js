const n=JSON.parse('{"key":"v-75895c3c","path":"/java/Common/JSR303.html","title":"参数校验的几种方式","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2022-01-04T00:00:00.000Z","lastUpdated":true,"contributors":true,"description":"参数校验的几种方式 这里推荐几种方式，只要用于参数校验，接口鉴权，令牌续命，版本号兼容过滤 一、基于AOP环绕通知 aop/切面类 /** * @Description 基于AOP的环绕通知 控制层的方法进行匹配 校验全部参数 * @author kz * @date 2022/10/17 */ @Component //IOC创建容器 @Aspect //切面 public class ParamAspect { // 切入点 类 方法 参数 语法格式：execution(* 包名.类名.⽅法名(..)) @Pointcut(\\"execution(* com.auth.api.controller.*.*(..))\\") public void pt(){} @Around(\\"pt()\\") public Object handler(ProceedingJoinPoint point)throws Throwable{ //1.获取当前方法上的参数 Object[] args = point.getArgs(); //2.遍历循环，进行校验参数 for (Object o:args){ if (Objects.isNull(o)){ //空参，失败 return R.fail(\\"参数为空\\"); } } //3.执行原来的方法 return point.proceed(); } }","head":[["meta",{"property":"og:url","content":"https://k-flower.gitee.io/kblogs/java/Common/JSR303.html"}],["meta",{"property":"og:site_name","content":"Flowers"}],["meta",{"property":"og:title","content":"参数校验的几种方式"}],["meta",{"property":"og:description","content":"参数校验的几种方式 这里推荐几种方式，只要用于参数校验，接口鉴权，令牌续命，版本号兼容过滤 一、基于AOP环绕通知 aop/切面类 /** * @Description 基于AOP的环绕通知 控制层的方法进行匹配 校验全部参数 * @author kz * @date 2022/10/17 */ @Component //IOC创建容器 @Aspect //切面 public class ParamAspect { // 切入点 类 方法 参数 语法格式：execution(* 包名.类名.⽅法名(..)) @Pointcut(\\"execution(* com.auth.api.controller.*.*(..))\\") public void pt(){} @Around(\\"pt()\\") public Object handler(ProceedingJoinPoint point)throws Throwable{ //1.获取当前方法上的参数 Object[] args = point.getArgs(); //2.遍历循环，进行校验参数 for (Object o:args){ if (Objects.isNull(o)){ //空参，失败 return R.fail(\\"参数为空\\"); } } //3.执行原来的方法 return point.proceed(); } }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-11-01T03:15:53.000Z"}],["meta",{"property":"article:author","content":"Kou"}],["meta",{"property":"article:published_time","content":"2022-01-04T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-11-01T03:15:53.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"参数校验的几种方式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-01-04T00:00:00.000Z\\",\\"dateModified\\":\\"2025-11-01T03:15:53.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kou\\"}]}"]]},"headers":[{"level":2,"title":"一、基于AOP环绕通知","slug":"一、基于aop环绕通知","link":"#一、基于aop环绕通知","children":[]},{"level":2,"title":"二、基于注解+拦截器实现","slug":"二、基于注解-拦截器实现","link":"#二、基于注解-拦截器实现","children":[{"level":3,"title":"2.0 参数校验","slug":"_2-0-参数校验","link":"#_2-0-参数校验","children":[]},{"level":3,"title":"2.1 接口鉴权","slug":"_2-1-接口鉴权","link":"#_2-1-接口鉴权","children":[]},{"level":3,"title":"2.3实现令牌续命","slug":"_2-3实现令牌续命","link":"#_2-3实现令牌续命","children":[]},{"level":3,"title":"2.4实现版本号的兼容性过滤","slug":"_2-4实现版本号的兼容性过滤","link":"#_2-4实现版本号的兼容性过滤","children":[]}]},{"level":2,"title":"三、Validator（JSR303校验）","slug":"三、validator-jsr303校验","link":"#三、validator-jsr303校验","children":[{"level":3,"title":"3.1 JSR303介绍","slug":"_3-1-jsr303介绍","link":"#_3-1-jsr303介绍","children":[]},{"level":3,"title":"3.2 常用注解","slug":"_3-2-常用注解","link":"#_3-2-常用注解","children":[]},{"level":3,"title":"3.3 基本演示","slug":"_3-3-基本演示","link":"#_3-3-基本演示","children":[]},{"level":3,"title":"3.4 嵌套问题","slug":"_3-4-嵌套问题","link":"#_3-4-嵌套问题","children":[]}]},{"level":2,"title":"四、El表达式（扩展）","slug":"四、el表达式-扩展","link":"#四、el表达式-扩展","children":[]}],"git":{"createdTime":1696930298000,"updatedTime":1761966953000,"contributors":[{"name":"kou","email":"knightbreeze@163.com","commits":4},{"name":"kz","email":"1069624300@QQ.COM","commits":1}]},"readingTime":{"minutes":8.29,"words":2486},"filePathRelative":"java/Common/JSR303.md","localizedDate":"2022年1月4日","excerpt":"<h1> 参数校验的几种方式</h1>\\n<p>这里推荐几种方式，只要用于<strong>参数校验，接口鉴权，令牌续命，版本号兼容过滤</strong></p>\\n<h2> 一、基于AOP环绕通知</h2>\\n<p>aop/切面类</p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token doc-comment comment\\">/**\\n * @Description 基于AOP的环绕通知 控制层的方法进行匹配 校验全部参数\\n * <span class=\\"token keyword\\">@author</span> kz\\n * <span class=\\"token keyword\\">@date</span> 2022/10/17\\n */</span>\\n<span class=\\"token annotation punctuation\\">@Component</span> <span class=\\"token comment\\">//IOC创建容器</span>\\n<span class=\\"token annotation punctuation\\">@Aspect</span>  <span class=\\"token comment\\">//切面</span>\\n<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">ParamAspect</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">// 切入点                                     类 方法 参数</span>\\n     语法格式：<span class=\\"token function\\">execution</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">*</span> 包名<span class=\\"token punctuation\\">.</span>类名<span class=\\"token punctuation\\">.</span>⽅法名<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token annotation punctuation\\">@Pointcut</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"execution(* com.auth.api.controller.*.*(..))\\"</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">pt</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token annotation punctuation\\">@Around</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"pt()\\"</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">Object</span> <span class=\\"token function\\">handler</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">ProceedingJoinPoint</span> point<span class=\\"token punctuation\\">)</span><span class=\\"token keyword\\">throws</span> <span class=\\"token class-name\\">Throwable</span><span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token comment\\">//1.获取当前方法上的参数</span>\\n        <span class=\\"token class-name\\">Object</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> args <span class=\\"token operator\\">=</span> point<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getArgs</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token comment\\">//2.遍历循环，进行校验参数</span>\\n        <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Object</span> o<span class=\\"token operator\\">:</span>args<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Objects</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">isNull</span><span class=\\"token punctuation\\">(</span>o<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n                <span class=\\"token comment\\">//空参，失败</span>\\n                <span class=\\"token keyword\\">return</span> <span class=\\"token class-name\\">R</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">fail</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"参数为空\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token comment\\">//3.执行原来的方法</span>\\n        <span class=\\"token keyword\\">return</span> point<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">proceed</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
