import{_ as n,o as s,c as a,f as t}from"./app-8ab1e15b.js";const e={},p=t(`<h1 id="rabbitmq" tabindex="-1"><a class="header-anchor" href="#rabbitmq" aria-hidden="true">#</a> RabbitMQ</h1><h1 id="一、mq" tabindex="-1"><a class="header-anchor" href="#一、mq" aria-hidden="true">#</a> ⼀、MQ</h1><h2 id="_1-mq是什么" tabindex="-1"><a class="header-anchor" href="#_1-mq是什么" aria-hidden="true">#</a> 1.MQ是什么</h2><p>MQ（Message Queue）消息队列，是基础数据结构中“先进先出”的⼀种数据结构。⼀般⽤来解决应⽤解耦，异步消息，流量削峰等问题，实现⾼性能，⾼可⽤，可伸缩和最终⼀致性架构。把要传输的数据（消息）放在队列中，⽤队列机制来实现消息传递——⽣产者产⽣消息并把消息放⼊队列，然后由消费者去处理。消费者可以到指定队列拉取消息，或者订阅相应的队列，由MQ服务端给其推送消息。</p><p><strong>修改密码</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">1</span>、进入容器
<span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> mqId <span class="token function">bash</span>
<span class="token number">2</span>、查看当前用户列表
rabbitmqctl  list_users  
<span class="token number">3</span>、修改密码
rabbitmqctl  change_password  guest  <span class="token string">&#39;Kz898989&#39;</span>
<span class="token number">4</span>、增加用户赋予超级管理员权限
rabbitmqctl add_user 用户名 密码
rabbitmqctl  set_user_tags 用户名 administrator
<span class="token number">5</span>、删除用户
rabbitmqctl delete_user Username
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="二、rabbitmq核心" tabindex="-1"><a class="header-anchor" href="#二、rabbitmq核心" aria-hidden="true">#</a> 二、RabbitMQ核心</h1><p><img src="https://steven-kz.github.io/BlogImgs/imgaes/20230315210857.png" alt="1.1.png" loading="lazy"><br><strong>使用docker安装rabbitMQ</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> rabbitmq5672 <span class="token parameter variable">-p</span> <span class="token number">15672</span>:15672 <span class="token parameter variable">-p</span> <span class="token number">5672</span>:5672 rabbitmq:management
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://steven-kz.github.io/BlogImgs/imgaes/20230315210919.png" alt="0.png" loading="lazy"><br><strong>可视乎访问端口号:15672 其他5672</strong><br><img src="https://steven-kz.github.io/BlogImgs/imgaes/20230315210940.png" alt="1.png" loading="lazy"><br> 账号密码均为<strong>guest</strong><br> RabbitMQ消息中间件，发送和消费消息的软件</p><h2 id="_1-p2p消息" tabindex="-1"><a class="header-anchor" href="#_1-p2p消息" aria-hidden="true">#</a> 1.P2P消息</h2><p>普通消息，⼀对⼀，⼀个队列有⼀个发送端和⼀个消费端。<br> 最常⻅的，其中发送端和消费端互不影响<br><strong>1.依赖jar</strong></p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!--        rabbitmq--&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-amqp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2.配置application.yml</strong></p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">rabbitmq</span><span class="token punctuation">:</span>
    <span class="token key atrule">host</span><span class="token punctuation">:</span> 47.92.168.143
    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">5672</span>        <span class="token comment">#端口号</span>
    <span class="token key atrule">username</span><span class="token punctuation">:</span> guest
    <span class="token key atrule">password</span><span class="token punctuation">:</span> guest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>3.创建队列</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span> <span class="token comment">//spring配置注解</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RabbitMQConfig</span> <span class="token punctuation">{</span>
    <span class="token comment">//创造队列 P2P</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">createQueue1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
       <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token string">&quot;k-P2P&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//队列名称 唯一</span>
       <span class="token punctuation">}</span>
   <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>4.编写发送消息的代码</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootTest</span>
<span class="token keyword">class</span> <span class="token class-name">RabbitMqApplicationTests</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">private</span> <span class="token class-name">RabbitTemplate</span> rabbitTemplate<span class="token punctuation">;</span><span class="token comment">//ioc自动创建</span>
    <span class="token comment">//P2P</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//发送消息 参数说明：1.交换器 2.队列名或路由名 3.消息内容</span>
       rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;k-P2P&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;测试rabbit-P2P&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>5.消费者接收</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token string">&quot;k-P2P&quot;</span> <span class="token punctuation">)</span> <span class="token comment">//对应队列名称</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QueueListener</span> <span class="token punctuation">{</span>
   <span class="token keyword">private</span> <span class="token class-name">Logger</span> logger<span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">QueueListener</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token comment">//接受消息</span>
   <span class="token annotation punctuation">@RabbitHandler</span>    <span class="token comment">//参数为发送的类型</span>
   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">listener</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span><span class="token punctuation">{</span>
       logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://steven-kz.github.io/BlogImgs/imgaes/20230315211018.png" alt="2.png" loading="lazy"><br><img src="https://steven-kz.github.io/BlogImgs/imgaes/20230315211048.png" alt="3.png" loading="lazy"><br><strong>接收成功</strong><br><img src="https://steven-kz.github.io/BlogImgs/imgaes/image-20230315211121786.png" alt="4.png" loading="lazy"></p><h3 id="_1-1原生的发送" tabindex="-1"><a class="header-anchor" href="#_1-1原生的发送" aria-hidden="true">#</a> 1.1原生的发送</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RabbitUtil</span> <span class="token punctuation">{</span>
    <span class="token comment">//1.连接服务器</span>
    <span class="token comment">//1.1 创建连接工厂 设计模式：工厂模式</span>
   <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">ConnectionFactory</span> factory<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**手动连接并发送消息*/</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token class-name">RabbitMQTransport</span><span class="token punctuation">(</span><span class="token class-name">String</span> queue<span class="token punctuation">,</span><span class="token class-name">String</span> value<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">TimeoutException</span> <span class="token punctuation">{</span>
        factory<span class="token punctuation">.</span><span class="token function">setHost</span><span class="token punctuation">(</span><span class="token string">&quot;47.92.168.143&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        factory<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span><span class="token number">5672</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        factory<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">&quot;guest&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        factory<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">&quot;guest&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//1.2 创建连接对象</span>
        <span class="token class-name">Connection</span> connection<span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">newConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//1.3 创建通道对象</span>
        <span class="token class-name">Channel</span> channel<span class="token operator">=</span>connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//2.创建队列</span>
        <span class="token doc-comment comment">/**
         * 参数说明：
         * 1.队列名
         * 2.是否持久化
         * 3.是否为排他队列 一次性
         * 4.是否自动删除 */</span>
        channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//3.发送消息</span>
        channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>queue<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span>value<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//4.关闭释放</span>
        channel<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-2原生的接收" tabindex="-1"><a class="header-anchor" href="#_1-2原生的接收" aria-hidden="true">#</a> 1.2原生的接收</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token string">&quot;k-P2PTwo&quot;</span> <span class="token punctuation">)</span> <span class="token comment">//对应队列名称</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QueueListenerTwo</span> <span class="token punctuation">{</span>

   <span class="token keyword">private</span> <span class="token class-name">Logger</span> logger<span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">QueueListenerTwo</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

   <span class="token annotation punctuation">@RabbitHandler</span>    <span class="token comment">//参数类型为返回类型</span>
   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">listener</span><span class="token punctuation">(</span><span class="token class-name">Object</span> msg<span class="token punctuation">)</span><span class="token punctuation">{</span>
       <span class="token comment">//验证</span>
       <span class="token keyword">if</span> <span class="token punctuation">(</span>msg <span class="token keyword">instanceof</span> <span class="token class-name">Message</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
           <span class="token class-name">Message</span> message<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Message</span><span class="token punctuation">)</span> msg<span class="token punctuation">;</span>
           logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;原生接受消息队列：&quot;</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
           logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;原生接受消息队列：&quot;</span><span class="token operator">+</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token punctuation">}</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>先执行发送-创建-接收（若未创建队列-写接收则会报错 找不到队列）</strong></p><h2 id="_2-work消息" tabindex="-1"><a class="header-anchor" href="#_2-work消息" aria-hidden="true">#</a> 2.Work消息</h2><p>⼀个队列可以有多个消费者，这些消费者之间<br> 如果存在发送的快，消费的慢，这样就会消息堆积，需要为队列多加点消费者<br><strong>代码实现：</strong><br><strong>1.创建队列</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//创造队列 Work</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">createQueue2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
       <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token string">&quot;k-Work&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2.编写发送消息的代码</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//Word ⼀个队列可以有多个消费者 数据丢失</span>
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span>  <span class="token function">t1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;k-Work&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;测试rabbit-Word&quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>3.配置两个消费者-监听器</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token string">&quot;k-Work&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QueueListenerWork</span> <span class="token punctuation">{</span>
   <span class="token keyword">private</span> <span class="token class-name">Logger</span> logger<span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">QueueListenerWork</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token annotation punctuation">@RabbitHandler</span>  <span class="token comment">//参数类型为返回类型</span>
   <span class="token keyword">public</span> <span class="token keyword">void</span>  <span class="token function">listener</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span><span class="token punctuation">{</span>
       logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;消费者1:Word&quot;</span><span class="token operator">+</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token string">&quot;k-Work&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QueueListenerWorkTwo</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Logger</span> logger<span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">QueueListenerWork</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token annotation punctuation">@RabbitHandler</span>  <span class="token comment">//参数类型为返回类型</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span>  <span class="token function">listener</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span><span class="token punctuation">{</span>
        logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;消费者2:Word&quot;</span><span class="token operator">+</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果:<br><img src="https://steven-kz.github.io/BlogImgs/imgaes/image-20230315211144008.png" alt="" loading="lazy"><br><strong>扩展 使用SpringBootTest时会启动springboot 这时springboot相当于另一个一样的消费者进行强夺</strong><br><img src="https://steven-kz.github.io/BlogImgs/imgaes/image-20230315211201156.png" alt="" loading="lazy"><br><strong>这些消费者之间是竞争关系，最终⼀个消息只能被消费⼀次</strong></p><h2 id="_3-pub-sub消息" tabindex="-1"><a class="header-anchor" href="#_3-pub-sub消息" aria-hidden="true">#</a> 3.Pub/Sub消息</h2><p>发布订阅消息，基于Exchange实现的消息可以被发送到多个队列中。其中<strong>交换器</strong>有四种类型：<br> fanout、direct、topic、header(基本上不⽤)。⼀般⽤来实现⼀个消息需要发送到多个队列中。消息同<br> 时被多个消费</p><h3 id="_3-1fanout类型-直接转发" tabindex="-1"><a class="header-anchor" href="#_3-1fanout类型-直接转发" aria-hidden="true">#</a> 3.1fanout类型 直接转发</h3><p><strong>Exchange的常⽤的交换器类型，第⼀种：fanout 直接转发</strong><br><img src="https://steven-kz.github.io/BlogImgs/imgaes/image-20230315211214382.png" alt="7.png" loading="lazy"><br> 代码实现：<br> 1.创建所需的队列、交换器、绑定</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RabbitMQFanout</span> <span class="token punctuation">{</span>
    <span class="token comment">//1.创建队列</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">createexQ1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token string">&quot;kz-fanout-1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">createexQ2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token string">&quot;kz-fanout-2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//2.创建交换器 IOC创建容器</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">FanoutExchange</span> <span class="token function">createFe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FanoutExchange</span><span class="token punctuation">(</span><span class="token string">&quot;kz-ex-fanout&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//3.创建绑定关系</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Binding</span> <span class="token function">createBe1</span><span class="token punctuation">(</span><span class="token class-name">FanoutExchange</span> fe<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">BindingBuilder</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token function">createexQ1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span>fe<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Binding</span> <span class="token function">createBe2</span><span class="token punctuation">(</span><span class="token class-name">FanoutExchange</span> fe<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">BindingBuilder</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token function">createexQ2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span>fe<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2.发送</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// Exchange交换器 类型 通过fanout交换器 实现消息发送</span>
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">t3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//发送消息 参数说明：1.交换器 2.队列名或路由名 3.消息内容</span>
    rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">&quot;kz-ex-fanout&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;通过交换器来发送！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://steven-kz.github.io/BlogImgs/imgaes/image-20230315211228306.png" alt="" loading="lazy"><br> 查看<br><img src="https://steven-kz.github.io/BlogImgs/imgaes/image-20230315211243263.png" alt="" loading="lazy"></p><h3 id="_3-2direct类型-匹配转发" tabindex="-1"><a class="header-anchor" href="#_3-2direct类型-匹配转发" aria-hidden="true">#</a> 3.2direct类型 匹配转发</h3><p><img src="https://steven-kz.github.io/BlogImgs/imgaes/image-20230315211254175.png" alt="" loading="lazy"><br> direct类型，发送消息到交换器，交换器根据消息的路由匹配内容，进⾏匹配队列，最终把把消息发送<br> 给匹配到所有队列<br><strong>根据名称进行匹配转发</strong><br><img src="https://steven-kz.github.io/BlogImgs/imgaes/image-20231012154542593.png" alt="11.png" loading="lazy"><br><strong>向交换器发送消息</strong><br><img src="https://steven-kz.github.io/BlogImgs/imgaes/image-20231012154556034.png" alt="10.png" loading="lazy"><br> 只有error队列可以接受到转发的消息</p><h3 id="_3-3topic类型-模糊匹配" tabindex="-1"><a class="header-anchor" href="#_3-3topic类型-模糊匹配" aria-hidden="true">#</a> 3.3topic类型 模糊匹配</h3><p><img src="https://steven-kz.github.io/BlogImgs/imgaes/image-20230315211314646.png" alt="12.png" loading="lazy"><br> topic类型，⽀持路由匹配，其中路由内容⽀持模糊匹配，特殊符号</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>* ⼀个单词，通过.区分单词
# 0或多个单词，通过.区分单词
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>![14.png](<img src="https://steven-kz.github.io/BlogImgs/imgaes/image-20230315211331823.png" alt="image-20230315211331823" loading="lazy"><br> 进行发送<br><img src="https://steven-kz.github.io/BlogImgs/imgaes/image-20230315211346886.png" alt="15.png" loading="lazy"><br> 查看<br><img src="https://steven-kz.github.io/BlogImgs/imgaes/image-20230315211359453.png" alt="13.png" loading="lazy"></p><h2 id="_4-rabbitmq基于死信实现延迟" tabindex="-1"><a class="header-anchor" href="#_4-rabbitmq基于死信实现延迟" aria-hidden="true">#</a> 4.RabbitMQ基于死信实现延迟</h2><p><strong>死信：RabbitMQ的队列中的消息，满⾜以下条件任意其⼀</strong>：<br> 1.消息被拒绝<br> 2.消息过期<br> 3.队列已满<br><strong>死信交换器：专⻔⽤来转发死信消息。</strong><br><strong>死信队列：通过死信交换器发送过来的消息，存储的都是死信消息</strong><br><strong>延迟队列：可以实现延迟消息处理的队列。⼀般把具备有效期的队列并且设置的有死信交换器的队列并且没有消费者成为延迟队列</strong><br> 1.订单超时⾃处理<br> ⽐如<br> 外卖订单15分钟不付款，⾃动取消<br> 12306订单30分钟不付款，⾃动取消<br> 延迟消息处理，5分钟后处理<br> ⾃动确认收货<br><img src="https://steven-kz.github.io/BlogImgs/imgaes/image-20230315211445385.png" alt="17.png" loading="lazy"><br><strong>1.创建延迟队列</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**延迟队列 生成死信 */</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">DL_ONE_NAME</span><span class="token operator">=</span><span class="token string">&quot;kz-dl-001&quot;</span><span class="token punctuation">;</span>
<span class="token doc-comment comment">/**死信队列 接收死信消息 .*/</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">DL_TWO_NAME</span><span class="token operator">=</span><span class="token string">&quot;kz-dl-002&quot;</span><span class="token punctuation">;</span>
<span class="token doc-comment comment">/**死信转换器 */</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">DL_EXCHANGE_NAME</span><span class="token operator">=</span><span class="token string">&quot;kz-dl-exchange&quot;</span><span class="token punctuation">;</span>
<span class="token doc-comment comment">/**死信路由转换*/</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">DL_RK</span><span class="token operator">=</span><span class="token string">&quot;kz-dl-rk&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2.延迟队列创建方式</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**延迟队列*/</span>
<span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">createDl1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//1.创建队列属性信息</span>
    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> params <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//设置队列中每个消息的有效期     毫秒</span>
    params<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;x-message-ttl&quot;</span><span class="token punctuation">,</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//设置对应的死信交换器</span>
    params<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;x-dead-letter-exchange&quot;</span><span class="token punctuation">,</span><span class="token constant">DL_EXCHANGE_NAME</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//设置交换器匹配的路由名称 （队列或交换器）</span>
    params<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;x-dead-letter-routing-key&quot;</span><span class="token punctuation">,</span><span class="token constant">DL_RK</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//2.创建延迟队列                             设置队列信息</span>
    <span class="token keyword">return</span> <span class="token class-name">QueueBuilder</span><span class="token punctuation">.</span><span class="token function">durable</span><span class="token punctuation">(</span><span class="token constant">DL_ONE_NAME</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withArguments</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>设置队列中每个消息的有效期<br> 设置对应的死信交换器<br> 设置交换器匹配的路由名称 （队列或交换器）<br> 创建延迟队列</p></blockquote><p><strong>3.绑定</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**死信接收队列*/</span>
<span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">createDl2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token constant">DL_TWO_NAME</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**死信交换器 路由匹配*/</span>
<span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">DirectExchange</span> <span class="token function">createDLEc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DirectExchange</span><span class="token punctuation">(</span><span class="token constant">DL_EXCHANGE_NAME</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**实现绑定*/</span>
<span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">Binding</span> <span class="token function">createDlBe</span><span class="token punctuation">(</span><span class="token class-name">DirectExchange</span> de<span class="token punctuation">)</span><span class="token punctuation">{</span>
                      <span class="token comment">//     死信接收队列     死信交换器    死信路由匹配</span>
    <span class="token keyword">return</span> <span class="token class-name">BindingBuilder</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token function">createDl2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span>de<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token constant">DL_RK</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://steven-kz.github.io/BlogImgs/imgaes/image-20230315211508861.png" alt="18.png" loading="lazy"><br><strong>4.发送消息</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/api/rabbit/&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RabbitDlController</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">private</span> <span class="token class-name">RabbitTemplate</span> rabbitTemplate<span class="token punctuation">;</span><span class="token comment">//ioc自动创建</span>
    <span class="token keyword">private</span> <span class="token class-name">Logger</span> logger<span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">RabbitDlController</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;save.do&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span><span class="token punctuation">{</span>
        logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;发送消息&quot;</span> <span class="token operator">+</span>msg<span class="token operator">+</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//              死信队列</span>
        rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token class-name">RabbitDlConfig</span><span class="token punctuation">.</span><span class="token constant">DL_ONE_NAME</span><span class="token punctuation">,</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">&quot;OK&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
      <span class="token comment">//路由传参</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;{msg}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">save2</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">String</span> msg<span class="token punctuation">)</span><span class="token punctuation">{</span>
        logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;发送消息&quot;</span> <span class="token operator">+</span>msg<span class="token operator">+</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//              死信队列</span>
        rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token class-name">RabbitDlConfig</span><span class="token punctuation">.</span><span class="token constant">DL_ONE_NAME</span><span class="token punctuation">,</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">&quot;OK&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>6.接收队列-消费者</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token class-name">RabbitDlConfig</span><span class="token punctuation">.</span><span class="token constant">DL_TWO_NAME</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RabbitDlListener</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">Logger</span> logger<span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">RabbitDlListener</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@RabbitHandler</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dlListener</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span><span class="token punctuation">{</span>
        logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;死信接受延迟队列:&quot;</span><span class="token operator">+</span>msg<span class="token operator">+</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>![19.png](<img src="https://steven-kz.github.io/BlogImgs/imgaes/image-20230315211538753.png" alt="image-20230315211538753" loading="lazy"><br><strong>设置了有效期为10秒、10秒之内没有消费者接收、转到死信交换器、根据绑定转发到指定的队列</strong></p><h3 id="_4-1rabbitmq事务" tabindex="-1"><a class="header-anchor" href="#_4-1rabbitmq事务" aria-hidden="true">#</a> 4.1RabbitMQ事务</h3><p>我们需要⼀次性发多条消息，需要开启事务，事务⽤来保证多条消息的发送，如果有异常出<br> 现，消息都不发送<br> 实现步骤：<br><strong>1.创建RabbitMQ事务管理</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//2.创建RabbitMQ管理事务</span>
<span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">RabbitTransactionManager</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">ConnectionFactory</span> factory<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RabbitTransactionManager</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2.在发送时开启事务</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**加事务*/</span>    <span class="token comment">//回滚            异常类型</span>
<span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>rollbackFor <span class="token operator">=</span> <span class="token class-name">Exception</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;save.do&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//开启事务</span>
    rabbitTemplate<span class="token punctuation">.</span><span class="token function">setChannelTransacted</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;发送消息:&quot;</span> <span class="token operator">+</span>msg<span class="token operator">+</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token class-name">RabbitMQTranConfig</span><span class="token punctuation">.</span><span class="token constant">TRAN</span><span class="token punctuation">,</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token string">&quot;OK&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://steven-kz.github.io/BlogImgs/imgaes/image-20230315211602677.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_4-2rabbitmq手动应答" tabindex="-1"><a class="header-anchor" href="#_4-2rabbitmq手动应答" aria-hidden="true">#</a> 4.2RabbitMQ手动应答</h3><p>RabbitMQ防⽌消息的重复消费或者消息丢失的时候，都可以使⽤⼿动应答代替⾃动应答<br><strong>针对消费端 在消费者代码实现</strong><br> 实现步骤：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>                                          <span class="token comment">//设置手动</span>
<span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token class-name">RabbitAckConfig</span><span class="token punctuation">.</span><span class="token constant">QUEUE_ACK</span><span class="token punctuation">,</span>ackMode <span class="token operator">=</span> <span class="token string">&quot;MANUAL&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RabbitAckListener</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Logger</span> logger<span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">RabbitAckListener</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@RabbitHandler</span>           <span class="token comment">//channel可以理解为一个先进先出的消息队列     消息内部唯一id</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ackListener</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">,</span> <span class="token class-name">Channel</span> channel<span class="token punctuation">,</span> <span class="token annotation punctuation">@Header</span><span class="token punctuation">(</span><span class="token class-name">AmqpHeaders</span><span class="token punctuation">.</span><span class="token constant">DELIVERY_TAG</span><span class="token punctuation">)</span> <span class="token keyword">long</span> tag<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">//手动操作      //1.消息id   2.是否应答 true 成功 false失败  3.消息是否还添加到队列</span>
        channel<span class="token punctuation">.</span><span class="token function">basicNack</span><span class="token punctuation">(</span>tag<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;手动应答:&quot;</span><span class="token operator">+</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token comment">//自动</span>
    <span class="token comment">//        channel.basicAck(tag,true);</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://cdn.nlark.com/yuque/0/2022/png/32843666/1665500730905-2acf036c-3af6-40fd-bb7d-9448e3af4d22.png#averageHue=%23877249&amp;clientId=u8ff9ebb5-9db7-4&amp;from=drop&amp;id=uf04a1aad&amp;name=21.png&amp;originHeight=767&amp;originWidth=1570&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=177356&amp;status=done&amp;style=none&amp;taskId=u88657d7a-110b-4a9c-b4fa-400160edeee&amp;title=" alt="21.png" loading="lazy"><br><strong>只要第三个参数为true就会将消息添加到队列，造成死循环</strong></p><h3 id="_4-1rabbitmq如何防止消息丢失" tabindex="-1"><a class="header-anchor" href="#_4-1rabbitmq如何防止消息丢失" aria-hidden="true">#</a> <strong>4.1Rabbit</strong>MQ如何防止消息丢失</h3><p>1.发送端如何保证消息不丢失<br> 事务机制和Confirm机制，注意：事务机制和 Confirm 机制是互斥的，两者不能共存，会导致<br> RabbitMQ 报错。<br> 2.RabbitMQ服务器端如何保证消息不丢失<br> 持久化、集群、普通模式、镜像模式。<br> 3.消费端如何保证消息不丢失<br> basicAck机制、死信队列、消息补偿机制</p><h3 id="_4-2rabbitmq如何保证消息的幂等性" tabindex="-1"><a class="header-anchor" href="#_4-2rabbitmq如何保证消息的幂等性" aria-hidden="true">#</a> 4.2RabbitMQ如何保证消息的幂等性</h3><p>在编程中⼀个幂等操作的特点是其任意多次执⾏所产⽣的结果与⼀次执⾏的产⽣的结果相同，在mq中<br> 由于⽹络故障或客户端延迟消费mq⾃动重试过程中可能会导致消息的重复消费，那我们如何保证消息<br> 的幂等问题<br> 1、⽣成全局id(雪花算法)，存⼊redis或者数据库，在消费者消费消息之前，查询⼀下该消息是否有消费过。<br> 2、如果该消息已经消费过，则告诉mq消息已经消费，将该消息丢弃（⼿动ack）。<br> 3、如果没有消费过，将该消息进⾏消费并将消费记录写进redis或者数据库中。</p><h3 id="_4-3rabbitmq集群模式" tabindex="-1"><a class="header-anchor" href="#_4-3rabbitmq集群模式" aria-hidden="true">#</a> 4.3RabbitMQ集群模式</h3><p>RabbitMQ 有三种模式： 单机模式 ， 普通集群模式 ， 镜像集群模式 。<br><strong>单机模式</strong>：就是demo级别的，⼀般就是你本地启动了玩玩⼉的，没⼈⽣产⽤单机模式<br><strong>普通集群模式</strong>：意思就是在多台机器上启动多个RabbitMQ实例，每个机器启动⼀个。<br><strong>镜像集群模式</strong>：这种模式，才是所谓的RabbitMQ的⾼可⽤模式，跟普通集群模式不⼀样的是，你创建<br> 的queue，⽆论元数据(元数据指RabbitMQ的配置数据)还是queue⾥的消息都会存在于多个实例上，然后每次你写消息到queue的时候，都会⾃动把消息到多个实例的queue⾥进⾏消息同步</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>RabbitMQ是MQ的⼀种，消息队列或消息中间件，实现消息的异步处理，降低耦合度，提⾼性能<br> RabbitMQ安装-Docker<br><strong>RabbitMQ的消息</strong><br> 1.消息⼀对⼀ 发送消息直接到队列，从队列中进⾏消费<br> 2.消息⼀对多 发送消息到了交换器（<br> 4种），从交换器到队列中，从队列中进⾏消费<br><strong>RabbitMQ交换器</strong><br> 1.fanout类型直接转发<br> 2.direct类型对消息过滤，路由匹配，精确<br> 3.topic类型对消息过滤，路由匹配，模糊 * #<br> 4.header类型 对消息过滤，指定的消息头<br><strong>RabbitMQ死信和延迟</strong><br> 1.死信：当消息满⾜以下条件之⼀：1.队列拒绝 2.队列满了 3.过期<br> 2.延迟：借助死信机制，如果⼀个队列⽣成了死信（时间过期），可以⾃动传递死信交换器，可以<br> 把死信消息发送到要处理的队列<br> RabbitMQ的事务<br> 保证多个消息要么都成功，要么都失败<br> RabbitMQ的⼿动应答<br> 防⽌消息丢失，可以在消费端开启⼿动处理</p>`,82),o=[p];function c(i,l){return s(),a("div",null,o)}const r=n(e,[["render",c],["__file","RabbitMQ.html.vue"]]);export{r as default};
