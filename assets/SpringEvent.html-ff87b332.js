import{_ as t,o as n,c as r,f as e}from"./app-8ab1e15b.js";const i={},o=e('<h1 id="spring事件" tabindex="-1"><a class="header-anchor" href="#spring事件" aria-hidden="true">#</a> Spring事件</h1><p><strong>事件监听概念</strong><br> 应用程序事件允许我们发送和接收特定事件，我们可以根据需要处理这些事件。事件用于在松散耦合的组件之间交换信息。由于发布者和订阅者之间没有直接耦合，因此可以在不影响发布者的情况下修改订阅者，反之亦然。<br><strong>事件监听三要素</strong><br><strong>事件源</strong>：事件对象的产生者，任何一个事件都有一个来源 ApplicationEvent<br><strong>事件监听器</strong>：事件框架或组件收到一个事件后，需要通知所有相关的事件监听器来进行处理。这些监听器统一存储在事件监听器注册表中。 ApplicationListener<br> @EventListener（注解式事件监听器）<br><strong>发布事件</strong>：ApplicationContext（spring容器）<br> 创建一个事件源ApplicationEvent，通过ApplicationContext发布事件，事件监听器ApplicationListener监听事件，逻辑处理</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>Spring中的事件监听机制包括事件源、事件监听器和事件发布三要素，通过注册监听器并发布事件，可以实现组件之间的松耦合通信，并在特定操作完成后触发相应的事件动作，以达到解耦和灵活性的目的。</p></div>',3),s=[o];function p(a,c){return n(),r("div",null,s)}const g=t(i,[["render",p],["__file","SpringEvent.html.vue"]]);export{g as default};
