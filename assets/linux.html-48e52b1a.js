import{_ as e,r as i,o as l,c as r,a,b as d,d as t,f as s}from"./app-8ab1e15b.js";const c={},p=s(`<h1 id="云服务" tabindex="-1"><a class="header-anchor" href="#云服务" aria-hidden="true">#</a> 云服务</h1><div class="hint-container tip"><p class="hint-container-title">提示</p><p>云服务部署SpringBoot项目</p></div><h2 id="一、linux-安装jdk1-8" tabindex="-1"><a class="header-anchor" href="#一、linux-安装jdk1-8" aria-hidden="true">#</a> 一、Linux 安装JDK1.8</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>yum install <span class="token operator">-</span>y java<span class="token operator">-</span><span class="token number">1.8</span><span class="token number">.0</span><span class="token operator">-</span>openjdk<span class="token operator">-</span>devel<span class="token punctuation">.</span>x86_64
java <span class="token operator">-</span>version
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二、linux-部署" tabindex="-1"><a class="header-anchor" href="#二、linux-部署" aria-hidden="true">#</a> 二、Linux 部署</h2><ul><li>在linux服务器上运行Jar文件时通常的方法是： java -jar test.jar</li><li>这种方式特点是ssh窗口关闭时，程序中止运行.或者是运行时没法切出去执行其他任务，有没有办法让Jar在后台运行呢：</li></ul><p>方式一：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">nohup</span> <span class="token function">java</span> <span class="token parameter variable">-jar</span> test.jar <span class="token operator">&amp;</span>
//nohup 意思是不挂断运行命令,当账户退出或终端关闭时,程序仍然运行
//当用 <span class="token function">nohup</span> 命令执行作业时，缺省情况下该作业的所有输出被重定向到nohup.out的文件中
//除非另外指定了输出文件。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>方式二：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">nohup</span> <span class="token function">java</span> <span class="token parameter variable">-jar</span> test.jar <span class="token operator">&gt;</span>log.txt <span class="token operator">&amp;</span>
//这种方法会把日志文件输入到你指定的文件中，没有则会自动创建
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>查看某端口占用的线程的pid</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">netstat</span> <span class="token parameter variable">-nlp</span> <span class="token operator">|</span><span class="token function">grep</span> :8080 <span class="token comment"># 查看端口号</span>
命令：ps <span class="token parameter variable">-aux</span> <span class="token operator">|</span><span class="token function">grep</span> <span class="token function">java</span> <span class="token comment"># 查询java进程</span>
<span class="token function">kill</span> pid 杀死进程
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>服务器开放端口号：</p><p>服务器设置防火墙</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>firewall-cmd <span class="token parameter variable">--zone</span><span class="token operator">=</span>public --add-port<span class="token operator">=</span>端口号/tcp <span class="token parameter variable">--permanent</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>重启服务器防火墙</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>firewall-cmd <span class="token parameter variable">--reload</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查看日志：</p>`,18),o={href:"https://blog.csdn.net/summerwgl/article/details/125423926",target:"_blank",rel:"noopener noreferrer"},u=s(`<p>介绍一种：<code>tail</code>命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>//查看实时日志
$ <span class="token function">tail</span> <span class="token parameter variable">-f</span> test.log
//查看最后100行日志记录
$ <span class="token function">tail</span> <span class="token parameter variable">-100f</span> test.log
//查询日志尾部最后10行的日志
$ <span class="token function">tail</span> <span class="token parameter variable">-n</span> <span class="token number">10</span> test.log
//查询10行之后的所有日志
$ <span class="token function">tail</span> <span class="token parameter variable">-n</span> +10 test.log
//循环实时查看最后100行记录
$ <span class="token function">tail</span> <span class="token parameter variable">-fn</span> <span class="token number">100</span> test.log
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>1）-f 循环读取<br> 2）-q 不显示处理信息<br> 3）-v 显示详细的处理信息<br> 4）-c&lt;数目&gt; 显示的字节数<br> 5）-n&lt;行数&gt; 显示行数</p></blockquote><p>docker查看容器日志</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> logs <span class="token parameter variable">-f</span> <span class="token parameter variable">--tail</span> <span class="token parameter variable">-n300</span> kworkflow-web_8080
<span class="token function">docker</span> logs <span class="token parameter variable">-f</span> kworkflow-web_8080
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="三、docker部署" tabindex="-1"><a class="header-anchor" href="#三、docker部署" aria-hidden="true">#</a> 三、Docker部署</h2><p>docker查看容器地址</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> inspect kworkflow-web_8080 <span class="token operator">|</span> <span class="token function">grep</span> Mounts <span class="token parameter variable">-A</span> <span class="token number">20</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>编写Dockerfile文件</p><p>找到刚刚上传jar包的目录，使用vim命令编写一个Dockerfile文件，按照下面模板便可简单编写出Dockerfile文件：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 拉取jdk8作为基础镜像</span>
FROM java:8
<span class="token comment"># 作者</span>
MAINTAINER kz <span class="token operator">&lt;</span>@163.com<span class="token operator">&gt;</span>
<span class="token comment"># 添加jar到镜像并命名为code.jar</span>
ADD codingstart-1.0.jar code.jar
<span class="token comment"># 镜像启动后暴露的端口</span>
EXPOSE <span class="token number">8181</span>
<span class="token comment"># jar运行命令，参数使用逗号隔开</span>
ENTRYPOINT <span class="token punctuation">[</span><span class="token string">&quot;java&quot;</span>,<span class="token string">&quot;-jar&quot;</span>,<span class="token string">&quot;code.jar&quot;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="四、windos端口占用" tabindex="-1"><a class="header-anchor" href="#四、windos端口占用" aria-hidden="true">#</a> 四、Windos端口占用</h2><p>查找所有运行的端口</p><div class="language-cmd line-numbers-mode" data-ext="cmd"><pre class="language-cmd"><code>netstat -ano
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查看被占用端口对应的 PID</p><div class="language-cmd line-numbers-mode" data-ext="cmd"><pre class="language-cmd"><code>netstat -aon|findstr &quot;1099&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查看指定 PID 的进程</p><figure><img src="https://steven-kz.github.io/BlogImgs/imgaes/1.png" alt="image-20230309133951356" tabindex="0" loading="lazy"><figcaption>image-20230309133951356</figcaption></figure><p>查看是哪个进程或者程序占用端口</p><div class="language-cmd line-numbers-mode" data-ext="cmd"><pre class="language-cmd"><code>tasklist|findstr &quot;18112&quot;
taskkill /f /t /im java.exe //强制（/F参数）杀死 所有进程包括子进程（/T参数）
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="一、安装redis" tabindex="-1"><a class="header-anchor" href="#一、安装redis" aria-hidden="true">#</a> 一、安装Redis</h2><h3 id="_1-1-创建redis容器并设置密码" tabindex="-1"><a class="header-anchor" href="#_1-1-创建redis容器并设置密码" aria-hidden="true">#</a> 1.1 创建redis容器并设置密码</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-itd</span> <span class="token parameter variable">--name</span> redis-6379 <span class="token parameter variable">-p</span> <span class="token number">6379</span>:6379 redis <span class="token parameter variable">--requirepass</span> <span class="token number">123456</span>  
说明 ：
<span class="token parameter variable">--name</span> <span class="token punctuation">(</span>启动容器的名称<span class="token punctuation">)</span> 
<span class="token parameter variable">-p</span> 映射端口:redis启动端口 redis 
<span class="token parameter variable">--requirepass</span> 启动密码
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-2-redis创建密码或修改密码" tabindex="-1"><a class="header-anchor" href="#_1-2-redis创建密码或修改密码" aria-hidden="true">#</a> 1.2 redis创建密码或修改密码</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#1.进入redis的容器</span>
<span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> 容器ID <span class="token function">bash</span>
<span class="token comment">#2.进入redis目录</span>
<span class="token builtin class-name">cd</span> /usr/local/bin
<span class="token comment">#3.运行命令：</span>
redis-cli
auth 密码 登录 
<span class="token comment">#4.查看现有的redis密码：</span>
config get requirepass
<span class="token comment">#5.设置redis密码</span>
config <span class="token builtin class-name">set</span> requirepass 密码
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：<strong>开放端⼝6379</strong><br> 3.访问测试<br> 执⾏命令<br><img src="https://steven-kz.github.io/BlogImgs/imgaes/image-20230312193017801.png" alt="image-20230312193017801" loading="lazy"><br> 或者使⽤可视化⼯具连接Redis</p><h2 id="二、docker安装mysql" tabindex="-1"><a class="header-anchor" href="#二、docker安装mysql" aria-hidden="true">#</a> 二、docker安装mysql</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span>  mysql3307 <span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span><span class="token number">123456</span> <span class="token parameter variable">-p</span> <span class="token number">3307</span>:3306 mysql:5.7
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>进入容器bin目录</p><p>docker exec -it 容器 bash/bin</p><p>mysql -uroot -p 输入密码</p>`,31);function v(m,b){const n=i("ExternalLinkIcon");return l(),r("div",null,[p,a("p",null,[a("a",o,[d("https://blog.csdn.net/summerwgl/article/details/125423926"),t(n)])]),u])}const h=e(c,[["render",v],["__file","linux.html.vue"]]);export{h as default};
