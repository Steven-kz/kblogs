const n=JSON.parse('{"key":"v-0bcad88f","path":"/feature/tool.html","title":"工具类","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","title":"工具类","lastUpdated":true,"contributors":true,"description":"一、二维码图片识别工具类 .二维码图片识别工具类 import com.google.zxing.*; import com.google.zxing.client.j2se.BufferedImageLuminanceSource; import com.google.zxing.common.HybridBinarizer; import com.google.zxing.multi.qrcode.QRCodeMultiReader; import javax.imageio.ImageIO; import java.awt.image.BufferedImage; import java.io.File; import java.io.IOException; import java.util.HashMap; import java.util.Map; import static org.springframework.data.redis.connection.util.DecodeUtils.decodeMultiple; public class QRCodeUtils{ /** * 解析二维码,此方法解析一个路径的二维码图片 * path:图片路径 */ public static String deEncodeByPath(String path) { String content = null; BufferedImage image; try { image = ImageIO.read(new File(path)); LuminanceSource source = new BufferedImageLuminanceSource(image); Binarizer binarizer = new HybridBinarizer(source); BinaryBitmap binaryBitmap = new BinaryBitmap(binarizer); Map&lt;DecodeHintType, Object&gt; hints = new HashMap&lt;DecodeHintType, Object&gt;(); hints.put(DecodeHintType.CHARACTER_SET, \\"UTF-8\\"); Result result = new MultiFormatReader().decode(binaryBitmap, hints);//解码 System.out.println(\\"图片中内容： \\"); System.out.println(\\"content： \\" + result.getText()); content = result.getText(); } catch (IOException e) { e.printStackTrace(); } catch (NotFoundException e) { //这里判断如果识别不了带LOGO的图片，重新添加上一个属性 try { image = ImageIO.read(new File(path)); LuminanceSource source = new BufferedImageLuminanceSource(image); Binarizer binarizer = new HybridBinarizer(source); BinaryBitmap binaryBitmap = new BinaryBitmap(binarizer); Map&lt;DecodeHintType, Object&gt; hints = new HashMap&lt;DecodeHintType, Object&gt;(); //设置编码格式 hints.put(DecodeHintType.CHARACTER_SET, \\"UTF-8\\"); //设置优化精度 hints.put(DecodeHintType.TRY_HARDER, Boolean.TRUE); //设置复杂模式开启（我使用这种方式就可以识别微信的二维码了） hints.put(DecodeHintType.PURE_BARCODE,Boolean.TYPE); Result result = new MultiFormatReader().decode(binaryBitmap, hints);//解码 System.out.println(\\"图片中内容： \\"); System.out.println(\\"content： \\" + result.getText()); content = result.getText(); } catch (Exception e1) { e1.printStackTrace(); } } return content; } /** * 同时识别多个二维码 * path:图片路径 * * @param path 路径 * @return {@link String} */ public static String duo (String path) { decodeMultiple(); String content = null; BufferedImage image; try { image = ImageIO.read(new File(path)); LuminanceSource source = new BufferedImageLuminanceSource(image); Binarizer binarizer = new HybridBinarizer(source); BinaryBitmap binaryBitmap = new BinaryBitmap(binarizer); Map&lt;DecodeHintType, Object&gt; hints = new HashMap&lt;DecodeHintType, Object&gt;(); hints.put(DecodeHintType.CHARACTER_SET, \\"UTF-8\\"); // Result result = new MultiFormatReader().decode(binaryBitmap, hints);//解码 Result[] results = new QRCodeMultiReader().decodeMultiple(binaryBitmap, hints); System.out.println(\\"图片中内容： \\"); for (int i = 0; i &lt; results.length; i++) { System.out.println(\\"第\\"+i+\\"个二维码： \\" + results[i].getText()+\\"\\\\n\\"); content = \\"第\\"+i+\\"个二维码： \\" + results[i].getText()+\\"\\\\n\\"; } return content; }catch (Exception e){ return \\"错误\\"; } } public static void main(String [] args){ deEncodeByPath(\\"C:\\\\\\\\home\\\\\\\\test.jpg\\");//二维码图片路径 duo(\\"C:\\\\\\\\home\\\\\\\\test.jpg\\"); } }","head":[["meta",{"property":"og:url","content":"https://k-flower.gitee.io/kblogs/feature/tool.html"}],["meta",{"property":"og:site_name","content":"Flowers"}],["meta",{"property":"og:title","content":"工具类"}],["meta",{"property":"og:description","content":"一、二维码图片识别工具类 .二维码图片识别工具类 import com.google.zxing.*; import com.google.zxing.client.j2se.BufferedImageLuminanceSource; import com.google.zxing.common.HybridBinarizer; import com.google.zxing.multi.qrcode.QRCodeMultiReader; import javax.imageio.ImageIO; import java.awt.image.BufferedImage; import java.io.File; import java.io.IOException; import java.util.HashMap; import java.util.Map; import static org.springframework.data.redis.connection.util.DecodeUtils.decodeMultiple; public class QRCodeUtils{ /** * 解析二维码,此方法解析一个路径的二维码图片 * path:图片路径 */ public static String deEncodeByPath(String path) { String content = null; BufferedImage image; try { image = ImageIO.read(new File(path)); LuminanceSource source = new BufferedImageLuminanceSource(image); Binarizer binarizer = new HybridBinarizer(source); BinaryBitmap binaryBitmap = new BinaryBitmap(binarizer); Map&lt;DecodeHintType, Object&gt; hints = new HashMap&lt;DecodeHintType, Object&gt;(); hints.put(DecodeHintType.CHARACTER_SET, \\"UTF-8\\"); Result result = new MultiFormatReader().decode(binaryBitmap, hints);//解码 System.out.println(\\"图片中内容： \\"); System.out.println(\\"content： \\" + result.getText()); content = result.getText(); } catch (IOException e) { e.printStackTrace(); } catch (NotFoundException e) { //这里判断如果识别不了带LOGO的图片，重新添加上一个属性 try { image = ImageIO.read(new File(path)); LuminanceSource source = new BufferedImageLuminanceSource(image); Binarizer binarizer = new HybridBinarizer(source); BinaryBitmap binaryBitmap = new BinaryBitmap(binarizer); Map&lt;DecodeHintType, Object&gt; hints = new HashMap&lt;DecodeHintType, Object&gt;(); //设置编码格式 hints.put(DecodeHintType.CHARACTER_SET, \\"UTF-8\\"); //设置优化精度 hints.put(DecodeHintType.TRY_HARDER, Boolean.TRUE); //设置复杂模式开启（我使用这种方式就可以识别微信的二维码了） hints.put(DecodeHintType.PURE_BARCODE,Boolean.TYPE); Result result = new MultiFormatReader().decode(binaryBitmap, hints);//解码 System.out.println(\\"图片中内容： \\"); System.out.println(\\"content： \\" + result.getText()); content = result.getText(); } catch (Exception e1) { e1.printStackTrace(); } } return content; } /** * 同时识别多个二维码 * path:图片路径 * * @param path 路径 * @return {@link String} */ public static String duo (String path) { decodeMultiple(); String content = null; BufferedImage image; try { image = ImageIO.read(new File(path)); LuminanceSource source = new BufferedImageLuminanceSource(image); Binarizer binarizer = new HybridBinarizer(source); BinaryBitmap binaryBitmap = new BinaryBitmap(binarizer); Map&lt;DecodeHintType, Object&gt; hints = new HashMap&lt;DecodeHintType, Object&gt;(); hints.put(DecodeHintType.CHARACTER_SET, \\"UTF-8\\"); // Result result = new MultiFormatReader().decode(binaryBitmap, hints);//解码 Result[] results = new QRCodeMultiReader().decodeMultiple(binaryBitmap, hints); System.out.println(\\"图片中内容： \\"); for (int i = 0; i &lt; results.length; i++) { System.out.println(\\"第\\"+i+\\"个二维码： \\" + results[i].getText()+\\"\\\\n\\"); content = \\"第\\"+i+\\"个二维码： \\" + results[i].getText()+\\"\\\\n\\"; } return content; }catch (Exception e){ return \\"错误\\"; } } public static void main(String [] args){ deEncodeByPath(\\"C:\\\\\\\\home\\\\\\\\test.jpg\\");//二维码图片路径 duo(\\"C:\\\\\\\\home\\\\\\\\test.jpg\\"); } }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-25T13:08:35.000Z"}],["meta",{"property":"article:author","content":"Kou"}],["meta",{"property":"article:modified_time","content":"2024-08-25T13:08:35.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"工具类\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-08-25T13:08:35.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kou\\"}]}"]]},"headers":[{"level":2,"title":"一、二维码图片识别工具类","slug":"一、二维码图片识别工具类","link":"#一、二维码图片识别工具类","children":[]},{"level":2,"title":"二、springUtils","slug":"二、springutils","link":"#二、springutils","children":[]}],"git":{"createdTime":1719826352000,"updatedTime":1724591315000,"contributors":[{"name":"kou","email":"knightbreeze@163.com","commits":1},{"name":"kz","email":"1069624300@QQ.COM","commits":1}]},"readingTime":{"minutes":3.35,"words":1006},"filePathRelative":"feature/tool.md","localizedDate":"2024年7月1日","excerpt":"<h2> 一、二维码图片识别工具类</h2>\\n<p>.二维码图片识别工具类</p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">import</span> <span class=\\"token import\\"><span class=\\"token namespace\\">com<span class=\\"token punctuation\\">.</span>google<span class=\\"token punctuation\\">.</span>zxing<span class=\\"token punctuation\\">.</span></span><span class=\\"token operator\\">*</span></span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">import</span> <span class=\\"token import\\"><span class=\\"token namespace\\">com<span class=\\"token punctuation\\">.</span>google<span class=\\"token punctuation\\">.</span>zxing<span class=\\"token punctuation\\">.</span>client<span class=\\"token punctuation\\">.</span>j2se<span class=\\"token punctuation\\">.</span></span><span class=\\"token class-name\\">BufferedImageLuminanceSource</span></span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">import</span> <span class=\\"token import\\"><span class=\\"token namespace\\">com<span class=\\"token punctuation\\">.</span>google<span class=\\"token punctuation\\">.</span>zxing<span class=\\"token punctuation\\">.</span>common<span class=\\"token punctuation\\">.</span></span><span class=\\"token class-name\\">HybridBinarizer</span></span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">import</span> <span class=\\"token import\\"><span class=\\"token namespace\\">com<span class=\\"token punctuation\\">.</span>google<span class=\\"token punctuation\\">.</span>zxing<span class=\\"token punctuation\\">.</span>multi<span class=\\"token punctuation\\">.</span>qrcode<span class=\\"token punctuation\\">.</span></span><span class=\\"token class-name\\">QRCodeMultiReader</span></span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">import</span> <span class=\\"token import\\"><span class=\\"token namespace\\">javax<span class=\\"token punctuation\\">.</span>imageio<span class=\\"token punctuation\\">.</span></span><span class=\\"token class-name\\">ImageIO</span></span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">import</span> <span class=\\"token import\\"><span class=\\"token namespace\\">java<span class=\\"token punctuation\\">.</span>awt<span class=\\"token punctuation\\">.</span>image<span class=\\"token punctuation\\">.</span></span><span class=\\"token class-name\\">BufferedImage</span></span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">import</span> <span class=\\"token import\\"><span class=\\"token namespace\\">java<span class=\\"token punctuation\\">.</span>io<span class=\\"token punctuation\\">.</span></span><span class=\\"token class-name\\">File</span></span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">import</span> <span class=\\"token import\\"><span class=\\"token namespace\\">java<span class=\\"token punctuation\\">.</span>io<span class=\\"token punctuation\\">.</span></span><span class=\\"token class-name\\">IOException</span></span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">import</span> <span class=\\"token import\\"><span class=\\"token namespace\\">java<span class=\\"token punctuation\\">.</span>util<span class=\\"token punctuation\\">.</span></span><span class=\\"token class-name\\">HashMap</span></span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">import</span> <span class=\\"token import\\"><span class=\\"token namespace\\">java<span class=\\"token punctuation\\">.</span>util<span class=\\"token punctuation\\">.</span></span><span class=\\"token class-name\\">Map</span></span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">import</span> <span class=\\"token keyword\\">static</span> <span class=\\"token import static\\"><span class=\\"token namespace\\">org<span class=\\"token punctuation\\">.</span>springframework<span class=\\"token punctuation\\">.</span>data<span class=\\"token punctuation\\">.</span>redis<span class=\\"token punctuation\\">.</span>connection<span class=\\"token punctuation\\">.</span>util<span class=\\"token punctuation\\">.</span></span><span class=\\"token class-name\\">DecodeUtils</span><span class=\\"token punctuation\\">.</span><span class=\\"token static\\">decodeMultiple</span></span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">QRCodeUtils</span><span class=\\"token punctuation\\">{</span>\\n<span class=\\"token doc-comment comment\\">/**\\n\\n* 解析二维码,此方法解析一个路径的二维码图片\\n* path:图片路径\\n  */</span>\\n  <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">static</span> <span class=\\"token class-name\\">String</span> <span class=\\"token function\\">deEncodeByPath</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span> path<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token class-name\\">String</span> content <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token class-name\\">BufferedImage</span> image<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">try</span> <span class=\\"token punctuation\\">{</span>\\n  image <span class=\\"token operator\\">=</span> <span class=\\"token class-name\\">ImageIO</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">read</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">File</span><span class=\\"token punctuation\\">(</span>path<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token class-name\\">LuminanceSource</span> source <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">BufferedImageLuminanceSource</span><span class=\\"token punctuation\\">(</span>image<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token class-name\\">Binarizer</span> binarizer <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">HybridBinarizer</span><span class=\\"token punctuation\\">(</span>source<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token class-name\\">BinaryBitmap</span> binaryBitmap <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">BinaryBitmap</span><span class=\\"token punctuation\\">(</span>binarizer<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token class-name\\">Map</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">DecodeHintType</span><span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">Object</span><span class=\\"token punctuation\\">&gt;</span></span> hints <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">HashMap</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">DecodeHintType</span><span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">Object</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  hints<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">put</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">DecodeHintType</span><span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">CHARACTER_SET</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"UTF-8\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token class-name\\">Result</span> result <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">MultiFormatReader</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">decode</span><span class=\\"token punctuation\\">(</span>binaryBitmap<span class=\\"token punctuation\\">,</span> hints<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//解码</span>\\n  <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"图片中内容：  \\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"content： \\"</span> <span class=\\"token operator\\">+</span> result<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getText</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  content <span class=\\"token operator\\">=</span> result<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getText</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">catch</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">IOException</span> e<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  e<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">printStackTrace</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">catch</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">NotFoundException</span> e<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token comment\\">//这里判断如果识别不了带LOGO的图片，重新添加上一个属性</span>\\n  <span class=\\"token keyword\\">try</span> <span class=\\"token punctuation\\">{</span>\\n  image <span class=\\"token operator\\">=</span> <span class=\\"token class-name\\">ImageIO</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">read</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">File</span><span class=\\"token punctuation\\">(</span>path<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token class-name\\">LuminanceSource</span> source <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">BufferedImageLuminanceSource</span><span class=\\"token punctuation\\">(</span>image<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token class-name\\">Binarizer</span> binarizer <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">HybridBinarizer</span><span class=\\"token punctuation\\">(</span>source<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token class-name\\">BinaryBitmap</span> binaryBitmap <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">BinaryBitmap</span><span class=\\"token punctuation\\">(</span>binarizer<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token class-name\\">Map</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">DecodeHintType</span><span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">Object</span><span class=\\"token punctuation\\">&gt;</span></span> hints <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">HashMap</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">DecodeHintType</span><span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">Object</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token comment\\">//设置编码格式</span>\\n  hints<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">put</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">DecodeHintType</span><span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">CHARACTER_SET</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"UTF-8\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token comment\\">//设置优化精度</span>\\n  hints<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">put</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">DecodeHintType</span><span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">TRY_HARDER</span><span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">Boolean</span><span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">TRUE</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token comment\\">//设置复杂模式开启（我使用这种方式就可以识别微信的二维码了）</span>\\n  hints<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">put</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">DecodeHintType</span><span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">PURE_BARCODE</span><span class=\\"token punctuation\\">,</span><span class=\\"token class-name\\">Boolean</span><span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">TYPE</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token class-name\\">Result</span> result <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">MultiFormatReader</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">decode</span><span class=\\"token punctuation\\">(</span>binaryBitmap<span class=\\"token punctuation\\">,</span> hints<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//解码</span>\\n  <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"图片中内容：  \\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"content： \\"</span> <span class=\\"token operator\\">+</span> result<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getText</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  content <span class=\\"token operator\\">=</span> result<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getText</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">catch</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Exception</span> e1<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  e1<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">printStackTrace</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token keyword\\">return</span> content<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token doc-comment comment\\">/**\\n* 同时识别多个二维码\\n* path:图片路径\\n  *\\n* <span class=\\"token keyword\\">@param</span> <span class=\\"token parameter\\">path</span> 路径\\n* <span class=\\"token keyword\\">@return</span> <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@link</span> <span class=\\"token reference\\"><span class=\\"token class-name\\">String</span></span><span class=\\"token punctuation\\">}</span>\\n  */</span>\\n  <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">static</span> <span class=\\"token class-name\\">String</span> duo <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span> path<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token function\\">decodeMultiple</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token class-name\\">String</span> content <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token class-name\\">BufferedImage</span> image<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">try</span> <span class=\\"token punctuation\\">{</span>\\n  image <span class=\\"token operator\\">=</span> <span class=\\"token class-name\\">ImageIO</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">read</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">File</span><span class=\\"token punctuation\\">(</span>path<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token class-name\\">LuminanceSource</span> source <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">BufferedImageLuminanceSource</span><span class=\\"token punctuation\\">(</span>image<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token class-name\\">Binarizer</span> binarizer <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">HybridBinarizer</span><span class=\\"token punctuation\\">(</span>source<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token class-name\\">BinaryBitmap</span> binaryBitmap <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">BinaryBitmap</span><span class=\\"token punctuation\\">(</span>binarizer<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token class-name\\">Map</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">DecodeHintType</span><span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">Object</span><span class=\\"token punctuation\\">&gt;</span></span> hints <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">HashMap</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">DecodeHintType</span><span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">Object</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  hints<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">put</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">DecodeHintType</span><span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">CHARACTER_SET</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"UTF-8\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token comment\\">//            Result result = new MultiFormatReader().decode(binaryBitmap, hints);//解码</span>\\n  <span class=\\"token class-name\\">Result</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> results <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">QRCodeMultiReader</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">decodeMultiple</span><span class=\\"token punctuation\\">(</span>binaryBitmap<span class=\\"token punctuation\\">,</span> hints<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"图片中内容：  \\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> i <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span> i <span class=\\"token operator\\">&lt;</span> results<span class=\\"token punctuation\\">.</span>length<span class=\\"token punctuation\\">;</span> i<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"第\\"</span><span class=\\"token operator\\">+</span>i<span class=\\"token operator\\">+</span><span class=\\"token string\\">\\"个二维码： \\"</span> <span class=\\"token operator\\">+</span> results<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getText</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">+</span><span class=\\"token string\\">\\"\\\\n\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  content <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"第\\"</span><span class=\\"token operator\\">+</span>i<span class=\\"token operator\\">+</span><span class=\\"token string\\">\\"个二维码： \\"</span> <span class=\\"token operator\\">+</span> results<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getText</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">+</span><span class=\\"token string\\">\\"\\\\n\\"</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token keyword\\">return</span> content<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token keyword\\">catch</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Exception</span> e<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">return</span> <span class=\\"token string\\">\\"错误\\"</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span> <span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> args<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token function\\">deEncodeByPath</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"C:\\\\\\\\home\\\\\\\\test.jpg\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//二维码图片路径</span>\\n        <span class=\\"token function\\">duo</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"C:\\\\\\\\home\\\\\\\\test.jpg\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
