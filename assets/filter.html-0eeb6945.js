import{_ as e,o as r,c as t,f as a}from"./app-8ab1e15b.js";const i={},n=a('<h1 id="拦截器和过滤器的区别" tabindex="-1"><a class="header-anchor" href="#拦截器和过滤器的区别" aria-hidden="true">#</a> 拦截器和过滤器的区别</h1><p><img src="https://steven-kz.github.io/BlogImgs/imgaes/20231011162711.png" alt="image.png" loading="lazy"><br> 执行顺序 ：Filter 处理中 -&gt; Interceptor 前置 -&gt; 我是controller -&gt; Interceptor 处理中 -&gt; Interceptor 处理后</p><h2 id="一、filter" tabindex="-1"><a class="header-anchor" href="#一、filter" aria-hidden="true">#</a> 一、Filter</h2><p>实现Filter接口 init() doFilter() destroy()<br> init() ：该方法在容器启动初始化过滤器时被调用，它在 Filter 的整个生命周期只会被调用一次。注意：这个方法必须执行成功，否则过滤器会不起作用。<br> doFilter() ：容器中的每一次请求都会调用该方法， FilterChain 用来调用下一个过滤器 Filter。<br> destroy()： 当容器销毁 过滤器实例时调用该方法，一般在方法中销毁或关闭资源，在过滤器 Filter 的整个生命周期也只会被调用一次</p><h2 id="二、intercaputer" tabindex="-1"><a class="header-anchor" href="#二、intercaputer" aria-hidden="true">#</a> 二、Intercaputer</h2><p>拦截器就是实现intercaputer<br> 拦截器是实现Handlerlnterceptor接口 preHandle() postHandle() afterCompletion()<br> 写一个类实现WebMvcConfigurer接口抽血addInterceptors方法来增加拦截的路径<br> 基于java反射实现的</p><h3 id="_1、拦截器是什么实现的" tabindex="-1"><a class="header-anchor" href="#_1、拦截器是什么实现的" aria-hidden="true">#</a> 1、拦截器是什么实现的</h3><p>拦截器是依赖Java反射机制来实现的。用到的是JDK实现的动态代理，需要依赖接口。拦截器是在面向切面编程中应用的，就是在你的service或者一个方法前调用一个方法，或者在方法后调用一个方法</p><h3 id="_2、拦截器3个方法" tabindex="-1"><a class="header-anchor" href="#_2、拦截器3个方法" aria-hidden="true">#</a> 2、拦截器3个方法</h3><p>preHandle() ：控制器方法执行之前执行preHandle()，其boolean类型的返回值表示是否拦截或放行，返回true为放行，即调用控制器方法；返回false表示拦截，即不调用控制器方法。<br> postHandle()： 控制器方法执行之后执行postHandle()。<br> afterCompletion()： 处理完视图和模型数据，渲染视图完毕之后执行afterCompletion()。</p><h3 id="_3、多拦截器执行顺序" tabindex="-1"><a class="header-anchor" href="#_3、多拦截器执行顺序" aria-hidden="true">#</a> 3、多拦截器执行顺序</h3><p>当有多个拦截器时，形成拦截器链。拦截器的执行顺序与其注册顺序一致。需要再次强调一点的是当某一个拦截器的 preHandle() 方法返回 true 并被执行到时，会向一个专门的方法栈中放入该拦截器的 afterCompletion() 方法<br><img src="https://steven-kz.github.io/BlogImgs/imgaes/20231011162745.png" alt="image.png" loading="lazy"></p>',12),d=[n];function l(o,h){return r(),t("div",null,d)}const c=e(i,[["render",l],["__file","filter.html.vue"]]);export{c as default};
