const nt="ENTRIES",V="KEYS",T="VALUES",F="";class D{set;_type;_path;constructor(t,s){const n=t._tree,o=Array.from(n.keys());this.set=t,this._type=s,this._path=o.length>0?[{node:n,keys:o}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=E(this._path);if(E(s)===F)return{done:!1,value:this.result()};const n=t.get(E(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=E(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>E(t)).filter(t=>t!==F).join("")}value(){return E(this._path).node.get(F)}result(){switch(this._type){case T:return this.value();case V:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const E=e=>e[e.length-1],ot=(e,t,s)=>{const n=new Map;if(t===void 0)return n;const o=t.length+1,u=o+s,i=new Uint8Array(u*o).fill(s+1);for(let r=0;r<o;++r)i[r]=r;for(let r=1;r<u;++r)i[r*o]=r;return W(e,t,s,n,i,1,o,""),n},W=(e,t,s,n,o,u,i,r)=>{const d=u*i;t:for(const l of e.keys())if(l===F){const a=o[d-1];a<=s&&n.set(r,[e.get(l),a])}else{let a=u;for(let h=0;h<l.length;++h,++a){const m=l[h],p=i*a,f=p-i;let c=o[p];const g=Math.max(0,a-s-1),_=Math.min(i-1,a+s);for(let y=g;y<_;++y){const b=m!==t[y],z=o[f+y]+ +b,A=o[f+y+1]+1,w=o[p+y]+1,L=o[p+y+1]=Math.min(z,A,w);L<c&&(c=L)}if(c>s)continue t}W(e.get(l),t,s,n,o,a,i,r+l)}};class C{_tree;_prefix;_size=void 0;constructor(t=new Map,s=""){this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=x(this._tree,t.slice(this._prefix.length));if(s===void 0){const[o,u]=O(n);for(const i of o.keys())if(i!==F&&i.startsWith(u)){const r=new Map;return r.set(i.slice(u.length),o.get(i)),new C(r,t)}}return new C(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,ut(this._tree,t)}entries(){return new D(this,nt)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return ot(this._tree,t,s)}get(t){const s=I(this._tree,t);return s!==void 0?s.get(F):void 0}has(t){const s=I(this._tree,t);return s!==void 0&&s.has(F)}keys(){return new D(this,V)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,M(this._tree,t).set(F,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=M(this._tree,t);return n.set(F,s(n.get(F))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=M(this._tree,t);let o=n.get(F);return o===void 0&&n.set(F,o=s()),o}values(){return new D(this,T)}[Symbol.iterator](){return this.entries()}static from(t){const s=new C;for(const[n,o]of t)s.set(n,o);return s}static fromObject(t){return C.from(Object.entries(t))}}const x=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==F&&t.startsWith(n))return s.push([e,n]),x(e.get(n),t.slice(n.length),s);return s.push([e,t]),x(void 0,"",s)},I=(e,t)=>{if(t.length===0||e==null)return e;for(const s of e.keys())if(s!==F&&t.startsWith(s))return I(e.get(s),t.slice(s.length))},M=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const u of e.keys())if(u!==F&&t[n]===u[0]){const i=Math.min(s-n,u.length);let r=1;for(;r<i&&t[n+r]===u[r];)++r;const d=e.get(u);if(r===u.length)e=d;else{const l=new Map;l.set(u.slice(r),d),e.set(t.slice(n,n+r),l),e.delete(u),e=l}n+=r;continue t}const o=new Map;return e.set(t.slice(n),o),o}return e},ut=(e,t)=>{const[s,n]=x(e,t);if(s!==void 0){if(s.delete(F),s.size===0)R(n);else if(s.size===1){const[o,u]=s.entries().next().value;$(n,o,u)}}},R=e=>{if(e.length===0)return;const[t,s]=O(e);if(t.delete(s),t.size===0)R(e.slice(0,-1));else if(t.size===1){const[n,o]=t.entries().next().value;n!==F&&$(e.slice(0,-1),n,o)}},$=(e,t,s)=>{if(e.length===0)return;const[n,o]=O(e);n.set(o+t,s),n.delete(o)},O=e=>e[e.length-1],it=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},rt=/[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u,S="or",q="and",ct="and_not",lt=(e,t)=>{e.includes(t)||e.push(t)},P=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},G=({score:e},{score:t})=>t-e,ht=()=>new Map,k=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},N=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,dt={[S]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:o,terms:u,match:i}=t.get(s);n.score=n.score+o,n.match=Object.assign(n.match,i),P(n.terms,u)}}return e},[q]:(e,t)=>{const s=new Map;for(const n of t.keys()){const o=e.get(n);if(o==null)continue;const{score:u,terms:i,match:r}=t.get(n);P(o.terms,i),s.set(n,{score:o.score+u,terms:o.terms,match:Object.assign(o.match,r)})}return s},[ct]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},at=(e,t,s,n,o,u)=>{const{k:i,b:r,d}=u;return Math.log(1+(s-t+.5)/(t+.5))*(d+e*(i+1)/(e+i*(1-r+r*n/o)))},ft=e=>(t,s,n)=>{const o=typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy||!1,u=typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0;return{term:t,fuzzy:o,prefix:u}},H=(e,t,s,n)=>{for(const o of Object.keys(e._fieldIds))if(e._fieldIds[o]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${o}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},gt=(e,t,s,n)=>{if(!e._index.has(n)){H(e,s,t,n);return}const o=e._index.fetch(n,ht),u=o.get(t);u==null||u.get(s)==null?H(e,s,t,n):u.get(s)<=1?u.size<=1?o.delete(t):u.delete(s):u.set(s,u.get(s)-1),e._index.get(n).size===0&&e._index.delete(n)},mt={k:1.2,b:.7,d:.5},pt={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(rt),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{typeof(console==null?void 0:console[e])=="function"&&console[e](t)},autoVacuum:!0},J={combineWith:S,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:mt},Ft={combineWith:q,prefix:(e,t,s)=>t===s.length-1},_t={batchSize:1e3,batchWait:10},U={minDirtFactor:.1,minDirtCount:20},yt={..._t,...U},Y=(e,t=S)=>{if(e.length===0)return new Map;const s=t.toLowerCase();return e.reduce(dt[s])||new Map},B=(e,t,s,n,o,u,i,r,d=new Map)=>{if(o==null)return d;for(const l of Object.keys(u)){const a=u[l],h=e._fieldIds[l],m=o.get(h);if(m==null)continue;let p=m.size;const f=e._avgFieldLength[h];for(const c of m.keys()){if(!e._documentIds.has(c)){gt(e,h,c,s),p-=1;continue}const g=i?i(e._documentIds.get(c),s,e._storedFields.get(c)):1;if(!g)continue;const _=m.get(c),y=e._fieldLength.get(c)[h],b=at(_,p,e._documentCount,y,f,r),z=n*a*g*b,A=d.get(c);if(A){A.score+=z,lt(A.terms,t);const w=N(A.match,s);w?w.push(l):A.match[s]=[l]}else d.set(c,{score:z,terms:[t],match:{[s]:[l]}})}}return d},At=(e,t,s)=>{const n={...e._options.searchOptions,...s},o=(n.fields||e._options.fields).reduce((c,g)=>({...c,[g]:N(n.boost,g)||1}),{}),{boostDocument:u,weights:i,maxFuzzy:r,bm25:d}=n,{fuzzy:l,prefix:a}={...J.weights,...i},h=e._index.get(t.term),m=B(e,t.term,t.term,1,h,o,u,d);let p,f;if(t.prefix&&(p=e._index.atPrefix(t.term)),t.fuzzy){const c=t.fuzzy===!0?.2:t.fuzzy,g=c<1?Math.min(r,Math.round(t.term.length*c)):c;g&&(f=e._index.fuzzyGet(t.term,g))}if(p)for(const[c,g]of p){const _=c.length-t.term.length;if(!_)continue;f==null||f.delete(c);const y=a*c.length/(c.length+.3*_);B(e,t.term,c,y,g,o,u,d,m)}if(f)for(const c of f.keys()){const[g,_]=f.get(c);if(!_)continue;const y=l*c.length/(c.length+_);B(e,t.term,c,y,g,o,u,d,m)}return m},X=(e,t,s={})=>{if(typeof t!="string"){const a={...s,...t,queries:void 0},h=t.queries.map(m=>X(e,m,a));return Y(h,a.combineWith)}const{tokenize:n,processTerm:o,searchOptions:u}=e._options,i={tokenize:n,processTerm:o,...u,...s},{tokenize:r,processTerm:d}=i,l=r(t).flatMap(a=>d(a)).filter(a=>!!a).map(ft(i)).map(a=>At(e,a,i));return Y(l,i.combineWith)},K=(e,t,s={})=>{const n=X(e,t,s),o=[];for(const[u,{score:i,terms:r,match:d}]of n){const l=r.length,a={id:e._documentIds.get(u),score:i*l,terms:Object.keys(d),match:d};Object.assign(a,e._storedFields.get(u)),(s.filter==null||s.filter(a))&&o.push(a)}return o.sort(G),o},Ct=(e,t,s={})=>{s={...e._options.autoSuggestOptions,...s};const n=new Map;for(const{score:u,terms:i}of K(e,t,s)){const r=i.join(" "),d=n.get(r);d!=null?(d.score+=u,d.count+=1):n.set(r,{score:u,terms:i,count:1})}const o=[];for(const[u,{score:i,terms:r,count:d}]of n)o.push({suggestion:u,terms:r,score:i/d});return o.sort(G),o};class Et{_options;_index;_documentCount;_documentIds;_idToShortId;_fieldIds;_fieldLength;_avgFieldLength;_nextId;_storedFields;_dirtCount;_currentVacuum;_enqueuedVacuum;_enqueuedVacuumConditions;constructor(t){if((t==null?void 0:t.fields)==null)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?yt:t.autoVacuum;this._options={...pt,...t,autoVacuum:s,searchOptions:{...J,...t.searchOptions||{}},autoSuggestOptions:{...Ft,...t.autoSuggestOptions||{}}},this._index=new C,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=U,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const o={};for(const[u,i]of n)o[u]=Object.fromEntries(i);t.push([s,o])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,serializationVersion:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const zt=({index:e,documentCount:t,nextId:s,documentIds:n,fieldIds:o,fieldLength:u,averageFieldLength:i,storedFields:r,dirtCount:d,serializationVersion:l},a)=>{if(l!==1&&l!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const h=new Et(a);h._documentCount=t,h._nextId=s,h._documentIds=k(n),h._idToShortId=new Map,h._fieldIds=o,h._fieldLength=k(u),h._avgFieldLength=i,h._storedFields=k(r),h._dirtCount=d||0,h._index=new C;for(const[m,p]of h._documentIds)h._idToShortId.set(p,m);for(const[m,p]of e){const f=new Map;for(const c of Object.keys(p)){let g=p[c];l===1&&(g=g.ds),f.set(parseInt(c,10),k(g))}h._index.set(m,f)}return h},Q=Object.entries,wt=Object.fromEntries,j=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),o=[];let u=0,i=0;const r=(l,a=!1)=>{let h="";i===0?h=l.length>20?`… ${l.slice(-20)}`:l:a?h=l.length+i>100?`${l.slice(0,100-i)}… `:l:h=l.length>20?`${l.slice(0,20)} … ${l.slice(-20)}`:l,h&&o.push(h),i+=h.length,a||(o.push(["mark",t]),i+=t.length,i>=100&&o.push(" …"))};let d=s.indexOf(n,u);if(d===-1)return null;for(;d>=0;){const l=d+n.length;if(r(e.slice(u,d)),u=l,i>100)break;d=s.indexOf(n,u)}return i<100&&r(e.slice(u),!0),o},Z=/[\u4e00-\u9fa5]/g,tt=(e={})=>({fuzzy:.2,prefix:!0,processTerm:t=>{const s=t.match(Z)||[],n=t.replace(Z,"").toLowerCase();return n?[n,...s]:[...s]},...e}),xt=(e,t)=>t.contents.reduce((s,[,n])=>s+n,0)-e.contents.reduce((s,[,n])=>s+n,0),kt=(e,t)=>Math.max(...t.contents.map(([,s])=>s))-Math.max(...e.contents.map(([,s])=>s)),et=(e,t,s={})=>{const n={};return K(t,e,tt({boost:{h:2,t:1,c:4},...s})).forEach(o=>{const{id:u,terms:i,score:r}=o,d=u.includes("@"),l=u.includes("#"),[a,h]=u.split(/[#@]/),m=i.sort((f,c)=>f.length-c.length).filter((f,c)=>i.slice(c+1).every(g=>!g.includes(f))),{contents:p}=n[a]??={title:"",contents:[]};if(d)p.push([{type:"customField",key:a,index:h,display:m.map(f=>o.c.map(c=>j(c,f))).flat().filter(f=>f!==null)},r]);else{const f=m.map(c=>j(o.h,c)).filter(c=>c!==null);if(f.length&&p.push([{type:l?"heading":"title",key:a,...l&&{anchor:h},display:f},r]),"t"in o)for(const c of o.t){const g=m.map(_=>j(c,_)).filter(_=>_!==null);g.length&&p.push([{type:"text",key:a,...l&&{anchor:h},display:g},r])}}}),Q(n).sort(([,o],[,u])=>"max"==="total"?xt(o,u):kt(o,u)).map(([o,{title:u,contents:i}])=>{if(!u){const r=it(t,o);r&&(u=r.h)}return{title:u,contents:i.map(([r])=>r)}})},st=(e,t,s={})=>Ct(t,e,tt(s)).map(({suggestion:n})=>n),v=wt(Q(JSON.parse("{\"/\":{\"documentCount\":500,\"nextId\":500,\"documentIds\":{\"0\":\"v-184f4da6\",\"1\":\"v-8daa1a0e\",\"2\":\"v-2e3eac9e\",\"3\":\"v-74451eb4\",\"4\":\"v-e2c17f44\",\"5\":\"v-e2c17f44#一、问题描述\",\"6\":\"v-e2c17f44#二、原因\",\"7\":\"v-e2c17f44#三、解决\",\"8\":\"v-e2c17f44#_3-1-重写httpservletrequestwrapper\",\"9\":\"v-e2c17f44#_3-2获取输入流内容\",\"10\":\"v-e2c17f44#_3-3过滤器\",\"11\":\"v-822b51dc\",\"12\":\"v-822b51dc#_1-1mysql基础\",\"13\":\"v-822b51dc#_7大语句\",\"14\":\"v-822b51dc#_1-2-视图\",\"15\":\"v-822b51dc#_1-3触发器\",\"16\":\"v-822b51dc#_1-4sql语法\",\"17\":\"v-822b51dc#_1-5自定义函数\",\"18\":\"v-822b51dc#_1-5存储过程\",\"19\":\"v-822b51dc#_1-6索引\",\"20\":\"v-822b51dc#二、sql优化\",\"21\":\"v-822b51dc#注-springboot配置sql监控\",\"22\":\"v-822b51dc#_2-1-sql执行顺序\",\"23\":\"v-822b51dc#_2-2-sql优化之定位\",\"24\":\"v-822b51dc#_2-3-sql优化之分析\",\"25\":\"v-822b51dc#_2-4-sql优化之解决\",\"26\":\"v-822b51dc#_2-5-常用的sql优化方案\",\"27\":\"v-822b51dc#三、mysql集群\",\"28\":\"v-822b51dc#_1-sharding-jdbc实现mysql集群\",\"29\":\"v-177e725c\",\"30\":\"v-177e725c#一、什么是sql\",\"31\":\"v-177e725c#二、ddl-操作数据库、表-列\",\"32\":\"v-177e725c#操作数据库crud\",\"33\":\"v-177e725c#_1-创建数据库\",\"34\":\"v-177e725c#_2-查询\",\"35\":\"v-177e725c#_3-修改\",\"36\":\"v-177e725c#_4-删除\",\"37\":\"v-177e725c#_5-使用\",\"38\":\"v-177e725c#操作表crud\",\"39\":\"v-177e725c#_1-创建表\",\"40\":\"v-177e725c#_2-查询表\",\"41\":\"v-177e725c#_3-修改表\",\"42\":\"v-177e725c#_4-删除表\",\"43\":\"v-177e725c#三、-dml-增删改表中数据\",\"44\":\"v-177e725c#_1-添加数据\",\"45\":\"v-177e725c#_2-删除数据\",\"46\":\"v-177e725c#_3-修改数据\",\"47\":\"v-177e725c#四、dql-查询表中的记录\",\"48\":\"v-177e725c#_1-基础查询\",\"49\":\"v-177e725c#_2-条件查询\",\"50\":\"v-177e725c#_3-分支条件查询\",\"51\":\"v-177e725c#_4-时间查询\",\"52\":\"v-177e725c#_5-字串查询\",\"53\":\"v-177e725c#dql-查询语句\",\"54\":\"v-177e725c#_1-排序查询\",\"55\":\"v-177e725c#_2-聚合函数\",\"56\":\"v-177e725c#_3-分组查询\",\"57\":\"v-177e725c#_4-分页查询\",\"58\":\"v-177e725c#_5-子查询-作为条件判断\",\"59\":\"v-177e725c#_6-合并查询\",\"60\":\"v-177e725c#五、-约束\",\"61\":\"v-177e725c#_1-非空约束\",\"62\":\"v-177e725c#_2-唯一约束\",\"63\":\"v-177e725c#_3-主键约束\",\"64\":\"v-177e725c#_4-外键约束\",\"65\":\"v-177e725c#六、多表查询\",\"66\":\"v-177e725c#_1-内连接查询\",\"67\":\"v-177e725c#_1-1-内连接查询\",\"68\":\"v-177e725c#_1-2-显示内连接\",\"69\":\"v-177e725c#_2-外连接查询\",\"70\":\"v-177e725c#_2-1-左外连接\",\"71\":\"v-177e725c#_2-2-右外连接\",\"72\":\"v-177e725c#_3-子查询\",\"73\":\"v-177e725c#七、事务\",\"74\":\"v-177e725c#_1-事务的基本介绍\",\"75\":\"v-177e725c#_2-事务的四大特征\",\"76\":\"v-177e725c#_3-事务的隔离级别-了解\",\"77\":\"v-177e725c#八、dcl\",\"78\":\"v-177e725c#九、-数据库的设计\",\"79\":\"v-177e725c#常用单词\",\"80\":\"v-2e25198a\",\"81\":\"v-7554641c\",\"82\":\"v-0bcad88f\",\"83\":\"v-0bcad88f#一、二维码图片识别工具类\",\"84\":\"v-0bcad88f#二、springutils\",\"85\":\"v-71b3ae87\",\"86\":\"v-71b3ae87@0\",\"87\":\"v-14c69af4\",\"88\":\"v-e6b274ba\",\"89\":\"v-e6b274ba#一、docker\",\"90\":\"v-e6b274ba#_1-1-docker是什么\",\"91\":\"v-e6b274ba#_1-2-docker好处\",\"92\":\"v-e6b274ba#_1-3-docker组成\",\"93\":\"v-e6b274ba#_1-4-linux安装docker\",\"94\":\"v-e6b274ba#_1-5-docker配置镜像加速器\",\"95\":\"v-e6b274ba#二、docker命令\",\"96\":\"v-e6b274ba#三、docker基于命令搭建环境\",\"97\":\"v-e6b274ba#_3-1-docker搭建tomcat\",\"98\":\"v-e6b274ba#_3-2-docker搭建mysql\",\"99\":\"v-e6b274ba#四、docker-compose\",\"100\":\"v-e6b274ba#_4-1-docker-compose\",\"101\":\"v-e6b274ba#_4-2-linux安装docker-compose\",\"102\":\"v-e6b274ba#_4-3-docker-compose的工作步骤\",\"103\":\"v-e6b274ba#五、docker-compose搭建环境\",\"104\":\"v-e6b274ba#_5-1-搭建tomcat\",\"105\":\"v-e6b274ba#_5-2-搭建mysql\",\"106\":\"v-e6b274ba#六、宝塔面板快速部署网站\",\"107\":\"v-c3f65996\",\"108\":\"v-c3f65996#一、docker安装es\",\"109\":\"v-c3f65996#二、docker安装kibana\",\"110\":\"v-c3f65996#三、分词器配置\",\"111\":\"v-c3f65996#四、安装ingest-attachment\",\"112\":\"v-c3f65996#_4-1进入kibana定义文本抽取管道\",\"113\":\"v-c3f65996#五、spring连接配置\",\"114\":\"v-949a2fca\",\"115\":\"v-949a2fca#一、linux-安装jdk1-8\",\"116\":\"v-949a2fca#二、linux-部署\",\"117\":\"v-949a2fca#三、docker部署\",\"118\":\"v-949a2fca#四、windos端口占用\",\"119\":\"v-949a2fca#一、安装redis\",\"120\":\"v-949a2fca#_1-1-创建redis容器并设置密码\",\"121\":\"v-949a2fca#_1-2-redis创建密码或修改密码\",\"122\":\"v-949a2fca#二、docker安装mysql\",\"123\":\"v-79755692\",\"124\":\"v-79755692#一、-应用场景\",\"125\":\"v-79755692#二、-特点\",\"126\":\"v-79755692#三、安装minio\",\"127\":\"v-79755692#_3-1-获取镜像\",\"128\":\"v-79755692#_3-2-启动镜像\",\"129\":\"v-79755692#_3-3-图形界面操作\",\"130\":\"v-79755692#四、springboot整合minio上传文件\",\"131\":\"v-79755692#_4-1-获取accesskey和secretkey\",\"132\":\"v-79755692#_4-2-添加依赖\",\"133\":\"v-79755692#_4-3-添加配置\",\"134\":\"v-79755692#-1\",\"135\":\"v-79755692#-2\",\"136\":\"v-167001ad\",\"137\":\"v-167001ad#一、卸载mysql\",\"138\":\"v-167001ad#二、安装mysql\",\"139\":\"v-167001ad#_2-1-配置文件\",\"140\":\"v-167001ad#_2-2-配置开机自启\",\"141\":\"v-167001ad#_2-3-配置环境变量\",\"142\":\"v-28d0d037\",\"143\":\"v-28d0d037#一、开启bin-log\",\"144\":\"v-28d0d037#二、数据恢复\",\"145\":\"v-28d0d037#_2-1-mysqlbinlog\",\"146\":\"v-28d0d037#_2-2-binlog2-sql\",\"147\":\"v-0dcc0a63\",\"148\":\"v-0dcc0a63#_1-打开网址\",\"149\":\"v-0dcc0a63#_2-登录注册\",\"150\":\"v-0dcc0a63#_2-1实名认证\",\"151\":\"v-0dcc0a63#_3-购买隧道\",\"152\":\"v-0dcc0a63#_4-配置\",\"153\":\"v-0dcc0a63#_5-下载客户端\",\"154\":\"v-0dcc0a63#_6-启动\",\"155\":\"v-72dd4955\",\"156\":\"v-72dd4955#一、-nginx是什么\",\"157\":\"v-72dd4955#二、nginx的安装\",\"158\":\"v-72dd4955#三、nginx代理\",\"159\":\"v-72dd4955#_3-1-关于localtion路径映射\",\"160\":\"v-72dd4955#四、nginx负载均衡\",\"161\":\"v-72dd4955#_4-1-轮询\",\"162\":\"v-72dd4955#_4-2-权重\",\"163\":\"v-72dd4955#_4-3-ip-hash\",\"164\":\"v-72dd4955#五、nginx动静分离\",\"165\":\"v-72dd4955#六、nginx实战\",\"166\":\"v-72dd4955#七、nginx核心\",\"167\":\"v-79e08b36\",\"168\":\"v-79e08b36@0\",\"169\":\"v-92324a86\",\"170\":\"v-92324a86#一、squid简介\",\"171\":\"v-92324a86#_1-1-安装命令\",\"172\":\"v-92324a86#_1-2-软件相关列表\",\"173\":\"v-92324a86#_1-3-生成密码文件\",\"174\":\"v-92324a86#_1-4-测试密码文件\",\"175\":\"v-92324a86#二、配置squid-conf文件\",\"176\":\"v-92324a86#_2-1-日志\",\"177\":\"v-92324a86#_2-2-启动-停止-重启等\",\"178\":\"v-92324a86#_3-0-谷歌浏览器动态代理插件\",\"179\":\"v-92324a86#_3-1查看ip\",\"180\":\"v-2913ecb2\",\"181\":\"v-1b27ac56\",\"182\":\"v-1b27ac56#一、下载安装\",\"183\":\"v-1b27ac56#二、配置淘宝镜像\",\"184\":\"v-1b27ac56#三、常用命令\",\"185\":\"v-744e35e2\",\"186\":\"v-d3cb997c\",\"187\":\"v-d3cb997c#一、vue核心\",\"188\":\"v-d3cb997c#_1、插值语法\",\"189\":\"v-d3cb997c#_2、双向绑定\",\"190\":\"v-d3cb997c#_3、分支\",\"191\":\"v-d3cb997c#_4、循环\",\"192\":\"v-d3cb997c#_5、-事件绑定\",\"193\":\"v-d3cb997c#_6、属性绑定\",\"194\":\"v-d3cb997c#_7、组件\",\"195\":\"v-d3cb997c#_8、核心总结\",\"196\":\"v-d3cb997c#二、安装vue-cli\",\"197\":\"v-d3cb997c#_1、首先安装node-js\",\"198\":\"v-d3cb997c#_2、设置安装路径\",\"199\":\"v-d3cb997c#_3、安装vue-cli\",\"200\":\"v-d3cb997c#_4、vue-cli-创建vue项目\",\"201\":\"v-d3cb997c#三、在idea中创建标准的vue-cli\",\"202\":\"v-d3cb997c#_1、vue-create-项目名\",\"203\":\"v-d3cb997c#_2、选择模块\",\"204\":\"v-d3cb997c#_3、选择vue版本\",\"205\":\"v-d3cb997c#_4、选择-json\",\"206\":\"v-d3cb997c#_5、创建成功\",\"207\":\"v-d3cb997c#_6、运行成功\",\"208\":\"v-d3cb997c#四、vue-router\",\"209\":\"v-d3cb997c#_1、注册\",\"210\":\"v-d3cb997c#_2、跳转\",\"211\":\"v-d3cb997c#_3、接收参数\",\"212\":\"v-d3cb997c#五、vue-vuex\",\"213\":\"v-d3cb997c#_1、vuex核心\",\"214\":\"v-d3cb997c#_2、vuex使用\",\"215\":\"v-d3cb997c#六、visual-studio-code-设置-vue模板\",\"216\":\"v-c682b678\",\"217\":\"v-c682b678#一、事物\",\"218\":\"v-c682b678#二、约束\",\"219\":\"v-0285fe5c\",\"220\":\"v-0285fe5c#一、索引底层\",\"221\":\"v-0285fe5c#二、索引失效原理\",\"222\":\"v-0285fe5c#三、innodb存储原理\",\"223\":\"v-0285fe5c#四、索引优化\",\"224\":\"v-1b639f8b\",\"225\":\"v-1b639f8b#一、redis存储数据的结构\",\"226\":\"v-1b639f8b#二、redis事物\",\"227\":\"v-1b639f8b#三、redis持久化机制\",\"228\":\"v-1b639f8b#四、redis常见问题【重点】\",\"229\":\"v-1b639f8b#_4-1-key的生存时间到了-redis会立即删除吗\",\"230\":\"v-1b639f8b#_4-2-redis的淘汰机制\",\"231\":\"v-1b639f8b#_4-3-缓存的常问题\",\"232\":\"v-1b639f8b#五、延迟双删\",\"233\":\"v-1b639f8b#六、哨兵模式\",\"234\":\"v-dd9399f2\",\"235\":\"v-dd9399f2#一、加载\",\"236\":\"v-dd9399f2#二、验证\",\"237\":\"v-dd9399f2#三、准备\",\"238\":\"v-dd9399f2#四、解析\",\"239\":\"v-dd9399f2#五、初始化\",\"240\":\"v-ba807816\",\"241\":\"v-ba807816#_1-1-arraylist-底层object数组\",\"242\":\"v-ba807816#_1-2-linkedlist-双向循环链表\",\"243\":\"v-ba807816#_1-3-vector-object数组\",\"244\":\"v-ba807816#_2-1-hashset-无序-唯一\",\"245\":\"v-ba807816#_2-2-linkedhashset\",\"246\":\"v-ba807816#_2-3-treeset-有序-唯一\",\"247\":\"v-ba807816#_3-1-hashmap\",\"248\":\"v-ba807816#_3-2-linkedhashmap\",\"249\":\"v-ba807816#_3-3-hashtable\",\"250\":\"v-ba807816#_3-4-treemap\",\"251\":\"v-ba807816#hashset与hashmap的区别\",\"252\":\"v-6b20f70a\",\"253\":\"v-6b20f70a#一、filter\",\"254\":\"v-6b20f70a#二、intercaputer\",\"255\":\"v-6b20f70a#_1、拦截器是什么实现的\",\"256\":\"v-6b20f70a#_2、拦截器3个方法\",\"257\":\"v-6b20f70a#_3、多拦截器执行顺序\",\"258\":\"v-d6e3d21a\",\"259\":\"v-d6e3d21a#如何理解先向上转型在向下转型\",\"260\":\"v-9d026164\",\"261\":\"v-9d026164#_1-1lomdba\",\"262\":\"v-9d026164#_1-2函数式接口\",\"263\":\"v-9d026164#_1-3stream\",\"264\":\"v-9d026164#_1-4optional\",\"265\":\"v-9d026164#_1-5新时间日期api\",\"266\":\"v-9d026164#_1-6接口默认-静态方法\",\"267\":\"v-9d026164#_1-7重复注解-类型注解\",\"268\":\"v-9d026164#_1-8hashmap-concurrenthashmap底层结构\",\"269\":\"v-6307bbd9\",\"270\":\"v-6307bbd9#讲下gc\",\"271\":\"v-6307bbd9#_5、完整gc回收流程-从创建到回收\",\"272\":\"v-6c56f9d5\",\"273\":\"v-6c56f9d5#_1-1-生产者消息丢失\",\"274\":\"v-6c56f9d5#_1-2-rabbitmq服务器端\",\"275\":\"v-6c56f9d5#_1-3-消费端\",\"276\":\"v-233fac43\",\"277\":\"v-233fac43#执行流程\",\"278\":\"v-233fac43#redisson-看门狗逻辑\",\"279\":\"v-233fac43#redis和zookeeper实现分布式锁的区别\",\"280\":\"v-5761b9f4\",\"281\":\"v-541bf0b2\",\"282\":\"v-d826e044\",\"283\":\"v-016c564d\",\"284\":\"v-016c564d#一、线程池7大参数\",\"285\":\"v-016c564d#二、线程池的运行过程\",\"286\":\"v-016c564d#三、阻塞队列\",\"287\":\"v-016c564d#四、拒绝策略\",\"288\":\"v-016c564d#拒绝策略场景分析\",\"289\":\"v-016c564d#_4-1abortpolicy-中止策略\",\"290\":\"v-016c564d#_4-2-discardpolicy-丢弃策略\",\"291\":\"v-016c564d#_4-3-discardoldestpolicy-丢弃最老任务\",\"292\":\"v-016c564d#_4-4-callerrunspolicy-优先处理策略\",\"293\":\"v-016c564d#五、线程池的五大状态\",\"294\":\"v-016c564d#_5-1-running\",\"295\":\"v-016c564d#_5-2-shutdown\",\"296\":\"v-016c564d#_5-3-stop\",\"297\":\"v-016c564d#_5-3tidying\",\"298\":\"v-016c564d#_5-4-terminated\",\"299\":\"v-016c564d#六、回收核心线程\",\"300\":\"v-016c564d#七、多线程异步定时任务\",\"301\":\"v-f9abf12c\",\"302\":\"v-f9abf12c#一、elasticsearch是什么\",\"303\":\"v-f9abf12c#_1-1elasticsearch的特性\",\"304\":\"v-f9abf12c#_1-2-基本概念\",\"305\":\"v-f9abf12c#_1-3-倒排索引\",\"306\":\"v-f9abf12c#_1-4-es结构\",\"307\":\"v-f9abf12c#二、搭建es-kibana\",\"308\":\"v-f9abf12c#_2-1-安装docker-compose\",\"309\":\"v-f9abf12c#_2-2-拉起镜像\",\"310\":\"v-f9abf12c#_2-2-1-查看是否安装成功\",\"311\":\"v-f9abf12c#_2-3-ik分词器\",\"312\":\"v-f9abf12c#_2-3-2-测试分词器\",\"313\":\"v-f9abf12c#_2-4-设置密码\",\"314\":\"v-f9abf12c#_2-4-1-es-pwd\",\"315\":\"v-f9abf12c#_2-4-2-kibana-pwd\",\"316\":\"v-f9abf12c#三、es操作\",\"317\":\"v-f9abf12c#_3-1-es-field可以指定类型\",\"318\":\"v-f9abf12c#_3-2-kibana快捷键操作\",\"319\":\"v-f9abf12c#_3-3-索引操作\",\"320\":\"v-f9abf12c#_3-3-1-创建指定数据结构索引\",\"321\":\"v-f9abf12c#_3-4-文档操作\",\"322\":\"v-f9abf12c#_3-5-kibana-可视化界面中可以看到-创建的索引信息\",\"323\":\"v-f9abf12c#四、java操作es-demo\",\"324\":\"v-f9abf12c#五、es查询\",\"325\":\"v-f9abf12c#_5-1-term查询\",\"326\":\"v-f9abf12c#_5-1-2-查询结果说明\",\"327\":\"v-f9abf12c#_5-1-3-java操作demo\",\"328\":\"v-f9abf12c#_5-2-terms查询\",\"329\":\"v-f9abf12c#_5-3-match查询\",\"330\":\"v-f9abf12c#_5-4-multi-match查询\",\"331\":\"v-f9abf12c#_5-5-ids查询\",\"332\":\"v-f9abf12c#_5-6-prefix查询\",\"333\":\"v-f9abf12c#_5-7-fuzzy查询\",\"334\":\"v-f9abf12c#_5-8-wildcard查询\",\"335\":\"v-f9abf12c#_5-9-range查询\",\"336\":\"v-f9abf12c#_5-10-regexp查询\",\"337\":\"v-f9abf12c#_5-11-深分页scroll\",\"338\":\"v-f9abf12c#_5-12-delete-by-query\",\"339\":\"v-f9abf12c#_5-13-bool查询\",\"340\":\"v-f9abf12c#_5-14-filter查询\",\"341\":\"v-f9abf12c#_5-15-高亮查询\",\"342\":\"v-f9abf12c#_5-16-聚合查询\",\"343\":\"v-f9abf12c#_5-16-1-去重计数查询\",\"344\":\"v-f9abf12c#_5-16-2-范围统计\",\"345\":\"v-f9abf12c#_5-16-3-统计聚合查询\",\"346\":\"v-f9abf12c#_5-17-地图经纬度搜索\",\"347\":\"v-f9abf12c#_5-17-1-geo-distance-直线距离检索方式\",\"348\":\"v-f9abf12c#_5-17-2-geo-bounding-box-以两个点确定一个矩形-获取在矩形内的全部数据\",\"349\":\"v-f9abf12c#_5-17-3-geo-polygon-以多个点-确定一个多边形-获取多边形内的全部数据\",\"350\":\"v-2a62d366\",\"351\":\"v-2a62d366#_1-mq是什么\",\"352\":\"v-2a62d366#_1-p2p消息\",\"353\":\"v-2a62d366#_1-1原生的发送\",\"354\":\"v-2a62d366#_1-2原生的接收\",\"355\":\"v-2a62d366#_2-work消息\",\"356\":\"v-2a62d366#_3-pub-sub消息\",\"357\":\"v-2a62d366#_3-1fanout类型-直接转发\",\"358\":\"v-2a62d366#_3-2direct类型-匹配转发\",\"359\":\"v-2a62d366#_3-3topic类型-模糊匹配\",\"360\":\"v-2a62d366#_4-rabbitmq基于死信实现延迟\",\"361\":\"v-2a62d366#_4-1rabbitmq事务\",\"362\":\"v-2a62d366#_4-2rabbitmq手动应答\",\"363\":\"v-2a62d366#_4-1rabbitmq如何防止消息丢失\",\"364\":\"v-2a62d366#_4-2rabbitmq如何保证消息的幂等性\",\"365\":\"v-2a62d366#_4-3rabbitmq集群模式\",\"366\":\"v-2a62d366#总结\",\"367\":\"v-044b2e62\",\"368\":\"v-044b2e62#一、模板引擎概述\",\"369\":\"v-044b2e62#二、依赖jar\",\"370\":\"v-044b2e62#三、-编写模板文件\",\"371\":\"v-044b2e62#四、编写代码\",\"372\":\"v-044b2e62#五、beetl总结\",\"373\":\"v-044b2e62#_1-模板文件中的语法格式\",\"374\":\"v-044b2e62#_2-基于模板引擎实现java源代码的生成\",\"375\":\"v-75895c3c\",\"376\":\"v-75895c3c#一、基于aop环绕通知\",\"377\":\"v-75895c3c#二、基于注解-拦截器实现\",\"378\":\"v-75895c3c#_2-0-参数校验\",\"379\":\"v-75895c3c#_2-1-接口鉴权\",\"380\":\"v-75895c3c#_2-3实现令牌续命\",\"381\":\"v-75895c3c#_2-4实现版本号的兼容性过滤\",\"382\":\"v-75895c3c#三、validator-jsr303校验\",\"383\":\"v-75895c3c#_3-1-jsr303介绍\",\"384\":\"v-75895c3c#_3-2-常用注解\",\"385\":\"v-75895c3c#_3-3-基本演示\",\"386\":\"v-75895c3c#_3-4-嵌套问题\",\"387\":\"v-75895c3c#四、el表达式-扩展\",\"388\":\"v-e5929646\",\"389\":\"v-e5929646#一、配置文件\",\"390\":\"v-e5929646#二、如何实现\",\"391\":\"v-e5929646#三、多线程问题\",\"392\":\"v-d857cb92\",\"393\":\"v-45916c28\",\"394\":\"v-45916c28#一、threadlocal介绍\",\"395\":\"v-45916c28#二、threadlocal与thread-threadlocalmap之间的关系\",\"396\":\"v-45916c28#三、使用场景\",\"397\":\"v-977251ba\",\"398\":\"v-977251ba#一、线程池7大参数\",\"399\":\"v-977251ba#二、线程池的运行过程\",\"400\":\"v-977251ba#三、阻塞队列\",\"401\":\"v-977251ba#四、拒绝策略\",\"402\":\"v-977251ba#拒绝策略场景分析\",\"403\":\"v-977251ba#_4-1abortpolicy-中止策略\",\"404\":\"v-977251ba#_4-2-discardpolicy-丢弃策略\",\"405\":\"v-977251ba#_4-3-discardoldestpolicy-丢弃最老任务\",\"406\":\"v-977251ba#_4-4-callerrunspolicy-优先处理策略\",\"407\":\"v-977251ba#五、线程池的五大状态\",\"408\":\"v-977251ba#_5-1-running\",\"409\":\"v-977251ba#_5-2-shutdown\",\"410\":\"v-977251ba#_5-3-stop\",\"411\":\"v-977251ba#_5-3tidying\",\"412\":\"v-977251ba#_5-4-terminated\",\"413\":\"v-977251ba#六、回收核心线程\",\"414\":\"v-977251ba#七、多线程异步定时任务\",\"415\":\"v-d3e2e3e8\",\"416\":\"v-d3e2e3e8#观察者模式-1\",\"417\":\"v-ff7e7708\",\"418\":\"v-ff7e7708#一、静态代理\",\"419\":\"v-ff7e7708#二、jdk动态代理和cglib代理区别\",\"420\":\"v-ff7e7708#三、jdk动态代理\",\"421\":\"v-ff7e7708#四、cglib代理\",\"422\":\"v-5e99ff02\",\"423\":\"v-0fb3e4f0\",\"424\":\"v-0fb3e4f0#什么是责任链模式\",\"425\":\"v-0fb3e4f0#应用场景\",\"426\":\"v-2601e145\",\"427\":\"v-2601e145#一、配置服务器\",\"428\":\"v-2601e145#二、部署服务端项目\",\"429\":\"v-2601e145#三、shell脚本文件\",\"430\":\"v-2601e145#_3-1-方式一\",\"431\":\"v-2601e145#_3-2-封装脚本文件\",\"432\":\"v-2601e145#四、部署前端项目\",\"433\":\"v-719ee7c6\",\"434\":\"v-719ee7c6#一、创建项目\",\"435\":\"v-719ee7c6#二、ssh连接\",\"436\":\"v-719ee7c6#三、springboot\",\"437\":\"v-719ee7c6#持续集成\",\"438\":\"v-719ee7c6#_3-1-多环境配置\",\"439\":\"v-719ee7c6#_3-2-dockerfile\",\"440\":\"v-719ee7c6#_3-3-静态jenkinsfile\",\"441\":\"v-719ee7c6#四、持续集成-vue\",\"442\":\"v-14a23f35\",\"443\":\"v-14a23f35#一、安装配置\",\"444\":\"v-14a23f35#_1-1-安装jdk\",\"445\":\"v-14a23f35#_1-2-下载jenkins的war包\",\"446\":\"v-14a23f35#_1-3-安装git\",\"447\":\"v-14a23f35#_1-4-安装maven\",\"448\":\"v-14a23f35#二、配置jenkins\",\"449\":\"v-14a23f35#_2-1-插件配置\",\"450\":\"v-14a23f35#_2-2-新增任务\",\"451\":\"v-14a23f35#_2-3-执行\",\"452\":\"v-14a23f35#三、前端项目\",\"453\":\"v-14a23f35#_3-1-安装插件\",\"454\":\"v-14a23f35#_3-2-创建项目\",\"455\":\"v-14a23f35#四、用户权限分配\",\"456\":\"v-14a23f35#_4-1安装插件\",\"457\":\"v-58cbb4c3\",\"458\":\"v-58cbb4c3#一、前置条件\",\"459\":\"v-58cbb4c3#二、下载并安装\",\"460\":\"v-58cbb4c3#_2-1-minio集群配置\",\"461\":\"v-58cbb4c3#_2-2-minio-service配置\",\"462\":\"v-58cbb4c3#_2-3-启动报错\",\"463\":\"v-58cbb4c3#_2-4-查看状态\",\"464\":\"v-58cbb4c3#三、nginx转发\",\"465\":\"v-5df9a7b1\",\"466\":\"v-5df9a7b1#一、mc安装\",\"467\":\"v-5df9a7b1#二、添加minio集群\",\"468\":\"v-5df9a7b1#三、数据同步\",\"469\":\"v-0c00534a\",\"470\":\"v-0c00534a#一、安装mysql\",\"471\":\"v-0c00534a#_1-1-删除mariadb\",\"472\":\"v-0c00534a#_1-2-检查是否安装过mysql\",\"473\":\"v-0c00534a#_1-3-安装mysql\",\"474\":\"v-0c00534a#_1-4-初始化mysql\",\"475\":\"v-0c00534a#_1-5-添加防火墙\",\"476\":\"v-0c00534a#二、修改my-cnf\",\"477\":\"v-0c00534a#三、主从配置\",\"478\":\"v-0c00534a#_1-3-主库mysql配置\",\"479\":\"v-0c00534a#_1-4-从库mysql配置\",\"480\":\"v-787d8647\",\"481\":\"v-787d8647#一、jdk安装\",\"482\":\"v-787d8647#二、nacos单机\",\"483\":\"v-787d8647#_2-1-配置自启脚本\",\"484\":\"v-787d8647#_2-2-配置nacos-jdk目录\",\"485\":\"v-787d8647#三、nacos集群\",\"486\":\"v-787d8647#_3-1-配置nacos节点信息\",\"487\":\"v-787d8647#_3-2-配置数据库节点信息\",\"488\":\"v-787d8647#_3-3-修改启动方式\",\"489\":\"v-787d8647#_3-4-开启鉴权\",\"490\":\"v-787d8647#四、nginx转发\",\"491\":\"v-787d8647#五、java连接\",\"492\":\"v-759e5fc0\",\"493\":\"v-759e5fc0#一、安装redis\",\"494\":\"v-759e5fc0#二、配置开机自启\",\"495\":\"v-759e5fc0#三、redis集群配置-三主三从\",\"496\":\"v-759e5fc0#四、主从复制-一主二从\",\"497\":\"v-759e5fc0#五、哨兵模式配置\",\"498\":\"v-759e5fc0#_4-1-配置哨兵自启\",\"499\":\"v-759e5fc0#_4-2-容灾切换\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1,3],\"1\":[1],\"2\":[1],\"3\":[1,61],\"4\":[1],\"5\":[2,8],\"6\":[2,50],\"7\":[2],\"8\":[3,83],\"9\":[2,44],\"10\":[2,61],\"11\":[1],\"12\":[2,60],\"13\":[2,99],\"14\":[3,43],\"15\":[2,84],\"16\":[2,55],\"17\":[2,40],\"18\":[2,86],\"19\":[2,241],\"20\":[2],\"21\":[2,215],\"22\":[3,178],\"23\":[2,29],\"24\":[3,22],\"25\":[3,50],\"26\":[3,85],\"27\":[2,7],\"28\":[3,150],\"29\":[1],\"30\":[2,66],\"31\":[5],\"32\":[1],\"33\":[2,26],\"34\":[2,13],\"35\":[2,12],\"36\":[2,13],\"37\":[2,8],\"38\":[1],\"39\":[2,67],\"40\":[2,11],\"41\":[2,32],\"42\":[2,11],\"43\":[3],\"44\":[2,25],\"45\":[2,22],\"46\":[2,18],\"47\":[3,18],\"48\":[2,34],\"49\":[2,59],\"50\":[2,14],\"51\":[2,38],\"52\":[2,27],\"53\":[2],\"54\":[2,21],\"55\":[2,27],\"56\":[2,46],\"57\":[2,26],\"58\":[4,15],\"59\":[2,25],\"60\":[2,15],\"61\":[2,25],\"62\":[2,28],\"63\":[2,50],\"64\":[2,44],\"65\":[2],\"66\":[2],\"67\":[3,29],\"68\":[4,24],\"69\":[3],\"70\":[4,34],\"71\":[3,28],\"72\":[2,27],\"73\":[2],\"74\":[2,82],\"75\":[3,14],\"76\":[4,62],\"77\":[2,109],\"78\":[2,196],\"79\":[1,96],\"80\":[1,4],\"81\":[1,2],\"82\":[1],\"83\":[2,123],\"84\":[2,153],\"85\":[1,8],\"86\":[null,null,1],\"87\":[1],\"88\":[1],\"89\":[2],\"90\":[2,10],\"91\":[3,28],\"92\":[3,30],\"93\":[3,45],\"94\":[3,44],\"95\":[2,81],\"96\":[2],\"97\":[3,33],\"98\":[3,24],\"99\":[3],\"100\":[4,24],\"101\":[4,32],\"102\":[4,18],\"103\":[3],\"104\":[3,72],\"105\":[3,43],\"106\":[2,31],\"107\":[1],\"108\":[2,104],\"109\":[2,59],\"110\":[2,45],\"111\":[3,19],\"112\":[2,28],\"113\":[2,22],\"114\":[1,2],\"115\":[4,13],\"116\":[3,94],\"117\":[2,39],\"118\":[2,26],\"119\":[2],\"120\":[2,15],\"121\":[3,34],\"122\":[2,23],\"123\":[1,17],\"124\":[2,10],\"125\":[2,55],\"126\":[2],\"127\":[3,5],\"128\":[3,35],\"129\":[2,10],\"130\":[2],\"131\":[3,5],\"132\":[3,15],\"133\":[3,62],\"134\":[1,2],\"135\":[1,3],\"136\":[1],\"137\":[2,16],\"138\":[2,37],\"139\":[3,43],\"140\":[2,43],\"141\":[3,88],\"142\":[1],\"143\":[3,60],\"144\":[2,26],\"145\":[3,61],\"146\":[3,104],\"147\":[1],\"148\":[2,4],\"149\":[2],\"150\":[2],\"151\":[2,4],\"152\":[2],\"153\":[2,46],\"154\":[2],\"155\":[1],\"156\":[2,50],\"157\":[2,182],\"158\":[2,13],\"159\":[3,82],\"160\":[2,15],\"161\":[3,29],\"162\":[3,41],\"163\":[4,42],\"164\":[2,52],\"165\":[2,192],\"166\":[2,42],\"167\":[1,2],\"168\":[null,null,1],\"169\":[1],\"170\":[2,39],\"171\":[3,8],\"172\":[3,25],\"173\":[3,11],\"174\":[3,16],\"175\":[3,45],\"176\":[3,5],\"177\":[4,37],\"178\":[3,16],\"179\":[2,40],\"180\":[1],\"181\":[1,30],\"182\":[2,9],\"183\":[2,11],\"184\":[3,29],\"185\":[1,4],\"186\":[1],\"187\":[2,12],\"188\":[2,73],\"189\":[2,59],\"190\":[2,52],\"191\":[2,52],\"192\":[2,61],\"193\":[2,14],\"194\":[2,58],\"195\":[2,29],\"196\":[3,10],\"197\":[3,9],\"198\":[2,20],\"199\":[3,8],\"200\":[4,33],\"201\":[3],\"202\":[4,1],\"203\":[2,4],\"204\":[2,1],\"205\":[3,1],\"206\":[2,1],\"207\":[2,3],\"208\":[3,34],\"209\":[2,2],\"210\":[2,18],\"211\":[2,13],\"212\":[3,20],\"213\":[2,18],\"214\":[2,21],\"215\":[6,113],\"216\":[1,43],\"217\":[3,58],\"218\":[2,10],\"219\":[1,32],\"220\":[2,20],\"221\":[2,28],\"222\":[2,15],\"223\":[2,303],\"224\":[1],\"225\":[2,35],\"226\":[2,30],\"227\":[2,59],\"228\":[4],\"229\":[5,11],\"230\":[3,36],\"231\":[3,54],\"232\":[2,34],\"233\":[2,35],\"234\":[1,9],\"235\":[2,24],\"236\":[2,4],\"237\":[2,14],\"238\":[2,4],\"239\":[2,36],\"240\":[1,36],\"241\":[3,23],\"242\":[4,8],\"243\":[4,23],\"244\":[6,49],\"245\":[2,12],\"246\":[6,3],\"247\":[3,14],\"248\":[3,13],\"249\":[2,8],\"250\":[3,3],\"251\":[1],\"252\":[1,9],\"253\":[2,19],\"254\":[2,7],\"255\":[2,6],\"256\":[2,13],\"257\":[2,11],\"258\":[1,76],\"259\":[1,43],\"260\":[2],\"261\":[2,16],\"262\":[2,7],\"263\":[2,14],\"264\":[2,22],\"265\":[2,3],\"266\":[3,5],\"267\":[3,21],\"268\":[3,1],\"269\":[2,54],\"270\":[1,4],\"271\":[3,64],\"272\":[1],\"273\":[2,47],\"274\":[3,17],\"275\":[3,27],\"276\":[1],\"277\":[1,19],\"278\":[2,31],\"279\":[1,127],\"280\":[1,133],\"281\":[1,32],\"282\":[1,27],\"283\":[1,47],\"284\":[2,23],\"285\":[2,29],\"286\":[2,75],\"287\":[2,19],\"288\":[1],\"289\":[3,5],\"290\":[4,4],\"291\":[4,4],\"292\":[3,1],\"293\":[2,6],\"294\":[3,14],\"295\":[3,9],\"296\":[3,11],\"297\":[2,21],\"298\":[3,12],\"299\":[2,10],\"300\":[2,80],\"301\":[1],\"302\":[2,31],\"303\":[2,13],\"304\":[3,41],\"305\":[3,2],\"306\":[3,67],\"307\":[3],\"308\":[4,32],\"309\":[2,62],\"310\":[3,55],\"311\":[3,34],\"312\":[3,15],\"313\":[3],\"314\":[5,46],\"315\":[4,24],\"316\":[2],\"317\":[4,87],\"318\":[3,6],\"319\":[2,42],\"320\":[3,47],\"321\":[3,34],\"322\":[5],\"323\":[4,129],\"324\":[3],\"325\":[3,31],\"326\":[4,47],\"327\":[4,37],\"328\":[3,21],\"329\":[3,57],\"330\":[4,16],\"331\":[2,8],\"332\":[3,9],\"333\":[3,15],\"334\":[3,14],\"335\":[3,20],\"336\":[3,18],\"337\":[3,104],\"338\":[5,31],\"339\":[3,81],\"340\":[3,45],\"341\":[3,55],\"342\":[3,18],\"343\":[4,47],\"344\":[4,89],\"345\":[4,76],\"346\":[3,59],\"347\":[6,59],\"348\":[8,65],\"349\":[8,21],\"350\":[1],\"351\":[2,68],\"352\":[2,93],\"353\":[2,61],\"354\":[2,42],\"355\":[2,65],\"356\":[3,11],\"357\":[3,52],\"358\":[3,8],\"359\":[3,13],\"360\":[2,142],\"361\":[2,51],\"362\":[2,59],\"363\":[3,22],\"364\":[2,20],\"365\":[2,20],\"366\":[1,46],\"367\":[1,8],\"368\":[2,38],\"369\":[2,14],\"370\":[2,53],\"371\":[2,61],\"372\":[2],\"373\":[2,19],\"374\":[2,7],\"375\":[1,5],\"376\":[2,65],\"377\":[2],\"378\":[3,110],\"379\":[3,78],\"380\":[2,66],\"381\":[2,104],\"382\":[4,15],\"383\":[3,58],\"384\":[3,114],\"385\":[2,98],\"386\":[3,108],\"387\":[4,82],\"388\":[1,12],\"389\":[2,164],\"390\":[2,87],\"391\":[2,213],\"392\":[1,21],\"393\":[1],\"394\":[2,31],\"395\":[3,3],\"396\":[2,111],\"397\":[1,47],\"398\":[2,23],\"399\":[2,29],\"400\":[2,75],\"401\":[2,19],\"402\":[1],\"403\":[3,5],\"404\":[4,4],\"405\":[4,4],\"406\":[3,1],\"407\":[2,6],\"408\":[3,14],\"409\":[3,9],\"410\":[3,11],\"411\":[2,21],\"412\":[3,12],\"413\":[2,10],\"414\":[2,80],\"415\":[1,70],\"416\":[1,28],\"417\":[1,8],\"418\":[2,89],\"419\":[2,46],\"420\":[2,87],\"421\":[2,93],\"422\":[1,75],\"423\":[1],\"424\":[2,7],\"425\":[1,104],\"426\":[3,16],\"427\":[2,3],\"428\":[2,9],\"429\":[2],\"430\":[3,46],\"431\":[3,80],\"432\":[2,51],\"433\":[1,6],\"434\":[2,8],\"435\":[2,47],\"436\":[2],\"437\":[1,8],\"438\":[3,5],\"439\":[3,43],\"440\":[2,124],\"441\":[3,120],\"442\":[1],\"443\":[2,3],\"444\":[2,16],\"445\":[3,67],\"446\":[3,12],\"447\":[3,65],\"448\":[2],\"449\":[3,13],\"450\":[2,121],\"451\":[3,2],\"452\":[2],\"453\":[3,2],\"454\":[3,45],\"455\":[2],\"456\":[2],\"457\":[1,7],\"458\":[2,56],\"459\":[2,43],\"460\":[3,31],\"461\":[3,92],\"462\":[3,43],\"463\":[3,6],\"464\":[2,139],\"465\":[1,7],\"466\":[2,19],\"467\":[2,30],\"468\":[2,57],\"469\":[2,24],\"470\":[2,9],\"471\":[2,18],\"472\":[3,48],\"473\":[3,83],\"474\":[3,34],\"475\":[3,33],\"476\":[3,107],\"477\":[2],\"478\":[3,44],\"479\":[3,96],\"480\":[1],\"481\":[2,43],\"482\":[2,18],\"483\":[3,34],\"484\":[3,31],\"485\":[2,23],\"486\":[3,20],\"487\":[3,41],\"488\":[2,34],\"489\":[3,29],\"490\":[2,49],\"491\":[2,77],\"492\":[1,16],\"493\":[2,45],\"494\":[2,43],\"495\":[4,119],\"496\":[4,57],\"497\":[2,77],\"498\":[3,41],\"499\":[3,18]},\"averageFieldLength\":[2.366638704318935,41.03224572959674,0.017343399306264027],\"storedFields\":{\"0\":{\"h\":\"介绍页\",\"t\":[\"打赏作者\",\"微信\",\"支付宝\"]},\"1\":{\"h\":\"主页\"},\"2\":{\"h\":\"幻灯片页\"},\"3\":{\"h\":\"遇见的奇葩问题\",\"t\":[\"说明\",\"奇奇怪怪的问题\",\"浅浅的说一个吧 需求：是一个导入解析数据并返回（使用的是EasyExcel解析）。因为我使用的框架非springboot，而是JPlugin框架进行开发，没有MultipartFile类进行接受文件，当我用post自测的时候，使用binary方式请求是可以解析，但是使用form-data方式请求，easyexcle无法解析非文件流，就会抛异常，总之，一系列错误之后，就是因为这个原因，解决方案如下.\",\" // Create a factory for disk-based file items DiskFileItemFactory factory = new DiskFileItemFactory(); // Configure a repository (to ensure a secure temp location is used) ServletContext servletContext = request.getServletContext(); File repository = (File) servletContext.getAttribute(\\\"javax.servlet.context.tempdir\\\"); factory.setRepository(repository); // Create a new file upload handler ServletFileUpload upload = new ServletFileUpload(factory); upload.setSizeMax(2 * 1024 * 1024); // 设置最大文件尺寸，这里是20MB List<FileItem> items = upload.parseRequest(request); \"]},\"4\":{\"h\":\"request请求体丢失\"},\"5\":{\"h\":\"一、问题描述\",\"t\":[\"在拦截器中获取流之后request.getInputStream();后续再次获取Required request body is missing 请求体丢失\"]},\"6\":{\"h\":\"二、原因\",\"t\":[\"在HTTP协议中，请求的Body内容是通过输入流（InputStream）传输的。一旦读取了输入流中的数据，就无法再次读取。这是因为HTTP请求是基于流式传输的，一旦读取了流中的数据，数据就会被消耗掉，无法再次获取。具体到Java Servlet中，当调用request.getInputStream()方法时，Servlet容器会从请求中读取输入流的数据，并且将其缓存起来供后续使用。一旦读取了输入流的数据，就无法再次获取同一个输入流，因为输入流的数据已经被读取和消耗掉了。所以，在上述代码中，当拦截器中第一次调用request.getInputStream()获取了输入流后，如果后续代码再次调用request.getInputStream()来获取输入流，就会导致\\\"Required request body is missing\\\"错误。因为此时输入流中已经没有数据可读取了。解决这个问题的常见方法是通过HttpServletRequestWrapper类来包装请求对象，实现自定义的HttpServletRequest，并在包装类中重写getInputStream()或getReader()方法，以提供对输入流的多次读取支持。这样就可以将输入流的数据保存在一个缓存中，并在每次调用getInputStream()时返回缓存中的数据，从而避免了多次读取输入流导致数据被消耗的问题。总之，HTTP请求的输入流只能读取一次，无法重复获取。如果需要多次读取输入流的数据，可以使用HttpServletRequestWrapper类来进行包装和处理。\"]},\"7\":{\"h\":\"三、解决\"},\"8\":{\"h\":\"3.1 重写HttpServletRequestWrapper\",\"t\":[\"HttpServletRequestWrapper的主要作用是对原始的HttpServletRequest进行包装和增强，以实现对请求对象的个性化处理和定制化逻辑。它提供了以下几个主要功能：\",\"请求参数修改： 通过重写getParameter、getParameterNames、getParameterValues等方法，可以修改对请求参数的访问方式，实现自定义的参数处理逻辑。\",\"请求头修改： 通过重写getHeader、getHeaders、getHeaderNames等方法，可以修改对请求头的访问方式，实现自定义的请求头处理逻辑。\",\"请求URL修改： 通过重写getRequestURI、getContextPath、getServletPath等方法，可以修改对请求URL的访问方式，实现自定义的URL处理逻辑。\",\"请求方法修改： 通过重写getMethod方法，可以修改请求的HTTP方法，比如将POST请求修改为GET请求。\",\"其他功能增强： 可以通过重写其他方法，如getInputStream、getReader等，实现请求流的修改和增强。\",\"通过扩展HttpServletRequestWrapper，您可以在不修改原始请求对象的情况下，对请求进行个性化处理。这对于在过滤器或拦截器中对请求进行预处理、请求参数校验、请求日志记录等场景非常有用。需要注意的是，HttpServletRequestWrapper本身是一个抽象类，您需要根据自己的需求继承它并实现自己的定制逻辑。\",\"public class BodyReaderHttpServletRequestWrapper extends HttpServletRequestWrapper { //存储Body容器 private final byte[] body; public BodyReaderHttpServletRequestWrapper(HttpServletRequest request) throws IOException { super(request); body = HttpHelper.getBodyString(request).getBytes(Charset.forName(\\\"UTF-8\\\")); } @Override public BufferedReader getReader() throws IOException { return new BufferedReader(new InputStreamReader(getInputStream())); } @Override public ServletInputStream getInputStream() throws IOException { final ByteArrayInputStream bais = new ByteArrayInputStream(body); return new ServletInputStream() { @Override public int read() throws IOException { return bais.read(); } @Override public boolean isFinished() { return false; } @Override public boolean isReady() { return false; } @Override public void setReadListener(ReadListener readListener) { } }; } } \"]},\"9\":{\"h\":\"3.2获取输入流内容\",\"t\":[\"@Slf4j public class HttpHelper { /** * 获取请求Body * @param request * @return */ public static String getBodyString(ServletRequest request) { StringBuilder sb = new StringBuilder(); InputStream inputStream = null; BufferedReader reader = null; try { inputStream = request.getInputStream(); reader = new BufferedReader(new InputStreamReader(inputStream, Charset.forName(\\\"UTF-8\\\"))); String line = \\\"\\\"; while ((line = reader.readLine()) != null) { sb.append(line); } } catch (IOException e) { log.warn(\\\"getBodyString出现问题！\\\"); } finally { if (inputStream != null) { try { inputStream.close(); } catch (IOException e) { e.printStackTrace(); } } if (reader != null) { try { reader.close(); } catch (IOException e) { e.printStackTrace(); } } } return sb.toString(); } } \"]},\"10\":{\"h\":\"3.3过滤器\",\"t\":[\"OncePerRequestFilter 是 Spring Framework 提供的抽象类，用于创建自定义过滤器。它保证每个请求只会被该过滤器执行一次，而不会重复执行。这个过滤器的作用是在请求被处理前，将请求的 Body 内容读取并存储起来，以克服 getInputStream 只能获取一次的问题。通过包装请求对象并使用 HttpHelper.getBodyString 方法获取请求的 Body 内容，可以保证在后续处理中仍然能够访问到请求的 Body 数据。\",\"/** * 请求体丢失 Required request body is missing？解决getInputStream获取流 只能获取一次的问题 */ @Configuration public class CorsConfig extends OncePerRequestFilter { /** * 将流写出，提供后续使用 */ @Override protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException { // 防止流读取一次后就没有了, 所以需要将流继续写出去，提供后续使用 ServletRequest requestWrapper = new BodyReaderHttpServletRequestWrapper(request); String json = HttpHelper.getBodyString(requestWrapper); //这里一定要注意返回的request必须是我们重写之后的，否则还是会出现问题！ filterChain.doFilter(requestWrapper, response); } } \"]},\"11\":{\"h\":\"Mysql进阶\"},\"12\":{\"h\":\"1.1Mysql基础\",\"t\":[\"DBMS：数据库管理系统 Mysql数据库的数据类型 1.数字类型：int bigint tinyint double decimal(⻓度，⼩数点的位数) 2.字符串类型：char varchar text 3.⽇期类型：date datetime Mysql约束条件：为字段添加约束条件 1.主键约束 2.外键约束 3.⾮空约束 4.唯⼀约束 5.⾃增约束 6.默认约束 SQL：结构化查询语⾔，操作数据库 SQL分类： 1.DDL:数据定义 create drop alter 2.DML:数据操作 insert update delete 3.DQL:数据查询 select 4.TPL(TCL):事务处理 commit rollback 5.DCL:数据控制语⾔ grant 6.CCL:指针控制语⾔ cursor\"]},\"13\":{\"h\":\"7⼤语句：\",\"t\":[\"1.创建表：CREATE table 表名 (字段 数据类型 约束条件,……) 2.修改表：ALTER TABLE 表名 ADD 字段名 数据类型 约束条件 3.删除表：DROP TABLE 表名 4.新增数据：INSERT INTO 表名(字段名,……) values(值,……) 5.修改数据：UPDATE 表名 set 字段=值,…… [where 条件] 6.删除数据：DELETE FROM 表名 [where 条件] 7.查询数据：SELECT 字段|* FROM 表名 [where 条件] 查询条件：and or in like between and not is null order by limit group by having 聚合函数：avg max min count sum 复杂查询：⼦查询、笛卡尔积查询（⾃然查询）、内连接、左外连接、右外连接、全连接（Mysql不⽀ 持） 需要刷题：https://www.nowcoder.com/exam/oj?page=1&tab=SQL篇&topicId=268 数据删除：drop（把表都删除）、delete（删除表中数据）、truncate（删除表中的数据，并删除⾃增 器） 单位：分 bigint 好处：避免四舍五⼊ 缺陷：⻚⾯需要处理 单位：元 decimal 好处：单位元，不需要额外处理 缺陷：四舍五⼊\"]},\"14\":{\"h\":\"1.2 视图\",\"t\":[\"视图：对查询语句（临时表）的封装，简化操作，操作视图跟操作表⼀样 创建视图：\",\"create view 视图名 as 查询语句; \",\"删除视图：\",\"drop view 视图名; \",\"使⽤视图： 操作视图就跟表⼀样;\",\"#视图：View 封装查询语句 select p.title ptitle,p.img,a.* from t_pc p inner join t_pcall a on p.id=a.pid #创建视图 字段名不能一致 create view pcview as select p.title ptitle,p.img,a.* from t_pc p inner join t_pcall a on p.id=a.pid #查看视图 只有group by后面可以跟聚合函数 where不可以 select * from pcview where title like'%1%' #删除视图 drop view pcview \"]},\"15\":{\"h\":\"1.3触发器\",\"t\":[\"触发器：满⾜⼀定的条件，就会⾃动执⾏SQL语句。 trigger 触发器 触发器的分类：1.表级触发器，监听表的变化 2.⾏级触发器，监听表中数据的变化 触发器的操作类型：insert(配合after) update delete(配合before) 触发器的时间：after before 语法格式：\",\"新建触发器： delimiter $ create trigger 触发器名称 before|after insert|update|delete on 表名 for each row begin ⾃动执⾏的SQL语句 end$; \",\"删除触发器：drop trigger 触发器名称; 测试触发器：满⾜条件\",\"-- 触发器：满足指定的条件（1.时间 before after 2.操作⽅式 新增、修改、删除） -- 触发器创建 监听t_pcall表的新增，如果新增了，就自动在t_pc 新增数据 -- NEW相当于添加时得一个对象 -- 1.创建触发器 delimiter $ create TRIGGER t_pcall_trigger before insert on t_pcall for each row BEGIN insert into t_pc(id,img,auto,title) values(NEW.imgs,NEW.pid,'kz','自动填充'); insert into t_pc(id,img,auto,title) values(NEW.imgs,NEW.pid,'yy','可增加多条;隔开'); END$ -- 2.触发器 测试 INSERT into t_pcall(pid,imgs) values(1231223,\\\"111\\\"); -- 3.查询 select * from t_pc; -- 4.删除触发器 drop TRIGGER t_pcall_trigger; \"]},\"16\":{\"h\":\"1.4SQL语法\",\"t\":[\"变量、分⽀、循环 变量：mysql数据库中有3种变量， 第⼀种：系统变量 @@变量名不能⾃定义，只能⽤系统提供 第⼆种：⽤户变量 @变量名，可以直接 set @变量名=值 第三种：局部变量（⾃定义变量）只能定义在函数、存储过程中。DECLARE 变量名 数据类型 ;\",\"-- 查看所有全局系统变量 show global variables; -- 查询系统变量的值 select @@version; -- 用户变量，@开头 set @user1 =1; select @user1; -- 函数+局部变量 delimiter $ create FUNCTION fun_test(num int) RETURNS int DETERMINISTIC BEGIN -- 定义局部变量 DECLARE n int DEFAULT 100; RETURN n+num; end$ -- 使用函数 select fun_test(20) \",\"image.png\"]},\"17\":{\"h\":\"1.5自定义函数\",\"t\":[\"必须有返回值 创建函数： function\",\"delimiter $ create function 函数名(参数名 数据类型,……) returns 数据类型 begin DETERMINISTIC 代码逻辑 return 返回值; end$ \",\"删除函数：drop function 函数名; 使⽤函数：直接⽤，⽤在select\",\"-- 函数实现特定功能的代码块 -- 创建函数 delimiter $ create FUNCTION f_add(num1 int,num2 int) RETURNS int DETERMINISTIC BEGIN RETURN num1+num2; end$ -- 使⽤函数 select f_add(1,1); select f_add(id,100) from t_account; -- 删除函数 drop FUNCTION f_add; \"]},\"18\":{\"h\":\"1.5存储过程\",\"t\":[\"关键字：PROCEDURE procedure 程序 call 执行 存储过程：实现特定功能的SQL语句块，其实就是⼀种特殊的函数，没有返回值函数 参数类型有三种：1.输⼊参数 -只读 in 2.输出参数 -只写 out 3.输⼊输出参数 -读写 inout 创建存储过程\",\"create PROCEDURE 存储过程名称(参数类型 参数名 数据类型,……) begin 实现逻辑处理 end \",\"使⽤存储过程：call 存储过程名称(参数变量) 删除存储过程：drop PROCEDURE 存储过程名称\",\"-- 存储过程：一种特殊的函数，没有返回值的函数，实现特定功能的SQL语句块 -- 1.创建存储过程 delimiter $ create PROCEDURE p_add(in num1 int,in num2 int,out num3 int) BEGIN set num3=num1+num2; end$ -- 2.设置用户变量 set @n = 0; -- 3.调用存储过程 输入 输入 输出 call p_add(1,1,@n); -- 查询⽤户变量的内容 select @n; -- 1.定义存储过程，实现指定数量的账号数据添加 delimiter $ create PROCEDURE p_accountadd(in num int) BEGIN DECLARE i int DEFAULT 0; while i<num DO set i=i+1; -- concat合并 insert into t_pcall(pid,imgs) values(CONCAT('1851599',i),CONCAT('6666',i)); end WHILE; end$ -- 2.执行 call p_accountadd(100); -- 3.查看 select * from t_pcall; -- 删除存储过程 drop PROCEDURE p_add; \"]},\"19\":{\"h\":\"1.6索引\",\"t\":[\"索引：是⼀种可以提升查询效率的结构，⽬的就是为了提⾼查询的效率。 如果把书⽐喻成表，那么书的⽬录就是索引。 索引可以提⾼查询效率（⽣效），会影响新增、删除、修改的效率（涉及到索引字段）每个索引，都是⼀张表。实际上，⼀张表的索引的数量不能超过32个 索引的语法格式：\",\"创建索引：create index 索引名 on 表名(字段名) ; （id性能最高） 查看索引是否⽣效：explain 查询语句 where 索引字段=值; 删除索引：alter table 表名 drop index 索引名; 查看表上的索引：show index from 表名; \",\"索引的分类：1.主键索引2.普通索引3.唯⼀索引4.联合索引（复合索引）没有索引之前：创建索引之后： 由于数据不多，所以性能提升并不明显查看是否存在索引： explain的结果说明： type所显示的是查询使⽤了哪种类型，type包含的类型包括如下图所示的⼏种，从好到差依次是system > const > eq_ref > ref > range > index > all查看表上的索引：\",\"show index from t_pcall \",\"联合索引，最左侧原则：只有最左侧被当为索引 那么为什么还要创建联合索引呢？？减少开销。建一个联合索引(col1,col2,col3)，实际相当于建了(col1),(col1,col2),(col1,col2,col3)三个索引。每多一个索引，都会增加写操作的开销和磁盘空间的开销。对于大量数据的表，使用联合索引会大大的减少开销！\",\" -- 索引：提升查询效率 -- 1.将原有表中的数据再次添加 insert into t_pcall select * from t_pcall select count(*) from t_pcall; -- 2.没有索引的时候 select * from t_pcall where `title`='第二十七章 有备无患'; -- 3.创建索引 create index i_pcall on t_pcall(`title`); -- 4.有索引之后 select * from t_pcall where `title`='第二十七章 有备无患'; -- 5.分析查询语句，是否存在索引 EXPLAIN select * from t_pcall where `title`='66664785'; -- 6.删除索引 alter table t_pcall drop index i_pcall; -- 7.查看表上的索引 show index from t_pcall; -- 8.创建联合索引 create index i_pcallall on t_pcall(title,imgs); -- 最左前缀原则 EXPLAIN select * from t_pcall where title='第二十七章 有备无患'; EXPLAIN select * from t_pcall where imgs='https://www.um16.cn//info/1/27.html'; EXPLAIN select * from t_pcall where id=100; -- 覆盖索引 索引表，不用查询原表 select title,imgs from t_pcall where title='第二十七章 有备无患' \",\"explain的结果分析： id id相同，执⾏顺序由上⾄下 id不同，如果是⼦查询，id的序号会递增，id值越⼤优先级越⾼，越先被执⾏ id相同不同，同时存在 id相同的可以认为是⼀组，同⼀组中从上往下执⾏，所有组中id⼤的优先执⾏ type type所显示的是查询使⽤了哪种类型，type包含的类型包括如下图所示的⼏种，从好到差依次是 system > const > eq_ref > ref > range > index > all system 表只有⼀⾏记录（等于系统表），这是const类型的特列，平时不会出现，这个也可以忽略不计 const 表示通过索引⼀次就找到了，const⽤于⽐较primary key 或者unique索引。因为只匹配⼀⾏数 据，所以很快。如将主键置于where列表中，MySQL就能将该查询转换为⼀个常量。 eq_ref 唯⼀性索引扫描，对于每个索引键，表中只有⼀条记录与之匹配。常⻅于主键或唯⼀索引扫描 ref ⾮唯⼀性索引扫描，返回匹配某个单独值的所有⾏，本质上也是⼀种索引访问，它返回所有匹配某个单 独值的⾏，然⽽，它可能会找到多个符合条件的⾏，所以他应该属于查找和扫描的混合体。 range 只检索给定范围的⾏，使⽤⼀个索引来选择⾏，key列显示使⽤了哪个索引，⼀般就是在你的where 语句中出现between、< 、>、in等的查询，这种范围扫描索引⽐全表扫描要好，因为它只需要开始于索引 的某⼀点，⽽结束于另⼀点，不⽤扫描全部索引。 index Full Index Scan，Index与All区别为index类型只遍历索引树。这通常⽐ALL快，因为索引 ⽂件通常⽐数据⽂件⼩。（也就是说虽然all和Index都是读全表，但index是从索引中读取的，⽽all是 从硬盘读取的） all Full Table Scan 将遍历全表以找到匹配的⾏ possible_keys 和 key possible_keys 显示可能应⽤在这张表中的索引，⼀个或多个。查询涉及到的字段上若存在索引，则该索 引将被列出，但不⼀定被查询实际使⽤。 key实际使⽤的索引，如果为NULL，则没有使⽤索引。（可能原因包括没有建⽴索引或索引失效） key_len 表示索引中使⽤的字节数，可通过该列计算查询中使⽤的索引的⻓度，在不损失精确性的情况下，⻓度越短 越好。 rows 根据表统计信息及索引选⽤情况，⼤致估算出找到所需的记录所需要读取的⾏数，也就是说，⽤的越少越好 Extra Using filesort 说明mysql会对数据使⽤⼀个外部的索引排序，⽽不是按照表内的索引顺序进⾏读取。MySQL中⽆法利⽤索 引完成的排序操作称为“⽂件排序”。 Using temporary 使⽤了⽤临时表保存中间结果，MySQL在对查询结果排序时使⽤临时表。常⻅于排序order by和分组查询 group by。 Using index 表示相应的select操作中使⽤了覆盖索引（Covering Index），避免访问了表的数据⾏，效率不错。如 果同时出现using where，表明索引被⽤来执⾏索引键值的查找；如果没有同时出现using where，表明 索引⽤来读取数据⽽⾮执⾏查找动作。 Using join buffer 表明使⽤了连接缓存,⽐如说在查询的时候，多表join的次数⾮常多，那么将配置⽂件中的缓冲区的join buffer调⼤⼀些 \"]},\"20\":{\"h\":\"二、SQL优化\"},\"21\":{\"h\":\"注：SpringBoot配置sql监控\",\"t\":[\"server: port: 8888 spring: profiles: active: dev mvc: pathmatch: matching-strategy: ant_path_matcher # 全局日期格式 jackson: date-format: yyyy-MM-dd HH:mm:ss datasource: driver-class-name: com.mysql.cj.jdbc.Driver url: jdbc:mysql://localhost:3306/code?serverTimezone=Asia/Shanghai username: root password: kzkzkz type: com.alibaba.druid.pool.DruidDataSource ########## Druid连接池 配置 ########## druid: # 配置初始化大小、最小、最大 initial-size: 5 minIdle: 10 max-active: 20 # 配置获取连接等待超时的时间(单位：毫秒) max-wait: 60000 # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 time-between-eviction-runs-millis: 2000 # 配置一个连接在池中最小生存的时间，单位是毫秒 min-evictable-idle-time-millis: 600000 max-evictable-idle-time-millis: 900000 # 用来测试连接是否可用的SQL语句,默认值每种数据库都不相同,这是mysql validationQuery: select 1 # 应用向连接池申请连接，并且testOnBorrow为false时，连接池将会判断连接是否处于空闲状态，如果是，则验证这条连接是否可用 testWhileIdle: true # 如果为true，默认是false，应用向连接池申请连接时，连接池会判断这条连接是否是可用的 testOnBorrow: false # 如果为true（默认false），当应用使用完连接，连接池回收连接的时候会判断该连接是否还可用 testOnReturn: false # 是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle poolPreparedStatements: true # 要启用PSCache，必须配置大于0，当大于0时， poolPreparedStatements自动触发修改为true， # 在Druid中，不会存在Oracle下PSCache占用内存过多的问题， # 可以把这个数值配置大一些，比如说100 maxOpenPreparedStatements: 20 # 连接池中的minIdle数量以内的连接，空闲时间超过minEvictableIdleTimeMillis，则会执行keepAlive操作 keepAlive: true # Spring 监控，利用aop 对指定接口的执行时间，jdbc数进行记录 aop-patterns: \\\"com.feri.boot.dao.*\\\" ########### 启用内置过滤器（第一个 stat必须，否则监控不到SQL）########## filters: stat,wall,log4j2 # 自己配置监控统计拦截的filter filter: # 开启druiddatasource的状态监控 stat: enabled: true db-type: mysql # 开启慢sql监控，超过2s 就认为是慢sql，记录到日志中 log-slow-sql: true slow-sql-millis: 2000 # 日志监控，使用slf4j 进行日志输出 slf4j: enabled: true statement-log-error-enabled: true statement-create-after-log-enabled: false statement-close-after-log-enabled: false result-set-open-after-log-enabled: false result-set-close-after-log-enabled: false ########## 配置WebStatFilter，用于采集web关联监控的数据 ########## web-stat-filter: enabled: true # 启动 StatFilter url-pattern: /* # 过滤所有url exclusions: \\\"*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*\\\" # 排除一些不必要的url session-stat-enable: true # 开启session统计功能 session-stat-max-count: 1000 # session的最大个数,默认100 ########## 配置StatViewServlet（监控页面），用于展示Druid的统计信息 ########## stat-view-servlet: enabled: true # 启用StatViewServlet url-pattern: /druid/* # 访问内置监控页面的路径，内置监控页面的首页是/druid/index.html reset-enable: false # 不允许清空统计数据,重新计算 login-username: root # 配置监控页面访问密码 login-password: 666666 allow: 127.0.0.1 # 允许访问的地址，如果allow没有配置或者为空，则允许所有访问 deny: # 拒绝访问的地址，deny优先于allow，如果在deny列表中，就算在allow列表中，也会被拒绝 \",\"登录地址：http://localhost:8888/druid/sql.html\"]},\"22\":{\"h\":\"2.1 SQL执⾏顺序\",\"t\":[\"Mysql中⼀个查询语句的执⾏顺序： select distinct *或字段 from 表名 inner|left|right join 表名 on 条件 where 条件 group by 字段 having 条件 order by 字段 asc|desc limit 起始⾏索引,数量 依次出现的关键词的顺序：a.selectb.distinct (去重)c.fromd.join possible_keys 和 key possible_keys 显示可能应⽤在这张表中的索引，⼀个或多个。查询涉及到的字段上若存在索引，则该索 引将被列出，但不⼀定被查询实际使⽤。 key实际使⽤的索引，如果为NULL，则没有使⽤索引。（可能原因包括没有建⽴索引或索引失效） key_len 表示索引中使⽤的字节数，可通过该列计算查询中使⽤的索引的⻓度，在不损失精确性的情况下，⻓度越短 越好。 rows 根据表统计信息及索引选⽤情况，⼤致估算出找到所需的记录所需要读取的⾏数，也就是说，⽤的越少越好 Extra Using filesort 说明mysql会对数据使⽤⼀个外部的索引排序，⽽不是按照表内的索引顺序进⾏读取。MySQL中⽆法利⽤索 引完成的排序操作称为“⽂件排序”。 Using temporary 使⽤了⽤临时表保存中间结果，MySQL在对查询结果排序时使⽤临时表。常⻅于排序order by和分组查询 group by。 Using index 表示相应的select操作中使⽤了覆盖索引（Covering Index），避免访问了表的数据⾏，效率不错。如 果同时出现using where，表明索引被⽤来执⾏索引键值的查找；如果没有同时出现using where，表明 索引⽤来读取数据⽽⾮执⾏查找动作。 Using join buffer 表明使⽤了连接缓存,⽐如说在查询的时候，多表join的次数⾮常多，那么将配置⽂件中的缓冲区的join buffer调⼤⼀些\",\"e.onf.whereg.group byh.havingi.order byj.limit Mysql中的执⾏顺序：\",\"1.from 笛卡尔积计算 ⽣成虚拟表v1 笛卡尔积计算() 2.on 过滤数据 再次⽣成虚拟表v2 3.join 添加外部数据 v3 4.where 条件过滤 v4 5.group by 分组 6.聚合函数 avg max min sum count 7.having 条件过滤，可以使⽤聚合函数的结果或使⽤聚合函数 8.select 查询需要的字段 9.distinct 去重重复结果 10.order by 排序 11.limit 分⻚ \",\"笛卡尔积是什么？笛卡尔积乘积指在数学上，两个集合X和Y的笛卡尔积 (Cartesian product)，又称直积，表示 X x Y，第一个对象是 X 的成员而第二个对象是 Y 的所有可能有序对的其中一个成员。\",\"eg1: 假设集合A = {a,b}，集合B = {0,1,2}，则两个集合的笛卡尔积为： {(a,0),(a,1),(a,2),(b,0),(b,1),(b,2)} eg2: 设A,B为集合，用A中元素为第一元素，B中元素为第二元素构成有序对， 所有这样的有序对组成的集合叫做A与B的笛卡尔积，记作AxB. 笛卡尔积的符号化为： A×B={(x,y)|x∈A ∧ y∈B} 例如，A = {a,b}, B = {0,1,2}，则 A×B = {(a, 0), (a, 1), (a, 2), (b, 0), (b, 1), (b, 2)} B×A = {(0, a), (0, b), (1, a), (1, b), (2, a), (2, b)} 转载： http://t.csdn.cn/38tIL \",\"SQL优化三部曲：定位、分析、解决开发中遇到问题解决三部曲： **定位（⽇志、debug） ** **分析（根据异常，和定位的点，去分析代码） ** **解决（根据分析结果，因果而异） **\"]},\"23\":{\"h\":\"2.2 SQL优化之定位\",\"t\":[\"定位：找到执⾏慢的sql语句 ⽅式，任选其⼀：1.Mysql的慢查询⽇志 在mysql的配置⽂件中：windows:my.ini linux:my.cnf 每次只需要，查看slow.log⽇志⽂件，记录就是执⾏超过2秒的sql语句2.Spring AOP实现查询语句的记录 aop的环绕通知，去记录查询的sql语句的执⾏时间，如果执⾏超过2秒，就记录sql语句3.Druid的SQL监控 配置Druid的SQL监控，获取执⾏慢的SQL语句4.借助⼯具，软件实现 阿⾥云-Mysql等等\"]},\"24\":{\"h\":\"2.3 SQL优化之分析\",\"t\":[\"分析：根据执⾏慢的SQL语句，进⾏分析，找到慢的原因 汇总⼀些常⻅：\",\"1.SQL语句有业务逻辑，影响性能 2.SQL语句，联合查询的多表关系不是最短路径 3.SQL语句索引失效 4.SQL语句查询条件的顺序不对 5.Mysql并发量过⼤ 6.SQL语句对应的表的数据量太⼤ 7.SQL语句太⻓8.SQL语句查询条件函数计算\"]},\"25\":{\"h\":\"2.4 SQL优化之解决\",\"t\":[\"解决：对号⼊座，尝试处理1.SQL语句有业务逻辑，影响性能 拆分业务逻辑，可以把逻辑放到Java代码中解决，改SQL语句2.SQL语句，联合查询的多表关系不是最短路径 分析涉及到的多表关系，查看能不能找到最短路径，⼲掉没⽤的表连接3.SQL语句索引失效 想办法让索引⽣效，⽐如合理设计索引，采⽤联合索引，使⽤最左前缀原则，索引的数量、索引的字段4.SQL语句查询条件的顺序不对 on先执⾏，再执⾏where,最后执⾏having 所以可以把有些查询条件放到on那⾥进⾏筛选5.Mysql并发量过⼤ 2种⽅案：\",\"1.舍弃连接，数据库连接池，设置最⼤连接 2.搭建Mysql的集群（多主多从）-中间件解决 （Mycat、Sharding-Jdbc）6.SQL语句对应的表的数据量太⼤ 实现数据分⽚，采⽤第三⽅技术：Sharding-Jdbc7.SQL语句太⻓ 拆分为多个sql语句，在Java代码中整合数据8.SQL语句查询条件函数计算 避免在sql的查询条件中使⽤函数进⾏计算处理，可以考虑Java代码中实现数据处理 结合项⽬模块\"]},\"26\":{\"h\":\"2.5 常⽤的SQL优化⽅案\",\"t\":[\"1、你必须选择记录条数最少的表作为基础表 from 是从前往后检索的，所以要最少记录的表放在最前⾯ 2、采⽤⾃下⽽上的顺序解析WHERE⼦句,根据这个原理,表之间的连接必须写在其他WHERE条件之前, 那些 可以过滤掉最⼤数量记录的条件必须写在WHERE⼦句的末尾。同时在链接的表中能过滤的就应该先进⾏过 滤。 where是从后往前检索，所以能过滤最多数据的条件应放到最后。 3、SELECT⼦句中避免使⽤ '*' 4、尽量多使⽤COMMIT 5、计算记录条数时候，第⼀快：count(索引列)，第⼆快：count(*) 6、⽤WHERE⼦句替换HAVING⼦句 7、通过内部函数代替⾃定义函数提⾼SQL效率 8、使⽤表的别名(Alias) 9、⽤EXISTS替代IN 10、⽤NOT EXISTS替代NOT IN 11、⽤表连接替换EXISTS 12、⽤索引提⾼效率 13、尽量避免在索引列上使⽤计算， 包括在SELECT后⾯ WHERE后⾯等任何地⽅，因为在索引列上计算会导致索引失效。 14、避免在索引列上使⽤NOT 在索引列使⽤not会导致索引失效。 15、⽤>=替代> 16、⽤UNION替换OR (适⽤于索引列) 17、⽤IN来替换OR 18、避免在索引列上使⽤IS NULL和IS NOT NULL 19、总是使⽤索引的第⼀个列 20、尽量⽤UNION-ALL 替换UNION ( 如果有可能的话) 21、ORDER BY ⼦句只在两种严格的条件下使⽤索引. 22、避免改变索引列的类型 23、需要当⼼的WHERE⼦句 24、避免使⽤耗费资源的操作（如DISTINCT,UNION,MINUS,INTERSECT,ORDER BY等） \"]},\"27\":{\"h\":\"三、Mysql集群\",\"t\":[\"在⾼并发下、海量数据下，在所难免就要实现Mysql的集群搭建 Mysql本身可以实现主从复制，我们需要完成配置，就可以实现数据从主库⾃动到从库。\"]},\"28\":{\"h\":\"1. Sharding-JDBC实现Mysql集群\",\"t\":[\"Sharding-JDBC 是当当⽹开源的适⽤于微服务的分布式数据访问基础类库，完整的实现了分库分表，读 写分离和分布式主键功能，并初步实现了柔性事务。从 2016 年开源⾄今，在经历了整体架构的数次精 炼以及稳定性打磨后，如今它已积累了⾜够的底蕴。 ShardingSphere是⼀套开源的分布式数据库中间件解决⽅案组成的⽣态圈，它由Sharding-JDBC、 Sharding-Proxy 和 Sharding-Sidecar这3款相互独⽴的产品组成。https://shardingsphere.apache.org/document/current/cn/quick-start/shardingsphere-jdbc-quick\\u0002 start/ 1.maven配置\",\" <dependency> <groupId>org.apache.shardingsphere</groupId> <artifactId>shardingsphere-jdbc-core-spring-boot-starter</artifactId> <version>5.2.0</version> </dependency> \",\"2.application.yml\",\"spring: shardingsphere: mode: #1.配置模式 单机或集群 type: Standalone datasource: names: ds #2.配置数据源 根据实际情况 ds: driver-class-name: com.mysql.cj.jdbc.Driver url: jdbc:mysql://rm-bp1fi52ghqu598b39lo.mysql.rds.aliyuncs.com/db_login?serverTimezone=Asia/Shanghai username: self password: Tws123456 type: com.alibaba.druid.pool.DruidDataSource jackson: date-format: yyyy-MM-ss HH:mm:ss rules: #3.配置分片规则 sharding: #设置分片信息：水平分片：一库多表，垂直分片：多库 tables: t_user: actual-data-nodes: ds.t_user$->{0..2} table-strategy: standard: sharding-column: id sharding-algorithm-name: t-user-inline key-generate-strategy: column: id key-generator-name: snowflake binding-tables[0]: t_user sharding-algorithms: t-user-inline: type: INLINE props: algorithm-expression: t_user$->{id % 3} key-generators: snowflake: type: SNOWFLAKE \",\"\\n这⾥遇到⼀个bug:\\nSharding-jdbc使⽤Drud不能依赖druid-spring-boot-starter\\n只能依赖:druid,否则就会遇到⼀个坑，报 Property 'sqlSessionFactory' or 'sqlSessionTemplate'\\nare requi\\n后来查阅⽂档，官⽅⽂档，发现原来Sharding-jdbc4.0之后。就不能依赖这个包，会引起冲突。因为我\\n们使⽤的Sharding-jdbc5.0以后的版本\"]},\"29\":{\"h\":\"Mysql基础\"},\"30\":{\"h\":\"一、什么是SQL\",\"t\":[\"1.什么是SQL？ Structured Query Language：结构化查询语言 其实就是定义了操作所有关系型数据库的规则。每一种数据库操作的方式存在不一样的地方，称为“方言”。 2.SQL通用语法 1. SQL 语句可以单行或多行书写，以分号结尾。 2. 可使用空格和缩进来增强语句的可读性。 3. MySQL 数据库的 SQL 语句不区分大小写，关键字建议使用大写。 4. 3 种注释 * 单行注释: -- 注释内容 或 # 注释内容(mysql 特有) * 多行注释: /* 注释 */ 3. SQL分类 1) DDL(Data Definition Language)数据定义语言 用来定义数据库对象：数据库，表，列等。关键字：create, drop,alter 等 2) DML(Data Manipulation Language)数据操作语言 用来对数据库中表的数据进行增删改。关键字：insert, delete, update 等 3) DQL(Data Query Language)数据查询语言 用来查询数据库中表的记录(数据)。关键字：select, where 等 4) DCL(Data Control Language)数据控制语言(了解) 用来定义数据库的访问权限和安全级别，及创建用户。关键字：GRANT， REVOKE 等 \"]},\"31\":{\"h\":\"二、DDL:操作数据库、表 列\"},\"32\":{\"h\":\"操作数据库CRUD\"},\"33\":{\"h\":\"1 创建数据库\",\"t\":[\"创建 create\",\"1. 操作数据库：CRUD 1. C(Create):创建 * 创建数据库： * create database 数据库名称; * 创建数据库，判断不存在，再创建： * create database if not exists 数据库名称; * 创建数据库，并指定字符集 * create database 数据库名称 character set 字符集名; * 练习： 创建db4数据库，判断是否存在，并制定字符集为gbk * create database if not exists db4 character set gbk; \"]},\"34\":{\"h\":\"2 查询\",\"t\":[\"查询 show\",\"2. R(Retrieve)：查询 * 查询所有数据库的名称: * show databases; * 查询某个数据库的字符集:查询某个数据库的创建语句 * show create database 数据库名称; \"]},\"35\":{\"h\":\"3 修改\",\"t\":[\"修改 alter\",\"3. U(Update):修改 * 修改数据库的字符集 * alter database 数据库名称 character set 字符集名称; \"]},\"36\":{\"h\":\"4 删除\",\"t\":[\"删除 drop\",\"4. D(Delete):删除 * 删除数据库 * drop database 数据库名称; * 判断数据库存在，存在再删除 * drop database if exists 数据库名称; \"]},\"37\":{\"h\":\"5 使用\",\"t\":[\"5. 使用数据库 * 查询当前正在使用的数据库名称 * select database(); * 使用数据库 * use 数据库名称; \"]},\"38\":{\"h\":\"操作表CRUD\"},\"39\":{\"h\":\"1. 创建表\",\"t\":[\"创建表 create\",\"2. 操作表 1. C(Create):创建 1. 语法： create table 表名( 列名1 数据类型1, 列名2 数据类型2, .... 列名n 数据类型n ); * 注意：最后一列，不需要加逗号（,） * 数据库类型： 1. int：整数类型 * age int, 2. double:小数类型 * score double(5,2) 3. date:日期，只包含年月日，yyyy-MM-dd 4. datetime:日期，包含年月日时分秒 yyyy-MM-dd HH:mm:ss 5. timestamp:时间错类型 包含年月日时分秒 yyyy-MM-dd HH:mm:ss * 如果将来不给这个字段赋值，或赋值为null，则默认使用当前的系统时间，来自动赋值 6. varchar：字符串 * name varchar(20):姓名最大20个字符 * zhangsan 8个字符 张三 2个字符 * 创建表 create table student( id int, name varchar(32), age int , score double(4,1), birthday date, insert_time timestamp ); * 复制表： * create table 表名 like 被复制的表名; \"]},\"40\":{\"h\":\"2. 查询表\",\"t\":[\"查询 show\",\"2. R(Retrieve)：查询 * 查询某个数据库中所有的表名称 * show tables; * 查询表结构 * desc 表名; \"]},\"41\":{\"h\":\"3. 修改表\",\"t\":[\"修改表名 alter\",\"3. U(Update):修改 1. 修改表名 alter table 表名 rename to 新的表名; 2. 修改表的字符集 alter table 表名 character set 字符集名称; 3. 添加一列 alter table 表名 add 列名 数据类型; 4. 修改列名称 类型 alter table 表名 change 列名 新列别 新数据类型; alter table 表名 modify 列名 新数据类型; 5. 删除列 alter table 表名 drop 列名; \"]},\"42\":{\"h\":\"4. 删除表\",\"t\":[\"删除表 drop table 表名;\",\"4. D(Delete):删除 * drop table 表名; * drop table if exists 表名 ; \"]},\"43\":{\"h\":\"三、 DML：增删改表中数据\"},\"44\":{\"h\":\"1. 添加数据\",\"t\":[\"添加数据：insert into 表名(列名1,列名2,...列名n) values(值1,值2,...值n);\",\"1. 添加数据： * 语法： * insert into 表名(列名1,列名2,...列名n) values(值1,值2,...值n); * 注意： 1. 列名和值要一一对应。 2. 如果表名后，不定义列名，则默认给所有列添加值 insert into 表名 values(值1,值2,...值n); 3. 除了数字类型，其他类型需要使用引号(单双都可以)引起来 \"]},\"45\":{\"h\":\"2. 删除数据\",\"t\":[\"删除数据： delete from 表名 [where 条件]\",\"2. 删除数据： * 语法： * delete from 表名 [where 条件] * 注意： 1. 如果不加条件，则删除表中所有记录。 2. 如果要删除所有记录 1. delete from 表名; -- 不推荐使用。有多少条记录就会执行多少次删除操作 2. TRUNCATE TABLE 表名; -- 推荐使用，效率更高 先删除表，然后再创建一张一样的表。 \"]},\"46\":{\"h\":\"3. 修改数据\",\"t\":[\"3. 修改数据： * 语法： * update 表名 set 列名1 = 值1, 列名2 = 值2,... [where 条件]; * 注意： 1. 如果不加任何条件，则会将表中所有记录全部修改。 \"]},\"47\":{\"h\":\"四、DQL：查询表中的记录\",\"t\":[\"1. 语法： select 字段列表 from 表名列表 where 条件列表 group by 分组字段 having 分组之后的条件限定 order by 排序 limit 分页限定 \"]},\"48\":{\"h\":\"1 基础查询\",\"t\":[\"基础查询 select 字段名1，字段名2... from 表名；\",\"或者 select * frome 表名； 查询当前表的所有字段\",\"2. 基础查询 1. 多个字段的查询 select 字段名1，字段名2... from 表名； * 注意： * 如果查询所有字段，则可以使用*来替代字段列表。 2. 去除重复： * distinct 3. 计算列 * 一般可以使用四则运算计算一些列的值。（一般只会进行数值型的计算） * ifnull(表达式1,表达式2)：null参与的运算，计算结果都为null * 表达式1：哪个字段需要判断是否为null * 如果该字段为null后的替换值。 4. 起别名： * as：as也可以省略 \"]},\"49\":{\"h\":\"2 条件查询\",\"t\":[\"条件查询 where子句后跟条件\",\"3. 条件查询 1. where子句后跟条件 2. 运算符 * > 、< 、<= 、>= 、= 、<> * BETWEEN...AND * IN( 集合) * LIKE：模糊查询 * 占位符： * _:单个任意字符 * %：多个任意字符 * IS NULL * and 或 && * or 或 || * not 或 ! 枚举 in 满足任意一个条件 or -- 查询年龄大于20岁 SELECT * FROM student WHERE age > 20; SELECT * FROM student WHERE age >= 20; -- 查询年龄等于20岁 SELECT * FROM student WHERE age = 20; -- 查询年龄不等于20岁 SELECT * FROM student WHERE age != 20; SELECT * FROM student WHERE age <> 20; -- 查询年龄大于等于20 小于等于30 SELECT * FROM student WHERE age >= 20 && age <=30; SELECT * FROM student WHERE age >= 20 AND age <=30; SELECT * FROM student WHERE age BETWEEN 20 AND 30; -- 查询年龄22岁，18岁，25岁的信息 SELECT * FROM student WHERE age = 22 OR age = 18 OR age = 25 SELECT * FROM student WHERE age IN (22,18,25); -- 查询英语成绩为null SELECT * FROM student WHERE english = NULL; -- 不对的。null值不能使用 = （!=） 判断 SELECT * FROM student WHERE english IS NULL; -- 查询英语成绩不为null SELECT * FROM student WHERE english IS NOT NULL; \"]},\"50\":{\"h\":\"3.分支条件查询\",\"t\":[\"语法： case when 条件1 then 结果1 when 条件2 then 结果2 when 条件3 then 结果3 else 结果 end \"]},\"51\":{\"h\":\"4. 时间查询\",\"t\":[\"语法：SELECT [ 时间函数 ( [参数列表] ) ]\",\"时间函数\",\"描述\",\"sysdate)\",\"当前系统时间（日、月、年、时、分、秒）\",\"curdate()\",\"获取当前日期\",\"curtime()\",\"获取当前时间\",\"week(DATE)\",\"获取指定日期为一年中的第几周\",\"year(DATE)\",\"获取指定日期的年份\",\"hour(TIME)\",\"获取指定时间的小时值\",\"minute(TIME)\",\"获取时间的分钟值\",\"datediff(DATE1,DATE2)\",\"获取DATE1 和 DATE2 之间相隔的天数\",\"adddtae(DATE,N)\",\"计算DATE 加上 N 天后的日期\"]},\"52\":{\"h\":\"5.字串查询\",\"t\":[\"语法： SELECT [ 字符串函数 ( [参数列表]) ]\",\"字符串函数\",\"说明\",\"concat(str1,str2,str....)\",\"将 多个字符串连接\",\"insert(str,pos,len,newStr)\",\"将str 中指定 pos 位置开始 len 长度的内容替换为 newStr\",\"lower(str)\",\"将指定字符串转换为小写\",\"upper(str)\",\"将指定字符串转换为大写\",\"substring(str,num,len)\",\"将str 字符串指定num位置开始截取 len 个内容\"]},\"53\":{\"h\":\"DQL:查询语句\"},\"54\":{\"h\":\"1. 排序查询\",\"t\":[\"排序查询 order by\",\"1. 排序查询 * 语法：order by 子句 * order by 排序字段1 排序方式1 ， 排序字段2 排序方式2... * 排序方式： * ASC：升序，默认的。 * DESC：降序。 * 注意： * 如果有多个排序条件，则当前边的条件值一样时，才会判断第二条件。 \"]},\"55\":{\"h\":\"2. 聚合函数\",\"t\":[\"聚合函数：将一列数据作为一个整体，进行纵向的计算\",\" 1. count：计算个数 1. 一般选择非空的列：主键 2. count(*) 2. max：计算最大值 3. min：计算最小值 4. sum：计算和 5. avg：计算平均值 * 注意：聚合函数的计算，排除null值。 解决方案： 1. 选择不包含非空的列进行计算 2. IFNULL函数 \"]},\"56\":{\"h\":\"3. 分组查询\",\"t\":[\"分组查询:\",\"语法：group by 分组字段\",\" 2. 注意： 1. 分组之后查询的字段：分组字段、聚合函数 2. where 和 having 的区别？ 1. where 在分组之前进行限定，如果不满足条件，则不参与分组。having在分组之后进行限定，如果不满足结果，则不会被查询出来 2. where 后不可以跟聚合函数，having可以进行聚合函数的判断。 -- 按照性别分组。分别查询男、女同学的平均分 SELECT sex , AVG(math) FROM student GROUP BY sex; -- 按照性别分组。分别查询男、女同学的平均分,人数 SELECT sex , AVG(math),COUNT(id) FROM student GROUP BY sex; -- 按照性别分组。分别查询男、女同学的平均分,人数 要求：分数低于70分的人，不参与分组 SELECT sex , AVG(math),COUNT(id) FROM student WHERE math > 70 GROUP BY sex; -- 按照性别分组。分别查询男、女同学的平均分,人数 要求：分数低于70分的人，不参与分组,分组之后。人数要大于2个人 SELECT sex , AVG(math),COUNT(id) FROM student WHERE math > 70 GROUP BY sex HAVING COUNT(id) > 2; SELECT sex , AVG(math),COUNT(id) 人数 FROM student WHERE math > 70 GROUP BY sex HAVING 人数 > 2; \"]},\"57\":{\"h\":\"4. 分页查询\",\"t\":[\"分页查询 limit\",\"4. 分页查询 1. 语法：limit 开始的索引,每页查询的条数; 2. 公式：开始的索引 = （当前的页码 - 1） * 每页显示的条数 -- 每页显示3条记录 SELECT * FROM student LIMIT 0,3; -- 第1页 SELECT * FROM student LIMIT 3,3; -- 第2页 SELECT * FROM student LIMIT 6,3; -- 第3页 3. limit 是一个MySQL\\\"方言\\\" \"]},\"58\":{\"h\":\"5. 子查询 （作为条件判断）\",\"t\":[\"select 列名 from 表名 where 条件（子查询结果）\",\"注意 ：\",\" 1. 将子查询的结果作为外部查询的一张表，做第二次查询 2. 子查询作为临时表，为其赋予一个临时表名 \"]},\"59\":{\"h\":\"6. 合并查询\",\"t\":[\"合并两张表的结果（去除重复记录）\",\"语法： select * from 表名1 union select * from 表名2\",\"注意： 合并结果的两张表，列数必须相同，列的数据类型可以不同\",\"#合并两张表的结果，去除重复记录 SELECT * FROM t1 UNION SELECT * FROM t2; \",\"合并向张表的结果（保留重复记录）\",\"语法：select * from 表名1 unino all select * from 表名2\",\"#合并两张表的结果，不去除重复记录（显示所有） SELECT * FROM t1 UNION ALL SELECT * FROM t2; \"]},\"60\":{\"h\":\"五、 约束\",\"t\":[\"概念： 对表中的数据进行限定，保证数据的正确性、有效性和完整性。\",\"分类： \",\"主键约束：primary key\",\"非空约束：not null\",\"唯一约束：unique\",\"外键约束：foreign key\"]},\"61\":{\"h\":\"1. 非空约束\",\"t\":[\"非空约束：not null，某一列的值不能为null\",\"* 1. 创建表时添加约束 CREATE TABLE stu( id INT, NAME VARCHAR(20) NOT NULL -- name为非空 ); 2. 创建表完后，添加非空约束 ALTER TABLE stu MODIFY NAME VARCHAR(20) NOT NULL; 3. 删除name的非空约束 ALTER TABLE stu MODIFY NAME VARCHAR(20); \"]},\"62\":{\"h\":\"2. 唯一约束\",\"t\":[\"唯一约束：unique，某一列的值不能重复\",\"注意： \",\"唯一约束可以有NULL值，但是只能有一条记录为null\",\"在创建表时，添加唯一约束\",\" CREATE TABLE stu( id INT, phone_number VARCHAR(20) UNIQUE -- 手机号 ); 3. 删除唯一约束 ALTER TABLE stu DROP INDEX phone_number; 4. 在表创建完后，添加唯一约束 ALTER TABLE stu MODIFY phone_number VARCHAR(20) UNIQUE; \"]},\"63\":{\"h\":\"3. 主键约束\",\"t\":[\"主键约束：primary key\",\"1.注意:\",\"含义：非空且唯一\",\"一张表只能有一个字段为主键\",\"主键就是表中记录的唯一标识\",\"2. 在创建表时，添加主键约束 create table stu( id int primary key,-- 给id添加主键约束 name varchar(20) ); 3. 删除主键 -- 错误 alter table stu modify id int ; ALTER TABLE stu DROP PRIMARY KEY; 4. 创建完表后，添加主键 ALTER TABLE stu MODIFY id INT PRIMARY KEY; 5. 自动增长： 1. 概念：如果某一列是数值类型的，使用 auto_increment 可以来完成值得自动增长 2. 在创建表时，添加主键约束，并且完成主键自增长 create table stu( id int primary key auto_increment,-- 给id添加主键约束 name varchar(20) ); 3. 删除自动增长 ALTER TABLE stu MODIFY id INT; 4. 添加自动增长 ALTER TABLE stu MODIFY id INT AUTO_INCREMENT; \"]},\"64\":{\"h\":\"4. 外键约束\",\"t\":[\"外键约束 foreign key\",\"* 外键约束：foreign key,让表于表产生关系，从而保证数据的正确性。 1. 在创建表时，可以添加外键 * 语法： create table 表名( .... 外键列u constraint 外键名称 foreign key (外键列名称) references 主表名称(主表列名称) ); 2. 删除外键 ALTER TABLE 表名 DROP FOREIGN KEY 外键名称; 3. 创建表之后，添加外键 ALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY (外键字段名称) REFERENCES 主表名称(主表列名称); 4. 级联操作 1. 添加级联操作 语法：ALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY (外键字段名称) REFERENCES 主表名称(主表列名称) ON UPDATE CASCADE ON DELETE CASCADE ; 2. 分类： 1. 级联更新：ON UPDATE CASCADE 2. 级联删除：ON DELETE CASCADE \"]},\"65\":{\"h\":\"六、多表查询\"},\"66\":{\"h\":\"1.内连接查询\"},\"67\":{\"h\":\"1.1 内连接查询：\",\"t\":[\" 1. 从哪些表中查询数据 2. 条件是什么 3. 查询哪些字段 \",\"1. 内连接查询： 1. 隐式内连接：使用where条件消除无用数据 * 例子： -- 查询员工表的名称，性别。部门表的名称 SELECT t1.name, -- 员工表的姓名 t1.gender,-- 员工表的性别 t2.name -- 部门表的名称 FROM emp t1, dept t2 WHERE t1.`dept_id` = t2.`id`; \"]},\"68\":{\"h\":\"1.2 显示内连接：\",\"t\":[\"显式内连接：\",\"语法：\",\"​ select 字段列表 from 表名1 [inner] join 表名2 on 条件\",\"例如： * SELECT * FROM emp JOIN dept ON emp.`dept_id` = dept.`id`; \"]},\"69\":{\"h\":\"2. 外连接查询：\"},\"70\":{\"h\":\"2.1 左外连接：\",\"t\":[\"语法：select 字段列表 from 表1 left [outer] join 表2 on 条件；\",\"查询的是左表所有数据以及其交集部分。\",\"例子： -- 查询所有员工信息，如果员工有部门，则查询部门名称，没有部门，则不显示部门名称 SELECT t1.*,t2.`name` FROM emp t1 LEFT JOIN dept t2 ON例子： -- 查询所有员工信息，如果员工有部门，则查询部门名称，没有部门，则不显示部门名称 SELECT t1.*,t2.`name` FROM emp t1 LEFT JOIN dept t2 ONt1.`dept_id` = t2.`id`; \"]},\"71\":{\"h\":\"2.2 右外连接：\",\"t\":[\"语法：\",\"​ select 字段列表 from 表1 right [outer] join 表2 on 条件； ​ 查询的是右表所有数据以及其交集部分。\",\"例子： SELECT * FROM dept t2 RIGHT JOIN emp t1 ON t1.`dept_id` = t2.`id`; \"]},\"72\":{\"h\":\"3. 子查询\",\"t\":[\"子查询：（作为判断条件）\",\"​ 语法： select 列名 from 表名 where 条件 (子查询结果)\",\"注意： 将子查询一行一列的结果作为外部查询的条件做第二次查询\",\"​ 子查询得到的结果 才能作为外部查询的等职判断条件或不等值条件判断\",\"​\",\"子查询： （作为枚举查询条件）\",\"​ 语法: select 列名 from 表名 where 列名 in（子查询结果）\",\"子查询: (作为一张表)\",\"​ 语法： select 列明 from (子查询的结果集) whrer 条件\",\"注意将子查询 多行多列 的结果作为外部查询的一张表 做第二次查询\",\"子表查询作为临时表，为其赋予一个临时表名\"]},\"73\":{\"h\":\"七、事务\"},\"74\":{\"h\":\"1.事务的基本介绍\",\"t\":[\"概念：\",\"如果一个包含多个步骤的业务操作，被事务管理，那么这些操作要么同时成功，要么同时失败。\",\"操作:\",\"​ 1.开启事务： start transaction;\",\"​ 2.回滚：rollback;\",\"​ 3.提交：commit;\",\"3.列子:\",\"CREATE TABLE account ( id INT PRIMARY KEY AUTO_INCREMENT, NAME VARCHAR(10), balance DOUBLE ); -- 添加数据 INSERT INTO account (NAME, balance) VALUES ('zhangsan', 1000), ('lisi', 1000); SELECT * FROM account; UPDATE account SET balance = 1000; -- 张三给李四转账 500 元 -- 0. 开启事务 START TRANSACTION; -- 1. 张三账户 -500 UPDATE account SET balance = balance - 500 WHERE NAME = 'zhangsan'; -- 2. 李四账户 +500 -- 出错了... UPDATE account SET balance = balance + 500 WHERE NAME = 'lisi'; -- 发现执行没有问题，提交事务 COMMIT; -- 发现出问题了，回滚事务 ROLLBACK; \",\"MySQL数据库中事务默认自动提交\",\"​ 事务提交的两种方式： ​ * 自动提交： ​ 1. mysql就是自动提交的 ​ 2. 一条DML(增删改)语句会自动提交一次事务。 ​ * 手动提交： ​ 1.Oracle 数据库默认是手动提交事务 ​ 2. 需要先开启事务，再提交 ​ * 修改事务的默认提交方式： ​ 1. 查看事务的默认提交方式：SELECT @@autocommit; -- 1 代表自动提交 0 代表手动提交 ​ 2. 修改默认提交方式： set @@autocommit = 0;\"]},\"75\":{\"h\":\"2. 事务的四大特征：\",\"t\":[\"事务的四大特征：\",\"原子性：是不可分割的最小操作单位，要么同时成功，要么同时失败。\",\"持久性：当事务提交或回滚后，数据库会持久化的保存数据。\",\"隔离性：多个事务之间。相互独立。\",\"一致性：事务操作前后，数据总量不变\"]},\"76\":{\"h\":\"3. 事务的隔离级别（了解）\",\"t\":[\"概念：多个事务之间隔离的，相互独立的。但是如果多个事务操作同一批数据，则会引发一些问题，设置不同的隔离级别就可以解决这些问题。 \",\"存在问题：\",\"脏读：一个事务，读取到另一个事务中没有提交的数据\",\"不可重复读(虚读)：在同一个事务中，两次读取到的数据不一样。\",\"幻读：一个事务操作(DML)数据表中所有记录，另一个事务添加了一条数据，则第一个事务查询不到自己的修改。\",\"隔离级别：\",\"read uncommitted：读未提交 \",\"产生的问题：脏读、不可重复读、幻读\",\"read committed：读已提交 （Oracle） \",\"产生的问题：不可重复读、幻读\",\"repeatable read：可重复读 （MySQL默认） \",\"产生的问题：幻读\",\"serializable：串行化 \",\"可以解决所有的问题\",\"注意：隔离级别从小到大安全性越来越高，但是效率越来越低\",\"数据库查询隔离级别： \",\"select @@tx_isolation;\",\"数据库设置隔离级别： \",\"set global transaction isolation level 级别字符串;\",\"​ 演示\",\"set global transaction isolation level read uncommitted; start transaction; -- 转账操作 update account set balance = balance - 500 where id = 1; update account set balance = balance + 500 where id = 2; \"]},\"77\":{\"h\":\"八、DCL\",\"t\":[\"* SQL分类： 1. DDL：操作数据库和表 2. DML：增删改表中数据 3. DQL：查询表中数据 4. DCL：管理用户，授权 * DBA：数据库管理员 * DCL：管理用户，授权 1. 管理用户 1. 添加用户： * 语法：CREATE USER '用户名'@'主机名' IDENTIFIED BY '密码'; 2. 删除用户： * 语法：DROP USER '用户名'@'主机名'; 3. 修改用户密码： UPDATE USER SET PASSWORD = PASSWORD('新密码') WHERE USER = '用户名'; UPDATE USER SET PASSWORD = PASSWORD('abc') WHERE USER = 'lisi'; SET PASSWORD FOR '用户名'@'主机名' = PASSWORD('新密码'); SET PASSWORD FOR 'root'@'localhost' = PASSWORD('123'); * mysql中忘记了root用户的密码？ 1. cmd -- > net stop mysql 停止mysql服务 * 需要管理员运行该cmd 2. 使用无验证方式启动mysql服务： mysqld --skip-grant-tables 3. 打开新的cmd窗口,直接输入mysql命令，敲回车。就可以登录成功 4. use mysql; 5. update user set password = password('你的新密码') where user = 'root'; 6. 关闭两个窗口 7. 打开任务管理器，手动结束mysqld.exe 的进程 8. 启动mysql服务 9. 使用新密码登录。 4. 查询用户： -- 1. 切换到mysql数据库 USE myql; -- 2. 查询user表 SELECT * FROM USER; * 通配符： % 表示可以在任意主机使用用户登录数据库 2. 权限管理： 1. 查询权限： -- 查询权限 SHOW GRANTS FOR '用户名'@'主机名'; SHOW GRANTS FOR 'lisi'@'%'; 2. 授予权限： -- 授予权限 grant 权限列表 on 数据库名.表名 to '用户名'@'主机名'; -- 给张三用户授予所有权限，在任意数据库任意表上 GRANT ALL ON *.* TO 'zhangsan'@'localhost'; 3. 撤销权限： -- 撤销权限： revoke 权限列表 on 数据库名.表名 from '用户名'@'主机名'; REVOKE UPDATE ON db3.`account` FROM 'lisi'@'%'; \"]},\"78\":{\"h\":\"九、 数据库的设计\",\"t\":[\"多表之间的关系\",\"1. 多表之间的关系 1. 分类： 1. 一对一(了解)： * 如：人和身份证 * 分析：一个人只有一个身份证，一个身份证只能对应一个人 2. 一对多(多对一)： * 如：部门和员工 * 分析：一个部门有多个员工，一个员工只能对应一个部门 3. 多对多： * 如：学生和课程 * 分析：一个学生可以选择很多门课程，一个课程也可以被很多学生选择 2. 实现关系： 1. 一对多(多对一)： * 如：部门和员工 * 实现方式：在多的一方建立外键，指向一的一方的主键。 2. 多对多： * 如：学生和课程 * 实现方式：多对多关系实现需要借助第三张中间表。中间表至少包含两个字段，这两个字段作为第三张表的外键，分别指向两张表的主键 3. 一对一(了解)： * 如：人和身份证 * 实现方式：一对一关系实现，可以在任意一方添加唯一外键指向另一方的主键。 3. 案例 -- 创建旅游线路分类表 tab_category -- cid 旅游线路分类主键，自动增长 -- cname 旅游线路分类名称非空，唯一，字符串 100 CREATE TABLE tab_category ( cid INT PRIMARY KEY AUTO_INCREMENT, cname VARCHAR(100) NOT NULL UNIQUE ); -- 创建旅游线路表 tab_route /* rid 旅游线路主键，自动增长 rname 旅游线路名称非空，唯一，字符串 100 price 价格 rdate 上架时间，日期类型 cid 外键，所属分类 */ CREATE TABLE tab_route( rid INT PRIMARY KEY AUTO_INCREMENT, rname VARCHAR(100) NOT NULL UNIQUE, price DOUBLE, rdate DATE, cid INT, FOREIGN KEY (cid) REFERENCES tab_category(cid) ); /*创建用户表 tab_user uid 用户主键，自增长 username 用户名长度 100，唯一，非空 password 密码长度 30，非空 name 真实姓名长度 100 birthday 生日 sex 性别，定长字符串 1 telephone 手机号，字符串 11 email 邮箱，字符串长度 100 */ CREATE TABLE tab_user ( uid INT PRIMARY KEY AUTO_INCREMENT, username VARCHAR(100) UNIQUE NOT NULL, PASSWORD VARCHAR(30) NOT NULL, NAME VARCHAR(100), birthday DATE, sex CHAR(1) DEFAULT '男', telephone VARCHAR(11), email VARCHAR(100) ); /* 创建收藏表 tab_favorite rid 旅游线路 id，外键 date 收藏时间 uid 用户 id，外键 rid 和 uid 不能重复，设置复合主键，同一个用户不能收藏同一个线路两次 */ CREATE TABLE tab_favorite ( rid INT, -- 线路id DATE DATETIME, uid INT, -- 用户id -- 创建复合主键 PRIMARY KEY(rid,uid), -- 联合主键 FOREIGN KEY (rid) REFERENCES tab_route(rid), FOREIGN KEY(uid) REFERENCES tab_user(uid) ); \",\"2.数据库设计的范式\",\"2. 数据库设计的范式 * 概念：设计数据库时，需要遵循的一些规范。要遵循后边的范式要求，必须先遵循前边的所有范式要求 设计关系数据库时，遵从不同的规范要求，设计出合理的关系型数据库，这些不同的规范要求被称为不同的范式，各种范式呈递次规范，越高的范式数据库冗余越小。 目前关系数据库有六种范式：第一范式（1NF）、第二范式（2NF）、第三范式（3NF）、巴斯-科德范式（BCNF）、第四范式(4NF）和第五范式（5NF，又称完美范式）。 * 分类： 1. 第一范式（1NF）：每一列都是不可分割的原子数据项 2. 第二范式（2NF）：在1NF的基础上，非码属性必须完全依赖于码（在1NF基础上消除非主属性对主码的部分函数依赖） * 几个概念： 1. 函数依赖：A-->B,如果通过A属性(属性组)的值，可以确定唯一B属性的值。则称B依赖于A 例如：学号-->姓名。 （学号，课程名称） --> 分数 2. 完全函数依赖：A-->B， 如果A是一个属性组，则B属性值得确定需要依赖于A属性组中所有的属性值。 例如：（学号，课程名称） --> 分数 3. 部分函数依赖：A-->B， 如果A是一个属性组，则B属性值得确定只需要依赖于A属性组中某一些值即可。 例如：（学号，课程名称） -- > 姓名 4. 传递函数依赖：A-->B, B -- >C . 如果通过A属性(属性组)的值，可以确定唯一B属性的值，在通过B属性（属性组）的值可以确定唯一C属性的值，则称 C 传递函数依赖于A 例如：学号-->系名，系名-->系主任 5. 码：如果在一张表中，一个属性或属性组，被其他所有属性所完全依赖，则称这个属性(属性组)为该表的码 例如：该表中码为：（学号，课程名称） * 主属性：码属性组中的所有属性 * 非主属性：除过码属性组的属性 3. 第三范式（3NF）：在2NF基础上，任何非主属性不依赖于其它非主属性（在2NF基础上消除传递依赖） \"]},\"79\":{\"h\":\"常用单词\",\"t\":[\"databases 数据库\",\"character 角色\",\"exists 目标存在\",\"alter 改变\",\"insert 增\",\"delete 删\",\"update 更新\",\"select 选择\",\"between 在两者之间\",\"count 计数\",\"avg 平均\",\"group by 分组\",\"HAVING 分组之后过滤 (具有)\",\"order by 排序\",\"asc 升序\",\"desc 降序\",\"limit 限度(分页)\",\"concat 合并多个数组(拼接字符串)\",\"lower 降低\",\"upper 上面\",\"lpad 左填充 rpad 右填充\",\"ceil 向上取整\",\"floor 地板\",\"rand 随机数\",\"round 四舍五入\",\"curdate 当前日期\",\"curtime 当前时间\",\"now() 现在\",\"year 年\",\"month 月\",\"day 天\",\"interval 间隔\",\"datediff 两日期差\",\"unique 唯一\",\"primarykey 主键\",\"default 默认\",\"check 检查\",\"foreign key 外键\",\"auto_increment 自增\",\"constraint 约束\",\"references 参考\",\"restrict 限制\",\"cascade 级联\",\"action 行为\"]},\"80\":{\"h\":\"Database\",\"t\":[\"目录\",\"Mysql集群\",\"MysqlBasic\",\"Mysql\"]},\"81\":{\"h\":\"功能库\",\"t\":[\"功能库\",\"常见功能\"]},\"82\":{\"h\":\"工具类\"},\"83\":{\"h\":\"一、二维码图片识别工具类\",\"t\":[\".二维码图片识别工具类\",\"import com.google.zxing.*; import com.google.zxing.client.j2se.BufferedImageLuminanceSource; import com.google.zxing.common.HybridBinarizer; import com.google.zxing.multi.qrcode.QRCodeMultiReader; import javax.imageio.ImageIO; import java.awt.image.BufferedImage; import java.io.File; import java.io.IOException; import java.util.HashMap; import java.util.Map; import static org.springframework.data.redis.connection.util.DecodeUtils.decodeMultiple; public class QRCodeUtils{ /** * 解析二维码,此方法解析一个路径的二维码图片 * path:图片路径 */ public static String deEncodeByPath(String path) { String content = null; BufferedImage image; try { image = ImageIO.read(new File(path)); LuminanceSource source = new BufferedImageLuminanceSource(image); Binarizer binarizer = new HybridBinarizer(source); BinaryBitmap binaryBitmap = new BinaryBitmap(binarizer); Map<DecodeHintType, Object> hints = new HashMap<DecodeHintType, Object>(); hints.put(DecodeHintType.CHARACTER_SET, \\\"UTF-8\\\"); Result result = new MultiFormatReader().decode(binaryBitmap, hints);//解码 System.out.println(\\\"图片中内容： \\\"); System.out.println(\\\"content： \\\" + result.getText()); content = result.getText(); } catch (IOException e) { e.printStackTrace(); } catch (NotFoundException e) { //这里判断如果识别不了带LOGO的图片，重新添加上一个属性 try { image = ImageIO.read(new File(path)); LuminanceSource source = new BufferedImageLuminanceSource(image); Binarizer binarizer = new HybridBinarizer(source); BinaryBitmap binaryBitmap = new BinaryBitmap(binarizer); Map<DecodeHintType, Object> hints = new HashMap<DecodeHintType, Object>(); //设置编码格式 hints.put(DecodeHintType.CHARACTER_SET, \\\"UTF-8\\\"); //设置优化精度 hints.put(DecodeHintType.TRY_HARDER, Boolean.TRUE); //设置复杂模式开启（我使用这种方式就可以识别微信的二维码了） hints.put(DecodeHintType.PURE_BARCODE,Boolean.TYPE); Result result = new MultiFormatReader().decode(binaryBitmap, hints);//解码 System.out.println(\\\"图片中内容： \\\"); System.out.println(\\\"content： \\\" + result.getText()); content = result.getText(); } catch (Exception e1) { e1.printStackTrace(); } } return content; } /** * 同时识别多个二维码 * path:图片路径 * * @param path 路径 * @return {@link String} */ public static String duo (String path) { decodeMultiple(); String content = null; BufferedImage image; try { image = ImageIO.read(new File(path)); LuminanceSource source = new BufferedImageLuminanceSource(image); Binarizer binarizer = new HybridBinarizer(source); BinaryBitmap binaryBitmap = new BinaryBitmap(binarizer); Map<DecodeHintType, Object> hints = new HashMap<DecodeHintType, Object>(); hints.put(DecodeHintType.CHARACTER_SET, \\\"UTF-8\\\"); // Result result = new MultiFormatReader().decode(binaryBitmap, hints);//解码 Result[] results = new QRCodeMultiReader().decodeMultiple(binaryBitmap, hints); System.out.println(\\\"图片中内容： \\\"); for (int i = 0; i < results.length; i++) { System.out.println(\\\"第\\\"+i+\\\"个二维码： \\\" + results[i].getText()+\\\"\\\\n\\\"); content = \\\"第\\\"+i+\\\"个二维码： \\\" + results[i].getText()+\\\"\\\\n\\\"; } return content; }catch (Exception e){ return \\\"错误\\\"; } } public static void main(String [] args){ deEncodeByPath(\\\"C:\\\\\\\\home\\\\\\\\test.jpg\\\");//二维码图片路径 duo(\\\"C:\\\\\\\\home\\\\\\\\test.jpg\\\"); } } \"]},\"84\":{\"h\":\"二、springUtils\",\"t\":[\"import org.springframework.aop.framework.AopContext; import org.springframework.beans.BeansException; import org.springframework.beans.factory.NoSuchBeanDefinitionException; import org.springframework.beans.factory.config.BeanFactoryPostProcessor; import org.springframework.beans.factory.config.ConfigurableListableBeanFactory; import org.springframework.stereotype.Component; /** * spring工具类 方便在非spring管理环境中获取bean */ @Component public final class SpringUtils implements BeanFactoryPostProcessor { /** Spring应用上下文环境 */ private static ConfigurableListableBeanFactory beanFactory; @Override public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException { SpringUtils.beanFactory = beanFactory; } /** * 获取对象 * * @param name * @return Object 一个以所给名字注册的bean的实例 * @throws org.springframework.beans.BeansException * */ @SuppressWarnings(\\\"unchecked\\\") public static <T> T getBean(String name) throws BeansException { return (T) beanFactory.getBean(name); } /** * 获取类型为requiredType的对象 * * @param clz * @return * @throws org.springframework.beans.BeansException * */ public static <T> T getBean(Class<T> clz) throws BeansException { T result = (T) beanFactory.getBean(clz); return result; } /** * 如果BeanFactory包含一个与所给名称匹配的bean定义，则返回true * * @param name * @return boolean */ public static boolean containsBean(String name) { return beanFactory.containsBean(name); } /** * 判断以给定名字注册的bean定义是一个singleton还是一个prototype。 如果与给定名字相应的bean定义没有被找到，将会抛出一个异常（NoSuchBeanDefinitionException） * * @param name * @return boolean * @throws org.springframework.beans.factory.NoSuchBeanDefinitionException * */ public static boolean isSingleton(String name) throws NoSuchBeanDefinitionException { return beanFactory.isSingleton(name); } /** * @param name * @return Class 注册对象的类型 * @throws org.springframework.beans.factory.NoSuchBeanDefinitionException * */ public static Class<?> getType(String name) throws NoSuchBeanDefinitionException { return beanFactory.getType(name); } /** * 如果给定的bean名字在bean定义中有别名，则返回这些别名 * * @param name * @return * @throws org.springframework.beans.factory.NoSuchBeanDefinitionException * */ public static String[] getAliases(String name) throws NoSuchBeanDefinitionException { return beanFactory.getAliases(name); } /** * 获取aop代理对象 * * @param invoker * @return */ @SuppressWarnings(\\\"unchecked\\\") public static <T> T getAopProxy(T invoker) { return (T) AopContext.currentProxy(); } } \",\"三、Mail\",\" <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-mail</artifactId> </dependency> \",\"spring: #邮箱配置 mail: username: 邮箱 password: 密码 host: smtp.aliyun.com port: 465 protocol: smtp properties: mail: smtp: ssl: enable: true auth: true starttls: enable: true required: true socketFactory: port: 465 class: javax.net.ssl.SSLSocketFactory \",\"package com.haiziwang.excelfinal.util; import org.springframework.mail.SimpleMailMessage; import org.springframework.mail.javamail.JavaMailSender; import org.springframework.stereotype.Component; import javax.annotation.PostConstruct; import javax.annotation.Resource; import java.util.Date; @Component public class MailUtil { //定义实例 private static MailUtil INSTANCE=new MailUtil(); @Resource private JavaMailSender javaMailSender; //@PostConstruct 当前对象初始化完成后，执行后置的处理 @PostConstruct public void init(){ INSTANCE.javaMailSender=javaMailSender; } /** * * @param title 邮件题目 * @param from 邮件发送人邮箱 * @param content 邮件内容 * @param receiver 邮件接收者邮箱 */ //发送普通文件 public static void sendSimpleMail(String title,String from,String content,String receiver){ //构建一个文件对象 SimpleMailMessage mailMessage=new SimpleMailMessage(); //设置邮件主题 mailMessage.setSubject(title); //设置邮件发送者 mailMessage.setFrom(from); //设置邮件接收者 mailMessage.setTo(receiver); //设置邮件正文内容 mailMessage.setText(content); //设置发送时间 mailMessage.setSentDate(new Date()); //发送文件 INSTANCE.javaMailSender.send(mailMessage); } } \"]},\"85\":{\"h\":\"面试\",\"t\":[\"快速跳转\",\"设计模式\",\"数据库\",\"MysqlBasic\",\"Mysql\",\"注意\",\"运维\",\"危险容器\"]},\"86\":{\"c\":[\"面试\"]},\"87\":{\"h\":\"Java\"},\"88\":{\"h\":\"Docker\"},\"89\":{\"h\":\"一、Docker\"},\"90\":{\"h\":\"1.1 Docker是什么\",\"t\":[\"Docker:容器化引擎，新型虚拟机，相比传统虚拟机，性能更加卓越。可以更快速的搭建环境，底层基于Go语言，Docker搭建的软件就叫容器，容器之间具备隔离性。\"]},\"91\":{\"h\":\"1.2 Docker好处\",\"t\":[\"1.更高效的利用系统资源\",\"​ 如果用传统虚拟机搭建，使用率特别低，而Docker需要的资源很小，这样使用率特别高\",\"2.更快速的启动时间\",\"​ 传统虚拟机搭建的，启动时间很长，而Docker搭建的启动时间很短\",\"3.一致的运行环境\",\"​ 开发环境、测试环境、生产环境，这三种环境需要一样，Docker只要搭建了一种环境，就可以具备移植性\",\"4.持续交付和部署（CI&CD）\",\"​ 持续集成：Jinkins+Gitlab(Gitee)+Docker\"]},\"92\":{\"h\":\"1.3 Docker组成\",\"t\":[\"image-20230312194636171\",\"1.镜像（Image）:软件集合包，包含一套软件，比如Tomcat镜像，不仅仅包含Tomcat软件安装包，还包含对应的jdk\",\"2.容器（Container）：软件，通过镜像安装之后，平时操作的就是容器，启动、停止等\",\"3.网络（NetWork）：容器就有对应的虚拟机，都有自己的ip地址和端口号\",\"4.数据卷（Data Volumes）：数据卷，虚拟机所使用的磁盘(虚拟)\"]},\"93\":{\"h\":\"1.4 Linux安装Docker\",\"t\":[\"Linux的操作系统，使用的Centos\",\"1.下载并安装\",\"2.验证安装是否成功\",\"curl -sSL https://get.daocloud.io/docker | sh docker version \",\"3.基本操作\",\"启动：systemctl start docker 停止：systemctl stop docker 重启：systemctl restart docker 查看状态：systemctl status docker 卸载docker 1.查看安装的docker文件 yum list installed |grep docker 2.删除本机的docker文件 yum -y remove docker-engine-xxx 3.删除repo文件 cd /etc/yum.repos.d 删除所有docker开头的文件 \"]},\"94\":{\"h\":\"1.5 Docker配置镜像加速器\",\"t\":[\"国内从 Docker Hub 拉取镜像有时会遇到困难，此时可以配置镜像加速器。Docker 官方和国\",\"内很多云服务商都提供了国内加速器服务，例如：\",\"Docker 官方提供的中国 registry mirror https://registry.docker-cn.com\",\"七牛云加速器 https://reg-mirror.qiniu.com/\",\"当配置某一个加速器地址之后，若发现拉取不到镜像，请切换到另一个加速器地址。\",\"国内各大云服务商均提供了 Docker 镜像加速服务，建议根据运行 Docker 的云平台选择\",\"对应的镜像加速服务。\",\"实现步骤：\",\"1.执行命令，设置加速地址\",\"vim /etc/docker/daemon.json 输入内容： { \\\"registry-mirrors\\\": [\\\"https://mirror.ccs.tencentyun.com\\\"] } 2.重新加载配置 systemctl daemon-reload systemctl restart docker \"]},\"95\":{\"h\":\"二、Docker命令\",\"t\":[\"1.docker images ：查看本地镜像文件 2.docker search 镜像名称 ：在镜像仓库搜索对应的镜像是否存在 3.docker pull 镜像名称:版本号 ：下载镜像 4.docker run 创建并运行容器，如果镜像不存在，会下载镜像，创建容器，运行容器 5.docker ps ：查看运行容器 6.docker ps -a ：查询安装的容器 7.docker start 容器名 ：启动容器 8.docker stop 容器名 ：停止容器 9.docker restart 容器名 ：重启容器 10.docker rm 容器名 ：删除容器（容器需要停止） 11.docker rmi 镜像名:版本号 ：删除镜像 12.docker inspect 容器名 ：查看容器的详细信息 13.docker exec -it 容器名 bash ：进入到容器内部 14.docker logs 容器名 ：查看容器日志 \",\"示例：\",\"docker run -d --name tomcat8081 -p 8081:8080 tomcat:9.0.65 \",\"参数说明：\",\"-d 后台运行，不会阻塞页面\",\"--name 容器名称（唯一）\",\"-p 设置端口号，语法格式：-p 外界访问端口:软件本身端口(固定)\",\"-v 设置数据卷，语法格式：-v Linux服务器的路径地址:软件默认的地址\",\"ps：如果容器出了问题，\",\"需要先查看容器的⽇志：docker logs 容器名 查看是否error\"]},\"96\":{\"h\":\"三、Docker基于命令搭建环境\"},\"97\":{\"h\":\"3.1 Docker搭建Tomcat\",\"t\":[\"1.创建文件夹\",\"mkdir -p /docker/tomcat/webapps8081 \",\"2.创建并运行容器\",\"docker run -d --name tomcat8081 -p 8081:8080 -v /docker/tomcat/webapps8081:/usr/local/tomcat/webapps/ tomcat:9.0.65 \",\"3.设置主页\",\"mkdir -p /docker/tomcat/webapps8081/ROOT vim /docker/tomcat/webapps8081/ROOT/index.html \",\"4.访问测试\",\"如果不能访问，请检查防火墙或安全组，开放8081\"]},\"98\":{\"h\":\"3.2 Docker搭建Mysql\",\"t\":[\"1.执行命令\",\"docker run -d --name mysql3307 -e MYSQL_ROOT_PASSWORD=123456 -p 3307:3306 mysql:5.7 \",\"2.连接测试\",\"注意：如果无法访问，请检查防火墙（安全组）开放3307\"]},\"99\":{\"h\":\"四、Docker-Compose\"},\"100\":{\"h\":\"4.1 Docker-Compose\",\"t\":[\"Docker-Compose：容器编排软件，是用于定义和运行多容器 Docker 应用程序的工具。通过 Docker-Compose，可以使用 YML 文件来配置应用程序需要的所有容器。然后，使用一个命令，就可以从 YML 文件配置中创建并启动所有容器。\",\"Docker命令创建容器，只适合容器数量比较少，但是如果创建的容器比较多，那么就需要使用容器编排工具\",\"市面上容器编排工具有：1.Docker-Compose 2.K8s\",\"学习的-Docker-Compose：简单，好用\"]},\"101\":{\"h\":\"4.2 Linux安装Docker-Compose\",\"t\":[\"1.下载\",\"sudo curl -L \\\"https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)\\\" -o /usr/local/bin/docker-compose \",\"2.授权\",\"sudo chmod +x /usr/local/bin/docker-compose \",\"3.软连接\",\"sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose \",\"4.测试\",\"docker-compose -version \"]},\"102\":{\"h\":\"4.3 Docker-Compose的工作步骤\",\"t\":[\"Docker-Compose也是用来创建容器，是通过yaml文件（有自己的语法格式），然后借助Docker-Compose实现创建\",\"一次性可以创建多个容器\",\"创建的过程，如下所示：\",\"1.创建容器对应的yaml文件（DockerFile文件），定义容器的信息\",\"2.执行命令，加载yaml文件，通过文件内部的定义，实现容器的创建\"]},\"103\":{\"h\":\"五、Docker-Compose搭建环境\"},\"104\":{\"h\":\"5.1 搭建Tomcat\",\"t\":[\"基于Docker-Compose创建3个Tomcat容器\",\"实现步骤：\",\"1.创建文件夹\",\"mkdir -p /docker/tomcat/webapps8081\",\"mkdir -p /docker/tomcat/webapps8082\",\"mkdir -p /docker/tomcat/webapps8083\",\"2.编写dockerfile文件\",\"vim /usr/local/tomcat.yml \",\"输入以下内容：\",\"version: \\\"3.1\\\" services: tomcat1: #服务名称，不是容器名，只是在文件中方便观看是按个服务 restart: always # 代表只要docker启动， 就会自动启动这个容器 相当于-restart参数 image: tomcat:9.0.65 #依赖的镜像 container_name: tomcat8081 # 容器名称 相当于 --name参数 ports: - 8081:8080 #映射端口，可以指定多个，用多个-来写 environment: TZ: Asia/Shanghai #指定时区 volumes: - /docker/tomcat/webapps8081/:/usr/local/tomcat/webapps #挂载数据卷 tomcat2: #服务名称，不是容器名，只是在文件中方便观看是按个服务 restart: always # 代表只要docker启动， 就会自动启动这个容器 相当于-restart参数 image: tomcat:9.0.65 #依赖的镜像 container_name: tomcat8082 # 容器名称 相当于 --name参数 ports: - 8082:8080 #映射端口，可以指定多个，用多个-来写 environment: TZ: Asia/Shanghai #指定时区 volumes: - /docker/tomcat/webapps8082/:/usr/local/tomcat/webapps #挂载数据卷 tomcat3: #服务名称，不是容器名，只是在文件中方便观看是按个服务 restart: always # 代表只要docker启动， 就会自动启动这个容器 相当于-restart参数 image: tomcat:9.0.65 #依赖的镜像 container_name: tomcat8083 # 容器名称 相当于 --name参数 ports: - 8083:8080 #映射端口，可以指定多个，用多个-来写 environment: TZ: Asia/Shanghai #指定时区 volumes: - /docker/tomcat/webapps8083/:/usr/local/tomcat/webapps #挂载数据卷 \",\"3.执行命令，创建容器\",\"docker-compose -f /usr/local/tomcat.yml up -d \",\"4.查看 docker ps\"]},\"105\":{\"h\":\"5.2 搭建Mysql\",\"t\":[\"基于Docker-Compose创建2个Mysql容器\",\"1.编写dockerfile文件\",\"vim /usr/local/mysql.yml\",\"文件内容，如下所示：\",\"version: '3.1' services: mysql1: container_name: mysql3308 environment: MYSQL_ROOT_PASSWORD: zzjava image: mysql:5.7 restart: always ports: - 3308:3306 mysql2: container_name: mysql3309 environment: MYSQL_ROOT_PASSWORD: zzjava image: mysql:5.7 restart: always ports: - 3309:3306 \",\"2.执行命令，创建容器\",\"docker-compose -f /usr/local/mysql.yml up -d \"]},\"106\":{\"h\":\"六、宝塔面板快速部署网站\",\"t\":[\"宝塔面板：https://www.bt.cn/admin/servers#wcu\",\"Linux: Contens: 安装宝塔面板\",\"yum install -y wget && wget -O install.sh https://download.bt.cn/install/install_6.0.sh && sh install.sh ed8484bec \",\"img4\",\"外网面板地址: *\",\"内网面板地址: *\",\"username: *****\",\"password: *\",\"切记开启端口号：32117\",\"img1\",\"img2\",\"img3\"]},\"107\":{\"h\":\"Docker安装ES\"},\"108\":{\"h\":\"一、Docker安装ES\",\"t\":[\"注：elasticsearch + kibana + ik 版本一致\",\"# 1.拉取镜像 docker pull elasticsearch:7.4.2 # 配置数据挂载卷 # 创建配置文件目录 mkdir -p /mydata/elasticsearch/config # 创建数据目录 mkdir -p /mydata/elasticsearch/data # 将/mydata/elasticsearch/文件夹中文件都可读可写 chmod -R 777 /mydata/elasticsearch/ # 配置任意机器可以访问 elasticsearch echo \\\"http.host: 0.0.0.0\\\" >/mydata/elasticsearch/config/elasticsearch.yml # 2.运行 docker run --name elasticsearch --restart=always --privileged=true -d \\\\ -e ES_JAVA_OPTS=\\\"-Xms512m -Xmx512m\\\" -e \\\"discovery.type=single-node\\\" \\\\ -v /mydata/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml \\\\ -v /mydata/elasticsearch/data:/usr/share/elasticsearch/data \\\\ -v /mydata/elasticsearch/plugins:/usr/share/elasticsearch/plugins \\\\ -p 9200:9200 -p 9300:9300 elasticsearch:7.4.2 # 3.进入es容器 docker exec -it elasticsearch /bin/bash # 4.修改elasticsearch.yml文件 vi config/elasticsearch.yml ```yml http.cors.enabled: true http.cors.allow-origin: \\\"*\\\" http.cors.allow-headers: Authorization xpack.security.enabled: true xpack.security.transport.ssl.enabled: true ``` # 5.退出容器 exit # 6.重启es容器 docker restart [容器id] # 7.进入es容器 docker exec -it elasticsearch /bin/bash # 8.修改密码 默认账户elastic bin/elasticsearch-setup-passwords interactive \",\"-p 9200:9200 -p 9300:9300：向外暴露两个端口，9200用于HTTP REST API请求，9300 ES 在分布式集群状态下 ES 之间的通信端口； -e \\\"discovery.type=single-node\\\"：es 以单节点运行 -e ES_JAVA_OPTS=\\\"-Xms64m -Xmx512m\\\"：设置启动占用内存，不设置可能会占用当前系统所有内存 -v：挂载容器中的配置文件、数据文件、插件数据到本机的文件夹； -d elasticsearch:7.4.2：指定要启动的镜像\"]},\"109\":{\"h\":\"二、Docker安装kibana\",\"t\":[\"# 1.拉取镜像 docker pull kibana:7.4.2 # 2.运行容器 查看内网es分配的ip：docker inspect elasticsearch |grep IPAddress 注：不能使用公网ip，使用内网es分配的ip启动kibana docker run -d --name kibana -p 5601:5601 -e ELASTICSEARCH_HOSTS=http://ip:9200 kibana:7.4.2 查看页面是否可以打开，如果出现Kibana service .....（配置不正确） # 3.进入容器 docker exec -it kibana /bin/bash # 4.修改kibana.yml文件 vi config/kibana.yml ```yml elasticsearch.hosts: [ \\\"http://ip:9200\\\" ] #ip改为ElasticSearch的网络ip elasticsearch.username: \\\"elastic\\\" elasticsearch.password: \\\"666666\\\" ``` # 5.退出 exit # 6.重启 docker restart 【容器id】 \"]},\"110\":{\"h\":\"三、分词器配置\",\"t\":[\"方式一：\",\"docker exec -it elasticsearch bash cd bin/ ./elasticsearch-plugin install https://ghproxy.com/https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.4.2/elasticsearch-analysis-ik-7.4.2.zip\",\"查看是否安装完毕\",\"./elasticsearch-plugin list analysis-ik # ik分词器\",\"方式二：\",\"https://github.com/medcl/elasticsearch-analysis-ik/releases\",\"解压 unzip ...\",\"复制ik到ElasticSearch容器中\",\"docker cp /mydata/elasticsearch/ik elasticsearch:/usr/share/elasticsearch/plugins\",\"正确返回Successfully copied 9.89MB to elasticsearch:/usr/share/elasticsearch/plugins\",\"重启es\",\"若安装失败需删除插件重新安装 bin目录下\",\"./elasticsearch-plugin list ./elasticsearch-plugin remove ik\"]},\"111\":{\"h\":\"四、安装ingest-attachment\",\"t\":[\"对文档内容存储、全文检索 代码里吧pdf，word之类的文档转成base64，查询时候转为相应内容\",\"进入elasticsearch容器\",\"docker exec -it elasticsearch /bin/bash\",\"安装ingest-attachment\",\"./bin/elasticsearch-plugin install ingest-attachment\",\"退出容器，重启容器\"]},\"112\":{\"h\":\"4.1进入kibana定义文本抽取管道\",\"t\":[\"PUT /_ingest/pipeline/attachment { \\\"description\\\": \\\"Extract attachment information\\\", \\\"processors\\\": [ { \\\"attachment\\\": { \\\"field\\\": \\\"content\\\", \\\"ignore_missing\\\": true } }, { \\\"remove\\\": { \\\"field\\\": \\\"content\\\" } } ] } \",\"创建索引\",\"PUT /index_knowledge { \\\"mappings\\\": { \\\"properties\\\": { \\\"id\\\":{ \\\"type\\\": \\\"long\\\" }, \\\"knowledgeName\\\":{ \\\"type\\\": \\\"text\\\", \\\"analyzer\\\": \\\"ik_smart\\\" }, \\\"attachment\\\": { \\\"properties\\\": { \\\"content\\\":{ \\\"type\\\": \\\"text\\\", \\\"analyzer\\\": \\\"ik_smart\\\" } } } } } } \"]},\"113\":{\"h\":\"五、Spring连接配置\",\"t\":[\" <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-data-elasticsearch</artifactId> </dependency> \",\"spring: elasticsearch: rest: uris: ip:9200 username: username password: password \"]},\"114\":{\"h\":\"云服务\",\"t\":[\"提示\",\"云服务部署SpringBoot项目\"]},\"115\":{\"h\":\"一、Linux 安装JDK1.8\",\"t\":[\"yum install -y java-1.8.0-openjdk-devel.x86_64 java -version \"]},\"116\":{\"h\":\"二、Linux 部署\",\"t\":[\"在linux服务器上运行Jar文件时通常的方法是： java -jar test.jar\",\"这种方式特点是ssh窗口关闭时，程序中止运行.或者是运行时没法切出去执行其他任务，有没有办法让Jar在后台运行呢：\",\"方式一：\",\"nohup java -jar test.jar & //nohup 意思是不挂断运行命令,当账户退出或终端关闭时,程序仍然运行 //当用 nohup 命令执行作业时，缺省情况下该作业的所有输出被重定向到nohup.out的文件中 //除非另外指定了输出文件。 \",\"方式二：\",\"nohup java -jar test.jar >log.txt & //这种方法会把日志文件输入到你指定的文件中，没有则会自动创建 \",\"查看某端口占用的线程的pid\",\"netstat -nlp |grep :8080 # 查看端口号 命令：ps -aux |grep java # 查询java进程 kill pid 杀死进程 \",\"服务器开放端口号：\",\"服务器设置防火墙\",\"firewall-cmd --zone=public --add-port=端口号/tcp --permanent \",\"重启服务器防火墙\",\"firewall-cmd --reload \",\"查看日志：\",\"https://blog.csdn.net/summerwgl/article/details/125423926\",\"介绍一种：tail命令\",\"//查看实时日志 $ tail -f test.log //查看最后100行日志记录 $ tail -100f test.log //查询日志尾部最后10行的日志 $ tail -n 10 test.log //查询10行之后的所有日志 $ tail -n +10 test.log //循环实时查看最后100行记录 $ tail -fn 100 test.log \",\"1）-f 循环读取 2）-q 不显示处理信息 3）-v 显示详细的处理信息 4）-c<数目> 显示的字节数 5）-n<行数> 显示行数\",\"docker查看容器日志\",\"docker logs -f --tail -n300 kworkflow-web_8080 docker logs -f kworkflow-web_8080 \"]},\"117\":{\"h\":\"三、Docker部署\",\"t\":[\"docker查看容器地址\",\"docker inspect kworkflow-web_8080 | grep Mounts -A 20 \",\"编写Dockerfile文件\",\"找到刚刚上传jar包的目录，使用vim命令编写一个Dockerfile文件，按照下面模板便可简单编写出Dockerfile文件：\",\"# 拉取jdk8作为基础镜像 FROM java:8 # 作者 MAINTAINER kz <@163.com> # 添加jar到镜像并命名为code.jar ADD codingstart-1.0.jar code.jar # 镜像启动后暴露的端口 EXPOSE 8181 # jar运行命令，参数使用逗号隔开 ENTRYPOINT [\\\"java\\\",\\\"-jar\\\",\\\"code.jar\\\"] \"]},\"118\":{\"h\":\"四、Windos端口占用\",\"t\":[\"查找所有运行的端口\",\"netstat -ano \",\"查看被占用端口对应的 PID\",\"netstat -aon|findstr \\\"1099\\\" \",\"查看指定 PID 的进程\",\"image-20230309133951356\",\"查看是哪个进程或者程序占用端口\",\"tasklist|findstr \\\"18112\\\" taskkill /f /t /im java.exe //强制（/F参数）杀死 所有进程包括子进程（/T参数） \"]},\"119\":{\"h\":\"一、安装Redis\"},\"120\":{\"h\":\"1.1 创建redis容器并设置密码\",\"t\":[\"docker run -itd --name redis-6379 -p 6379:6379 redis --requirepass 123456 说明 ： --name (启动容器的名称) -p 映射端口:redis启动端口 redis --requirepass 启动密码 \"]},\"121\":{\"h\":\"1.2 redis创建密码或修改密码\",\"t\":[\"#1.进入redis的容器 docker exec -it 容器ID bash #2.进入redis目录 cd /usr/local/bin #3.运行命令： redis-cli auth 密码 登录 #4.查看现有的redis密码： config get requirepass #5.设置redis密码 config set requirepass 密码 \",\"注意：开放端⼝6379 3.访问测试 执⾏命令 或者使⽤可视化⼯具连接Redis\"]},\"122\":{\"h\":\"二、docker安装mysql\",\"t\":[\"docker run -d --name mysql3307 -e MYSQL_ROOT_PASSWORD=123456 -p 3307:3306 mysql:5.7 \",\"进入容器bin目录\",\"docker exec -it 容器 bash/bin\",\"mysql -uroot -p 输入密码\"]},\"123\":{\"h\":\"Minio\",\"t\":[\"Minio 是个基于 Golang 编写的开源对象存储套件，基于Apache License v2.0开源协议，虽然轻量，却拥有着不错的性能。它兼容亚马逊S3云存储服务接口。可以很简单的和其他应用结合使用，例如 NodeJS、Redis、MySQL等。\"]},\"124\":{\"h\":\"一、 应用场景\",\"t\":[\"MinIO 的应用场景除了可以作为私有云的对象存储服务来使用，也可以作为云对象存储的网关层，无缝对接 Amazon S3 或者 MicroSoft Azure 。\"]},\"125\":{\"h\":\"二、 特点\",\"t\":[\"高性能：作为一款高性能存储，在标准硬件条件下，其读写速率分别可以达到 55Gb/s 和 35Gb/s。并且MinIO 支持一个对象文件可以是任意大小，从几kb到最大5T不等。\",\"可扩展：不同MinIO集群可以组成联邦，并形成一个全局的命名空间，并且支持跨越多个数据中心。\",\"云原生：容器化、基于K8S的编排、多租户支持。\",\"Amazon S3兼容：使用 Amazon S3 v2 / v4 API。可以使用Minio SDK，Minio Client，AWS SDK 和 AWS CLI 访问Minio服务器。\",\"SDK支持： \",\"GO SDK：https://github.com/minio/minio-go\",\"JavaSDK：https://github.com/minio/minio-java\",\"PythonSDK：https://github.com/minio/minio-py\",\"图形化界面：有操作页面\",\"支持纠删码：MinIO使用纠删码、Checksum来防止硬件错误和静默数据污染。在最高冗余度配置下，即使丢失1/2的磁盘也能恢复数据。\",\"功能很强大，本文只是抛砖引玉，有兴趣的朋友自己去探索吧~\"]},\"126\":{\"h\":\"三、安装MinIO\"},\"127\":{\"h\":\"3.1 获取镜像\",\"t\":[\"执行命令如下：\",\"docker pull minio/minio \"]},\"128\":{\"h\":\"3.2 启动镜像\",\"t\":[\"执行命令如下：\",\" docker run -p 9000:9000 -p 9001:9001 --name minio -d --restart=always -e \\\"MINIO_ACCESS_KEY=admin\\\" -e \\\"MINIO_SECRET_KEY=admin123\\\" -v /home/data:/data -v /home/config:/root/.minio minio/minio server --console-address \\\":9000\\\" --address \\\":9001\\\" /data \",\"命令解释如下：\",\"-p：9000是图形界面的端口，9001是API的端口，在使用SDK连接需要用到\",\"MINIO_ACCESS_KEY：指定图形界面的用户名\",\"MINIO_SECRET_KEY：指定图形界面的密码\",\"按照上述两个步骤启动成功即可。 注意：ACCESS_KEY 长度最少3个字符，SECRET_KEY 长度最少8个字符\"]},\"129\":{\"h\":\"3.3 图形界面操作\",\"t\":[\"安装成功后直接访问地址：http:/ip:9000/login，如下1\",\"直接在Buckets菜单中创建一个桶为test\",\"并且设置这个桶的隐私规则为public，如下：\"]},\"130\":{\"h\":\"四、SpringBoot整合MinIO上传文件\"},\"131\":{\"h\":\"4.1 获取accessKey和secretKey\",\"t\":[\"这里的accessKey和secretKey并不是图形界面登录名和密码，获取很简单，直接在图形界面中操作，如下图：\"]},\"132\":{\"h\":\"4.2 添加依赖\",\"t\":[\"添加MinIO的依赖，如下\",\"<dependency> <groupId>io.minio</groupId> <artifactId>minio</artifactId> <version>8.2.1</version> </dependency> \"]},\"133\":{\"h\":\"4.3 添加配置\",\"t\":[\"在aplication.yml配置中添加MInIO相关的配置，如下\",\"minio: # 访问的url endpoint: http:// # API的端口 port: 9001 # 秘钥 accessKey: * secretKey: * secure: false bucket-name: mes # 桶名 我这是给出了一个默认桶名 image-size: 10485760 # 我在这里设定了 图片文件的最大大小 file-size: 1073741824 # 此处是设定了文件的最大大小 \",\"@Data @Configuration @ConfigurationProperties(prefix = \\\"minio\\\") public class MinioProperties { private String endpoint; private Integer port; private String accessKey; private String secretKey; private boolean secure; private String bucketName; private long imageSize; private long fileSize; @Bean public MinioClient minioClient() { MinioClient minioClient = MinioClient.builder() .credentials(accessKey, secretKey) .endpoint(endpoint,port,secure) .build(); return minioClient; } \",\"关于Minio工具类等其他代码请联系作者获取\",\"接口返回的URL就是文件的访问地址，直接输入浏览器访问即可。 在MInIO中也可以看到存储的文件，如下图：\",\"可以手动分享，有效期是7天，一旦过了这个有效期将会失效!\",\"五、Minio 实现多层级目录\"]},\"134\":{\"h\":\"\",\"t\":[\"六、Minio集群搭建\"]},\"135\":{\"h\":\"\",\"t\":[\"七、Minio 数据迁移\"]},\"136\":{\"h\":\"Mysql8安装\"},\"137\":{\"h\":\"一、卸载Mysql\",\"t\":[\"yum remove mysql* -y rm -rf /etc/my.cnf rm -rf /var/lib/mysql/ rm -rf /var/log/mysqld.log find / -name mysql rm -rf mysql \"]},\"138\":{\"h\":\"二、安装Mysql\",\"t\":[\"https://downloads.mysql.com/archives/community/\",\"image.png\",\"groupadd mysql useradd -r -g mysql mysql mkdir -p /home/mysql #创建目录 mkdir -p /home/mysql/data #创建目录 mkdir -p /home/mysql/logs #创建目录 chown mysql:mysql -R /home/mysql #赋予权限 chown mysql:mysql -R /home/mysql/logs #赋予权限 chown mysql:mysql -R /home/mysql/data #赋予权限 cd /usr/local tar -xvf mysql-8.0.32-linux-glibc2.12-x86_64.tar.xz mv mysql-8.0.32-linux-glibc2.12-x86_64 /usr/local/mysql \"]},\"139\":{\"h\":\"2.1 配置文件\",\"t\":[\"vim /etc/my.cnf\",\"[mysqld] bind-address=0.0.0.0 port=3306 user=mysql basedir=/usr/local/mysql #安装路径 datadir=/home/mysql/data #数据存储路径 socket=/home/mysql/data/mysql.sock mysqlx_socket=/home/mysql/data/mysqlx.sock log-error=/home/mysql/logs/mysql.log pid-file=/home/mysql/logs/mysql.pid #character config character_set_server=utf8mb4 symbolic-links=0 explicit_defaults_for_timestamp=true \",\"#初始化密码 cd /usr/local/mysql/bin/ ./mysqld --defaults-file=/etc/my.cnf --basedir=/usr/local/mysql --datadir=/home/mysql/data --user=mysql --initialize cat /home/mysql/logs/mysql.log \"]},\"140\":{\"h\":\"2.2 配置开机自启\",\"t\":[\"cp /usr/local/mysql/support-files/mysql.server /etc/init.d/mysql sudo chmod +x /etc/init.d/mysql \",\"vim \",\"[Unit] Description=MySQL Community Server After=network.target [Service] Type=forking ExecStart=/etc/init.d/mysql start ExecStop=/etc/init.d/mysql stop ExecReload=/etc/init.d/mysql restart User=mysql Group=mysql Restart=on-failure [Install] WantedBy=multi-user.target \",\"#刷新配置 systemctl daemon-reload systemctl enable mysqld.service systemctl start mysqld \"]},\"141\":{\"h\":\"2.3 配置环境变量\",\"t\":[\"# 若为空则添加环境变量 whereis mysql; whereis mysqldump; vi /etc/profile export PATH=$PATH:/usr/local/mysql/bin source /etc/profile #修改密码 mysql -u root -p --socket=/home/mysql/data/mysql.sock ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY '123456'; flush privileges; # 配置远程连接 use mysql; update user set host='%' where user='root'; flush privileges; #配置防火墙 firewall-cmd --zone=public --add-port=3306/tcp --permanent firewall-cmd --reload \",\"说明\",\"mysql 18092 1 0 18:56 ? 00:00:00 /bin/sh /usr/local/mysql/bin/mysqld_safe --datadir=/home/mysql/data --pid-file=/home/mysql/logs/mysql.pid mysql 18322 18092 0 18:56 ? 00:00:03 /usr/local/mysql/bin/mysqld --basedir=/usr/local/mysql --datadir=/home/mysql/data --plugin-dir=/usr/local/mysql/lib/plugin --log-error=/home/mysql/logs/mysql.log --pid-file=/home/mysql/logs/mysql.pid --socket=/home/mysql/data/mysql.sock --port=3306 \",\"**<font style=\\\"color:rgb(36, 41, 47);background-color:rgb(244, 246, 248);\\\">mysqld_safe</font>**<font style=\\\"color:rgb(36, 41, 47);background-color:rgb(244, 246, 248);\\\">mysqld</font><font style=\\\"color:rgb(36, 41, 47);background-color:rgb(244, 246, 248);\\\">mysqld_safe</font><font style=\\\"color:rgb(36, 41, 47);background-color:rgb(244, 246, 248);\\\">mysqld</font>\",\"**<font style=\\\"color:rgb(36, 41, 47);background-color:rgb(244, 246, 248);\\\">mysqld</font>**<font style=\\\"color:rgb(36, 41, 47);background-color:rgb(244, 246, 248);\\\">mysqld</font>\"]},\"142\":{\"h\":\"Mysql数据恢复\"},\"143\":{\"h\":\"一、开启BIN-LOG\",\"t\":[\"binlog基本概念binlog基本概念二进制日志(binnary log)以事件形式记录了对MySQL数据库执行更改的所有操作。 binlog是记录所有数据库表结构变更（例如CREATE、ALTER TABLE、DROP等）以及表数据修改（INSERT、UPDATE、DELETE、TRUNCATE等）的二进制日志。不会记录SELECT和SHOW这类操作，因为这类操作对数据本身并没有修改，但可以通过查询通用日志来查看MySQL执行过的所有语句。登录MySQL后，查看binlog状态sql如下：show variables like '%log_bin%';若未开启则需要开启编辑配置文件配置开启binlog 放在mysqld下编辑配置文件 vim /etc/my.cnf\",\"#设置唯一id server-id=1 ##开启bin-log，产生的bin-log文件名即为bin-log.* log-bin=mysql-bin #指定bin-log为row类别，其他两种是statement、mixed binlog_format=row # 在 binlog 中记录完整的行数据 binlog_row_image = full #对全部数据库开启则注释掉binlog-do-db即可 #对指定的数据库开启bin-log，这里是对food数据库开启bin-log服务 binlog-do-db=food \",\"配置完成后退出，然后重启我们的mysql服务查看是否开启bin_log日志mysql命令: show variables like 'log_%'\"]},\"144\":{\"h\":\"二、数据恢复\",\"t\":[\"自行模拟删除数据\",\"查看我们当前使用的binlog show master status; 查看日志列表 show master logs; 查看binlog日志信息包括位置 show variables like 'log_%'; \",\" 当需要恢复数据时，为了防止恢复数据后影响最新业务，需要执行flush logs ，产生一个新的binlog文件，此时旧的binlog文件不会再有写入； 进入到我们的binlog日志位置 /var/lib/mysql 下面具体通过mysql-bin.000001来进行数据恢复 恢复时需要在binlog中找到两个位置：\",\"数据恢复的起始位置\",\"数据恢复的结束位置\"]},\"145\":{\"h\":\"2.1 mysqlbinlog\",\"t\":[\"只能正向回滚，不适用\",\"在服务器内执行：\",\"通过mysqlbinlog将binlog转为sql，以方便查询具体位置 mysqlbinlog --set-charset=utf-8 /var/lib/mysql/mysql-bin.000001>backuptmp.sql 查看生成的backuptmp.sql，最终确定需要恢复的起始位置为的行数 执行恢复数据 mysqlbinlog -v /var/lib/mysql/mysql-bin.000005 --start-position=299 --stop-position=1305 | mysql -uroot -p999999 如果执行提示se you are using a --stop-position or --stop-datetime that refers to an event in the middle of a statement. The event(s) from the partial statement have not been written to output. 则表示个参数指向了一个语句中间的事件。部分语句的事件尚未被写入输出。 \",\"说明如何定位起止行数：并不是定位delete，drop的数据位置，而是寻找你create或Write的数据举例：一条数据的inset如何定位\"]},\"146\":{\"h\":\"2.2 binlog2.sql\",\"t\":[\"推荐使用\",\"只针对于mysql5.6 5.7，必须开启binlog日志 ，配置请在官网查看\",\"优势：可反编译 直接回滚,可筛选库筛选表非常的方便\",\"官网：https://github.com/danfengcao/binlog2sql\",\"# 安装工具 yum -y install git python-pip # 克隆binlog2sql git clone https://github.com/danfengcao/binlog2sql.git && cd binlog2sql 用pip命令来下载binlog2sql所需要的“requirements.txt”这个文本 pip install -r requirements.txt # 安装位置 cd /mydata/binlog2sql/binlog2sql # 执行回滚 配置在官网查看 # 可根据mysqlbinlog找到删除的偏移量 根据偏移量去执行反编译sql，若不知偏移量也可直接全部反编译 python binlog2sql.py -h127.0.0.1 -P3307 -uroot -p****** -dfood -t jjjfood_order -B --flashback --start-file=mysql-bin.000012 > rollback.sql --start-position=3270 --stop-position=4335 \",\"若误删整表，该如何操作\",\"针对于delete from 表 删除表中所有数据\",\"#根据时间去查看是否为当时删除的数据 python binlog2sql.py -h127.0.0.1 -P3307 -uroot -p****** -dfood -t jjjfood_center_menu --start-file='mysql-bin.000013' --start-datetime='2024-4-17 00:00:00' --stop-datetime='2024-04-17 16:51:58' #根据时间进行反编译执行sql python binlog2sql.py -h127.0.0.1 -P3307 -uroot -p****** -dfood -t jjjfood_center_menu --start-file='mysql-bin.000012' -B > rollback.sql --start-datetime='2024-4-17 00:00:00' --stop-datetime='2024-04-17 16:51:58' \",\"针对于DROP删除\",\"1.被drop删除之后，binlog2无法查询和反编译到增删改语句\",\"2.执行flush logs\",\"python binlog2sql.py -h127.0.0.1 -P3307 -uroot -p999999 -dfood -t jjjfood_product_unit --start-file='mysql-bin.000016' > rollback.sql --start-datetime='2024-4-17 00:00:00' --stop-datetime='2024-04-17 16:51:58' \",\"3.从最初的binlog日志开始找create 表语句/或者是备份的表结构在数据库中添加(有表结构才会进行编译)\",\"4.在flush logs之前所有的binlog日志文件执行上述命令，讲sql copy 一次执行恢复数据\"]},\"147\":{\"h\":\"Natapp\"},\"148\":{\"h\":\"1.打开网址\",\"t\":[\"https://natapp.cn/\"]},\"149\":{\"h\":\"2.登录注册\"},\"150\":{\"h\":\"2.1实名认证\"},\"151\":{\"h\":\"3.购买隧道\",\"t\":[\"选择产品\",\"image.png\",\"免费购买\",\"image.png\"]},\"152\":{\"h\":\"4.配置\"},\"153\":{\"h\":\"5.下载客户端\",\"t\":[\"解压后\",\"创建 config.ini 复制进去\",\"#将本文件放置于natapp同级目录 程序将读取 [default] 段 #在命令行参数模式如 natapp -authtoken=xxx 等相同参数将会覆盖掉此配置 #命令行参数 -config= 可以指定任意config.ini文件 [default] authtoken= #对应一条隧道的authtoken clienttoken= #对应客户端的clienttoken,将会忽略authtoken,若无请留空, log=none #log 日志文件,可指定本地文件, none=不做记录,stdout=直接屏幕输出 ,默认为none loglevel=ERROR #日志等级 DEBUG, INFO, WARNING, ERROR 默认为 DEBUG http_proxy= #代理设置 如 http://10.123.10.10:3128 非代理上网用户请务必留空 \"]},\"154\":{\"h\":\"6.启动\"},\"155\":{\"h\":\"Nginx\"},\"156\":{\"h\":\"一、 Nginx是什么\",\"t\":[\"官网：nginx 中文网 官网Nginx是由俄罗斯人研发的，应对Rambler的网站，并且2004年发布的第一个版本。1.Nginx 是一个高性能的Http和反向代理服务器，特点是占有内存少，并发能力强，事实上nginx的并发能力确实在同类型的网页服务器中表现较好。国内使用nginx的网站有很多，如 百度 京东 新浪 网易 淘宝 等2.Nginx作为web 服务器 ： nginx 只能作为静态页面的web服务器，同时还支持CGI协议的动态语言，比如perl,php 等， 但是不支持java ,java程序只能通过与tomcat配合完成。nginx 专为性能优化而开发，性能是其最重要的考量，实现上 非常注重效率，能经受高负载的考验，有报告表明能支持高达50000个并发连接数。特点：\",\"**稳定性极强。 7*24⼩时不间断运⾏。 ** **Nginx提供了⾮常丰富的配置实例。 **占⽤内存⼩，并发能⼒强。 tomcat 默认线程池线程线程数数 150 可以认为 tomcat 只能承受150个并发， nginx 最高承受50000以上并发\",\"在搭建集群后，使用Nginx\"]},\"157\":{\"h\":\"二、Nginx的安装\",\"t\":[\"1.安装依赖包\",\"//一键安装上面四个依赖 yum -y install gcc zlib zlib-devel pcre-devel openssl openssl-devel \",\"2.下载并解压安装包\",\"//创建一个文件夹 cd /usr/local mkdir nginx cd nginx //下载tar包 wget http://nginx.org/download/nginx-1.13.7.tar.gz tar -xvf nginx-1.13.7.tar.gz \",\"3.安装nginx\",\"//进入nginx目录 cd /usr/local/nginx //进入目录 cd nginx-1.13.7 //执行命令 考虑到后续安装ssl证书 添加两个模块 ./configure --with-http_stub_status_module --with-http_ssl_module //执行make命令 make //执行make install命令 make install \",\"4.启动nginx服务\",\"/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf \",\"5.配置nginx.conf\",\"vim /usr/local/nginx/conf/nginx.conf \",\"开放80端口：firewall-cmd --zone=public --add-port=80/tcp --permanent查询端口号80 是否开启：firewall-cmd --query-port=80/tcp重启防火墙：firewall-cmd --reload命令： cd /usr/local/nginx/sbin启动，关闭，重启，命令：./nginx 启动./nginx -s stop 关闭./nginx -s reload 重启nignx.conf文件说明\",\"user nginx; # Nginx用户 worker_processes 1; # 工作进程：数目。根据硬件调整，通常等于CPU数量或者2倍于CPU error_log /var/log/nginx/error.log warn; pid /var/run/nginx.pid; # pid（进程标识符）：存放路径。 # 以上统称为全局块， # worker_processes他的数值越大，Nginx的并发能力就越强 # error_log 代表Nginx的错误日志存放的位置 events { worker_connections 1024; #每个工作进程的最大连接数量。根据硬件调整，和前面工作进程配合起来用，尽量大，但是别把cpu跑到100%就行 } # events块 # worker_connections他的数值越大，Nignx并发能力越强 http { # http块 include /etc/nginx/mime.types; default_type application/octet-stream; # include代表引入一个外部的文件 -> /mime.types中放着大量的媒体类型 log_format main '$remote_addr - $remote_user [$time_local] \\\"$request\\\" ' '$status $body_bytes_sent \\\"$http_referer\\\" ' '\\\"$http_user_agent\\\" \\\"$http_x_forwarded_for\\\"'; access_log /var/log/nginx/access.log main; # 日志 sendfile on; #tcp_nopush on; keepalive_timeout 65; # keepalive超时时间 单位是秒 #gzip on; #include /etc/nginx/conf.d/*.conf; -> 引入了conf.d目录下的以.conf为结尾的配置文件 # 相当于引入外部的配置文件 咱们主要关注这个文件 include /etc/nginx/conf.d/*.conf; } \",\"6.开机自启\",\"sudo vi /etc/systemd/system/nginx.service [Unit] Description=Nginx - high performance web server After=network.target [Service] Type=forking ExecStart=/usr/local/nginx/sbin/./nginx ExecReload=/usr/local/nginx/sbin/./nginx -s reload ExecStop=/usr/local/nginx/sbin/./nginx -s quit PrivateTmp=true [Install] WantedBy=multi-user.target sudo systemctl daemon-reload sudo systemctl start nginx sudo systemctl enable nginx sudo systemctl status nginx \"]},\"158\":{\"h\":\"三、Nginx代理\",\"t\":[\"正向代理和反向代理介绍正向代理：\",\"正向代理服务是由客户端设立的。\",\"客户端了解代理服务器和目标服务器都是谁。\",\"帮助咱们实现突破访问权限，提高访问的速度，对目标服务器隐藏客户端的ip地址。\",\"反向代理：\",\"反向代理服务器是配置在服务端的。\",\"客户端是不知道访问的到底是哪一台服务器。\",\"达到负载均衡，并且可以隐藏服务器真正的ip地址\",\"image.png\"]},\"159\":{\"h\":\"3.1 关于localtion路径映射\",\"t\":[\"上面已经准备了两个tomcat\",\"优先级关系如下：\",\"location = /路径：优先级最高，精准匹配，一旦匹配， 不再去找其他匹配项。\",\"location ^~ /路径：优先级次之，字符串匹配，一旦匹配， 不再去找其他匹配项。\",\"location ~ 正则表达式：如果有多个location的正则能匹配的话，则使用正则表达式最长的那个。\",\"location ~* 正则表达式：和location ~ 正则表达式相同，不过当前方式不区分大小写。\",\"location /路径：常规方式，匹配前缀，优先级最低。\",\"注意：有没有映射（匹配）上 是一回事 映射上了location 有没有找到 对应的资源 是另外一回事\",\"# 直接匹配 优先级最高 location = / { # 精准匹配，主机名后面不能带任何的字符串 } # 完全匹配 精确匹配 a location /aaa/bbb/ccc/d.html { proxy_pass http://39.106.47.23:8080; } # 匹配开头路径 正则匹配 b location ^~ /aaa/bbb { # 匹配所有以/aaa/bbb开头的路径，匹配后，不再筛选其他选项 } # 正则匹配优先级 c location ~ /aaa/bbb { # 匹配所有以/aaa/bbb开头的路径 } location ~ /aaa/bbb/ccc { proxy_pass http://39.106.47.23:8081; } # 正则匹配后缀 优先级4 location ~* \\\\.(gif|jpg|png|js|css)$ { # 匹配以gif或者jpg或者png为结尾的路径 } # 常规匹配 通用匹配 优先级5 location /xxx { # 匹配所有以/xxx开头的路径 } # 全部通配 优先级6 location / { # 匹配全部路径 } TIPS： ^~ 和直接写路径的两种方式，不同同时存在！比如： ^~ /abc 和 /abc 同时存在会出错！ 总结： ^~ /路径 > ~ /路径 > /路径 \"]},\"160\":{\"h\":\"四、Nginx负载均衡\",\"t\":[\"Nginx为我们默认提供了三种负载均衡的策略：\",\"轮询：将客户端发起的请求，平均的分配给每一台服务器。 默认策略\",\"权重：会将客户端的请求，根据服务器的权重值不同，分配不同的数量。\",\"ip_hash：基于发起请求的客户端的ip地址不同，他始终会将请求发送到指定的服务器上。 根据ip地址计算出一个结果 根据这个结果找对应的服务器\"]},\"161\":{\"h\":\"4.1 轮询\",\"t\":[\"轮询访问 一次8080 一次8081vim /usr/local/nginx/conf/nginx.conf\",\"# nginx/usr/local/nginx/conf/nginx.conf #负载均衡 upstream food { server 123.56.114.90:8892; server 8.139.254.175:8892; } server { listen 80; server_name localhost; # 负载均衡 location / { proxy_pass http://food; } } \"]},\"162\":{\"h\":\"4.2 权重\",\"t\":[\"weight=权重比例 根据配置的权重比例访问相应服务\",\"upstream sso { server 39.106.47.23:8080 weight=2; #weight=权重比例 server 39.106.47.23:8081 weight=1; } server { # server 块是http 块中的 内容 listen 80; # nginx 默认监听的端口号 listen [::]:80; server_name localhost; # ip location / { proxy_pass http://sso; } #50x 错误页面跳转 error_page 500 502 503 504 /50x.html; location = /50x.html { root /usr/share/nginx/html; } } \"]},\"163\":{\"h\":\"4.3 ip_hash\",\"t\":[\"ip_hash实现 根据hash 算法 固定访问某个地址\",\"upstream sso { ip_hash; server 39.106.47.23:8080; server 39.106.47.23:8081; } server { # server 块是http 块中的 内容 listen 80; # nginx 默认监听的端口号 listen [::]:80; server_name localhost; # ip location / { proxy_pass http://sso; } #50x 错误页面跳转 error_page 500 502 503 504 /50x.html; location = /50x.html { root /usr/share/nginx/html; } } \"]},\"164\":{\"h\":\"五、Nginx动静分离\",\"t\":[\"Nginx的并发能力公式：worker_processes * worker_connections / 4 | 2 = Nginx最终的并发能力动态资源需要/4，静态资源需要/2.Nginx通过动静分离，来提升Nginx的并发能力，更快的给用户响应。\",\"上图是动态资源的请求工程 四个连接数 ，咱们把静态资源放在nginx 上面 就只需要两个连接数， 同时也减轻了后面服务器的压力 ， 如下图 静态资源直接放在nginx\",\"# 修改配置文件 upstream emp { ip_hash; server 39.106.47.23:8081; server 39.106.47.23:8080; } server{ listen 80; server_name localhost; location ~* \\\\.(gif|jpg|png|js|css|html)$ { # 匹配以gif|jpg|png|js|css|html为结尾的路径 静态资源 root /usr/share/nginx/statics; } location / { proxy_pass http://emp/; } } \"]},\"165\":{\"h\":\"六、Nginx实战\",\"t\":[\"demo反向代理，负载均衡前端访问后端地址请指向Nginx服务器地址nginx.conf配置\",\" #user nobody; worker_processes 1; #error_log logs/error.log; #error_log logs/error.log notice; #error_log logs/error.log info; #pid logs/nginx.pid; events { worker_connections 1024; } http { include mime.types; default_type application/octet-stream; #log_format main '$remote_addr - $remote_user [$time_local] \\\"$request\\\" ' # '$status $body_bytes_sent \\\"$http_referer\\\" ' # '\\\"$http_user_agent\\\" \\\"$http_x_forwarded_for\\\"'; #access_log logs/access.log main; sendfile on; #tcp_nopush on; #keepalive_timeout 0; keepalive_timeout 65; #gzip on; #负载均衡 upstream food{ server 8.139.254.***:8892; server 123.56.114.**:8892; } server { listen 8988; server_name localhost; location / { root /mydata/food/food_web/dist; try_files $uri $uri/ /index.html; //如果文件存在则直接返回该文件内容，如果文件不存在则在同一目录下查找同名的目录 index index.html index.htm; } error_page 500 502 503 504 /50x.html; location = /50x.html { root html; } } server { listen 8892; server_name food; location / { root html; index index.html index.htm; } location /api/shop/ { proxy_pass http://food; client_max_body_size 100m; proxy_connect_timeout 180s; proxy_read_timeout 180s; proxy_send_timeout 180s; proxy_next_upstream error timeout invalid_header; add_header X-Slave $upstream_addr; proxy_set_header X-Real-IP $remote_addr; proxy_set_header Host $host; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection \\\"upgrade\\\"; proxy_buffer_size 2M; proxy_buffers 256 2M; proxy_busy_buffers_size 2M; proxy_temp_file_write_size 2M; } } } \",\"restart.sh\",\"while getopts f: OPT; do case ${OPT} in f) tail_flag=${OPTARG} ;; \\\\?) exit 1 esac done jar_name=$(find . -name *$v.jar | awk '{print $1}' | awk -F\\\"/\\\" '{ print $2 }'); port=8892 pid=$(netstat -nlp | grep :$port | awk '{print $7}' | awk -F\\\"/\\\" '{ print $1 }'); if [ -n \\\"$pid\\\" ];then kill -9 $pid fi nohup java -Xms4096m -Xmx6144m -jar $jar_name --server.port=$port --spring.profiles.active=dev > /dev/null 2>&1 & if [ ! $tail_flag ] || [ $tail_flag == 'y' ];then tail -f logs/info.log fi \",\"引入外部文件 include /usr/local/nginx/conf/conf.d/*.conf;\"]},\"166\":{\"h\":\"七、Nginx核心\",\"t\":[\"代理：正向代理和反向代理 正向代理：需要安装在⽤户的电脑上，代理⽤户发出的请求，⽐如：翻墙软件、⽹络加速器等 反向代理：需要安装在服务器上的，代理服务器的请求和响应，⽐如：Nginx 负载均衡：⼀个事，多个⼈⼲，这多个⼈就形成了集群，这些⼈就是负载均衡 负载均衡算法：决定这事交给集群中哪⼀个⼈做 1.轮询 按次序先后分配 2.权重 根据权重值，进⾏优先分配，权重⼤的，被分配到的概率就⼤ 3.ip_hash 根据ip地址的哈希算法，分配请求 核⼼点： 1.Nginx实现静态资源代理服务器 代理静态⻚⾯（html）性能远超Apahce 2.Nginx实现反向代理 3.Nginx实现Tomcat负载均衡（反向代理） 4.Nginx绑定域名\"]},\"167\":{\"h\":\"运维\",\"t\":[\"提示\",\"待维护\"]},\"168\":{\"c\":[\"运维\"]},\"169\":{\"h\":\"Squid\"},\"170\":{\"h\":\"一、Squid简介\",\"t\":[\"参考文档：https://blog.csdn.net/jobbofhe/article/details/105561452 api：https://choiajsd.aichatos.com/#/chat/1681287846955 官网：http://www.squid-cache.org/\",\"Squid是一款流行的缓存代理服务器软件，可以提高网络的访问速度和安全性。它最初是由Dusan J. Stefanovic于1996年创建的，目前已经发展成为开源社区中最为流行的缓存代理服务器之一。Squid可以作为代理服务器，帮助用户加速Web访问、过滤不安全的内容、控制用户行为、减轻网络使用压力等。Squid支持多种协议，包括HTTP、FTP等，是企业网关和ISP等网络服务商的常用软件之一。\",\"搭建Squid的步骤如下： su 进入root用户\"]},\"171\":{\"h\":\"1.1 安装命令：\",\"t\":[\"yum install -y squid yum install httpd-tools -y --认证模块 \"]},\"172\":{\"h\":\"1.2 软件相关列表\",\"t\":[\"rpm -ql squid /etc/squid/squid.conf //配置文件 /etc/rc.d/init.d/squid //启动脚本 /usr/sbin/squid //二进制命令 /usr/share/doc/squid-3.1.10 //手册 /var/log/squid //日志目录 /var/spool/squid //缓存目录 \"]},\"173\":{\"h\":\"1.3 生成密码文件\",\"t\":[\"mkdir /etc/squid/ #kouzhe 是用户名 htpasswd -cd /etc/squid/passwords kouzhe #提示输入密码，比如输入000 \"]},\"174\":{\"h\":\"1.4 测试密码文件\",\"t\":[\"/usr/lib64/squid/basic_ncsa_auth /etc/squid/passwords #输入用户名 密码 ikaros kz8989 #提示ok说明成功 ok #ctrl+c退出 \"]},\"175\":{\"h\":\"二、配置squid.conf文件\",\"t\":[\"将 http_access deny CONNECT !SSL_ports改为http_access allow CONNECT !SSL_ports\",\"vi /etc/squid/squid.conf #在最后添加 auth_param basic program /usr/lib64/squid/basic_ncsa_auth /etc/squid/passwords auth_param basic children 5 #认证个数 auth_param basic realm proxy #客户端使用代理描述文字 auth_param basic casesensitive off #区分大小写 acl authenticated proxy_auth REQUIRED #允许认证用户访问 http_access allow authenticated # 认证访问 http_access allow all #允许所有访问请求 删除上面一致的 #http_port 3128 这样写会同时监听ipv6和ipv4的端口，推荐适应下面的配置方法。 http_port 0.0.0.0:3128 \"]},\"176\":{\"h\":\"2.1 日志\",\"t\":[\"squid的日志位于/var/log/squid/目录下\"]},\"177\":{\"h\":\"2.2 启动，停止，重启等\",\"t\":[\" ```powershell #启动start systemctl start squid.service #停止stop systemctl stop squid.service #重启stop systemctl restart squid.service #配置开机自启动 systemctl enable squid.service #关闭开机自启动 systemctl disable squid.service #查看运行状态 systemctl status squid.service # 开放端口 firewall-cmd --permanent --zone=public --add-port=3128/tcp 1. 启动防火墙 systemctl start firewalld 2. 禁用防火墙 systemctl stop firewalld ``` ## 三、Windows下客户端测试 根据以上步骤安装完后，Windows下安装**Proxifier:**自行下载 \"]},\"178\":{\"h\":\"3.0 谷歌浏览器动态代理插件\",\"t\":[\"Proxy https://www.aliyundrive.com/s/xE4NdjvSsmb 点击链接保存，或者复制本段内容，打开「阿里云盘」APP ，无需下载极速在线查看，视频原画倍速播放。 修改文件重启服务后 配置规则可自行更改\"]},\"179\":{\"h\":\"3.1查看ip\",\"t\":[\"\\n## 四、问题\\n### 问题一：10060\\n  连接尝试失败,错误 10060\\n查看端口号是否开通\\nsudo firewall-cmd --permanent --add-port=3306/tcp\\n 向防火墙规则中添加一个开放的端口  \\nfirewall-cmd --zone=public --add-port=3306/tcp --permanent\\n添加端口后刷新防火墙\\n firewall-cmd --reload\\n问题二：\\n1681310475.095      0 183.206.21.40 TAG_NONE/503 0 CONNECT [2409:8c3c:1300:504::78de:e524]:443 kouzhe HIER_NONE/- -\\n\"]},\"180\":{\"h\":\"英文翻译\"},\"181\":{\"h\":\"NVM\",\"t\":[\"NVM (Node Version Manager) 是一个用于管理多个 Node.js 版本的工具。它可以让您在同一台计算机上运行多个 Node.js 版本，并且能够在它们之间快速切换，而无需手动更改 PATH 环境变量。由于编码时，node.js版本不同导致各种依赖无法兼容，使用nvm多版本控制 安装包地址：https://github.com/coreybutler/nvm-windows/releases NVM文档（非官方，仅参考）:https://nvm.uihtm.com/\"]},\"182\":{\"h\":\"一、下载安装\",\"t\":[\"首先卸载Node.js nvm安装位置 nodejs 安装位置 环境变量安装完成之后就已存在 nvm-version -- 查看是否安装成功\"]},\"183\":{\"h\":\"二、配置淘宝镜像\",\"t\":[\"方式一：\",\"nvm node_mirror https://npm.taobao.org/mirrors/node/ nvm npm_mirror https://npm.taobao.org/mirrors/npm/ \",\"方式二修改配置文件：\"]},\"184\":{\"h\":\"三、常用命令：\",\"t\":[\"nvm install v-14.13.0 -- 安装node.js版本 nvm list -- 查看列表 nvm use 14.13.0 -- 切换node版本 nvm on ： 打开node.js版本控制 nvm off ： 关闭node.js版本控制 nvm list ： 查看已经安装的版本 nvm list available ： 查看网络可以安装的版本 nvm install '版本号' ：安装指定版本node.js nvm uninstall ' ' ： 卸载指定版本号 nvm use ' ' ： 切换指定的node版本 nvm version ： 查看当前的版本 \"]},\"185\":{\"h\":\"前端\",\"t\":[\"目录\",\"Nvm\",\"Vue-CLI\"]},\"186\":{\"h\":\"Vue2\"},\"187\":{\"h\":\"一、Vue核心\",\"t\":[\"安装vue开发者工具\",\"链接：https://pan.baidu.com/s/1nuARmNkUNLWHY_humQaxEw?pwd=tnnd 提取码：tnnd\"]},\"188\":{\"h\":\"1、插值语法\",\"t\":[\"Vue⽀持把Vue中的数据绑定到html标签上，使⽤插值语法 动态改变数据\",\"语法格式：{{ 属性名 }} \",\"<!DOCTYPE html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\"> <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\"> <title>插值语法</title> </head> <body> <div id=\\\"app\\\"> <h1>{{message}}</h1></h1> </div> <script src=\\\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\\\"></script> <script> //创建vue实例 var app = new Vue({ el: \\\"#app\\\", data: { message: \\\"测试\\\" } }); </script> </body> </html> \",\"如果内容包含了html标签，那么需要使⽤v-html=\\\"属性名\\\".\",\"61\",\"vue ⻚⾯内部有三部分组成：\",\"1.模板：html标签\",\"2.script：js代码\",\"3.style：css样式\"]},\"189\":{\"h\":\"2、双向绑定\",\"t\":[\"指的是v-model,⽤在表单标签（input、select、textarea ⽤户可以输⼊内容）\",\"语法格式：v-model=\\\"属性名 \",\"如何使用：\",\"62\",\"<body> <div id=\\\"app\\\"> <input v-model=\\\"doble\\\"></input> <label>{{doble}}</label> <select v-model=\\\"car\\\"> <option>保时捷</option> <option>奥迪</option> <option>红旗</option> <option>宝马</option> </select> <h1>{{car}}</h1> </div> <script src=\\\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\\\"></script> <script> var app = new Vue({ el: \\\"#app\\\", data: { doble: \\\"双向绑定\\\", car: '奥迪' }, methods: { } }); </script> </body> \"]},\"190\":{\"h\":\"3、分支\",\"t\":[\"Vue中也提供了分支语句，相当于Java中的if语句，v-if可以实现条件判断\",\"语法格式：v-if=\\\"boolean属性名\\\" v-else-if=\\\"boolean类型\\\" v-else \",\"如何使用：\",\"sex==1时 显示:男\",\"<body> <div id=\\\"app\\\"> <h1 v-if=\\\"sex==1\\\">男</h1> <h2 v-else-if=\\\"sex==2\\\">女</h2> <h2 v-else>无效</h2> </div> <script src=\\\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\\\"></script> <script> var app = new Vue({ el: \\\"#app\\\", data: { sex: 1 } }); </script> </body> \"]},\"191\":{\"h\":\"4、循环\",\"t\":[\"Vue提供了循环操作，相当于Java中的for循环，v-for，可以实现数组的遍历等\",\"语法格式：v-for=\\\"变量 in 数组\\\" \",\"如何使用：\",\"<body> <div id=\\\"app\\\"> <div><h1 v-for=\\\"l in arr\\\">{{l}}</h1></div> <select > <option v-for=\\\" l in all\\\">{{l}}</option> </select> </div> <script src=\\\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\\\"></script> <script> var app = new Vue({ el: \\\"#app\\\", data: { arr: [ '沟霸1', '沟霸2', '沟霸3' ], all: [ \\\"下拉1\\\", \\\"下拉1\\\", \\\"下拉1\\\", \\\"下拉1\\\" ] } }); </script> </body> \"]},\"192\":{\"h\":\"5、 事件绑定\",\"t\":[\"Vue提供了对标签事件的函数绑定，采⽤v-on:事件名=\\\"函数名\\\"\",\"语法格式： V-on:事件名=\\\"函数名\\\" 简写形式：@事件名=\\\"函数名\\\" \",\"使用:\",\"63\",\"<body> <div id=\\\"app\\\"> <h1>{{num}}</h1> <button @click=\\\"big()\\\" >加一</button> <div > <button id=\\\"btn1\\\" @click=\\\"bigsize()\\\" >变大</button> </div> </div> <script src=\\\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\\\"></script> <script> var w=100 var app = new Vue({ el: \\\"#app\\\", data: { num: 1 }, methods: { big(){ this.num++ }, bigsize(){ w+=20 document.getElementById(\\\"btn1\\\").style.width=w+\\\"px\\\"; document.getElementById(\\\"btn1\\\").style.height=w+\\\"px\\\"; } } }); </script> </body> \"]},\"193\":{\"h\":\"6、属性绑定\",\"t\":[\"v-bink: 绑定html属性\",\"语法格式： V-bind:标签属性名=\\\"变量名\\\" 简写形式 :标签属性名=\\\"变量名\\\" \",\"<button v-bind:id=\\\"bind\\\"></button> \"]},\"194\":{\"h\":\"7、组件\",\"t\":[\"自定义标签，目的实现复用，减少重复的工作\",\"<body> <!--2.绘制标签，页面--> <div id=\\\"app\\\"> <!-- 3.组件的使用--> <k></k> </div> <script> // 1.组件的定义 Vue.component('k', { data: function () { return { user:{ name:\\\"admin\\\", password:\\\"8888888\\\" } } }, //2.设置模板 template: ` <div> <div> <h2>欢迎登录</h2> <form> <div> <label>账号：</label><input v-model=\\\"user.name\\\"> </div> <div> <label>密码：</label><input type=\\\"password\\\" v-model=\\\"user.password\\\"> </div> <h1>{{user.name}}</h1> <h1>{{user.password}}</h1> </form> </div> </div> ` }) // <!-- 3.js 完成Vue创建--> var app = new Vue({ el: '#app',//绑定到指定标签上（div） }) </script> </body> \"]},\"195\":{\"h\":\"8、核心总结\",\"t\":[\"{{插值语法}}：标签绑定变量\",\"v-if：判断的时候\",\"v-for：循环的时候\",\"v-on：绑定事件，设置事件：点击、内容改变\",\"v-model：双向绑定，表单标签（input select teatarea）数据绑定\",\"v-html：标签绑定变量，针对变量的内容有html标签\",\"v-bind：绑定属性，标签的属性，动态变化\",\"Vue组件：⾃定义标签，实现复⽤\"]},\"196\":{\"h\":\"二、安装Vue-Cli\",\"t\":[\"卸载命令\",\"npm uninstall vue-cli -g cnpm uninstall @vue/cli -g where vue 删除出现的两个文件 \"]},\"197\":{\"h\":\"1、首先安装node.js\",\"t\":[\"无脑下一步，选择Add to PATH自动配置境变量\",\"出现即安装成功\",\"node -v npm -v \"]},\"198\":{\"h\":\"2、设置安装路径\",\"t\":[\"设置npm安装程序时的默认位置\",\"npm config set prefix \\\"E:\\\\JavaDevelop\\\\Vue\\\\node_global\\\" \",\"设置npm安装程序时的缓存位置\",\"npm config set cache \\\"E:\\\\JavaDevelop\\\\Vue\\\\node_cache\\\" \",\"配置淘宝镜像\",\"npm config set registry https://registry.npm.taobao.org \",\"查看镜像\",\"npm config get registry \",\"2\"]},\"199\":{\"h\":\"3、安装vue-cli\",\"t\":[\"npm install -g @vue/cli \",\"查看是否安装成功\",\"vue -V \"]},\"200\":{\"h\":\"4、Vue-cli 创建Vue项⽬\",\"t\":[\"1.创建Vue项⽬\",\"vue create 项目名 \",\"2.设置项⽬信息\",\"选择⾃定义选项\",\"4\",\"选择需要的，去除不需要的\",\"只要Babel模块\",\"5\",\"3.选择Vue的版本\",\"6\",\"4.设置配置⽂件\",\"7\",\"5.设置是的需要保存为模板\",\"8\",\"6.进入目录测试\",\"9\",\"访问路径成功即创建成功\",\"1.vue create 项⽬名:创建Vue项⽬\",\"2.npm run serve:运⾏Vue项⽬\",\"3.npm install xxx:下载js库\",\"4.npm run build:打包项⽬\"]},\"201\":{\"h\":\"三、在idea中创建标准的Vue-cli\"},\"202\":{\"h\":\"1、vue create 项目名\",\"t\":[\"10\"]},\"203\":{\"h\":\"2、选择模块\",\"t\":[\"稍后会说明：Router,Vuex\",\"11\"]},\"204\":{\"h\":\"3、选择vue版本\",\"t\":[\"12\"]},\"205\":{\"h\":\"4、选择.json\",\"t\":[\"13\"]},\"206\":{\"h\":\"5、创建成功\",\"t\":[\"14\"]},\"207\":{\"h\":\"6、运行成功\",\"t\":[\"15\",\"项目结构\",\"16\"]},\"208\":{\"h\":\"四、Vue-Router\",\"t\":[\"Vue Router 是 Vue.js 的官方路由。它与 Vue.js 核心深度集成，让用 Vue.js 构建单页应用变得轻而易举。功能包括\",\"嵌套路由映射\",\"动态路由选择\",\"模块化、基于组件的路由配置\",\"路由参数、查询、通配符\",\"展示由 Vue.js 的过渡系统提供的过渡效果\",\"细致的导航控制\",\"自动激活 CSS 类的链接\",\"HTML5 history 模式或 hash 模式\",\"可定制的滚动行为\",\"URL 的正确编码\",\"使用步骤\",\"在idea创建项目之后默认在main.js文件中导入了router\"]},\"209\":{\"h\":\"1、注册\",\"t\":[\"导包\",\"64\"]},\"210\":{\"h\":\"2、跳转\",\"t\":[\"//动态路由 this.$router.push(\\\"/about\\\"); \",\"//实现跳转并传递参数 对应path this.$router.push({path:\\\"/about\\\",query:{msg:this.router}}) \",\"//实现跳转并传递参数 对应name this.$router.push({name:\\\"about\\\",params{msg1:this.router1}}) \",\"65\"]},\"211\":{\"h\":\"3、接收参数\",\"t\":[\"<!-- query的取参数--> <h1>{{this.$route.query.msg}}</h1> <!-- params取参数--> <h1>{{this.$route.params.msg1}}</h1> \"]},\"212\":{\"h\":\"五、Vue-Vuex\",\"t\":[\"简介：Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。Vuex 也集成到 Vue 的官方调试工具 devtools extension (opens new window)，提供了诸如零配置的 time-travel 调试、状态快照导入导出等高级调试功能\"]},\"213\":{\"h\":\"1、Vuex核心\",\"t\":[\"1.五个组成部分\",\"state：存储数据，状态\",\"mutation：更改state中定义的数据，内部定义函数实现修改\",\"action：调⽤mutation的⽅法，适合处理mutation中⽅法耗时，因为⽀持异步\",\"getter：对state的数据进⾏⼆次处理，内部定义函数，实现数据的⼆次处理\",\"modules：针对有⼤对象的state进⾏拆分\"]},\"214\":{\"h\":\"2、Vuex使用\",\"t\":[\"1、定义\",\"66\",\"2、获取数据\",\"<!-- Vuex 获取数据--> <h1>获取数据:{{this.$store.state.test}}</h1> \",\"3、修改数据\",\"//改变vuex属性 this.$store.commit('setTest',this.g) \"]},\"215\":{\"h\":\"六、Visual Studio Code 设置 Vue模板\",\"t\":[\"1.vue.code-snippets\",\"{ \\\"Print to console\\\": { \\\"prefix\\\": \\\"vue\\\", \\\"body\\\": [ \\\"<template>\\\", \\\"<div class='$2'>$5</div>\\\", \\\"</template>\\\", \\\"\\\", \\\"<script>\\\", \\\"\\\", \\\"export default {\\\", \\\"name:'',\\\", \\\"components: {},\\\", \\\"props:{},\\\", \\\"data() {\\\", \\\"return {\\\", \\\"\\\", \\\"};\\\", \\\"},\\\", \\\"computed: {},\\\", \\\"watch: {},\\\", \\\"methods: {\\\", \\\"\\\", \\\"},\\\", \\\"//生命周期 - 创建完成（可以访问当前this实例）\\\", \\\"created() {\\\", \\\"\\\", \\\"},\\\", \\\"//生命周期 - 挂载完成（可以访问DOM元素）\\\", \\\"mounted() {\\\", \\\"\\\", \\\"},\\\", \\\"beforeCreate() {}, //生命周期 - 创建之前\\\", \\\"beforeMount() {}, //生命周期 - 挂载之前\\\", \\\"beforeUpdate() {}, //生命周期 - 更新之前\\\", \\\"updated() {}, //生命周期 - 更新之后\\\", \\\"beforeDestroy() {}, //生命周期 - 销毁之前\\\", \\\"destroyed() {}, //生命周期 - 销毁完成\\\", \\\"activated() {}, //如果页面有keep-alive缓存功能，这个函数会触发\\\", \\\"}\\\", \\\"</script>\\\", \\\"<style lang='scss' scoped>\\\", \\\"$4\\\", \\\"</style>\\\" ], \\\"description\\\": \\\"Log output to console\\\" } } \",\"2.vue.json.code-snippets\",\"{ \\\"vue\\\": { \\\"prefix\\\": \\\"vue\\\",//关键字 \\\"body\\\": [//对应代码片段 \\\"<!DOCTYPE html>\\\", \\\"<html lang=\\\\\\\"en\\\\\\\">\\\", \\\"\\\", \\\"<head>\\\", \\\"\\\\t<meta charset=\\\\\\\"UTF-8\\\\\\\">\\\", \\\"\\\\t<meta name=\\\\\\\"viewport\\\\\\\" content=\\\\\\\"width=device-width, initial-scale=1.0\\\\\\\">\\\", \\\"\\\\t<title>vueApp</title>\\\", \\\"</head>\\\", \\\"\\\", \\\"<body>\\\", \\\"\\\\t<div id=\\\\\\\"app\\\\\\\">\\\", \\\"\\\", \\\"\\\\t</div>\\\", \\\"\\\\t<script src=\\\\\\\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\\\\\\\"></script>\\\", \\\"\\\\t<script>\\\", \\\"\\\\t\\\\tvar app = new Vue({\\\", \\\"\\\\t\\\\t\\\\tel: \\\\\\\"#app\\\\\\\",\\\", \\\"\\\\t\\\\t\\\\tdata: {\\\", \\\"\\\", \\\"\\\\t\\\\t\\\\t},\\\", \\\"\\\\t\\\\t\\\\tmethods: {\\\", \\\"\\\", \\\"\\\\t\\\\t\\\\t}\\\", \\\"\\\\t\\\\t});\\\", \\\"\\\\t</script>\\\", \\\"</body>\\\", \\\"\\\", \\\"</html>\\\" ], \\\"description\\\": \\\"vue snippet\\\" } } \"]},\"216\":{\"h\":\"Mysql基础\",\"t\":[\"DBMS：数据库管理系统Mysql数据库的数据类型1.数字类型：int bigint tinyint double decimal(⻓度，⼩数点的位数)2.字符串类型：char varchar text3.⽇期类型：date datetimeSQL分类：1.DDL:数据定义 create drop alter2.DML:数据操作 insert update delete3.DQL:数据查询 select4.TPL(TCL):事务处理 commit rollback5.DCL:数据控制语⾔ grant6.CCL:指针控制语⾔ cursor\"]},\"217\":{\"h\":\"一、事物 :\",\"t\":[\"原子性：原子性就是最小单位，不可分割。事物中的所有元素必须作为一个整体提交或回滚一致性：对事物的操作，状态必须是一致的，要么都成功，要么都失败隔离性：两个事物之间是相互隔离的，互不干扰持久性：一个事物成功完成后它对于数据库的改变是永久性的，事物的效果就会永久地保留在数据库中MySQL默认的事物隔离级别是：可重复读第一种隔离级别：可序化序列化是最高的事物隔离级别，性能低，避免脏读，幻读，不可重复读。第二种隔离级别：可重复读可重复读是指在一个事务内，多次读同一个数据，在这个事物还未结束时，其它事物不能访问该数据。（可以防止脏读和不可重复读） 第三种隔离级别：读已提交如果是一个读事物，则允许其他事物读写，如果是写事物，将会禁止其他事物访问该行数据，避免了脏读，但可能出现不可重复读，事务A事先读取了数据，事务B紧接着更新了数据，并提交了事务，而事务A再次读取该数据时，数据已经发生了改变。（可以避免脏读）第四种隔离级别：读未提交如果一个事物已经开始写数据，则另外一个事物不允许同时进行写操作，但允许其他事物读取此行数据，避免更新丢失，也就是事物B读取到了事物A未提交的数据。（最低隔离）脏读：脏读指的是一个事务读到了其他事务未提交的数据**幻读：**幻读指的是一个事务被其他事务插入或者删除的数据有影响，重点在于事务开始后，其他事务插入或删除了数据。不可重复读：不可重复读指的是一个事务中多次读到同一条数据发生了变化，重点在于表中已经存在的数据被其他事务修改了 脏写 脏读 不可重复读 幻读 读未提交 √ × × × 读已提交 √ √ × × 可重复度 √ √ √ × 可串行化 √ √ √ √\"]},\"218\":{\"h\":\"二、约束\",\"t\":[\"概念： 对表中的数据进行限定，保证数据的正确性、有效性和完整性。1.主键约束2.外键约束3.⾮空约束4.唯⼀约束5.⾃增约束\"]},\"219\":{\"h\":\"索引\",\"t\":[\"是⼀种可以提升查询效率的结构，⽬的就是为了提⾼查询的效率\",\"创建索引：create index 索引名 on 表名(字段名) ; （id性能最高） 创建表时候也可创建索引 查看索引是否⽣效：explain 查询语句 where 索引字段=值; 删除索引：alter table 表名 drop index 索引名; 查看表上的索引：show index from 表名; \",\"索引的分类：1.聚簇索引 也就是我们常用的id2.普通索引3.唯⼀索引(UNIQUE)4.联合索引\"]},\"220\":{\"h\":\"一、索引底层\",\"t\":[\"B-Tree B树的每一个结点都存储了key(索引值) 和 value(对应数据)不利于范围查找(区间查找)，如果要找 0~100的索引值，那么B树需要回旋查询，效率低B+Tree底层有一个单项链表(从小排序的)，也就是叶子节点，存储了索引值和数据地址。非叶子节点只存放索引值。优点：查询速度快，当有排序的时候不需要进行回旋查找\"]},\"221\":{\"h\":\"二、索引失效原理\",\"t\":[\"索引失效分类\",\"不符合最左匹配规则的原理使用函数%Like使用Or导致索引失效in使用不当order By\",\"image.png\",\"主要是联合索引 举几个例子 ，定义一个联合索引为 (a,b) ，联合索引查找的原理就是最左匹配原则，当a相等时，b的值也是有序的，这个时候根据二分法也是可以找到b对应的值，但是如果只查找b值的话，那就不存在a，那么b就是无序的，是没办法使用索引的，只能进行全表扫描，这种情况针对最左匹配原则\",\"还有一个经典案例就是 当查询的第一个a值使用大于小于号的时候，a得值就是不确定的，那么b的值也就是无序的，无法使用索引，这里是不能使用<>号的。\"]},\"222\":{\"h\":\"三、InnoDB存储原理\",\"t\":[\"说明\",\"1.聚簇索引(主键索引) 非叶子节点存储的key就是主键值，页子节点存储的key是主键值,value就是这一行的数据。2.而其他索引的非叶子节点存的索引值是对应的值，叶子节点的value存储的是主键key，在根据主键key来一次聚簇索引拿到数据，所以这就是不推荐使用select * 的原因。\",\"image.png\"]},\"223\":{\"h\":\"四、索引优化\",\"t\":[\"1.首先我们在开发中要避免使用select *\",\"说明\",\"1.增加查询分析器解析*的成本 2.无用的字段增加网络消耗，尤其是text类型的字段 3.我们通过sql执行计划EXPLAIN可以看到select * 没有用到任何索引的情况下，查询效率非常低(举个例子： select * from test where user_name = '11'， 这一行查询，如果说有user_name这个索引，他首先能查到这条数据 根据索引存储的 存储的key是user_name的值 value是id值， 然后再回旋查询，(这个做的实际上还是回表的操作，通过id实际上是拿到了整条数据进行了一个回表的操作，只有覆盖索引才不会进行回表操作)根据id值去匹配聚簇索引，key是id值，value是这一行的数据 如果没有user_name的索引，那就是全表扫。聚簇索引就是主键索引 默认都有,所以select * 全表扫描的时候 如果没有索引那么效率会非常低) 4.如果我们只查询自己用到的列，并且这些列都用到了索引(联合索引)，查询列都是索引列那么这些列被称为覆盖索引。这种情况下查询的相关字段都能走索引，索引查询的效率相对较高 5.SELECT *操作在某些情况下可能会导致回表 在关联查询中，数据库系统可能会首先对一个表进行全表扫描，以减少后续连接操作的数据量。这是因为全表扫描通常比使用索引更高效，尤其是在表很大的情况下。然后，数据库系统会使用连接操作将扫描到的数据与另一个表的数据进行关联。 如果查询的列超出了索引的范围，即查询中使用的列不完全是索引列，那么在连接操作之后，数据库系统可能需要回表到原始表中，以获取查询中使用的所有列的数据。这种情况下，回表操作会导致额外的I/O操作，从而降低查询性能。\",\"2.小表驱动大表\",\"说明\",\"小表驱动大表就是指用数据量较小、索引比较完备的表，然后使用其索引和条件对大表进行数据筛选，从而减少数据计算量，提高查询效率。比如说student表有30条数据, scores表有80w条数据。我们就要把student作为主表，然后去关联scores的studentId。但如果相反的我们把scores作为主表，那么我们首先要把80w数据全部查出来性能肯定是大大降低了的\",\"3.导致索引失效的情况\",\"说明\",\"1.不满足索引的前缀条件：如果索引是复合索引（即多列索引），并且查询没有使用索引列的前缀，那么索引可能不会被使用。例如，如果索引是 (a, b)，但查询只使用了 b，则索引可能失效。 2.函数和表达式：在查询中使用函数（如 NOW()、YEAR() 等）或表达式（如计算、字符串拼接等）对索引列进行处理，会导致索引失效。 3.模糊查询：对于类似于 LIKE '%value%' 的查询，如果通配符 % 出现在模式字符串的开始处，索引将不会被使用。 4.使用 OR 连接的条件：当查询条件使用 OR 连接时，如果 OR 两边的条件没有使用同一个索引，或者其中一个条件没有索引，那么索引可能失效。 4.复合索引的顺序问题：如果查询条件中的列与复合索引中的列顺序不一致，那么索引可能不会被有效利用。 5.列的隐式类型转换：当查询条件中的列与索引列类型不匹配时，可能会导致类型转换，从而使索引失效。 6.使用 NOT、<>、IS NULL、IS NOT NULL 等操作符：这些操作符可能导致索引失效，因为它们往往涉及到全表扫描。 7.索引列上的计算：在索引列上进行计算（如 age + 1 = 30）会导致索引失效。 8.使用 IN 和 NOT IN 时：当 IN 或 NOT IN 列表中的元素过多时，数据库可能会选择全表扫描而不是使用索引。 9.索引的选择性较低：如果索引列的区分度不高（即许多行具有相同的索引值），数据库可能会选择全表扫描。 10.覆盖索引未使用：如果查询的列没有完全被索引覆盖，那么即使存在索引，数据库也可能选择全表扫描。 11.数据库统计信息不准确：如果数据库的统计信息不准确，查询优化器可能会做出错误的索引选择决策。 12.强制索引：有时开发者可能会强制使用特定的索引，但如果使用的索引不是最优的，可能会导致性能下降。\",\"4.explain关键字 通过explain关键字可以看到sql语句的执行过程，其中type、key、key_len、Extra需要尤其注重\",\"说明\",\"id 标识符 如果有多个id，id值相同，顺序执行；id值不同，id值越大越优先查询 1.select_type：查询类型 2.primary：包含子查询SQL中的主查询（最外层） 3.subquery：包含子查询SQL中的子查询（非最外层） 4.simple：简单查询（不包含子查询、union） 5.derived：衍生查询（使用到了临时表） 6.union：当查询时用到了table1 union table2，table1类型是derived，table2的类型是union 7.union result：哪些表存在union查询 table： 查询的是哪张表\",\"type： 索引类型 system>const>eq_ref>ref>range>index>all system>const存在于理想状态，实际能达到ref，索引的优化一般到ref为止 const：仅仅能查到一条数据的SQL，用于主键索引和唯一索引 eq_ref：唯一性索引：对于每个索引键的查询，返回匹配唯一行数据（有且只有1个，不能多、不能0） ref：非唯一性索引，对于每个索引键的查询，返回匹配的所有行 range：检索指定范围的行，where后面是一个范围查询（between，>，<)等。 index：查询全部索引中的数据 all：查询全部表中的数据 possible_keys 可能用到的索引\",\"key 实际用到的索引\",\"key_len 索引的长度，用于判断复合索引是否被完全使用\",\"ref 指明当前表所参照的字段\",\"rows 被索引优化查询的数据个数（实际通过索引查询到的数据个数）\",\"Extra using filesort：性能消耗大；需要“额外”的一次排序，常见于orderby语句 using temporary：性能损耗大，用到了临时表，一般出现在groupby中 using index：性能提升；索引覆盖（覆盖索引）。原因：不读取原文件，只从索引文件中获取数据 using where：回表查询；\",\"5.mysql索引优化案例\",\"说明\",\"小高是一个程序员，有一天他的组长让他去优化一个接口，这个接口的查询速度非常慢，小高开始分析这个接口，他先试了一下这个接口的响应时间，大概就是45~50秒之间可以返回响应，\\n此时他已经知道这个事情不简单了。首先小高从代码的角度考虑，看看有没出现for循环的sql从而导致接口性能下降，果不其然，小高发现在业务逻辑的处理中，有人使用了罕见的for循环sql，小高气不打一处来，于是看了下代码记录，\\n发现小寇，小哲，小李都参与过这段代码，心想：果然石山不是一天累计起来的呀！小高把for循环的sql，拿出来一次性查出来之后，通过代码去处理业务逻辑，进行数据的组装。之后又查看了sql，映入眼帘的就是select * ，话不多说，小高直接就是改成了select 要用到的字段，\\n因为select * 全表扫描的时候 如果没有索引那么效率会非常低，而且SELECT *操作在某些情况下可能会导致回表。解决完select * 之后小高又到数据库通过执行计划EXPLAIN查看sql的执行情况，发现sql的索引都没有加，小高没有直接去加索引，而是排查了一下sql是否有模糊查询，使用函数等导致索引失效的情况，\\n在这之后小高直接就是加上了一个联合索引，最终也是顺利的完成了这次优化。\"]},\"224\":{\"h\":\"Redis\"},\"225\":{\"h\":\"一、Redis存储数据的结构\",\"t\":[\"常用的5种数据结构：\",\"key-string：一个key对应一个值。\",\"key-hash：一个key对应一个Map。\",\"key-list：一个key对应一个列表。 有序的 可以重复的\",\"key-set：一个key对应一个集合。 无序的 不可以重复的\",\"key-zset：一个key对应一个有序的集合。 有序的 不可以重复的\",\"另外三种数据结构：\",\"HyperLogLog：计算近似值的。\",\"GEO：地理位置。\",\"BIT：一般存储的也是一个字符串，存储的是一个byte[]。\",\"image.png\",\"key-string：最常用的，一般用于存储一个值。\",\"key-hash：存储一个对象数据的。\",\"key-list：使用list结构实现栈和队列结构。\",\"key-set：交集，差集和并集的操作。\",\"key-zset：排行榜，积分存储等操作。\"]},\"226\":{\"h\":\"二、Redis事物\",\"t\":[\"Redis的事务：一次事务操作，该成功的成功，该失败的失败。先开启事务，执行一些系列命令，但是命令不会立即执行，会被放在一个队列中，如果你执行事务，那么这个队列中的命令全部执行，如果取消了事务，一个队列中的命令全部作废。\",\"开启事务：multi\",\"输入要执行的命令：被放入到一个队列中\",\"执行事务：exec\",\"取消事务：discard\",\"在开启事务之前，先通过watch命令去监听一个或多个key，在开启事务之后，如果有其他客户端修改了我监听的key，事务会自动取消。 如果执行了事务，或者取消了事务，watch监听自动消除，一般不需要手动执行unwatch。\"]},\"227\":{\"h\":\"三、Redis持久化机制\",\"t\":[\"3.1 RDBRDB是Redis默认的持久化机制\",\"RDB持久化文件，速度比较快，而且存储的是一个二进制的文件，传输起来很方便。\",\"RDB持久化的时机：save 900 1：在900秒内，有1个key改变了，就执行RDB持久化。save 300 10：在300秒内，有10个key改变了，就执行RDB持久化。save 60 10000：在60秒内，有10000个key改变了，就执行RDB持久化。\",\"RDB无法保证数据的绝对安全。\",\"3.2 AOFAOF持久化机制默认是关闭的，Redis官方推荐同时开启RDB和AOF持久化，更安全，避免数据丢失。\",\"AOF持久化的速度，相对RDB较慢的，存储的是一个文本文件，到了后期文件会比较大，传输困难。\",\"AOF持久化时机。appendfsync always：每执行一个写操作，立即持久化到AOF文件中，性能比较低。appendfsync everysec：每秒执行一次持久化。appendfsync no：会根据你的操作系统不同，环境的不同，在一定时间内执行一次持久化。\",\"AOF相对RDB更安全，推荐同时开启AOF和RDB。\",\"注意事项同时开启RDB和AOF的注意事项：如果同时开启了AOF和RDB持久化，那么在Redis宕机重启之后，需要加载一个持久化文件，优先选择AOF文件。如果先开启了RDB，再次开启AOF，如果RDB执行了持久化，那么RDB文件中的内容会被AOF覆盖掉。或者是：建议redis配置完成后，同时开启RDB和AOF备份！\"]},\"228\":{\"h\":\"四、Redis常见问题【重点】\"},\"229\":{\"h\":\"4.1 key的生存时间到了，Redis会立即删除吗？\",\"t\":[\"不会立即删除。\",\"定期删除：Redis每隔一段时间就去会去查看Redis设置了过期时间的key，会再100ms的间隔中默认查看3个key。\",\"惰性删除：如果当你去查询一个已经过了生存时间的key时，Redis会先查看当前key的生存时间，是否已经到了，直接删除当前key，并且给用户返回一个空值。\"]},\"230\":{\"h\":\"4.2 Redis的淘汰机制\",\"t\":[\"在Redis内存已经满的时候，添加了一个新的数据，执行淘汰机制。\",\"volatile-lru：在内存不足时，Redis会在设置过了生存时间的key中干掉一个最近最少使用的key。\",\"allkeys-lru：在内存不足时，Redis会再全部的key中干掉一个最近最少使用的key。\",\"volatile-lfu：在内存不足时，Redis会再设置过了生存时间的key中干掉一个最近最少频次使用的key。\",\"allkeys-lfu：在内存不足时，Redis会再全部的key中干掉一个最近最少频次使用的key。\",\"volatile-random：在内存不足时，Redis会再设置过了生存时间的key中随机干掉一个。\",\"allkeys-random：在内存不足时，Redis会再全部的key中随机干掉一个。\",\"volatile-ttl：在内存不足时，Redis会在设置过了生存时间的key中干掉一个剩余生存时间最少的key。\",\"noeviction：（默认）在内存不足时，直接报错。\",\"指定淘汰机制的方式：maxmemory-policy 具体策略，设置Redis的最大内存：maxmemory 字节大小内存配置(1)、内存设置①、如果不设置内存大小或者设置内存大小为0，在64位操作系统下不限制内存大小，在32位操作系统下最多使用3GB内存。②、Redis一般推荐设置内存为最大物理内存的四分之三。(2)、修改文件配置修改maxmemory大小，单位字节\"]},\"231\":{\"h\":\"4.3 缓存的常问题\",\"t\":[\"缓存穿透个人理解：指查询一个一定不存在的数据，由于缓存是不命中的，将去查询数据库，但是数据库也没有这个数据，更糟糕的是我们没有把这次查询的 null 结果 写入缓存，这将导致这个不存在的数据每次查询 都走数据库。 缓存也就没有意义了风险: 利用不存在的数据 进行攻击 数据库瞬时压力增大 可能导致崩溃解决：将null 结果放入 缓存 ，最好 加入一个 过期时间缓存击穿个人理解：对于某些热点数据 可能设置了过期时间 或者 在 第一次访问之前缓存中没有 在某一刻的高并发访问 都没有命中缓存，都查询了数据库 这称之为 缓存击穿解决方案：加锁预先设置下热点数据缓存雪崩问题缓存雪崩个人理解：我们在设置缓存的 key 时 采用了相同的过期时间 导致缓存在某一时刻同时失效 请求全部转到数据库 数据库瞬时压力大 造成雪崩解决方案：设置key 的时候 在原有的过期时间上 加上一个 随机值 比如 1-5 分钟的随机值 这样 每一个缓存key 的过期时间 重复率就会降低\"]},\"232\":{\"h\":\"五、延迟双删\",\"t\":[\"redis延迟双删的策略1.为什么要进行延迟双删一般我们在更新数据库数据时，需要同步redis中缓存的数据所以存在两种方法：（1）第一种方案：先执行update操作，再执行缓存清除。（2）第二种方案：先执行缓存清除，再执行update操作。弊端:当存在并发请求时，很容易出现问题（1）第一种方案：当请求1执行update操作后，还未来得及进行缓存清除，此时请求2查询到并使用了redis中的旧数据。（2）第二种方案：当请求1执行清除缓存后，还未进行update操作，此时请求2进行查询到了旧数据并写入了redis。2.如何实现延迟双删所以此时我们需要使用第三种方案：先进行缓存清除，再执行update，最后（延迟N秒）再执行缓存清除。3.需要注意的点上述中（延迟N秒）的时间要大于一次写操作的时间，一般为3-5秒。原因：如果延迟时间小于写入redis的时间，会导致请求1清除了缓存，但是请求2缓存还未写入的尴尬\"]},\"233\":{\"h\":\"六、哨兵模式\",\"t\":[\"哨兵模式 主节点 挂掉之后 在从机中选出新的主节点，哪个从机会被选为新的主节点？根据 配置文件的replica-priority 100 这个配置 这个值越小 优先级越高哨兵 解决了单点故障的问题 当有一个 master 节点 挂掉了 自动投票选举 出来一个 master 保证 主从架构正常执行 但是 这种架构还有一种问题 就是 存储的数据有限 ，也就是当数据量很大的时候 一个redis 存不下，上面的 一个 redis 主节点 无法存储这么多的数据 此时 就需要集群了Redis集群在保证主从加哨兵的基本功能之外，还能够提升Redis存储数据的能力\"]},\"234\":{\"h\":\"类加载过程\",\"t\":[\"加载 >> 验证 >> 准备 >> 解析 >> 初始化 >> 使用 >> 卸载\",\"img\"]},\"235\":{\"h\":\"一、加载\",\"t\":[\"提示\",\"简单来说:加载指的是把class字节码文件通过类加载器装载入内存中。\",\"一个Java文件从编码完成到最终执行，一般主要包括两个过程：编译和运行，其中编译就是把我们写好的java文件，通过javac命令编译成字节码，也就是我们常说的.class文件，然后运行则是把编译声称的.class文件交给Java虚拟机(JVM)执行。而我们所说的类加载过程即是指JVM虚拟机把.class文件中类信息加载进内存，并进行解析生成对应的class对象的过程。\",\"反射的机制即基于这一基础。如果 JVM 没有将 Java 类的声明信息存储起来，则 JVM 在运行期也无法反射\"]},\"236\":{\"h\":\"二、验证\",\"t\":[\"文件格式验证\",\"元数据验证\",\"字节码验证\",\"符号引用验证\"]},\"237\":{\"h\":\"三、准备\",\"t\":[\"如果 static 变量是 final 的基本类型，以及字符串常量，那么编译阶段值就确定了，赋值在准备阶段完成\",\"如果 static 变量是 final 的，但属于引用类型，即 new 对象，那么赋值会在初始化阶段完成\"]},\"238\":{\"h\":\"四、解析\",\"t\":[\"解析阶段是将符号引用替换为直接引用，该阶段会把一些静态方法替换为指向数据内存的指针或句柄等（直接引用），这是所谓的静态链接过程\"]},\"239\":{\"h\":\"五、初始化\",\"t\":[\"会导致 类初始化 的情况\",\"main 方法所在的类，总会被首先初始化\",\"首次访问这个类的 静态变量 或 静态方法 时\",\"子类初始化，如果父类还未初始化，会引发\",\"子类访问父类的静态变量，只会触发父类的初始化\",\"Class.forName\",\"new 会导致初始化\",\"不会导致 类初始化 的情况\",\"访问 类的 static final 静态变量（基本类型和字符型）不会触发初始化\",\"类对象.class 不会触发初始化\",\"创建该类的数组不会触发初始化\",\"类加载的 loadClass 方法\",\"Class.forName 的参数2 为 false 时\"]},\"240\":{\"h\":\"关于集合\",\"t\":[\"什么是集合\",\"集合就是一个存放数据对象引用的容器\",\"集合类存放的都是对象的引用，而不是对象的本身\",\"集合类型主要有3种：set(集）、list(列表）和map(映射)。\",\"集合和数组的区别\",\"数组是固定长度的；集合可变长度的。\",\"数组可以存储基本数据类型，也可以存储引用数据类型；集合只能存储引用数据类型。\",\"数组存储的元素必须是同一个数据类型；集合存储的对象可以是不同数据类型。\",\"常用的集合类有哪些\",\"Map接口和Collection接口是所有集合框架的父接口： Collection接口的子接口包括：Set接口和List接口\",\"Map接口的实现类主要有：HashMap、TreeMap、Hashtable、ConcurrentHashMap以及Properties等 Set接口的实现类主要有：HashSet、TreeSet、LinkedHashSet等 List接口的实现类主要有：ArrayList、LinkedList、Stack以及Vector等\"]},\"241\":{\"h\":\"1.1 Arraylist：底层Object数组\",\"t\":[\"初始化长度10，扩容原容量的1.5倍。\",\"优点：\",\"ArrayList 底层以数组实现，是一种随机访问模式。ArrayList 实现了 RandomAccess 接口，因此查找的时候非常快。\",\"ArrayList 在顺序添加一个元素的时候非常方便。\",\"缺点：\",\"删除元素的时候，需要做一次元素复制操作。如果要复制的元素很多，那么就会比较耗费性能。\",\"插入元素的时候，也需要做一次元素复制操作，缺点同上。\",\"ArrayList 比较适合顺序添加、查寻角较多场景。\"]},\"242\":{\"h\":\"1.2 LinkedList： 双向循环链表\",\"t\":[\"LinkedList 使用双向链表实现存储，按序号索引数据需要进行前向或后向遍历，但插入数据时只需要记录当前项的前后项即可，所以 LinkedList 插入速度较快查询较慢，插入和删除操作较多时，更推荐使用 LinkedList\"]},\"243\":{\"h\":\"1.3 Vector： Object数组\",\"t\":[\"线程安全 加了 synchronized 修饰性能差。\",\"扩容机制： Vector 扩容每次会增加 1 倍，而 ArrayList 只会增加 50%。\",\"HashSet 是基于 HashMap 实现的，HashSet的值存放于HashMap的key，HashSet 的操作，基本上都是直接调用底层HashMap 的相关方法来完成，HashSet 不允许重复的值。\"]},\"244\":{\"h\":\"2.1 HashSet （无序，唯一）\",\"t\":[\"基于 HashMap 实现的，底层采用 HashMap 来保存元素\",\"HashSet如何检查重复\",\"HashSet 中的add ()方法会使用HashMap 的put()方法。\",\"HashMap 的 key 是唯一的，由源码可以看出 HashSet 添加进去的值就是作为HashMap 的key，并且在HashMap中如果K/V相同时，会用新的V覆盖掉旧的V，然后返回旧的V。所以不会重复（HashMap 比较key是否相等是先比较hashcode 再比较equles\",\"提示\",\"hashCode（）与equals（）的相关规定：\",\"如果两个对象相等，则hashcode一定也是相同的\",\"hashCode是jdk根据对象的地址或者字符串或者数字算出来的int类型的数值 两个对象相等,对两个equals方法返回true 两个对象有相同的hashcode值，它们也不一定是相等的 综上，equals方法被覆盖过，则hashCode方法也必须被覆盖 hashCode()的默认行为是对堆上的对象产生独特值。如果没有重写hashCode()，则该class的两个 对象无论如何都不会相等（即使这两个对象指向相同的数据）。 ==与equals的区别\",\"==是判断两个变量或实例是不是指向同一个内存空间 equals是判断两个变量或实例所指向的内存空间的值是不是相同 ==是指对内存地址进行比较 equals()是对字符串的内容进行比较\"]},\"245\":{\"h\":\"2.2 LinkedHashSet\",\"t\":[\"LinkedHashSet： LinkedHashSet 继承与 HashSet，并且其内部是通过 LinkedHashMap 来实现的。有点类似于我们之前说的LinkedHashMap 其内部是基于 Hashmap 实现一样，不过还是有一点点区别的。\"]},\"246\":{\"h\":\"2.3 TreeSet （有序，唯一）\",\"t\":[\"红黑树(自平衡的排序二叉树)\"]},\"247\":{\"h\":\"3.1 HashMap\",\"t\":[\"JDK1.8之前HashMap由数组+链表组成的，数组是HashMap的主体，链表则是 主要为了解决哈希冲突而存在的（“拉链法”解决冲突）.JDK1.8以后在解决哈希冲突时有了较 大的变化，当链表长度大于阈值（默认为8）时，将链表转化为红黑树，以减少搜索时间\"]},\"248\":{\"h\":\"3.2 LinkedHashMap\",\"t\":[\"LinkedHashMap 继承自 HashMap，所以它的底层仍然是基于拉链式散 列结构即由数组和链表或红黑树组成。另外，LinkedHashMap 在上面结构的基础上，增加 了一条双向链表，使得上面的结构可以保持键值对的插入顺序。同时通过对链表进行相应的 操作，实现了访问顺序相关逻辑\"]},\"249\":{\"h\":\"3.3 HashTable\",\"t\":[\"数组+链表组成的，数组是 HashMap 的主体，链表则是主要为了解决哈希冲突 而存在的 （线程安全）\"]},\"250\":{\"h\":\"3.4 TreeMap\",\"t\":[\"红黑树（自平衡的排序二叉树）\"]},\"251\":{\"h\":\"HashSet与HashMap的区别\"},\"252\":{\"h\":\"拦截器和过滤器的区别\",\"t\":[\" 执行顺序 ：Filter 处理中 -> Interceptor 前置 -> 我是controller -> Interceptor 处理中 -> Interceptor 处理后\"]},\"253\":{\"h\":\"一、Filter\",\"t\":[\"实现Filter接口 init() doFilter() destroy() init() ：该方法在容器启动初始化过滤器时被调用，它在 Filter 的整个生命周期只会被调用一次。注意：这个方法必须执行成功，否则过滤器会不起作用。 doFilter() ：容器中的每一次请求都会调用该方法， FilterChain 用来调用下一个过滤器 Filter。 destroy()： 当容器销毁 过滤器实例时调用该方法，一般在方法中销毁或关闭资源，在过滤器 Filter 的整个生命周期也只会被调用一次\"]},\"254\":{\"h\":\"二、Intercaputer\",\"t\":[\"拦截器就是实现intercaputer 拦截器是实现Handlerlnterceptor接口 preHandle() postHandle() afterCompletion() 写一个类实现WebMvcConfigurer接口抽血addInterceptors方法来增加拦截的路径 基于java反射实现的\"]},\"255\":{\"h\":\"1、拦截器是什么实现的\",\"t\":[\"拦截器是依赖Java反射机制来实现的。用到的是JDK实现的动态代理，需要依赖接口。拦截器是在面向切面编程中应用的，就是在你的service或者一个方法前调用一个方法，或者在方法后调用一个方法\"]},\"256\":{\"h\":\"2、拦截器3个方法\",\"t\":[\"preHandle() ：控制器方法执行之前执行preHandle()，其boolean类型的返回值表示是否拦截或放行，返回true为放行，即调用控制器方法；返回false表示拦截，即不调用控制器方法。 postHandle()： 控制器方法执行之后执行postHandle()。 afterCompletion()： 处理完视图和模型数据，渲染视图完毕之后执行afterCompletion()。\"]},\"257\":{\"h\":\"3、多拦截器执行顺序\",\"t\":[\"当有多个拦截器时，形成拦截器链。拦截器的执行顺序与其注册顺序一致。需要再次强调一点的是当某一个拦截器的 preHandle() 方法返回 true 并被执行到时，会向一个专门的方法栈中放入该拦截器的 afterCompletion() 方法\"]},\"258\":{\"h\":\"Java基础\",\"t\":[\"final 用于修饰变量、方法和类。\",\"final 变量：被修饰的变量不可变，不可变分为引用不可变和对象不可变，final 指的是引用不可变，final 修饰的变量必须初始化，通常称被修饰的变量为常量。\",\"final 方法：被修饰的方法不允许任何子类重写，子类可以使用该方法。\",\"final 类：被修饰的类不能被继承，所有方法不能被重写。\",\"final修饰的形参：只能背赋值一次\",\"finally 作为异常处理的一部分，它只能在 try/catch 语句中，并且附带一个语句块表示这段语句最终一定被执行（无论是否抛出异常），经常被用在需要释放资源的情况下，System.exit (0) 可以阻断 finally 执行。finalize 是在 java.lang.Object 里定义的方法，也就是说每一个对象都有这么个方法，这个方法在 gc 启动，该对象被回收的时候被调用。一个对象的 finalize 方法只会被调用一次，finalize 被调用不一定会立即回收该对象，所以有可能调用 finalize 后，该对象又不需要被回收了，然后到了真正要被回收的时候，因为前面调用过一次，所以不会再次调用 finalize 了，进而产生问题，因此不推荐使用 finalize 方法\",\"封装定义:就是把事物封装成类,将类的某些信息隐藏在类内部,不允许外部程序直接访问,而是通过该类提供的方法来实现对隐藏信息的操作和访问。作用:尽可能地隐藏对象的内部实现细节、控制用户对类的修改和访问权限（体现：private属性） 提高代码的可维护性继承定义:继承是从已有的类中派生出新的类，新的类能吸收已有类的数据属性和行为，并能扩展新的能力 俗称子类继承父类注意:Java只支持单继承 ,一个子类只能继承一个父类,不能继承多个父类 但是可以多重继承多态是面向对象的三大特性之一，多态建立在封装和继承之上它是指在父类中定义的属性和方法被子类继承之后，可以具有不同的数据类型或表现出不同的行为，这使得同一个属性或方法在父类及其各个子类中具有不同的含义\"]},\"259\":{\"h\":\"如何理解先向上转型在向下转型\",\"t\":[\"多态就是父类的引用指向子类的实例\",\"值传递：指的是在方法调用时，传递的参数是按值的拷贝传递，传递的是值的拷贝，也就是说传递后就互不相关了。引用传递：指的是在方法调用时，传递的参数是按引用进行传递，其实传递的是引用的地址，也就是变量所对应的内存空间的地址。传递的是值的引用，也就是说传递前和传递后都指向同一个引用（也就是同一个内存空间）。基本类型作为参数被传递时肯定是值传递；引用类型作为参数被传递时也是值传递，只不过“值”为对应的引用\",\"判断的时候先根据hashcode进行的判断，相同的情况下再根据equals()方法进行判断。如果只重写了equals方法，而不重写hashcode的方法，会造成hashcode的值不同，而equals()方法判断出来的结果为true。在Java中的一些容器中，不允许有两个完全相同的对象，插入的时候，如果判断相同则会进行覆盖。这时候如果只重写了equals（）的方法，而不重写hashcode的方法，Object中hashcode是根据对象的存储地址转换而形成的一个哈希值。这时候就有可能因为没有重写hashcode方法，造成相同的对象散列到不同的位置而造成对象的不能覆盖的问题。\",\"StringBuilder与StringBuffer都继承自AbstractStringBuilder类，在AbstractStringBuilder中也是使用字符数组保存字符串，这两种对象都是可变的String中的对象是不可变的，也就可以理解为常量，显然线程安全。StringBuilder是非线程安全的。StringBuffer对方法加了同步锁或者对调用的方法加了同步锁，所以是线程安全的\"]},\"260\":{\"h\":\"JDK1.8新特性\"},\"261\":{\"h\":\"1.1Lomdba\",\"t\":[\"lomdba表达式就是使代码更简洁，它的本质就是作为函数式接口的实例，代替匿名内部类。\",\"//语法格式：(参数名)->{⽅法实现} Runnable r2 = ()-> System.out.println(\\\"我爱北京天安门\\\"); r2.run(); \"]},\"262\":{\"h\":\"1.2函数式接口\",\"t\":[\"如果一个接口中，有且仅有一个抽象方法，则此接口就称为函数式接口。我们可以在一个接口上使用 @FunctionalInterface 注解，这样做可以检查它是否是一个函数式接口\"]},\"263\":{\"h\":\"1.3Stream\",\"t\":[\"真正的引入了函数编程，通过流把文件从一个地方输入到另一个地方，它只是内容搬运工，对文件内容不做任何_CRUD。_它的方法参数都是函数式接口类型，所以一般和 Lambda 配合使用\",\"stream 串行流\",\"parallelStream 并行流，可多线程执行\"]},\"264\":{\"h\":\"1.4Optional\",\"t\":[\"Optional 类(java.util.Optional) 是一个容器类，它可以保存类型T的值，代表这个值存在。或者仅仅保存null，表示这个值不存在。原来用 null 表示一个值不存在，现在 Optional 可以更好的表达这个概念。并且可以避免空指针异常。 Optional类的Javadoc描述如下：这是一个可以为null的容器对象。如果值存在则isPresent()方法会返回true，调用get()方法会返回该对象。\"]},\"265\":{\"h\":\"1.5新时间日期API\",\"t\":[\"LocalDateTime、LocalDate、LocalTime\"]},\"266\":{\"h\":\"1.6接口默认/静态方法\",\"t\":[\"⽅法可以⽤ default 或 static 修饰\"]},\"267\":{\"h\":\"1.7重复注解/类型注解\",\"t\":[\"重复注解： 允许在同一声明类型（类，属性，或方法）上多次使用同一个注解。 Java8以前的版本使用注解有一个限制是相同的注解在同一位置只能使用一次，不能使用多次。 Java 8 引入了重复注解机制，这样相同的注解可以在同一地方使用多次。重复注解机制本身必须用 @Repeatable 注解类型注解： 在java 8之前，注解只能是在声明的地方所使用，java8开始，注解可以应用在任何地方。\"]},\"268\":{\"h\":\"1.8HashMap/ConcurrentHashMap底层结构\",\"t\":[\"略\"]},\"269\":{\"h\":\"JVM_GC\",\"t\":[\"JDK1.7：程序计数器、虚拟机栈、本地⽅法栈、堆、⽅法区JDK1.8：程序计数器、虚拟机栈、本地⽅法栈、堆、元空间程序计数器：记录每个线程的执⾏的字节⾏数。线程私有 虚拟机栈：方法调用的数据需要通过栈进行传递，每一次方法调用都会有一个对应的栈帧被压入栈中，每一个方法调用结束后，都会有一个栈帧被弹出，就是记录运行时需要的内存空间，方法参数。线程私有本地方法栈： 虚拟机栈为虚拟机执行 Java 方法 （也就是字节码）服务，而本地方法栈则为虚拟机使用到的 Native 方法服务，其他都与虚拟机栈一致。线程私有堆：记录⼤部分对象存储所需要的空间，最复杂的内存区域，内部分为：新⽣代（伊甸区+幸存者区 1+幸存者区2）和⽼年代 方法区（1.7）：存储类的信息（编译字节、静态区（静态变量、⽅法）、⽅法）和常量池 元空间（1.8）：没有在JVM内存区，⽽是直接使⽤电脑的内存区，存储类的信息（编译字节、静态区 （静态变量、⽅法）、⽅法）和常量池 直接内存：没有在JVM内存区，⽽是直接使⽤电脑的内存区，NIO有个Buffer,有⼀个叫直接内存 栈管运⾏，堆管存储。则虚拟机栈负责运⾏代码，⽽虚拟机堆负责存储数据\",\"堆内存中也会划分为年轻代和老年代\"]},\"270\":{\"h\":\"讲下gc\",\"t\":[\"判断对象是否存活GCRoots就是对象，是JVM确定当前绝不会被回收的对象（静态属性的对象）\"]},\"271\":{\"h\":\"5、完整GC回收流程 从创建到回收\",\"t\":[\"添加一个对象时，然后伊甸区的内存不足，直接添加到老年代中，当伊甸区内存不足时会发生gc时，就会把伊甸区存活对象和幸存者1存货的对象放到幸存者2上，然后将需要回收的对象回收之后，幸存者1和幸存者2区交换位置。然后他的年龄会+1，如果到达15岁就会进入到老年代。如果这块幸存者1内存不够，那么依赖老年代进行担保，直接进入老年代.还有一中情况就是 如果超过幸存者区一半的大小，就认为是大对象，存入老年代对象晋升到老年代一共有四种情况1.对象太大，Eden放不下  2.存放存活对象的Survivor区太小，不足以存下存活对象3.经历超过默认15次gc或者设定的4.判断是不是大对象-->看Survivor一半的大小，只要超过一般就认为是大对象，存入老年代GC回收算法1.标记清除算法将所有需要回收的算法进行标记，然后清除；这种算法的缺点是：效率比较低；标记清除后会出现大量不连续的内存碎片，这些碎片太多可能会使存储大对象会触发GC回收，造成内存浪费以及时间的消耗。2.复制算法将可用的内存分成两份，每次使用其中一块，当这块回收之后把未回收的复制到另一块内存中，然后把使用的清除。这种算法运行简单，解决了标记-清除算法的碎片问题，但是这种算法代价过高，需要将可用内存缩小一半，对象存活率较高时，需要持续的复制工作，效率比较低。3.标记整理算法将需要清理的对象进行标记，不直接清理，而是使存活对象往一端游走，然后清除一端边界以外的内存，这样既可以避免不连续空间出现，还可以避免对象存活率较高时的持续复制。这种算法适合老生代。4.分代收集算法分代收集算法就是目前虚拟机使用的回收算法，它解决了标记整理不适用于老年代的问题，将内存分为各个年代，在不同年代使用不同的算法，从而使用最合适的算法，新生代存活率低，可以使用复制算法。而老年代对象存活率高，没有额外空间对它进行分配担保，所以使用标记整理算法。\"]},\"272\":{\"h\":\"RabbitMQ\"},\"273\":{\"h\":\"1.1 生产者消息丢失\",\"t\":[\"分为两种\",\"1.1 事务机制可以开启事务，就是⽣产者发送数据之前开启 RabbitMQ 事务 channel.txSelect ，然后发送消息，如果说这个消息没有成功被 RabbitMQ 接收到，那么⽣产者会收到异常报错，然后就可以回滚事务 channel.txRollback ，回滚之后就重新发送消息，如果收到了消息，那么可以提交事务 channel.txCommit 但是这种方式的效率是比较低的。1.2 confirm机制 还有一种是RabbitMQ的confirm 机制，就是在生产者开启 confirm 模式，每个消息都会分配⼀个唯⼀的 id，如果说这个消息成功写⼊RabbitMQ 中，RabbitMQ 会给⽣产者回传⼀个 ack 消息，告诉mq接收到了。如果 RabbitMQ 没能处理这个消息，就会调用⼀个 nack 接⼝，就是这个消息他接收失败了，然后⽣产者继续发送消息。⽽且可以结合这个机制⾃⼰在内存⾥维护每个消息 id 的状态，如果超过⼀定时间还没接收到这个消息的回调，那么可以重发。回调的机制，推荐采⽤这种\"]},\"274\":{\"h\":\"1.2 RabbitMQ服务器端\",\"t\":[\"开启RabbitMQ的持久化。当⽣产者把消息成功写⼊RabbitMQ之后，RabbitMQ就把消息持久化到磁盘。但是如果说还没写的磁盘上，mq就宕机了，那么就要配合confirm机制，只有当消息成功持久化磁盘之后，才会回调⽣产者的接⼝返回ack 消息，否则都算失败，⽣产者会重新发送。存⼊磁盘中，这样就算RabbitMQ挂掉了，重启之后，他会读取磁盘中的消息，不会导致消息的丢失。\"]},\"275\":{\"h\":\"1.3 消费端\",\"t\":[\"刚消费到，还没有处理，结果进程就挂了，就可能造成消息丢失改为手动ack，当消息正确处理完成后，手动ack确认。如果说消费端处理消息异常，会回传nack，这样mq会把这条消息重新发送。还有一种情况就是mq会将超时未确认（ack）的消息重新放回队列\",\"1、⽣成全局id(雪花算法)，存⼊redis或者数据库，在消费者消费消息之前，查询⼀下该消息是否有消费过。2、如果该消息已经消费过，则告诉mq消息已经消费，将该消息丢弃（⼿动ack）。3、如果没有消费过，将该消息进⾏消费并将消费记录写进redis或者数据库中。\"]},\"276\":{\"h\":\"分布式锁\"},\"277\":{\"h\":\"执行流程\",\"t\":[\"因为是集群，普遍的锁是无法解决安全问题的，所以用来Redisson的RedLock锁，就是当有两个客户同时购买一个商品的时候，如果不使用分布式锁，就会线程不安全，可能导致出现超卖的现象，然后在那个判断库存上加锁，就是为了防止超卖的，当第一个请求进来的时候，会加锁，使用getLock加锁，锁的是一个key值，这个一般就是商品的id值，当下一个请求进来的时候，就会进不来，直到当前的锁被释放掉，才能重新加锁。\"]},\"278\":{\"h\":\"redisson 看门狗逻辑\",\"t\":[\"1、假如我的业务操作比有效时间长，我的业务代码还没执行完就自动给我解锁了，不就完蛋了吗？ 给锁续期。在Redisson框架实现分布式锁的思路，就使用watchDog机制实现锁的续期。\",\"提示\",\"当加锁成功后，同时开启守护线程，默认有效期是30秒，每隔10秒就会给锁续期到30秒，只要持有锁的客户端没有宕机，就能保证一直持有锁，直到业务代码执行完毕由客户端自己解锁，如果宕机了自然就在有效期失效后自动解锁。\",\"2、如果加锁失败的情况下，总不可能一直轮询尝试加锁，直到加锁成功为止，这样太过耗费性能？\",\"提示\",\"当加锁失败后，订阅锁释放的消息，自身进入阻塞状态。 当持有锁的客户端释放锁的时候，发布锁释放的消息。 当进入阻塞等待的其他客户端收到锁释放的消息后，解除阻塞等待状态，再次尝试加锁。\",\"image.png\"]},\"279\":{\"h\":\"Redis和Zookeeper实现分布式锁的区别\",\"t\":[\"CAP原则又称CAP定理，指的是在一个分布式系统中， Consistency（一致性）、 Availability（可用性）、Partition tolerance（分区容错性），三者不可得兼。\",\"CAP原则上分析\",\"一致性（C）：在分布式系统中的所有数据备份，在同一时刻是否同样的值。（等同于所有节点访问同一份最新的数据副本）可用性（A）：保证每个请求不管成功或者失败都有响应。分区容忍性（P）：系统中任意信息的丢失或失败不会影响系统的继续运作。 [1] CAP原则的精髓就是要么AP，要么CP，但是不存在CAP。 Redis： AP（保证可用性和分区容错性），Master加锁成功后就给客户端返回成功标识了，而不是等到同步完Slave再发，如果Slave还没同步完成，此时Maste宕机了，就会有问题。 Zookeeper ： CP （保证一致性和分区容错性），如果要保证完全一致性，可以使用zookeeper锁，CP，能够保证绝对一致， Zookeeper是Master节点加锁后，把状态也同步到了另外的节点成功后才给客户端返回成功标识但是性能没有redis高\",\"redis和zookeeper技术有何不同？\\nRedis 是nosql数据，主要特点缓存。\\nZookeeper是分布式协调工具，主要用于分布式解决方案。Redis实现分布式锁与Zookeeper实现分布式锁的思路分别是什么？\\n获取锁Zookeeper：多个客户端（jvm），会在Zookeeper上创建同一个临时节点，因为Zookeeper节点命名路径保证唯一，不允许出现重复，只要谁能够先创建成功，谁能够获取到锁。\\nRedis：多个客户端（jvm），会在Redis使用setnx命令创建相同的一个key，因为Redis的key保证唯一，不允许出现重复，只要谁能够先创建成功，谁能够获取到锁。\\n释放锁Zookeeper：使用直接关闭临时节点session会话连接，因为临时节点生命周期与session会话绑定在一块，如果session会话连接关闭的话，该临时节点也会被删除。这时候客户端使用事件监听，如果该临时节点被删除的话，重新进入获取锁的步骤。\\nRedis：在释放锁的时候，为了确保是锁的一致性问题，在删除的redis 的key时候，需要判断同一个锁的id，才可以删除。redis和zookeeper如何解决死锁问题？\\nZookeeper使用会话有效期方式解决死锁现象。\\nRedis 是对key设置有效期解决死锁现象分别从性能和可靠性两个角度谈谈redis和zookeeper实现分布式锁的优缺点\\n性能角度考虑：\\n因为Redis是NoSQL数据库，相对比来说Redis比Zookeeper性能要好。\\n可靠性：\\n从可靠性角度分析，Zookeeper可靠性比Redis更好，因为Redis有效期不是很好控制，可能会产生有效期延迟，Zookeeper就不一样，因为Zookeeper临时节点先天性可控的有效期，所以相对来说Zookeeper比Redis更好总结两种方案的优缺点比较\\n对于redis的分布式锁而言，它有以下缺点：\\n它获取锁的方式简单粗暴，获取不到锁直接不断尝试获取锁，比较消耗性能。\\n另外来说的话，redis的设计定位决定了它的数据并不是强一致性的，在某些极端情况下，可能会出现问题。锁的模型不够健壮\\n即便使用redlock算法来实现，在某些复杂场景下，也无法保证其实现100%没有问题，关于redlock的讨论可以看How to do distributed locking\\nredis分布式锁，其实需要自己不断去尝试获取锁，比较消耗性能。\\n但是另一方面使用redis实现分布式锁在很多企业中非常常见，而且大部分情况下都不会遇到所谓的“极端复杂场景”\\n所以使用redis作为分布式锁也不失为一种好的方案，最重要的一点是redis的性能很高，可以支撑高并发的获取、释放锁操作。\\n对于zk分布式锁而言:\\nzookeeper天生设计定位就是分布式协调，强一致性。锁的模型健壮、简单易用、适合做分布式锁。\\n如果获取不到锁，只需要添加一个监听器就可以了，不用一直轮询，性能消耗较小。\\n但是zk也有其缺点：如果有较多的客户端频繁的申请加锁、释放锁，对于zk集群的压力会比较大。\"]},\"280\":{\"h\":\"SpringMvc执行流程\",\"t\":[\"提示\",\"用户发起请求，请求先被 Servlet 拦截转发给 Spring MVC 框架\",\"Spring MVC 里面的 DispatcherSerlvet 核心控制器，会接收到请求并转发给HandlerMapping\",\"HandlerMapping 负责解析请求，根据请求信息和配置信息找到匹配的 Controller类，不过这里如果有配置拦截器，就会按照顺序执行拦截器里面的 preHandle方法\",\"找到匹配的 Controller 以后，把请求参数传递给 Controller 里面的方法\",\"Controller 中的方法执行完以后，会返回一个 ModeAndView，这里面会包括视图名称和需要传递给视图的模型数据\",\"视图解析器根据名称找到视图，然后把数据模型填充到视图里面再渲染成 Html 内容返回给客户端\",\"容器，控制反转，依赖注入\",\"IOC容器，实际上就是一个MAP,里面存放的是各种对象（xml配置的Bean，@Controlle，@Service，@Component）,在我们项目启动的时候会读取配置文件中的Bean，将Bean对象封装成BeanDefintion对象 ，根据全限定类名使用反射创建对象放入Map中，像注解方式也是通过反射创建对象到Map\",\"这个时候我们在代码里面使用里面的对象，需要通过DI注入方式\",\"控制反转：\",\"假设我们有A,B对象 A对象依赖B ，对象A和B是么有直接联系的，他们都在IOC容器里面，当对象A运行需要B时，IOC会自动创建B对象注入到需要的地方。\",\"在之后我们是需要手动创建B对象 主动权在A手中，但是现在在IOC手中，这就是控制反转\",\"切面\",\"略\",\"A依赖B B依赖A\",\"在我们使用A对象和B对象时，就会出现循环依赖问题\",\"spring主要是通过缓存去解决循环依赖\",\"总共有三级缓存\",\"一级缓存 主要存储的是 实例化的并前已完成赋值的Bean\",\"二级缓存 存的是 开辟了内存但属性为赋值的Bean\",\"其实二级缓存就已经解决了循环依赖问题\",\"三级缓存 主要是创建了代理Bean的Factory 创建 因为类的代理对象必须是在类的实例对象已生成的基础上去生成的，如果中间存在类的代理对象的循环依赖，是无法先生成类的代理对象，然后放入二级缓存。也就是二级缓存只能解决普通实例对象的循环依赖，如果存在代理对象的循环依赖，是无法解决的。\",\"事物主要分为 声明时事物，编程时事物，我们一般来使用声明时事物。\",\"就是事物之间的嵌套问题：假设A方法调用一个带事物的B方法时候\",\"传播机制为默认的 required 那么当我们A有事物时候，B和A事务合并成一个事务 ，A无事物的时候，B新建事务\",\"传播机制为 requires_new ，A方法有事物时候B新建一个事务，和A事务无关，互不影响 A无事物的时候，B新建事务\",\"传播机制为 nested ，A方法有事物时候 ，B新建一个A的子事务，A异常影响B，B异常不影响A ，A无事物的时候 ，B新建事务\",\"传播机制为 supports ，A方法有事物时候，B加入到A事务中 A无事物的时候 B无事务\",\"传播机制为 not_supported ，A方法有事物时候,挂起A事务，B以无事务方式执行 A无事物的时候 B无事务\",\"传播机制为 mandatory ，A方法有事物时候,B加入到A事务中 A无事物的时候 B抛异常\",\"传播机制为 never ，A方法有事物时候,B抛异常 A无事物的时候 B无事物\",\"方法B定义的事务类型\",\"A方法有事务时\",\"A方法无事务\",\"(propagation = Propagation.required) 默认 瑞块儿的\",\"B和A事务合并成一个事务\",\"B新建事务\",\"(propagation = Propagation.requires_new) 瑞块儿死\",\"B新建一个事务，和A事务无关，互不影响\",\"B新建事务\",\"(propagation = Propagation.nested) 奈斯dei特\",\"B新建一个A的子事务，A异常影响B，B异常不影响A\",\"B新建事务\",\"(propagation = Propagation.supports) 死噗斯\",\"B加入到A事务中\",\"B无事务\",\"(propagation = Propagation. not_supported) 死噗特得\",\"挂起A事务，B以无事务方式执行\",\"B无事务\",\"(propagation = Propagation.mandatory) man得特瑞\",\"B加入到A事务中\",\"B抛异常\",\"(propagation = Propagation.never) 奶味\",\"B抛异常\",\"B无事务\"]},\"281\":{\"h\":\"Spring事件\",\"t\":[\"事件监听概念 应用程序事件允许我们发送和接收特定事件，我们可以根据需要处理这些事件。事件用于在松散耦合的组件之间交换信息。由于发布者和订阅者之间没有直接耦合，因此可以在不影响发布者的情况下修改订阅者，反之亦然。事件监听三要素事件源：事件对象的产生者，任何一个事件都有一个来源 ApplicationEvent事件监听器：事件框架或组件收到一个事件后，需要通知所有相关的事件监听器来进行处理。这些监听器统一存储在事件监听器注册表中。 ApplicationListener @EventListener（注解式事件监听器）发布事件：ApplicationContext（spring容器） 创建一个事件源ApplicationEvent，通过ApplicationContext发布事件，事件监听器ApplicationListener监听事件，逻辑处理\",\"提示\",\"Spring中的事件监听机制包括事件源、事件监听器和事件发布三要素，通过注册监听器并发布事件，可以实现组件之间的松耦合通信，并在特定操作完成后触发相应的事件动作，以达到解耦和灵活性的目的。\"]},\"282\":{\"h\":\"TCP\",\"t\":[\"提示\",\"1、TCP协议主要就是三次握手和四次挥手 三次握手是客户端首先给服务端发送一个SYN包，服务器收到之后回复SYN+ACK，客户端收到之后回复ACK建立连接，三次握手主要就是解决网络信道不可靠问题 2、TCP的丢包问题，客户端第一次发送的报文是 序列号，长度，和数据内容， 服务端收到之后回复ACK等于序列号加长度，下一次客户端发包的时候就会根据序列号去发送 3、四次挥手 第一次挥手就是客户端发送一个Fin包给服务端，第二次挥手服务端接受后返回客户端ACK，第三次挥手是服务端发送Fin包给客户端确认是否关闭连接，第四次挥手是客户端给服务端发送ACK确认关闭连接，发送之后服务端收到后会立即断开连接，而客户端会等待一段时间，超时后自动关闭，第四次挥手主要是为了防止服务端没有收到ACK，一直在等待，而客户端却关闭了\"]},\"283\":{\"h\":\"ThreadPool\",\"t\":[\"池化思想：线程池、字符串常量池、数据库连接池 线程池优点：提高线程得利用率提高程序得响应速度便于统一管理线程对象可以控制最大并发数\",\"/** * @author kz 单例模式 IoDh实现，静态内部类 * @date 2022/10/12 */ public class ThreadPoolSingle { private ThreadPoolExecutor executor; //1.私有化构造器 private ThreadPoolSingle(){ executor=new ThreadPoolExecutor(8,20,10, TimeUnit.SECONDS, new ArrayBlockingQueue<>(10), Executors.defaultThreadFactory(), new ThreadPoolExecutor.AbortPolicy()); } //2.静态内部类 public static class ThreadInner{ //3.完成当前对象的实例化 private static final ThreadPoolSingle poolSingle=new ThreadPoolSingle(); } //4.提供公有方法，外键获取对象 public static ThreadPoolSingle getInstance(){ return ThreadInner.poolSingle; } } \"]},\"284\":{\"h\":\"一、线程池7大参数\",\"t\":[\"1.核心线程数，最小线程数 2.最大线程数，线程池最多可以创建的线程数量 3.线程的空闲时间(回收线程) 4.空闲时间的单位 5.阻塞队列，如果当前任务超过核心线程数，就会放到阻塞队列中 6.线程工厂，创建线程 7.拒绝策略，如果当前线程池 数量已达上线，就会触发拒绝策略\"]},\"285\":{\"h\":\"二、线程池的运行过程\",\"t\":[\"当创建线程池得时候就已经存在了核心线程？ 1.当有任务进来得时候，就会先走核心线程，如果任务超过核心线程得数量 2.就会存到阻塞队列中（先进先出）,如果任务过多，超出阻塞队列的最大容量 3.阻塞队列容量已满，线程池验证当前线程是否达到最大限制，如果没有就创建线程，处理新的任务,不是处理阻塞队列得任务.相当于插队 4.当阻塞队列已满并且线程池已达最大线程数得时候（阻塞队列+最大线程数(包含核心线程)）新的任务会触发拒绝策略 5.当任务处理完毕得时候，在设置得回收时间内，没有用到除核心线程以外，已经被创建得线程，就会对改线程进行回收。\"]},\"286\":{\"h\":\"三、阻塞队列\",\"t\":[\"任务队列是基于阻塞队列实现的，即采用生产者消费者模式，在 Java 中需要实现 BlockingQueue 接口。但 Java 已经为我们提供了 7 种阻塞队列的实现：\",\"ArrayBlockingQueue：一个由数组结构组成的有界阻塞队列（数组结构可配合指针实现一个环形队列）。\",\"LinkedBlockingQueue： 一个由链表结构组成的有界阻塞队列，在未指明容量时，容量默认为 Integer.MAX_VALUE。\",\"PriorityBlockingQueue： 一个支持优先级排序的无界阻塞队列，对元素没有要求，可以实现 Comparable 接口也可以提供 Comparator 来对队列中的元素进行比较。跟时间没有任何关系，仅仅是按照优先级取任务。\",\"DelayQueue：类似于PriorityBlockingQueue，是二叉堆实现的无界优先级阻塞队列。要求元素都实现 Delayed 接口，通过执行时延从队列中提取任务，时间没到任务取不出来。\",\"SynchronousQueue： 一个不存储元素的阻塞队列，消费者线程调用 take() 方法的时候就会发生阻塞，直到有一个生产者线程生产了一个元素，消费者线程就可以拿到这个元素并返回；生产者线程调用 put() 方法的时候也会发生阻塞，直到有一个消费者线程消费了一个元素，生产者才会返回。\",\"LinkedBlockingDeque： 使用双向队列实现的有界双端阻塞队列。双端意味着可以像普通队列一样 FIFO（先进先出），也可以像栈一样 FILO（先进后出）。\",\"LinkedTransferQueue： 它是ConcurrentLinkedQueue、LinkedBlockingQueue 和 SynchronousQueue 的结合体，但是把它用在 ThreadPoolExecutor 中，和 LinkedBlockingQueue 行为一致，但是是无界的阻塞队列。\",\"注意有界队列和无界队列的区别：如果使用有界队列，当队列饱和时并超过最大线程数时就会执行拒绝策略；而如果使用无界队列，任务队列永远都可以添加任务，所以设置 maximumPoolSize 没有任何意义\"]},\"287\":{\"h\":\"四、拒绝策略\",\"t\":[\"ThreadPoolExecutor.AbortPolicy: 中止策略 当线程数量大于最大线程时 ，丢弃任务并抛出RejectedExecutionException异常 ThreadPoolExecutor.DiscardPolicy： 丢弃策略 线程数量大于最大线程时 ，丢弃任务，但是不抛出异常。 ThreadPoolExecutor.DiscardOldestPolicy： 丢弃最老任务 丢弃队列最前面的任务，重新提交被拒绝的任务 ThreadPoolExecutor.CallerRunsPolicy： 优先处理策略 由调用线程（提交任务的线程）处理该任务线程池的默认拒绝策略为AbortPolicy 中止策略\"]},\"288\":{\"h\":\"拒绝策略场景分析\"},\"289\":{\"h\":\"4.1AbortPolicy 中止策略\",\"t\":[\"如果是比较关键的业务，推荐使用此拒绝策略，这样在系统不能承载更大的并发量的时候，能够及时的通过异常发现。\"]},\"290\":{\"h\":\"4.2 DiscardPolicy 丢弃策略\",\"t\":[\"使用此策略，可能会使我们无法发现系统的异常状态。建议是一些无关紧要的业务采用此策略。\"]},\"291\":{\"h\":\"4.3 DiscardOldestPolicy 丢弃最老任务\",\"t\":[\"此拒绝策略，是一种喜新厌旧的拒绝策略。是否要采用此种拒绝策略，还得根据实际业务是否允许丢弃老任务来认真衡量\"]},\"292\":{\"h\":\"4.4 CallerRunsPolicy 优先处理策略\",\"t\":[\"由调用线程处理该任务\"]},\"293\":{\"h\":\"五、线程池的五大状态\",\"t\":[\"线程池的5种状态：Running、ShutDown、Stop、Tidying、Terminated\"]},\"294\":{\"h\":\"5.1 RUNNING\",\"t\":[\"状态说明：在RUNNING状态下，线程池可以接收新的任务和执行已添加的任务。 线程池的初始化状态是RUNNING。换句话说，线程池被一旦被创建（比如调Executors.newFixedThreadPool()或者使用ThreadPoolExecutor进行创建），就处于RUNNING状态，并且线程池中的任务数为0！线程池处在RUNNING状态时，能够接收新任务，以及对已添加的任务进行处理\"]},\"295\":{\"h\":\"5.2 SHUTDOWN\",\"t\":[\"状态说明：线程池处在SHUTDOWN状态时，不接收新任务，但能处理已添加的任务 当一个线程池调用shutdown()方法时，线程池由RUNNING -> SHUTDOWN\"]},\"296\":{\"h\":\"5.3 STOP\",\"t\":[\"状态说明：线程池处在STOP状态时，不接收新任务，不处理已添加的任务，并且会中断正在执行的任务 调用线程池的shutdownNow()方法的时候，线程池由(RUNNING或者SHUTDOWN ) -> STOP\"]},\"297\":{\"h\":\"5.3TIDYING\",\"t\":[\"状态说明：当所有的任务已终止，记录的”任务数量”为0，线程池会变为TIDYING状态。当线程池变为TIDYING状态时，会执行钩子函数terminated()。 若用户想在线程池变为TIDYING时，进行相应的处理；可以通过重写terminated()函数来实现。 当线程池在SHUTDOWN状态下，阻塞队列为空并且线程池中执行的任务也为空时，就会由 SHUTDOWN -> TIDYING。 当线程池在STOP状态下，线程池中执行的任务为空时，会由STOP -> TIDYING\"]},\"298\":{\"h\":\"5.4 TERMINATED\",\"t\":[\"状态说明：当钩子函数terminated()被执行完成之后，线程池彻底终止，就变成TERMINATED状态。 线程池处在TIDYING状态时，执行完terminated()之后，就会由 TIDYING -> TERMINATED\"]},\"299\":{\"h\":\"六、回收核心线程\",\"t\":[\"//回收核心线程 executor.allowCoreThreadTimeOut(true); 使用多线程调用dao层时，新线程于主线程并非同一个上下文，会报空指针异常 service 包裹dao\"]},\"300\":{\"h\":\"七、 多线程异步定时任务\",\"t\":[\"为什么使用？ Scheduling 本身是单线程机制，要想多个定时任务并行执行，需要使用 @Async 注解采用异步执行方式。 在Spring中，基于@Async标注的方法，称之为异步方法，这些方法将在执行的时候，将会在独立的线程中被执行，调用者无需等待它的完成，即可继续其他的操作。SchedulingConfigurer 这个注解其实大家并不陌生，如果有使用过 @Scheduled 的话，因为 @Scheduled 默认是单线程执行的，因此如果存在多个任务同时触发，可能触发阻塞。使用 SchedulingConfigurer 可以配置用于执行 @Scheduled 的线程池，来避免这个问题。\",\"@Configuration @EnableScheduling @EnableAsync @Slf4j public class SchedulerConfig implements SchedulingConfigurer { @Override public void configureTasks(ScheduledTaskRegistrar taskRegistrar) { taskRegistrar.setScheduler(taskExecutor()); } @Bean(destroyMethod = \\\"shutdown\\\") public ScheduledExecutorService taskExecutor() { ThreadFactory threadFactory = new ThreadFactoryBuilder().setNameFormat(\\\"schedule-%d\\\").get(); return new ScheduledThreadPoolExecutor(3, threadFactory, new ThreadPoolExecutor.DiscardPolicy()); } @Bean(value = \\\"demoExecutor\\\", destroyMethod = \\\"shutdown\\\") public ThreadPoolExecutor demoExecutor() { ThreadFactory threadFactory = new ThreadFactoryBuilder().setNameFormat(\\\"demoExecutor-%d\\\").get(); return new ThreadPoolExecutor(3, 10, 30, TimeUnit.SECONDS, new LinkedBlockingDeque<>(10000), threadFactory, new ThreadPoolExecutor.DiscardPolicy()); } } \",\"使用：\",\"@GetMapping(\\\"test\\\") @Async(value = \\\"demoExecutor\\\") @Scheduled(fixedRate = 2, timeUnit = TimeUnit.SECONDS) public void t(){ System.err.println(\\\"1111111111111111\\\"); } \"]},\"301\":{\"h\":\"ElasticSearch\"},\"302\":{\"h\":\"一、ElasticSearch是什么\",\"t\":[\"分布式搜索和分析引擎，主要实现近乎实时的搜索和分析。可以实现海量数据的存储（⽀持PB级别的数 据），可以实现快速搜索（倒排索引）还可以实现数据分析处理.\",\"实现海量数据下快速搜索\",\"绝对不使⽤模糊查询，因为性能太低。 解决海量数据的快速搜索，就需要使⽤全⽂检索技术，选择ElasticSearch 市⾯上有全⽂检索技术：Lucene、Solr(底层：Lucene)、ElasticSearch（底层：Lucene） ⽬前市⾯上：ElasticSearch ELK：ElasticSearch（存储、搜索）+Logstash（采集）+Kibana（可视化） ⽇志平台主要存储的查询的数据，⽀持海量数据存储和查询，⼀定要带条件 主流：ElasticSearch\"]},\"303\":{\"h\":\"1.1Elasticsearch的特性\",\"t\":[\"ElasticSearch是基于Lucene开发的分布式搜索框架，包含如下特性：\",\"分布式索引、搜索。\",\"索引自动分片、负载均衡。\",\"自动发现机器、组建集群。\",\"支持Restful 风格接口。\",\"配置简单等。\",\"海量数据的存储。\",\"高亮显示\"]},\"304\":{\"h\":\"1.2 基本概念\",\"t\":[\"1.2.1 Index (索引) 动词 ，相当于Mysql 中的insert 名词， 相当于Mysql 中的 Database1.2.2 Type （类型） 在Index(索引)中 ，可以定义一个或多个类型。 类似Mysql 中的table ,每一种类型的数据放在一起_doc: ElasticSearch 新版本默认的类型1.2.3 Document （文档） 保存在某个索引（index）下，某种类型（type）的一个数据（Document） ,文档是json 格式的，Document 就像是Mysql 中某个table里面的内容。\",\"MySQL\",\"ElasticSearch\",\"DataBase 数据库\",\"Index 索引\",\"Table 表\",\"Type 类型\",\"Row 一行数据\",\"Document 文档\"]},\"305\":{\"h\":\"1.3 倒排索引\",\"t\":[\"image.png\"]},\"306\":{\"h\":\"1.4 ES结构\",\"t\":[\"ES的服务中，可以创建多个索引。\",\"每一个索引默认被分成5片存储。\",\"每一个分片都会存在至少一个备份分片。\",\"备份分片默认不会帮助检索数据，当ES检索压力特别大的时候，备份分片才会帮助检索数据。\",\"备份的分片必须放在不同的服务器中。理解： 索引index是es 中最大的数据存储单位 ，和mysql 的区别是 一个索引（index）中可以存海量（几亿条）数据 ，如果我们要在几亿条数据中检索出几条想要的数据 效率会很低 所以 es 提供了 一种对索引进行分片的机制 ，ES 天然支持集群，在集群服务器中 ES 把一个索引进行分片 放在不同的服务器上 如下图 例如 有一亿条数据 分成两个分片 每个分片上有5000万条数据 这样做的好处 一是 提高查询速度 二是 提高数据的存储量，另外 为了保证数据的安全 每个主分片会有备份分片 主分片和备份分片在不同的服务器上 ， 比如 主分片2 挂掉了 在 ES服务1 上面 还有 主分片2的备份分片 ，这样在一定程度上保证了数据的安全性 避免数据的丢失。但是 如果 当前集群中 只有一台es服务器 那么 这台服务器上 放的都是主分片，没有备份分片，什么时候扩展了集群中的 另一台服务器 才会存放备份分片。 | 索引分片备份 | | --- | | \"]},\"307\":{\"h\":\"二、搭建ES Kibana\"},\"308\":{\"h\":\"2.1 安装docker-compose\",\"t\":[\"1. cd /usr/local/bin #切换到安装路径 2. wget https://github.com/docker/compose/releases/download/1.14.0-rc2/docker-compose-Linux-x86_64 # 下载安装源 3. rename docker-compose-Linux-x86_64 docker-compose docker-compose-Linux-x86_64 # 重命名安装下载的安装包 4. chmod +x /usr/local/bin/docker-compose 5. docker-compose version # 查看是否安装成功 \"]},\"309\":{\"h\":\"2.2 拉起镜像\",\"t\":[\"mkdir -p /opt/docker_elasticsearch/config mkdir -p /opt/docker_elasticsearch/data mkdir -p /opt/docker_elasticsearch/plugins echo \\\"http.host: 0.0.0.0\\\" >> /opt/docker_elasticsearch/config/elasticsearch.yml chmod 777 config chmod 777 data vi docker-compose.yml \",\"version: \\\"3.1\\\" services: elasticsearch: image: daocloud.io/library/elasticsearch:7.4.2 restart: always container_name: elasticsearch environment: - \\\"ES_JAVA_OPTS=-Xms512m -Xmx512m\\\" volumes: - /opt/docker_elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml - /opt/docker_elasticsearch/data:/usr/share/elasticsearch/data - /opt/docker_elasticsearch/plugins:/usr/share/elasticsearch/plugins ports: - 9200:9200 - 9300:9300 kibana: image: daocloud.io/library/kibana:7.4.2 restart: always container_name: kibana ports: - 5601:5601 environment: - elasticsearch_url=http://120.26.105.43:9200 depends_on: - elasticsearch \",\"执行操作yml文件没脸 拉取镜像 **docker-compose up -d ** 启动日志：docker-compose logs -f\",\"image.png\"]},\"310\":{\"h\":\"2.2.1 查看是否安装成功\",\"t\":[\"暂未启动完毕 es: http://120.26.105.43:9200/ 出现json数据则启动成功\",\"{ \\\"name\\\" : \\\"2fd261b080fb\\\", \\\"cluster_name\\\" : \\\"elasticsearch\\\", \\\"cluster_uuid\\\" : \\\"k9AKmU-1QdS-3GecdD0MOg\\\", \\\"version\\\" : { \\\"number\\\" : \\\"7.4.2\\\", \\\"build_flavor\\\" : \\\"default\\\", \\\"build_type\\\" : \\\"docker\\\", \\\"build_hash\\\" : \\\"2f90bbf7b93631e52bafb59b3b049cb44ec25e96\\\", \\\"build_date\\\" : \\\"2019-10-28T20:40:44.881551Z\\\", \\\"build_snapshot\\\" : false, \\\"lucene_version\\\" : \\\"8.2.0\\\", \\\"minimum_wire_compatibility_version\\\" : \\\"6.8.0\\\", \\\"minimum_index_compatibility_version\\\" : \\\"6.0.0-beta1\\\" }, \\\"tagline\\\" : \\\"You Know, for Search\\\" } \",\"kibana: http://120.26.105.43:5601/ 图形化界面操作es\"]},\"311\":{\"h\":\"2.3 IK分词器\",\"t\":[\"docker exec -it elasticsearch bash cd bin/ ./elasticsearch-plugin install https://ghproxy.com/https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.4.2/elasticsearch-analysis-ik-7.4.2.zip # 查看是否安装完毕 ./elasticsearch-plugin list analysis-ik # ik分词器 \",\"安装完毕后退出容器重启es 执行操作yml文件：docker-compose restart 若安装失败需删除插件重新安装 bin目录下\",\"./elasticsearch-plugin list ./elasticsearch-plugin remove analysis-ik \"]},\"312\":{\"h\":\"2.3.2 测试分词器\",\"t\":[\"# 默认分词器 POST _analyze { \\\"text\\\": [\\\"中国伟大\\\"] } # ik分词器 # 粗粒度分词 POST _analyze { \\\"text\\\": [\\\"中国伟大\\\"] , \\\"analyzer\\\": \\\"ik_smart\\\" } # ik分词器 # 细粒度分词 POST _analyze { \\\"text\\\": [\\\"寇哲邱莹莹快快乐乐身体健康\\\"] , \\\"analyzer\\\": \\\"ik_max_word\\\" } \"]},\"313\":{\"h\":\"2.4 设置密码\"},\"314\":{\"h\":\"2.4.1 es pwd\",\"t\":[\"第一步：进入ES容器。命令：docker exec -it es /bin/bash 第二步：在ES的配置文件中添加以下配置 命令：vi config/elasticsearch.yml #添加如下内容 http.cors.enabled: true http.cors.allow-origin: \\\"*\\\" http.cors.allow-headers: Authorization xpack.security.enabled: true xpack.security.transport.ssl.enabled: true \",\"第三步：重启es docker restart es 之后再次进入容器输入后 设置密码 大概10几种\",\"./bin/elasticsearch-setup-passwords interactive \",\" 修改密码\",\"POST /_security/user/elastic/_password { \\\"password\\\": \\\"123456\\\" } \",\"修改密码之后，需要重新设置kibana的配置文件，才可以重新使用kibana\"]},\"315\":{\"h\":\"2.4.2 kibana pwd\",\"t\":[\"第一步：进入kibana容器。命令：docker exec -it kibana /bin/bash 第二步：配置账号密码，在kibana.yml配置文件中添加以下内容。 命令：vi config/kibana.yml\",\"#添加以下内容 elasticsearch.username: \\\"elastic\\\" elasticsearch.password: \\\"你在es中设置的密码\\\" \",\"退出容器 重启即可\"]},\"316\":{\"h\":\"三、ES操作\"},\"317\":{\"h\":\"3.1 Es Field可以指定类型\",\"t\":[\"字符串类型：text：一把被用于全文检索。 将当前Field进行分词。 keyword：当前Field不会被分词。 数值类型： long：取值范围为-9223372036854774808~922337203685477480(-2的63次方到2的63次方-1)，占用8个字节 integer：取值范围为-2147483648~2147483647(-2的31次方到2的31次方-1)，占用4个字节 short：取值范围为-32768~32767(-2的15次方到2的15次方-1)，占用2个字节 byte：取值范围为-128~127(-2的7次方到2的7次方-1)，占用1个字节 double：1.797693e+308~ 4.9000000e-324 (e+308表示是乘以10的308次方，e-324表示乘以10的负324次方)占用8个字节 float：3.402823e+38 ~ 1.401298e-45(e+38表示是乘以10的38次方，e-45表示乘以10的负45次方)，占用4个字节 half_float：精度比float小一半。 scaled_float：根据一个long和scaled来表达一个浮点型，long-345，scaled-100 -> 3.45 布尔类型： boolean类型，表达true和false 二进制类型： binary类型暂时支持Base64 encode string 时间类型： date类型，针对时间类型指定具体的格式 format 指定时间格式 yyyy-MM-dd 范围类型： long_range：赋值时，无需指定具体的内容，只需要存储一个范围即可，指定gt，lt，gte，lte integer_range：同上 double_range：同上 float_range：同上 date_range：同上 ip_range：同上 经纬度类型： geo_point：用来存储经纬度的：经度/纬度 ip类型： ip：可以存储IPV4或者IPV6其他的数据类型参考官网(opens new window) \"]},\"318\":{\"h\":\"3.2 Kibana快捷键操作\",\"t\":[\"ctrl i 自动补全 ctrl / 打开帮助文档 ctrl Enter 执行当前选中的请求\"]},\"319\":{\"h\":\"3.3 索引操作\",\"t\":[\" # 查看所有节点 GET /_cat/nodes # 查看es 健康状况 GET /_cat/health #查看主节点 GET /_cat/master #查看所有索引; GET /_cat/indices #查询索引信息,相当于查看 数据库表结构 GET /sms_log_test #删除索引 DELETE book # 创建索引,重复执行会报错 PUT test1 # 创建索引同时手动指定配置信息 PUT test2 { \\\"settings\\\": { \\\"number_of_shards\\\": 3, 分片 \\\"number_of_replicas\\\": 1 备份 } } # 查询索引详情 GET test2 # 查询指定的文档信息 GET sms_log_test/_doc/doc_id \",\"image.png\"]},\"320\":{\"h\":\"3.3.1 创建指定数据结构索引\",\"t\":[\"# 创建索引，指定数据结构 PUT /book { \\\"settings\\\": { # 分片数 \\\"number_of_shards\\\": 5, # 备份数 \\\"number_of_replicas\\\": 1 }, # 指定数据结构 \\\"mappings\\\": { # 文档存储的Field \\\"properties\\\": { # Field属性名 \\\"name\\\": { # 类型 \\\"type\\\": \\\"text\\\", # 指定当前Field可以被作为查询的条件 \\\"index\\\": true , # 是否需要额外存储 \\\"store\\\": false }, \\\"author\\\": { # keyword 也算是字符串类型 \\\"type\\\": \\\"keyword\\\" }, \\\"count\\\": { \\\"type\\\": \\\"long\\\" }, \\\"on-sale\\\": { \\\"type\\\": \\\"date\\\", # 时间类型的格式化方式 \\\"format\\\": \\\"yyyy-MM-dd HH:mm:ss||yyyy-MM-dd||epoch_millis\\\" }, \\\"descr\\\": { \\\"type\\\": \\\"text\\\" } } } } \"]},\"321\":{\"h\":\"3.4 文档操作\",\"t\":[\"# 添加文档，手动指定id 推荐使用 （可不指定Id:PUT /book/_doc/） PUT /book/_doc/1 { \\\"name\\\": \\\"红楼梦\\\", \\\"author\\\": \\\"曹雪芹\\\", \\\"count\\\": 10000000, \\\"on-sale\\\": \\\"1985-01-01\\\", \\\"descr\\\": \\\"一个是阆苑仙葩，一个是美玉无瑕\\\" } # 修改文档 覆盖式修改 如果没有指定某个属性 这个属性会被覆盖掉 覆盖没了 PUT /book/_doc/1 { \\\"name\\\": \\\"红楼梦\\\", \\\"author\\\": \\\"曹雪芹\\\", \\\"count\\\": 4353453, \\\"on-sale\\\": \\\"1985-01-01\\\", \\\"descr\\\": \\\"一个是阆苑仙葩，一个是美玉无瑕\\\" } # 删除文档 DELETE sms_log_test/_doc/doc_id \"]},\"322\":{\"h\":\"3.5 kibana 可视化界面中可以看到 创建的索引信息\"},\"323\":{\"h\":\"四、Java操作ES Demo *\",\"t\":[\"Java代码均为原始操作Es，**非 import org.springframework.data.elasticsearch.core.ElasticsearchRestTemplate; **\",\"新增文档 id一致相当于update\",\"<!-- 由于我们使用的es的版本是7.4.2 手动指定下ES的版本 --> <elasticsearch.version>7.4.2</elasticsearch.version> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-data-elasticsearch</artifactId> </dependency> \",\"yml配置\",\"spring: elasticsearch: # 指定ElasticSearch连接信息 uris: http://Ip:9200 \",\"方式二：密码连接\",\"elasticsearch: schema: http address: 120.26.105.43:9200 connectTimeout: 5000 socketTimeout: 5000 connectionRequestTimeout: 5000 maxConnectNum: 100 maxConnectPerRoute: 100 userName: elastic password: Kz898989 \",\"Configuration\",\"@Configuration public class ElasticSearchConfiguration { /** 协议 */ @Value(\\\"${elasticsearch.schema:http}\\\") private String schema; /** 集群地址，如果有多个用“,”隔开 */ @Value(\\\"${elasticsearch.address}\\\") private String address; /** 连接超时时间 */ @Value(\\\"${elasticsearch.connectTimeout}\\\") private int connectTimeout; /** Socket 连接超时时间 */ @Value(\\\"${elasticsearch.socketTimeout}\\\") private int socketTimeout; /** 获取连接的超时时间 */ @Value(\\\"${elasticsearch.connectionRequestTimeout}\\\") private int connectionRequestTimeout; /** 最大连接数 */ @Value(\\\"${elasticsearch.maxConnectNum}\\\") private int maxConnectNum; /** 最大路由连接数 */ @Value(\\\"${elasticsearch.maxConnectPerRoute}\\\") private int maxConnectPerRoute; @Value(\\\"${elasticsearch.userName}\\\") private String userName; @Value(\\\"${elasticsearch.password}\\\") private String password; @Bean(name = \\\"restHighLevelClient\\\") public RestHighLevelClient restHighLevelClient() { // 拆分地址 List<HttpHost> hostLists = new ArrayList<>(); String[] hostList = address.split(\\\",\\\"); for (String addr : hostList) { String host = addr.split(\\\":\\\")[0]; String port = addr.split(\\\":\\\")[1]; hostLists.add(new HttpHost(host, Integer.parseInt(port), schema)); } final CredentialsProvider credentialsProvider = new BasicCredentialsProvider(); credentialsProvider.setCredentials(AuthScope.ANY, new UsernamePasswordCredentials(userName, password)); // 转换成 HttpHost 数组 HttpHost[] httpHost = hostLists.toArray(new HttpHost[]{}); // 构建连接对象 RestClientBuilder builder = RestClient.builder(httpHost); // 异步连接延时配置 builder.setRequestConfigCallback(requestConfigBuilder -> { requestConfigBuilder.setConnectTimeout(connectTimeout); requestConfigBuilder.setSocketTimeout(socketTimeout); requestConfigBuilder.setConnectionRequestTimeout(connectionRequestTimeout); return requestConfigBuilder; }); // 异步连接数配置 builder.setHttpClientConfigCallback(httpClientBuilder -> { httpClientBuilder.setMaxConnTotal(maxConnectNum); httpClientBuilder.setMaxConnPerRoute(maxConnectPerRoute); return httpClientBuilder.setDefaultCredentialsProvider(credentialsProvider); }); return new RestHighLevelClient(builder); } } @Resource private RestHighLevelClient esClient; \"]},\"324\":{\"h\":\"五、ES查询 *\"},\"325\":{\"h\":\"5.1 term查询\",\"t\":[\"term的查询是代表完全匹配，搜索之前不会对你搜索的关键字进行分词，对你的关键字去文档分词库中去匹配内容。\",\"# 查询 # term完整匹配 不进行分词 POST sms-logs-index/_search { \\\"from\\\": 0, limit \\\"size\\\": 20, \\\"query\\\": { \\\"term\\\": { \\\"province\\\": { \\\"value\\\": \\\"上海\\\" } } } } \",\"说明： term 不对查询条件进行分词，field是text或者keyword 类型 分别是 对文档内容分词（text）和不分词(keyword) 如果查询是keyword类型就使用term\"]},\"326\":{\"h\":\"5.1.2 查询结果说明\",\"t\":[\"# 查询结果说明 { \\\"took\\\" : 2, # 查询用了2毫秒 \\\"timed_out\\\" : false, # 是否超时 没有超时 \\\"_shards\\\" : { # 分片信息 \\\"total\\\" : 3, # 一共使用三个分片 \\\"successful\\\" : 3, # 成功了三个分片 \\\"skipped\\\" : 0, # 跳过 \\\"failed\\\" : 0 # 失败 }, \\\"hits\\\" : { # 查询命中 \\\"total\\\" : { # 总命中 \\\"value\\\" : 2, # 命中数 \\\"relation\\\" : \\\"eq\\\" # 查询关系 }, \\\"max_score\\\" : 0.6931472, # 匹配分数 匹配度越高 分数越高 \\\"hits\\\" : [ { \\\"_index\\\" : \\\"sms-logs-index\\\", 索引 \\\"_type\\\" : \\\"_doc\\\", 类型 \\\"_id\\\" : \\\"21\\\", \\\"_score\\\" : 0.6931472, \\\"_source\\\" : { 存入的JSON数据 } } ] } } \"]},\"327\":{\"h\":\"5.1.3 java操作Demo\",\"t\":[\"public void termSearch(){ SearchRequest request = new SearchRequest(\\\"sms-logs-index\\\"); //1.组装查询条件 SearchSourceBuilder builder = new SearchSourceBuilder(); builder.query(QueryBuilders.termQuery(\\\"province\\\",\\\"上海\\\")); request.source(builder); SearchResponse response = esClient.search(request, RequestOptions.DEFAULT); //2.response SearchHit[] hits = response.getHits().getHits(); for (SearchHit hit : hits) { System.err.println(hit.getScore()); } } \"]},\"328\":{\"h\":\"5.2 terms查询\",\"t\":[\"terms和term的查询机制是一样，都不会将指定的查询关键字进行分词，直接去分词库中匹配，找到相应文档内容。 terms是在针对一个字段包含多个值的时候使用。 term：where province = 北京； terms：where province = 北京 or province = ？or province = ？ 一个字段可以等于多个值 有点类似 in builder.query(QueryBuilders.termsQuery(\\\"province\\\",\\\"上海\\\",\\\"北京\\\"));\"]},\"329\":{\"h\":\"5.3 match查询\",\"t\":[\"match查询属于高层查询，他会根据你查询的字段类型不一样，采用不同的查询方式。 match查询，实际底层就是多个term查询，将多个term查询的结果给你封装到了一起。\",\" public void match(){ try { SearchRequest request = new SearchRequest(\\\"sms-logs-index\\\"); //1.组装查询条件 SearchSourceBuilder builder = new SearchSourceBuilder(); builder.query(QueryBuilders.matchQuery(\\\"province\\\",\\\"上海\\\").operator(Operator.OR)); request.source(builder); SearchResponse response = esClient.search(request, RequestOptions.DEFAULT); //2.response SearchHit[] hits = response.getHits().getHits(); for (SearchHit hit : hits) { System.err.println(hit.getSourceAsString()); } } catch (Exception e) { throw new AppException(String.format(\\\"批量删除文档失败%s\\\",e.getMessage())); } } \"]},\"330\":{\"h\":\"5.4 multi_match查询\",\"t\":[\"match针对一个field做检索，multi_match针对多个field进行检索，多个field对应一个text。 针对多个索引同时查询\",\"builder.query(QueryBuilders.multiMatchQuery(\\\"province\\\",\\\"上海\\\",\\\"北京\\\").operator(Operator.OR)); \"]},\"331\":{\"h\":\"5.5 ids查询\",\"t\":[\"builder.query(QueryBuilders.idsQuery(\\\"province\\\").addIds(\\\"郑州\\\")); \"]},\"332\":{\"h\":\"5.6 prefix查询\",\"t\":[\"针对keyword类型，可以进行前缀查询\",\" builder.query(QueryBuilders.prefixQuery(\\\"province\\\",\\\"台湾\\\")); \"]},\"333\":{\"h\":\"5.7 fuzzy查询\",\"t\":[\"模糊查询，我们输入字符的大概（比如 出现错别字），ES就可以去根据输入的内容大概去匹配一下结果。 prefixLength指定前面几个字符是不允许出现错误的\",\" builder.query(QueryBuilders.fuzzyQuery(\\\"userName\\\",\\\"张三\\\").prefixLength(2)); \"]},\"334\":{\"h\":\"5.8 wildcard查询\",\"t\":[\"通配查询，和MySQL中的like是一个套路，可以在查询时，在字符串中指定通配符*和占位符？ *号匹配多个字符 ?匹配一个字符\",\" builder.query(QueryBuilders.wildcardQuery(\\\"userName\\\",\\\"王五*\\\")); \"]},\"335\":{\"h\":\"5.9 range查询\",\"t\":[\"范围查询，只针对数值类型，对某一个Field进行大于或者小于的范围指定 可以使用 gt：> gte：>= lt：< lte：<=\",\" builder.query(QueryBuilders.rangeQuery(\\\"fee\\\").gt(5).lte(10)); \"]},\"336\":{\"h\":\"5.10 regexp查询\",\"t\":[\"正则查询，通过你编写的正则表达式去匹配内容。使用较多 模糊查询性能较低https://www.sojson.com/regex/generate\",\"builder.query(QueryBuilders.regexpQuery(\\\"mobile\\\",\\\"0?(13|14|15|18|17)[0-9]{9}\\\")); \"]},\"337\":{\"h\":\"5.11 深分页Scroll\",\"t\":[\"ES对from + size是有限制的，from和size二者之和不能超过1W 原理：\",\"from+size在ES查询数据的方式：\",\"第一步先将用户指定的关键进行分词。\",\"第二步将词汇去分词库中进行检索，得到多个文档的id。\",\"第三步去各个分片中去拉取指定的全部数据。耗时较长。\",\"第四步将数据根据score进行排序。耗时较长。\",\"第五步根据from的值，将查询到的数据舍弃一部分。\",\"第六步返回结果。\",\"scroll+size在ES查询数据的方式：\",\"第一步先将用户指定的关键进行分词。\",\"第二步将词汇去分词库中进行检索，得到多个文档的id。\",\"第三步将文档的id存放在一个ES的上下文中。\",\"第四步根据你指定的size的个数去ES中检索指定个数的数据，拿完数据的文档id，会从上下文中移除。\",\"第五步如果需要下一页数据，直接去ES的上下文中，找后续内容。\",\"第六步循环第四步和第五步\",\"Scroll查询方式，不适合做实时的查询\",\" public void scroll(){ try { SearchRequest request = new SearchRequest(\\\"sms-logs-index\\\"); //设置ES上下文生产时间 request.scroll(TimeValue.timeValueMillis(1L)); SearchSourceBuilder builder = new SearchSourceBuilder(); builder.query(QueryBuilders.matchAllQuery()); //设置每页展示几条数据 builder.size(3); request.source(builder); SearchResponse response = esClient.search(request, RequestOptions.DEFAULT); //分页Id String scrollId = response.getScrollId(); System.err.println(\\\"首页数据\\\"+scrollId+\\\"--------------\\\"); //2.response SearchHit[] hits = response.getHits().getHits(); //第一页数据 for (SearchHit hit : hits) { System.err.println(hit.getSourceAsString()); } //下页数据 while (true){ SearchScrollRequest scrollReq = new SearchScrollRequest(scrollId); //设置ES上下文生产时间 request.scroll(TimeValue.timeValueMillis(1L)); //发起下一页请求 SearchResponse scrollRes = esClient.scroll(scrollReq, RequestOptions.DEFAULT); SearchHit[] hits1 = scrollRes.getHits().getHits(); //判断查询是否存在数据 if (!(hits1.length>0)){ System.err.println(\\\"最后一页-------------\\\"); break; }else { for (SearchHit hit1 : hits1) { System.err.println(hit1.getSourceAsString()); } } } //清空ES上下文 ClearScrollRequest clearScrollRequest = new ClearScrollRequest(); clearScrollRequest.addScrollId(scrollId); ClearScrollResponse clearScrollResponse = esClient.clearScroll(clearScrollRequest, RequestOptions.DEFAULT); System.err.println(clearScrollResponse.isSucceeded()); } catch (Exception e) { throw new AppException(String.format(e.getMessage())); } } \"]},\"338\":{\"h\":\"5.12 delete-by-query\",\"t\":[\"查询并删除\",\" //1. 创建DeleteByQueryRequest DeleteByQueryRequest request = new DeleteByQueryRequest(index); //2. 指定检索的条件 和SearchRequest指定Query的方式不一样 request.setQuery(QueryBuilders.rangeQuery(\\\"type\\\").lt(4)); //3. 执行删除 BulkByScrollResponse resp = client.deleteByQuery(request, RequestOptions.DEFAULT); //4. 输出返回结果 System.out.println(resp.toString()); \"]},\"339\":{\"h\":\"5.13 bool查询\",\"t\":[\"复合过滤器，将你的多个查询条件，以一定的逻辑组合在一起。\",\"must： 所有的条件，用must组合在一起，表示And的意思\",\"must_not：将must_not中的条件，全部都不能匹配，标识Not的意思\",\"should：所有的条件，用should组合在一起，表示Or的意思\",\"must 必须同时满足 and should 任意条件符合即可 or must_not 取反 not\",\" public void Bool() throws IOException { // 1、创建查询请求的对象 SearchRequest searchRequest = new SearchRequest(\\\"sms-logs-index\\\"); // 2、查询条件构造器 SearchSourceBuilder builder = new SearchSourceBuilder(); // 3、设置查询条件 // ------------ BoolQueryBuilder boolQueryBuilder = new BoolQueryBuilder(); // 查询省份为武汉或者北京 boolQueryBuilder.should(QueryBuilders.termQuery(\\\"province\\\",\\\"武汉\\\")); boolQueryBuilder.should(QueryBuilders.termQuery(\\\"province\\\",\\\"北京\\\")); // 运营商不是联通 boolQueryBuilder.mustNot(QueryBuilders.termQuery(\\\"operatorId\\\",2)); // smsContent中包含中国和平安 boolQueryBuilder.must(QueryBuilders.matchQuery(\\\"smsContent\\\",\\\"中国\\\")); boolQueryBuilder.must(QueryBuilders.matchQuery(\\\"smsContent\\\",\\\"平安\\\")); builder.query(boolQueryBuilder); // ------------ searchRequest.source(builder); // 4、执行查询 SearchResponse response = esClient.search(searchRequest, RequestOptions.DEFAULT); // 5、获取查询结果 SearchHit[] hits = response.getHits().getHits(); for (SearchHit hit : hits) { Map<String, Object> map = hit.getSourceAsMap(); System.out.println(map); } } \"]},\"340\":{\"h\":\"5.14 filter查询\",\"t\":[\"过滤\",\" //1. SearchRequest SearchRequest request = new SearchRequest(\\\"sms-logs-index\\\"); //2. 查询条件 SearchSourceBuilder builder = new SearchSourceBuilder(); BoolQueryBuilder boolQuery = new BoolQueryBuilder(); boolQuery.filter(QueryBuilders.termQuery(\\\"userName\\\",\\\"张三\\\")); boolQuery.filter(QueryBuilders.rangeQuery(\\\"fee\\\").lte(5)); builder.query(boolQuery); request.source(builder); //3. 执行查询 SearchResponse resp = esClient.search(request, RequestOptions.DEFAULT); //4. 输出结果 for (SearchHit hit : resp.getHits().getHits()) { System.out.println(hit.getSourceAsMap()); } \"]},\"341\":{\"h\":\"5.15 高亮查询\",\"t\":[\" // @ResultType(PcDocument.class) SearchRequest request = new SearchRequest(\\\"sms-logs-index\\\"); //1.组装查询条件 SearchSourceBuilder builder = new SearchSourceBuilder(); builder.query(QueryBuilders.matchQuery(\\\"test\\\",\\\"测试\\\")); HighlightBuilder highlightBuilder = new HighlightBuilder(); highlightBuilder.field(\\\"test\\\",10) .preTags(\\\"<font color='red'>\\\") .postTags(\\\"</font>\\\"); builder.highlighter(highlightBuilder); request.source(builder); SearchResponse response = esClient.search(request, RequestOptions.DEFAULT); //2.response SearchHit[] hits = response.getHits().getHits(); for (SearchHit hit : hits) { System.err.println(hit); System.err.println(hit.getHighlightFields()); } //4. 获取高亮数据，输出 for (SearchHit hit : response.getHits().getHits()) { System.out.println(hit.getHighlightFields().get(\\\"test\\\")); } \"]},\"342\":{\"h\":\"5.16 聚合查询\",\"t\":[\"ES的聚合查询和MySQL的聚合查询类似，ES的聚合查询相比MySQL要强大的多，ES提供的统计数据的方式多种多样https://www.elastic.co/guide/en/elasticsearch/reference/6.5/search-aggregations-bucket-datehistogram-aggregation.html\"]},\"343\":{\"h\":\"5.16.1 去重计数查询\",\"t\":[\"POST /sms-logs-index/_search { \\\"aggs\\\": { \\\"distant\\\": { # 自定义名称 \\\"cardinality\\\": { \\\"field\\\": \\\"province\\\" # 按照 field 进行去重 } } } } \",\"public void aggregation() throws IOException { //1. SearchRequest SearchRequest request = new SearchRequest(\\\"sms-logs-index\\\"); SearchSourceBuilder builder = new SearchSourceBuilder(); //2.构造查询条件 builder.aggregation(AggregationBuilders.cardinality(\\\"agg\\\").field(\\\"province\\\")); request.source(builder); //3. 执行查询 SearchResponse resp = esClient.search(request, RequestOptions.DEFAULT); Cardinality province = resp.getAggregations().get(\\\"agg\\\"); long value = province.getValue(); System.err.println(value); } \"]},\"344\":{\"h\":\"5.16.2 范围统计\",\"t\":[\"POST /sms-logs-index/_search { \\\"aggs\\\": { \\\"test\\\": { # 指定name \\\"range\\\": { \\\"field\\\": \\\"fee\\\", # 字段 \\\"ranges\\\": [ { \\\"to\\\": 5 //小于 }, { \\\"from\\\": 5, // 大于 \\\"to\\\": 10 //小于 }, { \\\"from\\\": 10 } ] } } } } \",\"返回结果：\",\"\\\"aggregations\\\" : { \\\"test\\\" : { \\\"buckets\\\" : [ { \\\"key\\\" : \\\"*-5.0\\\", \\\"to\\\" : 5.0, \\\"doc_count\\\" : 4 }, { \\\"key\\\" : \\\"5.0-10.0\\\", \\\"from\\\" : 5.0, \\\"to\\\" : 10.0, \\\"doc_count\\\" : 8 }, { \\\"key\\\" : \\\"10.0-*\\\", \\\"from\\\" : 10.0, \\\"doc_count\\\" : 0 } ] } } \",\" public void aggregationTwo() throws IOException { //1. SearchRequest SearchRequest request = new SearchRequest(\\\"sms-logs-index\\\"); SearchSourceBuilder builder = new SearchSourceBuilder(); //2.构造查询条件 相当于名称 builder.aggregation(AggregationBuilders .range(\\\"test\\\").field(\\\"fee\\\") .addUnboundedTo(5) .addRange(5,10) .addUnboundedFrom(10) ); request.source(builder); //3. 执行查询 SearchResponse resp = esClient.search(request, RequestOptions.DEFAULT); // 根据名称获取 Range test = resp.getAggregations().get(\\\"test\\\"); //获取存储桶 test.getBuckets().stream().forEach(bucket -> { System.err.println(bucket.getKeyAsString()); System.err.println(bucket.getFromAsString()); System.err.println(bucket.getToAsString()); System.err.println(bucket.getDocCount()); }); } \",\"日期范围：\",\"# 时间方式范围统计 date_range format指定日期格式 POST /sms-logs-index/_search { \\\"aggs\\\": { \\\"agg\\\": { \\\"date_range\\\": { \\\"field\\\": \\\"createDate\\\", \\\" \\\": \\\"yyyy\\\", \\\"ranges\\\": [ { \\\"to\\\": 2000 }, { \\\"from\\\": 2000 } ] } } } } \",\"ip范围：\",\"# ip方式 范围统计 ip_range POST /sms-logs-index/_search { \\\"aggs\\\": { \\\"agg\\\": { \\\"ip_range\\\": { \\\"field\\\": \\\"ipAddr\\\", \\\"ranges\\\": [ { \\\"to\\\": \\\"127.0.0.1\\\" }, { \\\"from\\\": \\\"10.157.2\\\" } ] } } } } \"]},\"345\":{\"h\":\"5.16.3 统计聚合查询\",\"t\":[\"# 统计聚合查询 extended_stats POST /sms-logs-index/_search { \\\"aggs\\\": { \\\"agg\\\": { \\\"extended_stats\\\": { \\\"field\\\": \\\"fee\\\" } } } } \\\"aggregations\\\" : { \\\"agg\\\" : { \\\"count\\\" : 12, \\\"min\\\" : 3.0, \\\"max\\\" : 8.0, \\\"avg\\\" : 5.333333333333333, \\\"sum\\\" : 64.0, \\\"sum_of_squares\\\" : 376.0, \\\"variance\\\" : 2.8888888888888906, \\\"std_deviation\\\" : 1.6996731711975954, \\\"std_deviation_bounds\\\" : { \\\"upper\\\" : 8.732679675728523, \\\"lower\\\" : 1.9339869909381422 } } } \",\" public void extendedStats() throws IOException { //1. SearchRequest SearchRequest request = new SearchRequest(\\\"sms-logs-index\\\"); SearchSourceBuilder builder = new SearchSourceBuilder(); //2.构造查询条件 相当于名称 builder.aggregation(AggregationBuilders .extendedStats(\\\"test\\\").field(\\\"fee\\\")); request.source(builder); //3. 执行查询 SearchResponse resp = esClient.search(request, RequestOptions.DEFAULT); ExtendedStats stats = resp.getAggregations().get(\\\"test\\\"); double max = stats.getMax(); double min = stats.getMin(); System.err.println(\\\"最大值为：\\\" + max + \\\"，最小值为：\\\" + min); } \"]},\"346\":{\"h\":\"5.17 地图经纬度搜索\",\"t\":[\"ES中提供了一个数据类型 geo_point，这个类型就是用来存储经纬度的。 创建一个带geo_point类型的索引，并添加测试数据 坐标拾取\",\"# 创建一个索引，指定一个name，locaiton # 创建一个map索引包含经纬度数据 PUT /map { \\\"settings\\\": { \\\"number_of_shards\\\": 3, \\\"number_of_replicas\\\": 1 }, \\\"mappings\\\": { \\\"properties\\\": { \\\"name\\\":{ \\\"type\\\": \\\"text\\\" }, \\\"location\\\":{ \\\"type\\\": \\\"geo_point\\\" //类型为经纬度 } } } } PUT map/_doc/1 { \\\"name\\\": \\\"月季公园\\\", \\\"location\\\": { \\\"lon\\\": 113.6368, \\\"lat\\\": 34.773985 } } PUT map/_doc/2 { \\\"name\\\": \\\"郑州人民公园\\\", \\\"location\\\": { \\\"lon\\\": 113.669581, \\\"lat\\\": 34.768197 } } PUT map/_doc/3 { \\\"name\\\": \\\"火车站\\\", \\\"location\\\": { \\\"lon\\\": 113.665988, \\\"lat\\\": 34.752776 } } # 查看所有数据 GET map/_search \",\"ES的地图检索方式\",\"语法\",\"说明\",\"geo_distance\",\"直线距离检索方式\",\"geo_bounding_box\",\"以两个点确定一个矩形，获取在矩形内的全部数据\",\"geo_polygon\",\"以多个点，确定一个多边形，获取多边形内的全部数据\"]},\"347\":{\"h\":\"5.17.1 geo_distance 直线距离检索方式\",\"t\":[\"POST map/_search { \\\"query\\\": { \\\"geo_distance\\\": { \\\"location\\\": { \\\"lon\\\": 113.672455, # 经度 \\\"lat\\\": 34.758619 # 纬度 }, \\\"distance\\\": 2000, # 距离 单位米 \\\"distance_type\\\": \\\"arc\\\" # 距离类型 弧行 } } } \",\" public void geoDistanceQuery() throws IOException { //1. SearchRequest SearchRequest request = new SearchRequest(\\\"map\\\"); SearchSourceBuilder builder = new SearchSourceBuilder(); //地理边界框查询生成器 GeoDistanceQueryBuilder location = QueryBuilders.geoDistanceQuery(\\\"location\\\"); location.point(34.758619,113.672455).distance(2000, DistanceUnit.METERS); //2.构造查询条件 相当于名称 builder.query(location); //3. 执行查询 SearchResponse resp = esClient.search(request, RequestOptions.DEFAULT); for (SearchHit hit : resp.getHits().getHits()) { System.err.println(hit.getSourceAsString()); } } \"]},\"348\":{\"h\":\"5.17.2 geo_bounding_box 以两个点确定一个矩形，获取在矩形内的全部数据\",\"t\":[\"# 两个点[左上角/右下角]确定一个矩形，查找内部的数据 POST map/_search { \\\"query\\\": { \\\"geo_bounding_box\\\": { \\\"location\\\": { \\\"top_left\\\": { \\\"lon\\\": 113.616689, \\\"lat\\\": 34.768405 }, \\\"bottom_right\\\": { \\\"lon\\\": 113.695452, \\\"lat\\\": 34.768167 } } } } } \",\" public void geoBoundingBoxQuery() throws IOException { //1. SearchRequest SearchRequest request = new SearchRequest(\\\"map\\\"); SearchSourceBuilder builder = new SearchSourceBuilder(); //地理边界框查询生成器 GeoBoundingBoxQueryBuilder localhost = QueryBuilders.geoBoundingBoxQuery(\\\"location\\\"); localhost.setCorners(34.778486,113.616976,34.747645,113.675186); //2.构造查询条件 相当于名称 builder.query(localhost); //3. 执行查询 SearchResponse resp = esClient.search(request, RequestOptions.DEFAULT); for (SearchHit hit : resp.getHits().getHits()) { System.err.println(hit.getSourceAsString()); } } \"]},\"349\":{\"h\":\"5.17.3 geo_polygon 以多个点，确定一个多边形，获取多边形内的全部数据\",\"t\":[\" POST map/_search { \\\"query\\\": { \\\"geo_polygon\\\": { \\\"location\\\": { \\\"points\\\": [ { \\\"lon\\\": 113.624306, \\\"lat\\\": 34.778486 }, { \\\"lon\\\": 113.616976, \\\"lat\\\": 34.768286 }, { \\\"lon\\\": 113.675186, \\\"lat\\\": 34.747645 }, { \\\"lon\\\": 113.687834, \\\"lat\\\": 34.78406 } ] } } } } \"]},\"350\":{\"h\":\"RabbitMQ\"},\"351\":{\"h\":\"1.MQ是什么\",\"t\":[\"MQ（Message Queue）消息队列，是基础数据结构中“先进先出”的⼀种数据结构。⼀般⽤来解决应⽤解耦，异步消息，流量削峰等问题，实现⾼性能，⾼可⽤，可伸缩和最终⼀致性架构。把要传输的数据（消息）放在队列中，⽤队列机制来实现消息传递——⽣产者产⽣消息并把消息放⼊队列，然后由消费者去处理。消费者可以到指定队列拉取消息，或者订阅相应的队列，由MQ服务端给其推送消息。\",\"修改密码\",\"1、进入容器 docker exec -it mqId bash 2、查看当前用户列表 rabbitmqctl list_users 3、修改密码 rabbitmqctl change_password guest 'Kz898989' 4、增加用户赋予超级管理员权限 rabbitmqctl add_user 用户名 密码 rabbitmqctl set_user_tags 用户名 administrator 5、删除用户 rabbitmqctl delete_user Username \",\"使用docker安装rabbitMQ\",\"docker run -d --name rabbitmq5672 -p 15672:15672 -p 5672:5672 rabbitmq:management \",\"可视乎访问端口号:15672 其他5672 账号密码均为guest RabbitMQ消息中间件，发送和消费消息的软件\"]},\"352\":{\"h\":\"1.P2P消息\",\"t\":[\"普通消息，⼀对⼀，⼀个队列有⼀个发送端和⼀个消费端。 最常⻅的，其中发送端和消费端互不影响1.依赖jar\",\"<!-- rabbitmq--> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-amqp</artifactId> </dependency> \",\"2.配置application.yml\",\"spring: rabbitmq: host: 47.92.168.143 port: 5672 #端口号 username: guest password: guest \",\"3.创建队列\",\"@Configuration //spring配置注解 public class RabbitMQConfig { //创造队列 P2P @Bean public Queue createQueue1(){ return new Queue(\\\"k-P2P\\\");//队列名称 唯一 } } \",\"4.编写发送消息的代码\",\"@SpringBootTest class RabbitMqApplicationTests { @Resource private RabbitTemplate rabbitTemplate;//ioc自动创建 //P2P @Test void contextLoads() { //发送消息 参数说明：1.交换器 2.队列名或路由名 3.消息内容 rabbitTemplate.convertAndSend(\\\"\\\",\\\"k-P2P\\\",\\\"测试rabbit-P2P\\\"); } } \",\"5.消费者接收\",\"@Component @RabbitListener(queues = \\\"k-P2P\\\" ) //对应队列名称 public class QueueListener { private Logger logger= LoggerFactory.getLogger(QueueListener.class); //接受消息 @RabbitHandler //参数为发送的类型 public void listener(String msg){ logger.error(msg); } } \",\"接收成功\"]},\"353\":{\"h\":\"1.1原生的发送\",\"t\":[\"public class RabbitUtil { //1.连接服务器 //1.1 创建连接工厂 设计模式：工厂模式 private static ConnectionFactory factory=new ConnectionFactory(); /**手动连接并发送消息*/ public static void RabbitMQTransport(String queue,String value) throws IOException, TimeoutException { factory.setHost(\\\"47.92.168.143\\\"); factory.setPort(5672); factory.setUsername(\\\"guest\\\"); factory.setPassword(\\\"guest\\\"); //1.2 创建连接对象 Connection connection= factory.newConnection(); //1.3 创建通道对象 Channel channel=connection.createChannel(); //2.创建队列 /** * 参数说明： * 1.队列名 * 2.是否持久化 * 3.是否为排他队列 一次性 * 4.是否自动删除 */ channel.queueDeclare(queue,false,false,false,null); //3.发送消息 channel.basicPublish(\\\"\\\",queue,null,value.getBytes()); //4.关闭释放 channel.close(); connection.close(); } } \"]},\"354\":{\"h\":\"1.2原生的接收\",\"t\":[\"@Component @RabbitListener(queues = \\\"k-P2PTwo\\\" ) //对应队列名称 public class QueueListenerTwo { private Logger logger= LoggerFactory.getLogger(QueueListenerTwo.class); @RabbitHandler //参数类型为返回类型 public void listener(Object msg){ //验证 if (msg instanceof Message){ Message message= (Message) msg; logger.error(\\\"原生接受消息队列：\\\"+new String(message.getBody())); }else { logger.error(\\\"原生接受消息队列：\\\"+msg); } } } \",\"先执行发送-创建-接收（若未创建队列-写接收则会报错 找不到队列）\"]},\"355\":{\"h\":\"2.Work消息\",\"t\":[\"⼀个队列可以有多个消费者，这些消费者之间 如果存在发送的快，消费的慢，这样就会消息堆积，需要为队列多加点消费者代码实现：1.创建队列\",\"//创造队列 Work @Bean public Queue createQueue2(){ return new Queue(\\\"k-Work\\\"); } \",\"2.编写发送消息的代码\",\"//Word ⼀个队列可以有多个消费者 数据丢失 @Test void t1(){ for (int i = 0; i < 10; i++) { rabbitTemplate.convertAndSend(\\\"\\\", \\\"k-Work\\\", \\\"测试rabbit-Word\\\" + i); } \",\"3.配置两个消费者-监听器\",\"@Component @RabbitListener(queues = \\\"k-Work\\\") public class QueueListenerWork { private Logger logger= LoggerFactory.getLogger(QueueListenerWork.class); @RabbitHandler //参数类型为返回类型 public void listener(String msg){ logger.error(\\\"消费者1:Word\\\"+msg); } } \",\"@Component @RabbitListener(queues = \\\"k-Work\\\") public class QueueListenerWorkTwo { private Logger logger= LoggerFactory.getLogger(QueueListenerWork.class); @RabbitHandler //参数类型为返回类型 public void listener(String msg){ logger.error(\\\"消费者2:Word\\\"+msg); } } \",\"结果:扩展 使用SpringBootTest时会启动springboot 这时springboot相当于另一个一样的消费者进行强夺这些消费者之间是竞争关系，最终⼀个消息只能被消费⼀次\"]},\"356\":{\"h\":\"3.Pub/Sub消息\",\"t\":[\"发布订阅消息，基于Exchange实现的消息可以被发送到多个队列中。其中交换器有四种类型： fanout、direct、topic、header(基本上不⽤)。⼀般⽤来实现⼀个消息需要发送到多个队列中。消息同 时被多个消费\"]},\"357\":{\"h\":\"3.1fanout类型 直接转发\",\"t\":[\"Exchange的常⽤的交换器类型，第⼀种：fanout 直接转发 代码实现： 1.创建所需的队列、交换器、绑定\",\"@Configuration public class RabbitMQFanout { //1.创建队列 @Bean public Queue createexQ1(){ return new Queue(\\\"kz-fanout-1\\\"); } @Bean public Queue createexQ2(){ return new Queue(\\\"kz-fanout-2\\\"); } //2.创建交换器 IOC创建容器 @Bean public FanoutExchange createFe(){ return new FanoutExchange(\\\"kz-ex-fanout\\\"); } //3.创建绑定关系 @Bean public Binding createBe1(FanoutExchange fe){ return BindingBuilder.bind(createexQ1()).to(fe); } @Bean public Binding createBe2(FanoutExchange fe){ return BindingBuilder.bind(createexQ2()).to(fe); } } \",\"2.发送\",\"// Exchange交换器 类型 通过fanout交换器 实现消息发送 @Test public void t3(){ //发送消息 参数说明：1.交换器 2.队列名或路由名 3.消息内容 rabbitTemplate.convertAndSend(\\\"kz-ex-fanout\\\", \\\"\\\", \\\"通过交换器来发送！\\\"); } \",\" 查看\"]},\"358\":{\"h\":\"3.2direct类型 匹配转发\",\"t\":[\" direct类型，发送消息到交换器，交换器根据消息的路由匹配内容，进⾏匹配队列，最终把把消息发送 给匹配到所有队列根据名称进行匹配转发向交换器发送消息 只有error队列可以接受到转发的消息\"]},\"359\":{\"h\":\"3.3topic类型 模糊匹配\",\"t\":[\" topic类型，⽀持路由匹配，其中路由内容⽀持模糊匹配，特殊符号\",\"* ⼀个单词，通过.区分单词 # 0或多个单词，通过.区分单词 \",\"![14.png]( 进行发送 查看\"]},\"360\":{\"h\":\"4.RabbitMQ基于死信实现延迟\",\"t\":[\"死信：RabbitMQ的队列中的消息，满⾜以下条件任意其⼀： 1.消息被拒绝 2.消息过期 3.队列已满死信交换器：专⻔⽤来转发死信消息。死信队列：通过死信交换器发送过来的消息，存储的都是死信消息延迟队列：可以实现延迟消息处理的队列。⼀般把具备有效期的队列并且设置的有死信交换器的队列并且没有消费者成为延迟队列 1.订单超时⾃处理 ⽐如 外卖订单15分钟不付款，⾃动取消 12306订单30分钟不付款，⾃动取消 延迟消息处理，5分钟后处理 ⾃动确认收货1.创建延迟队列\",\"/**延迟队列 生成死信 */ public static final String DL_ONE_NAME=\\\"kz-dl-001\\\"; /**死信队列 接收死信消息 .*/ public static final String DL_TWO_NAME=\\\"kz-dl-002\\\"; /**死信转换器 */ public static final String DL_EXCHANGE_NAME=\\\"kz-dl-exchange\\\"; /**死信路由转换*/ public static final String DL_RK=\\\"kz-dl-rk\\\"; \",\"2.延迟队列创建方式\",\"/**延迟队列*/ @Bean public Queue createDl1(){ //1.创建队列属性信息 Map<String, Object> params = new HashMap<>(); //设置队列中每个消息的有效期 毫秒 params.put(\\\"x-message-ttl\\\",10000); //设置对应的死信交换器 params.put(\\\"x-dead-letter-exchange\\\",DL_EXCHANGE_NAME); //设置交换器匹配的路由名称 （队列或交换器） params.put(\\\"x-dead-letter-routing-key\\\",DL_RK); //2.创建延迟队列 设置队列信息 return QueueBuilder.durable(DL_ONE_NAME).withArguments(params).build(); } \",\"设置队列中每个消息的有效期 设置对应的死信交换器 设置交换器匹配的路由名称 （队列或交换器） 创建延迟队列\",\"3.绑定\",\"/**死信接收队列*/ @Bean public Queue createDl2(){ return new Queue(DL_TWO_NAME); } /**死信交换器 路由匹配*/ @Bean public DirectExchange createDLEc(){ return new DirectExchange(DL_EXCHANGE_NAME); } /**实现绑定*/ @Bean public Binding createDlBe(DirectExchange de){ // 死信接收队列 死信交换器 死信路由匹配 return BindingBuilder.bind(createDl2()).to(de).with(DL_RK); } \",\"4.发送消息\",\"@RestController @RequestMapping(\\\"/api/rabbit/\\\") public class RabbitDlController { @Resource private RabbitTemplate rabbitTemplate;//ioc自动创建 private Logger logger= LoggerFactory.getLogger(RabbitDlController.class); @GetMapping(\\\"save.do\\\") public String save(String msg){ logger.warn(\\\"发送消息\\\" +msg+System.currentTimeMillis()); // 死信队列 rabbitTemplate.convertAndSend(\\\"\\\", RabbitDlConfig.DL_ONE_NAME,msg); return \\\"OK\\\"; } //路由传参 @GetMapping(\\\"{msg}\\\") public String save2(@PathVariable String msg){ logger.warn(\\\"发送消息\\\" +msg+System.currentTimeMillis()); // 死信队列 rabbitTemplate.convertAndSend(\\\"\\\", RabbitDlConfig.DL_ONE_NAME,msg); return \\\"OK\\\"; } } \",\"6.接收队列-消费者\",\"@Component @RabbitListener(queues = RabbitDlConfig.DL_TWO_NAME) public class RabbitDlListener { private Logger logger= LoggerFactory.getLogger(RabbitDlListener.class); @RabbitHandler public void dlListener(String msg){ logger.warn(\\\"死信接受延迟队列:\\\"+msg+System.currentTimeMillis()); } } \",\"![19.png](设置了有效期为10秒、10秒之内没有消费者接收、转到死信交换器、根据绑定转发到指定的队列\"]},\"361\":{\"h\":\"4.1RabbitMQ事务\",\"t\":[\"我们需要⼀次性发多条消息，需要开启事务，事务⽤来保证多条消息的发送，如果有异常出 现，消息都不发送 实现步骤：1.创建RabbitMQ事务管理\",\"//2.创建RabbitMQ管理事务 @Bean public RabbitTransactionManager create(ConnectionFactory factory){ return new RabbitTransactionManager(factory); } \",\"2.在发送时开启事务\",\"/**加事务*/ //回滚 异常类型 @Transactional(rollbackFor = Exception.class) @GetMapping(\\\"save.do\\\") public String save(String msg){ //开启事务 rabbitTemplate.setChannelTransacted(true); logger.warn(\\\"发送消息:\\\" +msg+System.currentTimeMillis()); rabbitTemplate.convertAndSend(\\\"\\\", RabbitMQTranConfig.TRAN,msg); System.err.println(1/0); return \\\"OK\\\"; } \"]},\"362\":{\"h\":\"4.2RabbitMQ手动应答\",\"t\":[\"RabbitMQ防⽌消息的重复消费或者消息丢失的时候，都可以使⽤⼿动应答代替⾃动应答针对消费端 在消费者代码实现 实现步骤：\",\"@Component //设置手动 @RabbitListener(queues = RabbitAckConfig.QUEUE_ACK,ackMode = \\\"MANUAL\\\") public class RabbitAckListener { private Logger logger= LoggerFactory.getLogger(RabbitAckListener.class); @RabbitHandler //channel可以理解为一个先进先出的消息队列 消息内部唯一id public void ackListener(String msg, Channel channel, @Header(AmqpHeaders.DELIVERY_TAG) long tag) throws IOException { //手动操作 //1.消息id 2.是否应答 true 成功 false失败 3.消息是否还添加到队列 channel.basicNack(tag,false,true); logger.warn(\\\"手动应答:\\\"+msg); } } \",\" //自动 // channel.basicAck(tag,true); \",\"只要第三个参数为true就会将消息添加到队列，造成死循环\"]},\"363\":{\"h\":\"4.1Rabbit MQ如何防止消息丢失\",\"t\":[\"1.发送端如何保证消息不丢失 事务机制和Confirm机制，注意：事务机制和 Confirm 机制是互斥的，两者不能共存，会导致 RabbitMQ 报错。 2.RabbitMQ服务器端如何保证消息不丢失 持久化、集群、普通模式、镜像模式。 3.消费端如何保证消息不丢失 basicAck机制、死信队列、消息补偿机制\"]},\"364\":{\"h\":\"4.2RabbitMQ如何保证消息的幂等性\",\"t\":[\"在编程中⼀个幂等操作的特点是其任意多次执⾏所产⽣的结果与⼀次执⾏的产⽣的结果相同，在mq中 由于⽹络故障或客户端延迟消费mq⾃动重试过程中可能会导致消息的重复消费，那我们如何保证消息 的幂等问题 1、⽣成全局id(雪花算法)，存⼊redis或者数据库，在消费者消费消息之前，查询⼀下该消息是否有消费过。 2、如果该消息已经消费过，则告诉mq消息已经消费，将该消息丢弃（⼿动ack）。 3、如果没有消费过，将该消息进⾏消费并将消费记录写进redis或者数据库中。\"]},\"365\":{\"h\":\"4.3RabbitMQ集群模式\",\"t\":[\"RabbitMQ 有三种模式： 单机模式 ， 普通集群模式 ， 镜像集群模式 。单机模式：就是demo级别的，⼀般就是你本地启动了玩玩⼉的，没⼈⽣产⽤单机模式普通集群模式：意思就是在多台机器上启动多个RabbitMQ实例，每个机器启动⼀个。镜像集群模式：这种模式，才是所谓的RabbitMQ的⾼可⽤模式，跟普通集群模式不⼀样的是，你创建 的queue，⽆论元数据(元数据指RabbitMQ的配置数据)还是queue⾥的消息都会存在于多个实例上，然后每次你写消息到queue的时候，都会⾃动把消息到多个实例的queue⾥进⾏消息同步\"]},\"366\":{\"h\":\"总结\",\"t\":[\"RabbitMQ是MQ的⼀种，消息队列或消息中间件，实现消息的异步处理，降低耦合度，提⾼性能\\nRabbitMQ安装-DockerRabbitMQ的消息\\n1.消息⼀对⼀ 发送消息直接到队列，从队列中进⾏消费\\n2.消息⼀对多 发送消息到了交换器（\\n4种），从交换器到队列中，从队列中进⾏消费RabbitMQ交换器\\n1.fanout类型直接转发\\n2.direct类型对消息过滤，路由匹配，精确\\n3.topic类型对消息过滤，路由匹配，模糊 * #\\n4.header类型 对消息过滤，指定的消息头RabbitMQ死信和延迟\\n1.死信：当消息满⾜以下条件之⼀：1.队列拒绝 2.队列满了 3.过期\\n2.延迟：借助死信机制，如果⼀个队列⽣成了死信（时间过期），可以⾃动传递死信交换器，可以\\n把死信消息发送到要处理的队列\\nRabbitMQ的事务\\n保证多个消息要么都成功，要么都失败\\nRabbitMQ的⼿动应答\\n防⽌消息丢失，可以在消费端开启⼿动处理\"]},\"367\":{\"h\":\"Beetl\",\"t\":[\"https://www.kancloud.cn/xiandafu/beetl3_guide/1992542\"]},\"368\":{\"h\":\"一、模板引擎概述\",\"t\":[\"模板引擎：即⼀种基于模板和要改变的数据， 并⽤来⽣成输出⽂本(HTML⽹⻚，电⼦邮件，配置⽂件， 源代码等)的通⽤⼯具 模板引擎=模板⻚⾯+动态数据=输出的⻚⾯（HTML、Java源⽂件、xml⽂件、word⽂件） 市⾯上的模板引擎： 1.jsp jsp模板+对象数据（四⼤域）=html⻚⾯ 2.Freemarker ftl模板+对象数据=⽂件http://freemarker.foofun.cn/ 3.Thymeleaf html模板+对象数据=html⻚⾯https://www.thymeleaf.org/ 4.Beetl btl模板+对象数据=⽂件http://bbs.ibeetl.com/\"]},\"369\":{\"h\":\"二、依赖jar\",\"t\":[\" <dependency> <groupId>com.ibeetl</groupId> <artifactId>beetl</artifactId> <version>3.8.0.RELEASE</version> </dependency> \"]},\"370\":{\"h\":\"三、.编写模板文件\",\"t\":[\"<!DOCTYPE html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\"> <title>${title}</title> </head> <body> <h1>Beetl模板引擎</h1> <div> 恭喜<span style=\\\"font-size:30px;color:red\\\">${name}</span>，荣获<span style=\\\"font-size:30px;color:red\\\">${grade}</span>班级的勤劳⼩蜜蜂！ </div> <div> <div>基本类型：<h2>${num}</h2></div> <div>字符串：<h2>${str}</h2></div> <div>分⽀语句： <% if(sex==1) {%> <h1>男</h1> <% }%> </div> <div> 循环语句： <% for(s in persons){%> <h1>获奖名单：${s}</h1> <% }%> </div> </div> </body> </html> \"]},\"371\":{\"h\":\"四、编写代码\",\"t\":[\"根据模板⽂件，设置对应变量数据，最终⽣成⽂件\",\"@Test public void t1() throws IOException { //1.创建模板对象 ClasspathResourceLoader loader=new ClasspathResourceLoader(\\\"templates\\\"); Configuration cfg = Configuration.defaultConfiguration(); GroupTemplate gt = new GroupTemplate(loader,cfg); //获取模板 Template t = gt.getTemplate(\\\"hello.btl\\\"); //2.为变量赋值 Map<String,Object> params=new HashMap<>(); params.put(\\\"title\\\",\\\"荣耀证书\\\"); params.put(\\\"name\\\",\\\"k\\\"); params.put(\\\"grade\\\",\\\"Java2209\\\"); params.put(\\\"num\\\",1110); params.put(\\\"str\\\",\\\"卷王\\\"); params.put(\\\"sex\\\",1); List<String> p=new ArrayList<>(); p.add(\\\"ce\\\"); p.add(\\\"ce\\\"); params.put(\\\"persons\\\",p); t.binding(params); //3.⽣成⽂件 t.renderTo(new FileWriter(\\\"ce.html\\\")); } \"]},\"372\":{\"h\":\"五、Beetl总结\"},\"373\":{\"h\":\"1.模板⽂件中的语法格式\",\"t\":[\"1.获取变量：${变量名} 2.分⽀语句：<% if(boolean表达式){%> 满⾜条件要输出的内容<%}%> 3.循环语句：<% for(变量名-内部 in 集合名-外部){%> 重复输出的内容<%}%>\"]},\"374\":{\"h\":\"2.基于模板引擎实现Java源代码的⽣成\",\"t\":[\"1.编写源⽂件的模板\\n把会变的改为变量，使⽤${变量名获取}\\n2.编写代码赋值输出⽣成⽂件\"]},\"375\":{\"h\":\"参数校验的几种方式\",\"t\":[\"这里推荐几种方式，只要用于参数校验，接口鉴权，令牌续命，版本号兼容过滤\"]},\"376\":{\"h\":\"一、基于AOP环绕通知\",\"t\":[\"aop/切面类\",\"/** * @Description 基于AOP的环绕通知 控制层的方法进行匹配 校验全部参数 * @author kz * @date 2022/10/17 */ @Component //IOC创建容器 @Aspect //切面 public class ParamAspect { // 切入点 类 方法 参数 语法格式：execution(* 包名.类名.⽅法名(..)) @Pointcut(\\\"execution(* com.auth.api.controller.*.*(..))\\\") public void pt(){} @Around(\\\"pt()\\\") public Object handler(ProceedingJoinPoint point)throws Throwable{ //1.获取当前方法上的参数 Object[] args = point.getArgs(); //2.遍历循环，进行校验参数 for (Object o:args){ if (Objects.isNull(o)){ //空参，失败 return R.fail(\\\"参数为空\\\"); } } //3.执行原来的方法 return point.proceed(); } } \"]},\"377\":{\"h\":\"二、基于注解+拦截器实现\"},\"378\":{\"h\":\"2.0 参数校验\",\"t\":[\"1.annotation/注解类\",\"/**自定义注解 标记是否进行参数校验，修饰方法*/ @Retention(RetentionPolicy.RUNTIME)//定义注解运行时有效性 @Target(value = ElementType.METHOD)//定义注解的使用范围 public @interface CheckParam { } \",\"2.拦截器\",\"/** * 基于注解+拦截器，实现参数的校验 * @author kz * @date 2022/10/17 */ public class ParamInterceptor implements HandlerInterceptor { @Override public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception { //1.获取当前执行的方法 if(handler instanceof HandlerMethod) { HandlerMethod method = (HandlerMethod) handler; //2.获取方法上的自定义注解 if (method.hasMethodAnnotation(CheckParam.class)) { //3.存在 获取参数 进行校验 Map<String, String[]> params = request.getParameterMap(); // 该方法返回map中所有key值的列表 for (String s : params.keySet()) { if (params.get(s)[0] == null) { System.err.println(s); //判断第一个值 就可以 如果为空就拦截处理 //校验不通过拦截 response.setContentType(\\\"application/json;charset=UTF-8\\\"); response.getWriter().println(JSON.toJSONString(R.fail())); return false; } } } } //校验通过放行 return true; } } \",\"其中一个属性有值即可放行 一般都会加在消费者的controller层上，只要有该注解，就会校验参数。注意：添加拦截器 springmvc拦截器\",\"@Configuration public class InterceptorConfig implements WebMvcConfigurer { /**添加拦截器*/ @Override public void addInterceptors(InterceptorRegistry registry) { registry.addInterceptor(new ParamInterceptor()).addPathPatterns(\\\"/**\\\"); registry.addInterceptor(new TokenInterceptor()).addPathPatterns(\\\"/**\\\"); } } \",\"通过自定义注解进行标记，在拦截器中使用反射获取方法上是否有该注解。\"]},\"379\":{\"h\":\"2.1 接口鉴权\",\"t\":[\"/** * 基于注解+拦截器，实现登录之后才可访问的接口 * @author kz * @date 2022/10/17 */ public class TokenInterceptor implements HandlerInterceptor { @Override public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception { //1.获取当前执行的方法 if(handler instanceof HandlerMethod) { HandlerMethod method = (HandlerMethod) handler; //2.获取方法上的自定义注解 if (method.hasMethodAnnotation(Token.class)) { //3.存在注解。获取令牌，进行校验真伪 获取传递的令牌 String token = request.getHeader(SystemConfig.HEADER_TOKEN); System.err.println(token); //验证令牌是否粗存在 当时登录传入的令牌 if (JedisUtil.exists(RedisKeyConfig.LOGIN_PHONE + token)) { //有效放行 return true; } else { response.setContentType(\\\"application/json;charset=UTF-8\\\"); response.getWriter().write(JSON.toJSONString(R.fail(\\\"亲，登录已失效！\\\"))); return false; } } } //没有包含指定注解，通过放行 return true; } } \"]},\"380\":{\"h\":\"2.3实现令牌续命\",\"t\":[\"/** * 令牌续命 * @author kz * @date 2022/10/17 */ @Component //全局 public class TokenFilter implements GlobalFilter { @Override public Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain) { ServerHttpRequest request= exchange.getRequest(); ServerHttpResponse response=exchange.getResponse(); //1.获取令牌 List<String> tokens = request.getHeaders().get(SystemConfig.HEADER_TOKEN); if (Objects.nonNull(tokens) && tokens.size()>0){ String token = tokens.get(0); //2.验证令牌是否存在 if (token!=null && token.length()>0){ if(JedisUtil.exists(RedisKeyConfig.LOGIN_TOKEN+token)){ //3.存在，就续命 JedisUtil.expire(RedisKeyConfig.LOGIN_TOKEN+token,RedisKeyConfig.LOGIN_PHONE_TIME); } } } return chain.filter(exchange); } } \",\"image-20230316231315154\",\"网关中配置filter提高效率\"]},\"381\":{\"h\":\"2.4实现版本号的兼容性过滤\",\"t\":[\"/** * 接口的版本号自动校验 * @author kz * @date 2022/10/17 */ @Component //IOC创建对象 Global全局 public class VersionFilter implements GlobalFilter { private Logger logger= LoggerFactory.getLogger(VersionFilter.class); @Override public Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain) { //实现对接口的请求.do结尾。需要携带请求消息头--版本号，没有或不匹配进行拦截 //1.获取请求对象和响应对象 ServerHttpRequest request = exchange.getRequest(); ServerHttpResponse response = exchange.getResponse(); //2.获取请求路径 String url = request.getPath().value(); //3.验证接口是否以.do结尾 if (url.contains(\\\".do\\\")){ //4.获取请求的消息头 //版本号常量 List<String> strings = request.getHeaders().get(SystemConfig.HEADER_VERSION); if (Objects.nonNull(strings) && strings.size()>0){ //拿到版本号 String version = strings.get(0); if (Objects.nonNull(version) && version.length()>0){ //5.验证版本号是否为空，空拦截 if (JedisUtil.existsSet(RedisKeyConfig.VERSIONS,version)){ //有效 放行 return chain.filter(exchange); } } } //6.拦截请求 response.getHeaders().add(\\\"Content-Type\\\",\\\"application/json;charset=UTF-8\\\"); //拦截并返回自定义内容 return response.writeWith( Mono.just(response.bufferFactory(). wrap(JSON.toJSONString(R.fail(\\\"请传递接口的版本号！\\\")).getBytes()))); } return chain.filter(exchange); } } \",\"image-20230316231244317\"]},\"382\":{\"h\":\"三、Validator（JSR303校验）\",\"t\":[\"官方文档：https://docs.jboss.org/hibernate/stable/validator/reference/en-US/html_single/#validator-gettingstarted-createmodel\"]},\"383\":{\"h\":\"3.1 JSR303介绍\",\"t\":[\"JSR是Java Specification Requests的缩写，意思是Java 规范提案。是指向JCP(Java Community Process)提出新增一个标准化技术规范的正式请求。任何人都可以提交JSR，以向Java平台增添新的API和服务。JSR已成为Java界的一个重要标准。 JSR-303 是JAVA EE 6 中的一项子规范，叫做Bean Validation，Hibernate Validator 是 Bean Validation 的参考实现 . Hibernate Validator 提供了 JSR 303 规范中所有内置 constraint（约束） 的实现，除此之外还有一些附加的 constraint。\",\" <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-validation</artifactId> </dependency> \",\"实际上，spring-boot-starter-validation依赖主要是为了引入下面这个依赖：\",\"<dependency> <groupId>org.hibernate.validator</groupId> <artifactId>hibernate-validator</artifactId> <version>6.2.4.Final</version> <scope>compile</scope> </dependency> \"]},\"384\":{\"h\":\"3.2 常用注解\",\"t\":[\"空检查\",\"**** ****\",\"@Null\",\"验证对象是否为null\",\"@NotNull\",\"验证对象是否不为null, 无法查检长度为0的字符串\",\"@NotBlank\",\"检查约束字符串是不是Null还有被Trim的长度是否大于0,只对字符串,且会去掉前后空格.\",\"@NotEmpty\",\"检查约束元素是否为NULL或者是EMPTY.\",\"Booelan检查\",\"**** ****\",\"@AssertTrue\",\"验证 Boolean 对象是否为 true\",\"@AssertFalse\",\"验证 Boolean 对象是否为 false\",\"长度检查\",\"**** ****\",\"@Size(min=, max=)\",\"验证对象（Array,Collection,Map,String）长度是否在给定的范围之内\",\"@Length(min=, max=)\",\"Validates that the annotated string is between min and max included.\",\"日期检查\",\"**** ****\",\"@Past\",\"验证 Date 和 Calendar 对象是否在当前时间之前\",\"@Future\",\"验证 Date 和 Calendar 对象是否在当前时间之后\",\"@Pattern\",\"验证 String 对象是否符合正则表达式的规则\",\"数值检查\",\"建议使用在Stirng,Integer类型，不建议使用在int类型上，因为表单值为“”时无法转换为int，但可以转换为Stirng为\\\"\\\",Integer为null\",\"@Min\",\"验证 Number 和 String 对象是否大等于指定的值\",\"@Max\",\"验证 Number 和 String 对象是否小等于指定的值\",\"@DecimalMax\",\"被标注的值必须不大于约束中指定的最大值. 这个约束的参数是一个通过BigDecimal定义的最大值的字符串表示.小数存在精度\",\"@DecimalMin\",\"被标注的值必须不小于约束中指定的最小值. 这个约束的参数是一个通过BigDecimal定义的最小值的字符串表示.小数存在精度\",\"@Digits\",\"验证 Number 和 String 的构成是否合法\",\"@Digits(integer=,fraction=)\",\"验证字符串是否是符合指定格式的数字，interger指定整数精度，fraction指定小数精度。\",\"@Range(min=, max=)\",\"检查数字是否介于min和max之间.\",\"@Range(min=10000,max=50000,message=“range.bean.wage”)\",\"private BigDecimal wage;\",\"@Valid\",\"递归的对关联对象进行校验, 如果关联对象是个集合或者数组,那么对其中的元素进行递归校验,如果是一个map,则对其中的值部分进行校验.(是否进行递归验证)\",\"@CreditCardNumber\",\"信用卡验证\",\"@Email\",\"验证是否是邮件地址，如果为null,不进行验证，算通过验证。\",\"@ScriptAssert(lang= ,script=, alias=)\",\"@URL(protocol=,host=, port=,regexp=, flags=)\",\"|\"]},\"385\":{\"h\":\"3.3 基本演示\",\"t\":[\"对实体类增加注解\",\"@Data public class UserDetailUpdateDto { @NotBlank //非空 private String nickname; private Date birthday; @Range(min = 1,max = 2) //数值 private int sex; @NotBlank //非空 private String info; } \",\"控制层参数添加 @Validated 注解，实现参数校验\",\" /**修改用户详情*/ @PostMapping(\\\"update.do\\\") // 全局异常处理器 jsr303校验 public R update(@RequestBody @Validated UserDetailUpdateDto dto, HttpServletRequest request, BindingResult result){ // //原来 // if(result.getFieldErrorCount()>0){ // //参数有误 // return R.fail(result.getFieldErrors()); // } //统一异常处理 return service.update(dto,request.getIntHeader(SystemConfig.HEADER_TOKEN)); } \",\"统⼀异常处理器捕获异常\",\"//全局异常处理器 配合jsr303校验 //直接对controller层进行jsr303校验 @RestControllerAdvice(basePackages = \\\"com.kou.user.controller\\\") public class ControllerExceptionAdvice { private Logger logger= LoggerFactory.getLogger(ControllerExceptionAdvice.class); //具体的某个异常类型处理 @ExceptionHandler(MethodArgumentNotValidException.class) public R handleValidException(MethodArgumentNotValidException e){ logger.error(\\\"数据异常：{}，异常类型：{}\\\",e.getMessage(),e.getClass()); BindingResult result=e.getBindingResult(); Map<String,String> map=new HashMap(); for (FieldError fieldError:result.getFieldErrors()){ map.put(fieldError.getDefaultMessage(),fieldError.getField()); } return R.fail(map); } //抛出的所有异常类型处理 @ExceptionHandler(Throwable.class) public R handleException(Throwable e){ e.printStackTrace(); //TODO 处理逻辑 return R.fail(); } } \"]},\"386\":{\"h\":\"3.4 嵌套问题\",\"t\":[\"It appears that you are having an issue with JSR303 validation not working in your code. From the code block you provided, it seems that you are using the @NotNull annotation to validate certain fields in your MatiMasEntity class. However, it's unclear from the code block whether you have properly configured JSR303 validation in your project.\",\"To enable JSR303 validation, you need to make sure that you have the necessary dependencies in your project and that you have configured a validator. In a Spring Boot project, for example, you can simply add the spring-boot-starter-validation dependency to your pom.xml file and Spring Boot will automatically configure a validator for you.\",\"Assuming that you have properly configured JSR303 validation in your project, it's possible that the validation is failing because the @Valid annotation is missing from the MatiDto class. The @Valid annotation is used to validate nested objects, so if you don't include it, the validation for the MatiMasEntity object may not be triggered.\",\"Here's an example of how you can use the @Valid annotation to validate the MatiMasEntity object in your MatiDto class:\",\"@Data @AllArgsConstructor @NoArgsConstructor public class MatiDto { @Valid private MatiMasEntity matiMasEntity; private List<MatiItemEntity> itemEntityList; } \",\"By adding the @Valid annotation to the matiMasEntity field, you are telling JSR303 to validate the MatiMasEntity object when validating the MatiDto object.\"]},\"387\":{\"h\":\"四、El表达式（扩展）\",\"t\":[\"<!-- el 表达式 juel--> <dependency> <groupId>de.odysseus.juel</groupId> <artifactId>juel</artifactId> <version>2.1.3</version> </dependency> \",\"package com.kw.springcodesudy.util; import de.odysseus.el.util.SimpleContext; import org.apache.el.ExpressionFactoryImpl; import javax.el.ExpressionFactory; import javax.el.ValueExpression; import java.util.HashMap; import java.util.Map; public class ConditionElUtil { public static Boolean checkFormDataByRuleEl(String el, Map<String, Object> formData) throws Exception { ExpressionFactory factory = new ExpressionFactoryImpl(); SimpleContext context = new SimpleContext(); for (Object k : formData.keySet()) { if (formData.get(k) != null) { context.setVariable(k.toString(), factory.createValueExpression(formData.get(k), formData.get(k).getClass())); } } ValueExpression e = factory.createValueExpression(context, el, Boolean.class); return (Boolean) e.getValue(context); } public static void main(String[] args) throws Exception { String el = \\\"${请假天数>3.5 && 部门 == '产品部'}\\\"; Map<String, Object> formData = new HashMap<>(); formData.put(\\\"请假天数\\\",3.6); formData.put(\\\"部门\\\", \\\"产品部\\\"); System.out.println(checkFormDataByRuleEl(el, formData)); } } \"]},\"388\":{\"h\":\"MDC链路追踪\",\"t\":[\"解决：线上日志查看过慢\",\"cat -n info.log |grep \\\"a415ad50dbf84e99b1b56a31aacd209c\\\" grep -10 'a415ad50dbf84e99b1b56a31aacd209c' info.log （10是指上下10行） \"]},\"389\":{\"h\":\"一、配置文件\",\"t\":[\"1.1 application.yml增加\",\"server: servlet: context-path: /zz port: 8999 logging: config: classpath:logback-spring.xml \",\"1.2 logback-spring.xml文件\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <configuration debug=\\\"false\\\"> <!--定义日志文件的存储地址 --> <property name=\\\"LOG_HOME\\\" value=\\\"../logs\\\" /> <!--<property name=\\\"COLOR_PATTERN\\\" value=\\\"%black(%contextName-) %red(%d{yyyy-MM-dd HH:mm:ss}) %green([%thread]) %highlight(%-5level) %boldMagenta( %replace(%caller{1}){'\\\\t|Caller.{1}0|\\\\r\\\\n', ''})- %gray(%msg%xEx%n)\\\" />--> <!-- 控制台输出 --> <appender name=\\\"STDOUT\\\" class=\\\"ch.qos.logback.core.ConsoleAppender\\\"> <encoder class=\\\"ch.qos.logback.classic.encoder.PatternLayoutEncoder\\\"> <!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符 <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50}:%L - %msg%n</pattern>--> <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %X{TRACE_ID} [%thread] %highlight(%-5level) %cyan(%logger{50}:%L) - %msg%n</pattern> </encoder> </appender> <!-- 按照每天生成日志文件 --> <appender name=\\\"FILE\\\" class=\\\"ch.qos.logback.core.rolling.RollingFileAppender\\\"> <rollingPolicy class=\\\"ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy\\\"> <!--日志文件输出的文件名 --> <FileNamePattern>${LOG_HOME}/sso-%d{yyyy-MM-dd}.%i.log</FileNamePattern> <!--日志文件保留天数 --> <MaxHistory>30</MaxHistory> <maxFileSize>10MB</maxFileSize> </rollingPolicy> <encoder class=\\\"ch.qos.logback.classic.encoder.PatternLayoutEncoder\\\"> <!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符 --> <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %X{TRACE_ID} [%thread] %-5level %logger{50}:%L - %msg%n</pattern> </encoder> </appender> <!-- 生成 error html格式日志开始 --> <appender name=\\\"HTML\\\" class=\\\"ch.qos.logback.core.FileAppender\\\"> <filter class=\\\"ch.qos.logback.classic.filter.ThresholdFilter\\\"> <!--设置日志级别,过滤掉info日志,只输入error日志--> <level>ERROR</level> </filter> <encoder class=\\\"ch.qos.logback.core.encoder.LayoutWrappingEncoder\\\"> <layout class=\\\"ch.qos.logback.classic.html.HTMLLayout\\\"> <pattern>%p%d%msg%M%F{32}%L</pattern> </layout> </encoder> <file>${LOG_HOME}/error-log.html</file> </appender> <!-- 生成 error html格式日志结束 --> <!-- 每天生成一个html格式的日志开始 --> <appender name=\\\"FILE_HTML\\\" class=\\\"ch.qos.logback.core.rolling.RollingFileAppender\\\"> <rollingPolicy class=\\\"ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy\\\"> <!--日志文件输出的文件名 --> <FileNamePattern>${LOG_HOME}/sso-%d{yyyy-MM-dd}.%i.html</FileNamePattern> <!--日志文件保留天数 --> <MaxHistory>30</MaxHistory> <MaxFileSize>10MB</MaxFileSize> </rollingPolicy> <encoder class=\\\"ch.qos.logback.core.encoder.LayoutWrappingEncoder\\\"> <layout class=\\\"ch.qos.logback.classic.html.HTMLLayout\\\"> <pattern>%p%d%msg%M%F{32}%L</pattern> </layout> </encoder> </appender> <!-- 每天生成一个html格式的日志结束 --> <!--myibatis log configure --> <logger name=\\\"com.apache.ibatis\\\" level=\\\"TRACE\\\" /> <logger name=\\\"java.sql.Connection\\\" level=\\\"DEBUG\\\" /> <logger name=\\\"java.sql.Statement\\\" level=\\\"DEBUG\\\" /> <logger name=\\\"java.sql.PreparedStatement\\\" level=\\\"DEBUG\\\" /> <!-- 日志输出级别 --> <root level=\\\"INFO\\\"> <appender-ref ref=\\\"STDOUT\\\" /> <appender-ref ref=\\\"FILE\\\" /> <appender-ref ref=\\\"HTML\\\" /> <appender-ref ref=\\\"FILE_HTML\\\" /> </root> </configuration> \"]},\"390\":{\"h\":\"二、如何实现\",\"t\":[\"采用得是拦截器方式，已每个线程为一个维度进行链路追踪 2.1 拦截器 WebMvcConfigurer添加拦截器\",\"public class TraceInterceptor implements HandlerInterceptor { private static final String TRACE_ID = \\\"TRACE_ID\\\"; /** * MDC(Mapped Diagnostic Context)诊断上下文映射，是@Slf4j提供的一个支持动态打印日志信息的工具 * @param request * @param response * @param handler * @return */ @Override public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) { String tid = UUID.randomUUID().toString().replace(\\\"-\\\", \\\"\\\"); if (!StringUtils.isEmpty(request.getHeader(\\\"TRACE_ID\\\"))) { tid = request.getHeader(\\\"TRACE_ID\\\"); } MDC.put(TRACE_ID, tid); return true; } @Override public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, @Nullable Exception ex) { MDC.remove(TRACE_ID); } } @Configuration public class InterceptorConfig implements WebMvcConfigurer { @Bean public TraceInterceptor logInterceptor() { return new TraceInterceptor(); } @Bean public SmsLimitationInterceptor getSmsLimitationInterceptor(){ return new SmsLimitationInterceptor(); } @Override public void addInterceptors(InterceptorRegistry registry) { registry.addInterceptor(getSmsLimitationInterceptor()).addPathPatterns(\\\"/**\\\"); registry.addInterceptor(logInterceptor()).addPathPatterns(\\\"/**\\\"); } } \",\"2.2 测试\",\" @PostMapping(\\\"doTest\\\") public String doTest(@RequestParam(\\\"name\\\") String name) throws InterruptedException { log.info(\\\"入参 name={}\\\",name); testTrace(); log.info(\\\"调用结束 name={}\\\",name); return \\\"Hello,\\\"+name; } private void testTrace(){ log.info(\\\"这是一行info日志\\\"); log.error(\\\"这是一行error日志\\\"); testTrace2(); } private void testTrace2(){ log.info(\\\"这也是一行info日志\\\"); } \"]},\"391\":{\"h\":\"三、多线程问题\",\"t\":[\"使用多线程时，子线程无法进行链路追踪 将父线程的trackId传递下去给子线程\",\"2023-07-22 10:53:26.442 3a164288b6aa43d8bc568b8fa5ca4bc2 [http-nio-8999-exec-7] INFO com.steven.kz.shelf.controller.sso.DemoCon:88 - 主线程:1 2023-07-22 10:53:26.443 3a164288b6aa43d8bc568b8fa5ca4bc2 [http-nio-8999-exec-7] INFO com.steven.kz.shelf.controller.sso.DemoCon:89 - 主线程:1 2023-07-22 10:53:26.443 3a164288b6aa43d8bc568b8fa5ca4bc2 [http-nio-8999-exec-7] INFO com.steven.kz.shelf.controller.sso.DemoCon:90 - 主线程:1 2023-07-22 10:53:26.447 [demoExecutor-0] INFO c.steven.kz.shelf.sso.service.impl.SmsServiceImpl:105 - 子线程 --start 2023-07-22 10:53:26.448 [demoExecutor-0] INFO c.steven.kz.shelf.sso.service.impl.SmsServiceImpl:111 - 这是一行info日志 2023-07-22 10:53:26.448 [demoExecutor-0] ERROR c.steven.kz.shelf.sso.service.impl.SmsServiceImpl:112 - 这是一行error日志 2023-07-22 10:53:26.448 [http-nio-8999-exec-7] INFO com.steven.kz.shelf.config.filter.TokenFilter:66 - 无需鉴权已放行,url:/internal/external/doTestT 2023-07-22 10:53:26.449 [demoExecutor-0] INFO c.steven.kz.shelf.sso.service.impl.SmsServiceImpl:116 - 这也是一行info日志 2023-07-22 10:53:26.449 [demoExecutor-0] INFO c.steven.kz.shelf.sso.service.impl.SmsServiceImpl:107 - 子线程 --end \",\"3.1 重写ThreadPoolTaskExecutor\",\"public final class MyThreadPoolTaskExecutor extends ThreadPoolTaskExecutor { public MyThreadPoolTaskExecutor() { super(); } @Override public void execute(Runnable task) { super.execute(ThreadMdcUtil.wrap(task, MDC.getCopyOfContextMap())); } @Override public <T> Future<T> submit(Callable<T> task) { return super.submit(ThreadMdcUtil.wrap(task, MDC.getCopyOfContextMap())); } @Override public Future<?> submit(Runnable task) { return super.submit(ThreadMdcUtil.wrap(task, MDC.getCopyOfContextMap())); } } \",\"public final class ThreadMdcUtil { private static final String TRACE_ID = \\\"TRACE_ID\\\"; // 获取唯一性标识 public static String generateTraceId() { return UUID.randomUUID().toString(); } public static void setTraceIdIfAbsent() { if (MDC.get(TRACE_ID) == null) { MDC.put(TRACE_ID, generateTraceId()); } } /** * 用于父线程向线程池中提交任务时，将自身MDC中的数据复制给子线程 * * @param callable * @param context * @param <T> * @return */ public static <T> Callable<T> wrap(final Callable<T> callable, final Map<String, String> context) { return () -> { if (context == null) { MDC.clear(); } else { MDC.setContextMap(context); } setTraceIdIfAbsent(); try { return callable.call(); } finally { MDC.clear(); } }; } /** * 用于父线程向线程池中提交任务时，将自身MDC中的数据复制给子线程 * * @param runnable * @param context * @return */ public static Runnable wrap(final Runnable runnable, final Map<String, String> context) { return () -> { if (context == null) { MDC.clear(); } else { MDC.setContextMap(context); } setTraceIdIfAbsent(); try { runnable.run(); } finally { MDC.clear(); } }; } } \",\"一定要使用我们重写后得类去创建线程池\",\"@Configuration @EnableAsync public class ThreadPoolConfig { @Bean(\\\"MyExecutor\\\") public Executor asyncExecutorT() { MyThreadPoolTaskExecutor executor = new MyThreadPoolTaskExecutor(); //核心线程数5：线程池创建时候初始化的线程数 executor.setCorePoolSize(5); //最大线程数5：线程池最大的线程数，只有在缓冲队列满了之后才会申请超过核心线程数的线程 executor.setMaxPoolSize(5); //缓冲队列500：用来缓冲执行任务的队列 executor.setQueueCapacity(500); //允许线程的空闲时间60秒：当超过了核心线程出之外的线程在空闲时间到达之后会被销毁 executor.setKeepAliveSeconds(60); //线程池名的前缀：设置好了之后可以方便我们定位处理任务所在的线程池 executor.setThreadNamePrefix(\\\"asyncJCccc\\\"); executor.initialize(); return executor; } } \",\"扩展 ThreadPoolTaskExecutor是Spring框架对ThreadPoolExecutor的封装，它继承自ThreadPoolExecutor类，并提供了更多的功能和灵活性。下面是ThreadPoolTaskExecutor和ThreadPoolExecutor之间的主要区别：\",\"封装程度：ThreadPoolTaskExecutor是对ThreadPoolExecutor的封装，提供了更高级别的抽象，以便于在Spring框架中使用。它提供了各种配置选项和自定义扩展点，更易于使用和管理。\",\"配置灵活性：ThreadPoolTaskExecutor提供了更多的配置选项和属性，例如核心线程数、最大线程数、队列容量、线程池名称等。这些配置可以通过Spring配置文件或注解进行灵活配置，而ThreadPoolExecutor需要手动编写代码进行配置。\",\"监控和管理：ThreadPoolTaskExecutor提供了丰富的监控和管理功能。它集成了Spring的任务执行框架，可以与其他Spring特性（如异步执行、定时任务）无缝集成。同时，它还提供了一些便利的方法和钩子，可以用于任务执行状态的监控、错误处理和自定义行为。\",\"依赖关系：ThreadPoolTaskExecutor是Spring框架的一部分，因此在使用Spring框架的项目中无需额外导入依赖。而ThreadPoolExecutor是Java标准库中的类，需要手动引入java.util.concurrent包。\",\"总的来说，ThreadPoolTaskExecutor是对ThreadPoolExecutor的增强和封装，提供了更多的功能和灵活性。它是在Spring框架中使用线程池的推荐方式，特别适用于基于Spring的应用程序开发。而ThreadPoolExecutor是Java标准库提供的原生线程池实现，可以直接在任何Java项目中使用。\",\"2023-07-22 11:24:02.397 5bb69626459e42c1b0f88a3965b1de4e [http-nio-8999-exec-1] INFO com.steven.kz.shelf.controller.sso.DemoCon:88 - 主线程:1 2023-07-22 11:24:02.397 5bb69626459e42c1b0f88a3965b1de4e [http-nio-8999-exec-1] INFO com.steven.kz.shelf.controller.sso.DemoCon:89 - 主线程:1 2023-07-22 11:24:02.397 5bb69626459e42c1b0f88a3965b1de4e [http-nio-8999-exec-1] INFO com.steven.kz.shelf.controller.sso.DemoCon:90 - 主线程:1 2023-07-22 11:24:07.805 5bb69626459e42c1b0f88a3965b1de4e [asyncJCccc1] INFO c.steven.kz.shelf.sso.service.impl.SmsServiceImpl:105 - 子线程 --start 2023-07-22 11:24:07.811 5bb69626459e42c1b0f88a3965b1de4e [asyncJCccc1] INFO c.steven.kz.shelf.sso.service.impl.SmsServiceImpl:111 - 这是一行info日志 2023-07-22 11:24:07.811 5bb69626459e42c1b0f88a3965b1de4e [asyncJCccc1] ERROR c.steven.kz.shelf.sso.service.impl.SmsServiceImpl:112 - 这是一行error日志 2023-07-22 11:24:07.811 5bb69626459e42c1b0f88a3965b1de4e [asyncJCccc1] INFO c.steven.kz.shelf.sso.service.impl.SmsServiceImpl:116 - 这也是一行info日志 2023-07-22 11:24:07.815 5bb69626459e42c1b0f88a3965b1de4e [asyncJCccc1] INFO c.steven.kz.shelf.sso.service.impl.SmsServiceImpl:107 - 子线程 --end \",\"将trackId封装到返回值里，便于快速查看日志\",\"{ \\\"traceId\\\": \\\"5f1b68bfe19b49ad86548ea1e7112b29\\\", \\\"code\\\": \\\"0\\\", \\\"msg\\\": \\\"success\\\", \\\"success\\\": true, \\\"data\\\": \\\"Hello,哇\\\" } \"]},\"392\":{\"h\":\"PicGo\",\"t\":[\"picgo：https://github.com/Molunerfinn/PicGo/releases1https://github.com/Molunerfinn/PicGo/releases/tag/v2.3.0 使用cdn：https://cdn.staticaly.com/gh/用户名/仓库名@master上传成功会自动返回路径\",\"\\n验证\\n文档中上传图片返回url\"]},\"393\":{\"h\":\"ThreadLocal\"},\"394\":{\"h\":\"一、ThreadLocal介绍\",\"t\":[\"https://zhuanlan.zhihu.com/p/444331676https://blog.csdn.net/qq_40813329/article/details/124290304\",\"提示\",\"ThreadLocal 用作保存每个线程独享的对象，为每个线程都创建一个副本，这样每个线程都可以修改自己所拥有的副本, 而不会影响其他线程的副本，确保了线程安全。 ThreadLocal叫做_线程变量，意思是ThreadLocal中填充的变量_属于**当前线程**，该变量对其他线程而言是隔离的，也就是说该变量是当前线程独有的变量。ThreadLocal为变量在每个线程中都创建了一个副本，那么每个线程可以访问自己内部的副本变量。\"]},\"395\":{\"h\":\"二、ThreadLocal与Thread，ThreadLocalMap之间的关系\",\"t\":[\"Thread线程可以拥有多个ThreadLocal维护的自己线程独享的共享变量（这个共享变量只是针对自己线程里面共享）\"]},\"396\":{\"h\":\"三、使用场景\",\"t\":[\"举一个比较详细的例子，我的一些接口需求鉴权，当然是要写一个GenericFilterBean来进行校验，对接sso校验是否登录，放行之后访问service层，但这里就会与一个问题，后续的操作可能也会需要用户的信息，所以就要把loginInfo存起来，这里就用到了ThreadLocal 因为：每个线程有自己单独的实例，实例在多个方法中共享，但不被多线程共享 解决方法传参\",\"package com.tool.stevenkztool.threadLocal; import com.google.common.collect.Maps; import java.util.Collections; import java.util.Map; import java.util.Objects; /** * Java8中ThreadLocal对象提供了一个Lambda构造方式，实现了非常简洁的构造方法：withInitial。这个方法采用Lambda方式传入实现了 Supplier 函数接口的参数。 * ThreadLocal 用作保存每个线程独享的对象，为每个线程都创建一个副本，这样每个线程都可以修改自己所拥有的副本, 而不会影响其他线程的副本，确保了线程安全。 */ public class ThreadLocals { //用ThreadLocal作为容器，当每个线程访问这个 THREAD_LOCAL_CONTEXT 变量时，ThreadLocal会为每个线程提供一份变量，各个线程互不影响。 private static final ThreadLocal<Map<String, Object>> THREAD_LOCAL_CONTEXT = ThreadLocal.withInitial(() -> { return Collections.synchronizedMap(Maps.newHashMap()); }); public ThreadLocals(){} public static void setValue(String key, Object value) { getContext().put(key, value); } /** * key存在不赋值（不覆盖原有值） * @param key k * @param value v */ public static void setIfAbsent(String key, Object value) { getContext().putIfAbsent(key, value); } public static Object getValue(String key) { return getContext().get(key); } public static <T> T getValue(String key, Class<T> clazz) { return (T) getContext().get(key); } public static void removeValue(String key) { getContext().remove(key); } private static Map<String, Object> getContext() { Map<String, Object> context = (Map)THREAD_LOCAL_CONTEXT.get(); //返回本地变量 if (Objects.isNull(context)) { context = Maps.newHashMap(); THREAD_LOCAL_CONTEXT.set(context); } return (Map)context; } } //具体实现 根据filter存入 public class UserInfoContext { public static void setUser(LoginInfo loginInfo) { ThreadLocals.setValue(Consts.THREAD_LOCAL_USER_INFO_KEY, loginInfo); } public static LoginInfo getUser() { return ThreadLocals.getValue(Consts.THREAD_LOCAL_USER_INFO_KEY, LoginInfo.class); } public static String getUserId() { LoginInfo loginInfo = ThreadLocals.getValue(Consts.THREAD_LOCAL_USER_INFO_KEY, LoginInfo.class); if (loginInfo == null || StringUtils.isEmpty(loginInfo.getUserId())) { return \\\"\\\"; } return loginInfo.getUserId(); } public static String getUserName() { LoginInfo loginInfo = ThreadLocals.getValue(Consts.THREAD_LOCAL_USER_INFO_KEY, LoginInfo.class); if (loginInfo == null || StringUtils.isEmpty(loginInfo.getUserName())) { return \\\"\\\"; } return loginInfo.getUserName(); } } \"]},\"397\":{\"h\":\"ThreadPool\",\"t\":[\"池化思想：线程池、字符串常量池、数据库连接池 线程池优点：提高线程得利用率提高程序得响应速度便于统一管理线程对象可以控制最大并发数\",\"/** * @author kz 单例模式 IoDh实现，静态内部类 * @date 2022/10/12 */ public class ThreadPoolSingle { private ThreadPoolExecutor executor; //1.私有化构造器 private ThreadPoolSingle(){ executor=new ThreadPoolExecutor(8,20,10, TimeUnit.SECONDS, new ArrayBlockingQueue<>(10), Executors.defaultThreadFactory(), new ThreadPoolExecutor.AbortPolicy()); } //2.静态内部类 public static class ThreadInner{ //3.完成当前对象的实例化 private static final ThreadPoolSingle poolSingle=new ThreadPoolSingle(); } //4.提供公有方法，外键获取对象 public static ThreadPoolSingle getInstance(){ return ThreadInner.poolSingle; } } \"]},\"398\":{\"h\":\"一、线程池7大参数\",\"t\":[\"1.核心线程数，最小线程数 2.最大线程数，线程池最多可以创建的线程数量 3.线程的空闲时间(回收线程) 4.空闲时间的单位 5.阻塞队列，如果当前任务超过核心线程数，就会放到阻塞队列中 6.线程工厂，创建线程 7.拒绝策略，如果当前线程池 数量已达上线，就会触发拒绝策略\"]},\"399\":{\"h\":\"二、线程池的运行过程\",\"t\":[\"当创建线程池得时候就已经存在了核心线程？ 1.当有任务进来得时候，就会先走核心线程，如果任务超过核心线程得数量 2.就会存到阻塞队列中（先进先出）,如果任务过多，超出阻塞队列的最大容量 3.阻塞队列容量已满，线程池验证当前线程是否达到最大限制，如果没有就创建线程，处理新的任务,不是处理阻塞队列得任务.相当于插队 4.当阻塞队列已满并且线程池已达最大线程数得时候（阻塞队列+最大线程数(包含核心线程)）新的任务会触发拒绝策略 5.当任务处理完毕得时候，在设置得回收时间内，没有用到除核心线程以外，已经被创建得线程，就会对改线程进行回收。\"]},\"400\":{\"h\":\"三、阻塞队列\",\"t\":[\"任务队列是基于阻塞队列实现的，即采用生产者消费者模式，在 Java 中需要实现 BlockingQueue 接口。但 Java 已经为我们提供了 7 种阻塞队列的实现：\",\"ArrayBlockingQueue：一个由数组结构组成的有界阻塞队列（数组结构可配合指针实现一个环形队列）。\",\"LinkedBlockingQueue： 一个由链表结构组成的有界阻塞队列，在未指明容量时，容量默认为 Integer.MAX_VALUE。\",\"PriorityBlockingQueue： 一个支持优先级排序的无界阻塞队列，对元素没有要求，可以实现 Comparable 接口也可以提供 Comparator 来对队列中的元素进行比较。跟时间没有任何关系，仅仅是按照优先级取任务。\",\"DelayQueue：类似于PriorityBlockingQueue，是二叉堆实现的无界优先级阻塞队列。要求元素都实现 Delayed 接口，通过执行时延从队列中提取任务，时间没到任务取不出来。\",\"SynchronousQueue： 一个不存储元素的阻塞队列，消费者线程调用 take() 方法的时候就会发生阻塞，直到有一个生产者线程生产了一个元素，消费者线程就可以拿到这个元素并返回；生产者线程调用 put() 方法的时候也会发生阻塞，直到有一个消费者线程消费了一个元素，生产者才会返回。\",\"LinkedBlockingDeque： 使用双向队列实现的有界双端阻塞队列。双端意味着可以像普通队列一样 FIFO（先进先出），也可以像栈一样 FILO（先进后出）。\",\"LinkedTransferQueue： 它是ConcurrentLinkedQueue、LinkedBlockingQueue 和 SynchronousQueue 的结合体，但是把它用在 ThreadPoolExecutor 中，和 LinkedBlockingQueue 行为一致，但是是无界的阻塞队列。\",\"注意有界队列和无界队列的区别：如果使用有界队列，当队列饱和时并超过最大线程数时就会执行拒绝策略；而如果使用无界队列，任务队列永远都可以添加任务，所以设置 maximumPoolSize 没有任何意义\"]},\"401\":{\"h\":\"四、拒绝策略\",\"t\":[\"ThreadPoolExecutor.AbortPolicy: 中止策略 当线程数量大于最大线程时 ，丢弃任务并抛出RejectedExecutionException异常 ThreadPoolExecutor.DiscardPolicy： 丢弃策略 线程数量大于最大线程时 ，丢弃任务，但是不抛出异常。 ThreadPoolExecutor.DiscardOldestPolicy： 丢弃最老任务 丢弃队列最前面的任务，重新提交被拒绝的任务 ThreadPoolExecutor.CallerRunsPolicy： 优先处理策略 由调用线程（提交任务的线程）处理该任务线程池的默认拒绝策略为AbortPolicy 中止策略\"]},\"402\":{\"h\":\"拒绝策略场景分析\"},\"403\":{\"h\":\"4.1AbortPolicy 中止策略\",\"t\":[\"如果是比较关键的业务，推荐使用此拒绝策略，这样在系统不能承载更大的并发量的时候，能够及时的通过异常发现。\"]},\"404\":{\"h\":\"4.2 DiscardPolicy 丢弃策略\",\"t\":[\"使用此策略，可能会使我们无法发现系统的异常状态。建议是一些无关紧要的业务采用此策略。\"]},\"405\":{\"h\":\"4.3 DiscardOldestPolicy 丢弃最老任务\",\"t\":[\"此拒绝策略，是一种喜新厌旧的拒绝策略。是否要采用此种拒绝策略，还得根据实际业务是否允许丢弃老任务来认真衡量\"]},\"406\":{\"h\":\"4.4 CallerRunsPolicy 优先处理策略\",\"t\":[\"由调用线程处理该任务\"]},\"407\":{\"h\":\"五、线程池的五大状态\",\"t\":[\"线程池的5种状态：Running、ShutDown、Stop、Tidying、Terminated\"]},\"408\":{\"h\":\"5.1 RUNNING\",\"t\":[\"状态说明：在RUNNING状态下，线程池可以接收新的任务和执行已添加的任务。 线程池的初始化状态是RUNNING。换句话说，线程池被一旦被创建（比如调Executors.newFixedThreadPool()或者使用ThreadPoolExecutor进行创建），就处于RUNNING状态，并且线程池中的任务数为0！线程池处在RUNNING状态时，能够接收新任务，以及对已添加的任务进行处理\"]},\"409\":{\"h\":\"5.2 SHUTDOWN\",\"t\":[\"状态说明：线程池处在SHUTDOWN状态时，不接收新任务，但能处理已添加的任务 当一个线程池调用shutdown()方法时，线程池由RUNNING -> SHUTDOWN\"]},\"410\":{\"h\":\"5.3 STOP\",\"t\":[\"状态说明：线程池处在STOP状态时，不接收新任务，不处理已添加的任务，并且会中断正在执行的任务 调用线程池的shutdownNow()方法的时候，线程池由(RUNNING或者SHUTDOWN ) -> STOP\"]},\"411\":{\"h\":\"5.3TIDYING\",\"t\":[\"状态说明：当所有的任务已终止，记录的”任务数量”为0，线程池会变为TIDYING状态。当线程池变为TIDYING状态时，会执行钩子函数terminated()。 若用户想在线程池变为TIDYING时，进行相应的处理；可以通过重写terminated()函数来实现。 当线程池在SHUTDOWN状态下，阻塞队列为空并且线程池中执行的任务也为空时，就会由 SHUTDOWN -> TIDYING。 当线程池在STOP状态下，线程池中执行的任务为空时，会由STOP -> TIDYING\"]},\"412\":{\"h\":\"5.4 TERMINATED\",\"t\":[\"状态说明：当钩子函数terminated()被执行完成之后，线程池彻底终止，就变成TERMINATED状态。 线程池处在TIDYING状态时，执行完terminated()之后，就会由 TIDYING -> TERMINATED\"]},\"413\":{\"h\":\"六、回收核心线程\",\"t\":[\"//回收核心线程 executor.allowCoreThreadTimeOut(true); 使用多线程调用dao层时，新线程于主线程并非同一个上下文，会报空指针异常 service 包裹dao\"]},\"414\":{\"h\":\"七、 多线程异步定时任务\",\"t\":[\"为什么使用？ Scheduling 本身是单线程机制，要想多个定时任务并行执行，需要使用 @Async 注解采用异步执行方式。 在Spring中，基于@Async标注的方法，称之为异步方法，这些方法将在执行的时候，将会在独立的线程中被执行，调用者无需等待它的完成，即可继续其他的操作。SchedulingConfigurer 这个注解其实大家并不陌生，如果有使用过 @Scheduled 的话，因为 @Scheduled 默认是单线程执行的，因此如果存在多个任务同时触发，可能触发阻塞。使用 SchedulingConfigurer 可以配置用于执行 @Scheduled 的线程池，来避免这个问题。\",\"@Configuration @EnableScheduling @EnableAsync @Slf4j public class SchedulerConfig implements SchedulingConfigurer { @Override public void configureTasks(ScheduledTaskRegistrar taskRegistrar) { taskRegistrar.setScheduler(taskExecutor()); } @Bean(destroyMethod = \\\"shutdown\\\") public ScheduledExecutorService taskExecutor() { ThreadFactory threadFactory = new ThreadFactoryBuilder().setNameFormat(\\\"schedule-%d\\\").get(); return new ScheduledThreadPoolExecutor(3, threadFactory, new ThreadPoolExecutor.DiscardPolicy()); } @Bean(value = \\\"demoExecutor\\\", destroyMethod = \\\"shutdown\\\") public ThreadPoolExecutor demoExecutor() { ThreadFactory threadFactory = new ThreadFactoryBuilder().setNameFormat(\\\"demoExecutor-%d\\\").get(); return new ThreadPoolExecutor(3, 10, 30, TimeUnit.SECONDS, new LinkedBlockingDeque<>(10000), threadFactory, new ThreadPoolExecutor.DiscardPolicy()); } } \",\"使用：\",\"@GetMapping(\\\"test\\\") @Async(value = \\\"demoExecutor\\\") @Scheduled(fixedRate = 2, timeUnit = TimeUnit.SECONDS) public void t(){ System.err.println(\\\"1111111111111111\\\"); } \"]},\"415\":{\"h\":\"观察者模式\",\"t\":[\"spring事件就是观察者模式的一种 ，是一种行为设计模式，它定义了对象之间的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都会得到通知并被自动更新。在这个模式中，改变状态的对象被称为主题，依赖的对象被称为观察者。举个实际的例子：事件源（Event Source）：可以视为“主题（Subject）”，当其状态发生变化时（比如播放新的内容），会通知所有的观察者。想象我们正在听广播，广播电台就是一个事件源，它提供了大量的新闻、音乐和其他内容。事件（Event）：这是主题状态改变的具体表示，对应到广播例子中，就是新闻、音乐和其他内容。每当电台播放新的内容时，就相当于一个新的事件被发布了。广播器（Event Publisher / Multicaster）：广播器起到的是中介的作用，它将事件从事件源传递到监听器。在这个例子中，广播塔就充当了这个角色，它将电台的节目的无线电信号发送到空气中，以便无线电接收器（监听器）可以接收。监听器（Listener）：监听器就是“观察者”，它们监听并响应特定的事件。在例子中，无线电接收器就是监听器，它接收广播塔发出的信号，然后播放电台的内容。在Spring中，事件模型的工作方式也是类似的：当Spring应用程序中发生某个行为时（比如一个用户完成了注册），那么产生这个行为的组件（比如用户服务）就会创建一个事件，并将它发布出去。事件一旦被发布，Spring的ApplicationContext就会作为广播器，把这个事件发送给所有注册的监听器。各个监听器接收到事件后，就会根据事件的类型和内容，进行相应的处理（比如发送欢迎邮件，赠送新用户优惠券等）。 这就是Spring事件模型的工作原理，它实现了事件源、广播器和监听器之间的解耦，使得事件的生产者和消费者可以独立地进行开发和修改，增强了程序的灵活性和可维护性。\",\"image.png\"]},\"416\":{\"h\":\"观察者模式\",\"t\":[\"观察者模式是一种对象行为模式。它定义对象间的一种一对多的依赖关系(被观察者维护观察者列表)当一个对象的状态发生改变时，列表中所有观察者都会接收到状态改变的通知观察者把自己注册到被观察者持有的列表中由被观察者轮询调用观察者的处理代码当被观察者发布通知，也就是有事件触发时，由被观察者轮询调用观察者的处理代码ps：观察者和被观察者要存在依赖关系2.发布订阅模式ps：发布者不知道订阅者的存在，存在消息管理器，彼此不知道对方存在.策略模式优缺点1）优点策略模式提供了对“开闭原则”的完美支持，用户可以在不 修改原有系统的基础上选择算法或行为，也可以灵活地增加 新的算法或行为。策略模式提供了管理相关的算法族的办法。策略模式提供了可以替换继承关系的办法。使用策略模式可以避免使用多重条件转移语句。2）缺点策略模式将造成产生很多策略类，可以通过使用享元模式在一 定程度上减少对象的数量。\"]},\"417\":{\"h\":\"代理模式\",\"t\":[\"代理模式是一种设计模式，提供了对目标对象额外的访问方式，即通过代理对象访问目标对象，这样可以在不修改原目标对象的前提下，提供额外的功能操作，扩展目标对象的功能，解耦。\"]},\"418\":{\"h\":\"一、静态代理\",\"t\":[\"静态代理相当于是多写了一个代理类，在调用的时候调用的是代理类，在代理类中的处理还是原生的处理逻辑，不过在前后添加上需要添加的代码。 缺点：需要为每一个被代理的对象都创建一个代理类。 白话： 代理角色和真实角色都需要实现同一个接口 真实角色专注于自己的事情 代理角色目的就是帮助真实角色完成一件事情 实现一个接口Runnable 使用的就是\\\"静态代理\\\"的思想\",\"//接口 public interface DemoService { void test(); } //实现类 @Service(\\\"demoService\\\") @Slf4j public class DemoServiceImpl implements DemoService { @Override @SneakyThrows public void test() { try { System.err.println(\\\"原逻辑不变\\\"); }catch (Exception e){ e.printStackTrace(); } } } //代理类 @Slf4j @Service(\\\"demoProxy\\\") public class DemoServiceProxy implements DemoService { private DemoService service; public DemoServiceProxy(DemoServiceImpl service){ this.service= service; } @Override public void test() { service.test(); System.err.println(\\\"代理增强逻辑\\\"); } } \",\"使用静态代理时，会出现一个spring注入的问题启动时报错：Consider marking one of the beans as @Primary, updating the consumer to accept multiple beans, or using @Qualifier to identify the bean that should be consumed原因分析 @Autowired是通过类型来注入的。以上边的示例来说，@Autowired注入一个接口，此时Spring会查找所有实现了接口的bean，此时发现了两个：然后就会报错。解决方案一 @Primary注解 将@Primary放到接口的某个实现类上边。这样如果此接口有多个实现类，则会注入有@Primary的实现类。那我们只需要放在 !=代理实现类上即可，当然这种方式不具备灵活性解决方案二 @Service(\\\"demoProxy\\\") 指定注入实现类 @Autowired@Qualifier(\\\"demoService\\\")private DemoService demoService;\"]},\"419\":{\"h\":\"二、JDK动态代理和CGLIB代理区别\",\"t\":[\"基于接口 vs 基于继承： \",\"JDK动态代理只能代理实现了接口的类，它是基于接口的代理。代理对象实现了与目标对象相同的接口，并通过InvocationHandler接口来处理方法调用。\",\"CGLIB（Code Generation Library）则通过生成子类来实现代理，不需要目标对象实现接口。CGLIB使用继承的方式创建代理对象，因此无法代理被标记为final的方法。\",\"性能差异： \",\"由于CGLIB是通过生成子类的方式实现代理，相对于JDK动态代理而言，创建代理对象的过程更加耗时和占用内存，因此在创建大量代理对象时，CGLIB的性能可能会更差。\",\"JDK动态代理在执行方法调用时，由于底层使用了反射机制，因此在一些特定场景下，可能比CGLIB慢一些。\",\"目标对象类型： \",\"JDK动态代理要求目标对象实现接口，因此它适用于对接口进行代理的场景。\",\"CGLIB可以代理没有实现接口的类，因此更加灵活，适用于对类进行代理的场景。\",\"应用场景： \",\"JDK动态代理适合于对服务层接口进行代理，如Spring AOP中的代理对象。\",\"CGLIB适合于对具体业务类进行代理，尤其是没有实现接口的类。\",\"总结来说，JDK动态代理适用于需要代理接口的情况，它的优势在于标准化、原生支持和无需额外依赖。而CGLIB适用于代理类的情况，它的优势在于能够代理没有实现接口的类，但代理过程相对较慢且占用较多内存。选择使用哪种代理方式取决于具体的需求和场景。\"]},\"420\":{\"h\":\"三、JDK动态代理\",\"t\":[\"分别根据jdk,cglib实现重试机制案例\",\"import lombok.extern.slf4j.Slf4j; import java.lang.reflect.InvocationHandler; import java.lang.reflect.Method; import java.lang.reflect.Proxy; @Slf4j public class RetryInvocationHandler implements InvocationHandler { private final Object subject; public RetryInvocationHandler(Object subject) { this.subject = subject; } @Override public Object invoke(Object proxy, Method method, Object[] args) throws Throwable { int maxAttempts = 3; // 最大重试次数 int attempts = 0; while (attempts < maxAttempts) { try { attempts++; return method.invoke(subject, args); // 调用真实对象的方法 } catch (Exception e) { log.error(\\\"Method invocation failed. Retry attempt: {}/{}\\\", attempts, maxAttempts); if (attempts >= maxAttempts) { throw e; } Thread.sleep(1000); } } throw new RuntimeException(\\\"Method invocation failed after \\\" + maxAttempts + \\\" attempts\\\"); } public static Object getProxy(Object realSubject) { InvocationHandler handler = new RetryInvocationHandler(realSubject); return Proxy.newProxyInstance(handler.getClass().getClassLoader(), realSubject.getClass().getInterfaces(), handler); } } \",\"这里使用的是JDK动态代理，因此就存在一个天然的缺陷，如果想要被代理的类，没有实现任何接口，那么就无法为其创建代理对象。\",\" @SneakyThrows @GetMapping(\\\"/jdkAgent\\\") public void jdkAgent() { DemoService jdkProxy = (DemoService) RetryInvocationHandler.getProxy(demoService); System.err.println(\\\"contract\\\"); jdkProxy.test(); } \"]},\"421\":{\"h\":\"四、CgLib代理\",\"t\":[\"使用 JDK 动态代理对被代理的类有要求，不是所有的类都能被代理，而 CGLib 动态代理则刚好解决了这个问题\",\"import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.cglib.proxy.Enhancer; import org.springframework.cglib.proxy.MethodInterceptor; import org.springframework.cglib.proxy.MethodProxy; import org.springframework.stereotype.Component; import java.lang.reflect.Method; @Component public class CGLibRetryProxyHandler implements MethodInterceptor { private Object target; private Logger logger = LoggerFactory.getLogger(CGLibRetryProxyHandler.class); @Override public Object intercept(Object o, Method method, Object[] objects, MethodProxy methodProxy) throws Throwable { int maxAttempts = 3; int attempts = 0; while (attempts < maxAttempts) { try { attempts++; return method.invoke(target, objects); } catch (Exception e) { logger.error(\\\"Method invocation failed. Retry attempt: {}/{}\\\", attempts, maxAttempts); if (attempts >= maxAttempts) { throw e; } Thread.sleep(1000); } } throw new RuntimeException(\\\"Method invocation failed after \\\" + maxAttempts + \\\" attempts\\\"); } public Object getCglibProxy(Object objectTarget){ this.target = objectTarget; Enhancer enhancer = new Enhancer(); enhancer.setSuperclass(objectTarget.getClass()); enhancer.setCallback(this); Object result = enhancer.create(); return result; } } \",\" @GetMapping(\\\"/cglbAgent\\\") @SneakyThrows public void cglbAgent() { CgLibTest cgLibTest = new CgLibTest(); CgLibTest cglibProxy = (CgLibTest) new CGLibRetryProxyHandler().getCglibProxy(cgLibTest); System.err.println(\\\"contract\\\"); cglibProxy.test(); } \"]},\"422\":{\"h\":\"单例模式\",\"t\":[\"单例模式是一种创建型设计模式，它确保只有一个类的实例存在，并提供全局访问点。在 Java 中，实现单例模式通常使用以下两种方式：饿汉式：坏处:对象加载时间过长。好处:饿汉式是线程安全的。懒汉式：好处:延迟对象的创建。坏处:目前的写法，会线程不安全。饿汉式单例模式饿汉式单例模式在类加载时就实例化一个对象，并将其保存在静态变量中，这样在之后的代码中就可以直接使用该实例\",\"public class Singleton { // 在类加载时就实例化一个对象 private static final Singleton instance = new Singleton(); // 私有化构造函数，以防止其他代码创建实例 private Singleton() {} // 对外暴露获取实例的静态方法 public static Singleton getInstance() { return instance; } } \",\"懒汉式单例模式\",\"懒汉式单例模式在首次调用获取实例方法时才进行实例化，并将其保存在静态变量中，以便后续使用。以下是示例代码：\",\"public class Singleton { // 使用 volatile 修饰 instance 变量，以确保多线程下的可见性和正确性 private static volatile Singleton instance; private Singleton() {} public static Singleton getInstance() { if (instance == null) { // 如果实例未被实例化，则进行实例化并赋值给 instance 变量 synchronized (Singleton.class) { // 使用 synchronized 关键字实现多线程下的线程安全 if (instance == null) { instance = new Singleton(); } } } return instance; } } \",\"双重检查锁（Double Checked Locking）是一种常用的多线程编程技术，其主要用途是在保证线程安全的同时尽量减少锁的使用，从而提高程序性能。双重检查锁之所以能够提高程序性能，是因为它能够减少锁的使用次数。在对共享资源进行访问时，加锁和解锁操作是非常耗费时间的，而使用双重检查锁可以在不必要的情况下避免加锁和解锁操作，从而提高程序的执行效率。需要注意的是，双重检查锁在实现时需要注意线程安全问题。由于指令重排的原因，如果不使用 volatile 关键字修饰共享变量 instance，可能会出现多个线程同时访问 instance 导致实例化多个对象的情况。因此，在使用双重检查锁模式时，需要使用 volatile 关键字来保证线程安全性。\"]},\"423\":{\"h\":\"责任链模式\"},\"424\":{\"h\":\"什么是责任链模式？\",\"t\":[\"责任链模式是将链中的每一个节点看作是一个对象，每个节点处理的请求不同，且内部自动维护一个下一节点对象。当一个请求从链式的首段发出时，会沿着链的路径依此传递给每一个节点对象，直至有对象处理这个请求为止。属于行为型模式\"]},\"425\":{\"h\":\"应用场景\",\"t\":[\"在日常生活中责任链模式还是很常见的。我们平时处理一些事务，往往是各部门协同合作完成某些任务。而每个部门都有各自的职责，因此很多时候事情完成一半便会转交给下一个部门，直至所有部门都通过一遍后事情才能完成。 **责任链模式主要是解耦了请求与处理，客户只需要将请求发送到链上即可，无序关心请求的是具体内容和处理细节，请求会自动进行传递直至有节点对象进行处理。**适用与以下场景：\",\"多个对象可以处理同一请求，但具体由那个对象处理则在运行时动态决定。\",\"在不明确指定接收者的情况下，向多个对象中的一个提交一个请求。\",\"可动态指定一组对象处理请求\",\"image.png\",\"通过以上类图，我们可以发现他具有两种角色：\",\"抽象处理者定义一个请求处理的方法，并维护一个下一个处理节点对象的应用。\",\"具体处理者对请求进行处理，如果不感兴趣则进行转发\",\"责任链模式的本质是解耦请求与处理，让请求在处理链中能进行传递与被处理；理解责任链模式应当理解的是其模式而不是具体实现，责任链模式的独到之处是其将节点处理者组合成了链式结构，并允许节点自身决定是否进行请求处理或转发，相当于让请求流动了起来 抽象接口\",\"package com.example.demo.responsibility; import com.example.demo.responsibility.pojo.LoginInfo; public abstract class Handler { protected Handler next; public void next(Handler next) { this.next = next; } public abstract void doHandler(LoginInfo loginInfo); } \",\"pojo\",\"@Data @NoArgsConstructor @AllArgsConstructor public class LoginInfo { private String loginName; private String loginPass; private String roleName; public LoginInfo(String loginName,String loginPass){ this.loginName=loginName; this.loginPass=loginPass; } } \",\"校验类\",\"public class LoginHandler extends Handler { @Override public void doHandler(LoginInfo loginInfo) { System.out.println(\\\"登录成功！\\\"); loginInfo.setRoleName(\\\"管理员\\\"); if (next != null) { next.doHandler(loginInfo); } } } public class AuthHandler extends Handler { @Override public void doHandler(LoginInfo loginInfo) { if (!\\\"管理员\\\".equals(loginInfo.getRoleName())) { System.out.println(\\\"您不是管理员，没有操作权限\\\"); return; } System.out.println(\\\"允许操作\\\"); if (next != null) { next.doHandler(loginInfo); } } } public class ValidateHandler extends Handler { @Override public void doHandler(LoginInfo loginInfo) { if (StringUtils.isEmpty(loginInfo.getLoginName()) || StringUtils.isEmpty(loginInfo.getLoginPass())) { System.out.println(\\\"用户名和密码为空\\\"); return; } System.out.println(\\\"用户名和密码不为空，可以往下执行\\\"); if (next != null) { next.doHandler(loginInfo); } } \",\"main\",\"public class LoginService { public static void main(String[] args) { LoginService loginService = new LoginService(); loginService.login(\\\"111\\\",\\\"123123\\\"); } public void login(String loginName, String loginPass) { Handler validateHandler = new ValidateHandler(); Handler loginHandler = new LoginHandler(); Handler authHandler = new AuthHandler(); LoginInfo loginInfo = new LoginInfo(loginName, loginPass); // validate -> login -> auth validateHandler.next(loginHandler); loginHandler.next(authHandler); validateHandler.doHandler(loginInfo); } } 用户名和密码不为空，可以往下执行 登录成功！ 允许操作 \"]},\"426\":{\"h\":\"Alibaba Cloud Toolkit\",\"t\":[\"阿里云工具包（Alibaba Cloud Toolkit）是一款由阿里云官方开发的插件，可以在Eclipse或IntelliJ IDEA中集成使用。它提供了可视化的控制台，使得开发者可以在集成开发环境（IDE）中管理和部署阿里云资源。 插件实现自动化持续部署，可部署非阿里云服务器。 本文使用的是idea操作，当然vscode也是可以的。\"]},\"427\":{\"h\":\"一、配置服务器\",\"t\":[\"字如其意 可添加Tag/描述分辨多个服务器\"]},\"428\":{\"h\":\"二、部署服务端项目\",\"t\":[\"2.1配置 配置restart.sh重启项目即可 配置完成之后运行 maven自动打包 查看部署成功，若无法访问，请查看是否开启端口号\"]},\"429\":{\"h\":\"三、shell脚本文件\"},\"430\":{\"h\":\"3.1 方式一\",\"t\":[\"start.sh #!/bin/bash source /etc/profile echo Starting application nohup java -jar /usr/local/springboot/codingstart/codingstart-1.0.jar >log.log 2>&1 & stop.sh #!/bin/bash PID=$(ps -ef | grep codingstart-1.0.jar | grep -v grep | awk '{ print $2 }') if [ -z \\\"$PID\\\" ] then echo Application is already stopped else echo kill $PID kill $PID fi restart.sh #!/bin/bash echo Stopping application source /usr/local/sh/stop.sh echo Starting application source /usr/local/sh/start.sh \"]},\"431\":{\"h\":\"3.2 封装脚本文件\",\"t\":[\"基于方式一封装成一个shell文件\",\" # 服务jar名称 SERVICE_NAME_JAR=codingstart-1.0.jar # 部署路径 SERVICE_DIR=/usr/local/springboot/codingstart start(){ source /etc/profile echo Starting application nohup java -jar ${SERVICE_DIR}/${SERVICE_NAME_JAR} >log.log 2>&1 & echo \\\"=== 服务${SERVICE_NAME_JAR}已启动 ===\\\" } stop(){ PID=$(ps -ef | grep ${SERVICE_NAME_JAR} | grep -v grep | awk '{ print $2 }') if [ -z \\\"$PID\\\" ] then echo Application is already stopped else echo kill $PID kill $PID echo \\\"=== 服务${SERVICE_NAME_JAR}已停止 ===\\\" fi } restart(){ echo Stopping application stop sleep 2 echo Starting application start echo \\\"=== 服务${SERVICE_NAME_JAR}已重启 ===\\\" } help(){ echo \\\"=== spring-boot shell help start ===\\\" echo \\\"start 启动服务\\\" echo \\\"stop 停止服务\\\" echo \\\"restart 重启服务\\\" echo \\\"=== spring-boot shell help end ===\\\" } case ${1} in \\\"\\\") echo \\\"=== 参数错误 ===\\\" ;; help) help ;; start) start ;; stop) stop ;; restart) restart ;; *) help ;; esac exit 0 \",\"若部署时出现Permission denied，增加可执行权限，这里权限直接拉到最大 chmod 777 脚本.sh\"]},\"432\":{\"h\":\"四、部署前端项目\",\"t\":[\"部署完后端项目，就想着把前端也搞明白，于是就想了一下，发现还是比较简单的。 1.首先把dist文件上传至nginx文件中 2.删除之前部署的文件目录 3.创建新的部署目录如：www/wwwroot/docs 4.将dist文件内容copy到dosc中，删除dist文件\",\"#部署路径 SERVICE_DEPLOY=/www/wwwroot/docs #源文件路径 SERVICE_DIR=/www/wwwroot/dist deploy(){ echo \\\"vue start\\\" rm -f -r ${SERVICE_DEPLOY} echo \\\"stop 删除之前部署文件\\\" mkdir ${SERVICE_DEPLOY} cp -f -r ${SERVICE_DIR}/* ${SERVICE_DEPLOY} echo \\\"复制dist到部署目录\\\" rm -f -r ${SERVICE_DIR} echo \\\"删除dist文件 end\\\" } case ${1} in \\\"\\\") echo \\\"=== 参数错误 ===\\\" ;; deploy) deploy ;; esac exit 0 \",\"sh文件需要开启权限 chmod 777 vue.sh\\n成功结果就不展示了。\\n在配置nginx就可以了\"]},\"433\":{\"h\":\"Coding\",\"t\":[\"coding概述：提供一站式开发协作工具，帮助研发团队快速落地敏捷开发与 DevOps 开发方式，实现研发效能升级\"]},\"434\":{\"h\":\"一、创建项目\",\"t\":[\"省略 详细文档：https://g-mnbk6665.coding.net/quickstart\"]},\"435\":{\"h\":\"二、SSH连接\",\"t\":[\"关于ssh相关命令\",\"重启SSH服务 systemctl restart sshd 开机自动启动ssh命令 sudo systemctl enable sshd 关闭ssh开机自动启动命令 sudo systemctl disable ssh 单次开启ssh sudo systemctl start ssh 单次关闭ssh sudo systemctl stop ssh 设置好后重启系统 查看ssh是否启动，看到Active: active (running)即表示成功 sudo systemctl status sshd \",\"ssh-keygen -t rsa \",\"image.png\",\"cd /root/.ssh \",\"生成了三个文件： authorized_keys:存放远程免密登录的公钥,主要通过这个文件记录多台机器的公钥id_rsa : 生成的私钥文件id_rsa.pub ： 生成的公钥文件 进入id_rsa.pub文件，并将里面的内容全部拷贝到authorized_keys文件中保存\",\"cat id_rsa.pub vim authorized_keys \",\"再查看私钥 id_rsa 内容并全部复制：配置coding即可\",\"cat id_rsa \",\"image.png\"]},\"436\":{\"h\":\"三、SpringBoot\"},\"437\":{\"h\":\"持续集成\",\"t\":[\"关联项目，结合自己项目进行关联 选择Spring+Docker模板变量配置信息 构建方式有很多种 （分支，标签，版本号）\"]},\"438\":{\"h\":\"3.1 多环境配置\",\"t\":[\"配置你的环境，可打包时选择相应环境 至此持续集成就完成了，但要考虑logs文件的保留问题，可通过脚本Copy到备份文件夹\"]},\"439\":{\"h\":\"3.2 Dockerfile\",\"t\":[\"方式一 # 基础镜像 FROM openjdk:8-jre # author MAINTAINER zxht # 东八区 ENV TZ='Asia/Shanghai' # 挂载目录 VOLUME /home/service # 创建目录 RUN mkdir -p /home/service # 指定路径 WORKDIR /home/service # 复制jar文件到路径 COPY ./mes-web/target/mes.jar /home/service/mes.jar # 启动系统服务 ENTRYPOINT [\\\"java\\\",\\\"-jar\\\",\\\"mes.jar\\\"] 方式二 FROM coding-public-docker.pkg.coding.net/public/docker/openjdk:8 COPY ./mes-web/target/mes.jar /root/workspace/mes.jar CMD [\\\"java\\\", \\\"-jar\\\", \\\"mes.jar\\\"] \"]},\"440\":{\"h\":\"3.3 静态Jenkinsfile\",\"t\":[\"pipeline { agent any stages { stage('检出') { steps { checkout([$class: 'GitSCM', branches: [[name: GIT_BUILD_REF]], userRemoteConfigs: [[ url: GIT_REPO_URL, credentialsId: CREDENTIALS_ID ]]]) } } stage('编译') { steps { sh 'mvn clean install -e -U -P ${PROFILES}' } } stage('构建镜像并推送到 CODING Docker 制品库') { steps { script { docker.withRegistry( \\\"${CCI_CURRENT_WEB_PROTOCOL}://${CODING_DOCKER_REG_HOST}\\\", \\\"${CODING_ARTIFACTS_CREDENTIALS_ID}\\\" ) { def dockerImage = docker.build(\\\"${CODING_DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_VERSION}\\\", \\\"-f ${DOCKERFILE_PATH} ${DOCKER_BUILD_CONTEXT}\\\") dockerImage.push() } } } } stage('部署到远端服务') { steps { script { def remoteConfig = [:] remoteConfig.name = \\\"my-remote-server\\\" remoteConfig.host = \\\"${REMOTE_HOST}\\\" remoteConfig.port = \\\"${REMOTE_SSH_PORT}\\\".toInteger() remoteConfig.allowAnyHosts = true withCredentials([ sshUserPrivateKey( credentialsId: \\\"${REMOTE_CRED}\\\", keyFileVariable: \\\"privateKeyFilePath\\\" ), usernamePassword( credentialsId: \\\"${CODING_ARTIFACTS_CREDENTIALS_ID}\\\", usernameVariable: 'CODING_DOCKER_REG_USERNAME', passwordVariable: 'CODING_DOCKER_REG_PASSWORD' ) ]) { // SSH 登录用户名 remoteConfig.user = \\\"${REMOTE_USER_NAME}\\\" // SSH 私钥文件地址 remoteConfig.identityFile = privateKeyFilePath // 请确保远端环境中有 Docker 环境 sshCommand( remote: remoteConfig, command: \\\"docker login -u ${CODING_DOCKER_REG_USERNAME} -p ${CODING_DOCKER_REG_PASSWORD} ${CODING_DOCKER_REG_HOST}\\\", sudo: true, ) sshCommand( remote: remoteConfig, command: \\\"docker rm -f mes | true\\\", sudo: true, ) // DOCKER_IMAGE_VERSION 中涉及到 GIT_LOCAL_BRANCH / GIT_TAG / GIT_COMMIT 的环境变量的使用 // 需要在本地完成拼接后，再传入到远端服务器中使用 DOCKER_IMAGE_URL = sh( script: \\\"echo ${CODING_DOCKER_REG_HOST}/${CODING_DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_VERSION}\\\", returnStdout: true ) sshCommand( remote: remoteConfig, command: \\\"docker run -d -p 8999:8999 --name mes ${DOCKER_IMAGE_URL}\\\", sudo: true, ) echo \\\"部署成功，请到 http://${REMOTE_HOST}:8999/mes/doc.html#/home\\\" } } } } } environment { CODING_DOCKER_REG_HOST = \\\"${CCI_CURRENT_TEAM}-docker.pkg.${CCI_CURRENT_DOMAIN}\\\" CODING_DOCKER_IMAGE_NAME = \\\"${PROJECT_NAME.toLowerCase()}/${DOCKER_REPO_NAME}/${DOCKER_IMAGE_NAME}\\\" } } \"]},\"441\":{\"h\":\"四、持续集成 Vue\",\"t\":[\"1.关联仓库后选择模板 2.本次使用的是ssh连接当然也可以选择账户+密码 3.创建制品仓Generic类型存储dist压缩包 变量和缓存 流程配置信息的几个说明点 1.这是创建的制品名称 2.指定Node版本 3.注意你的存放Nginx和文件路径一致否则依赖加载不到\",\"// 服务器远程地址 def remotePath = \\\"/www/wwwroot/kblogs\\\" \",\"pipeline { agent any stages { stage('检出') { steps { checkout([$class: 'GitSCM', branches: [[name: GIT_BUILD_REF]], userRemoteConfigs: [[ url: GIT_REPO_URL, credentialsId: CREDENTIALS_ID ]]]) } } stage('安装依赖') { steps { sh 'npx -p node@16.20.2 npm install' } } stage('执行构建') { steps { echo '开始构建' sh 'npx -p node@16.20.2 npm run build' echo '构建完成' } } stage('压缩制品Dist') { steps { echo '压缩中...' sh 'tar -zcf dist.tar.gz -C ./src/.vuepress/ dist' echo '压缩完成.' sh 'ls' } } stage('上传制品') { steps { echo '开始上传' codingArtifactsGeneric(files: 'dist.tar.gz', repoName: 'blogs', version: '${env.GIT_BUILD_REF}') } } stage('部署至服务器') { steps { script { def remote= [:] remote.name = \\\"my-remote-server\\\" remote.host = \\\"${REMOTE_HOST}\\\" remote.allowAnyHosts = true // 服务器远程地址 def remotePath = \\\"/www/wwwroot/kblogs\\\" withCredentials([sshUserPrivateKey( credentialsId: \\\"${REMOTE_CRED}\\\", keyFileVariable: \\\"privateKeyFilePath\\\" )]) { remote.user = \\\"${REMOTE_USER_NAME}\\\" // SSH 私钥文件地址 remote.identityFile = privateKeyFilePath stage(\\\"执行ssh脚本\\\") { echo '开始执行脚本' sshCommand remote: remote, sudo: false, command: \\\"rm -rf ${remotePath}/*\\\" sshCommand remote: remote, command: \\\"mkdir -p /www/wwwroot/kblogs/ && touch /www/wwwroot/kblogs/dist.tar.gz\\\" sshPut remote: remote, from: './dist.tar.gz', into:remotePath + \\\"/dist.tar.gz\\\" // SSH 上传文件到远端服务器 sshCommand remote: remote, command: \\\"tar -zxf ${remotePath}/dist.tar.gz -C ${remotePath}\\\" // 解压缩 sshCommand remote: remote, sudo: false, command: \\\"rm -f ${remotePath}/*.tar.gz\\\" // 删除压缩文件 sshCommand remote: remote, sudo: false, command: \\\"mv ${remotePath}/dist/* ${remotePath}\\\" //将dist文件夹所有内容移动到上一级 sshCommand remote: remote, sudo: false, command: \\\"rm -rf ${remotePath}/dist\\\" //将dist文件夹所有内容移动到上一级 echo '脚本执行结束' } } } } } } } \"]},\"442\":{\"h\":\"Jenkins实战\"},\"443\":{\"h\":\"一、安装配置\",\"t\":[\"提示\",\"此教学为Jenkins新版本 需JDK11进行运行\"]},\"444\":{\"h\":\"1.1 安装JDK\",\"t\":[\"# 服务器使用jdk8 yum install -y java-1.8.0-openjdk-devel.x86_64 # 最新版本jenkins需jdk11环境 yum install java-11-openjdk.x86_64 -y java -version \"]},\"445\":{\"h\":\"1.2 下载jenkins的war包\",\"t\":[\"卸载jenkins残留文件\",\"service jenkins stop yum -y remove jenkins rpm -e jenkins rpm -ql jenkins rm -rf /etc/sysconfig/jenkins.rpmsave rm -rf /var/cache/jenkins/ rm -rf /etc/init.d/jenkins.rpmsave find / -iname jenkins | xargs -n 1000 rm -rf \",\"下载:https://www.jenkins.io/download/ firewall-cmd --zone=public --add-port=8080/tcp --permanent systemctl restart firewalld 使用jdk11启动jenkins\",\"/usr/lib/jvm/java-11-openjdk-11.0.23.0.9-2.el7_9.x86_64/bin/java -DJENKINS_HOME=/home/jenkins -jar /home/jenkins/jenkins.war >> /home/jenkins.log # 后台运行 nohup /usr/lib/jvm/java-11-openjdk-11.0.23.0.9-2.el7_9.x86_64/bin/java -DJENKINS_HOME=/home/jenkins -jar /home/jenkins/jenkins.war >> /home/jenkins.log 2>&1 & \"]},\"446\":{\"h\":\"1.3 安装git\",\"t\":[\"1、配置好yum源，执行 yum install git 命令即可。 2、执行 git -version 命令验证，出现git版本号则表示安装成功。\"]},\"447\":{\"h\":\"1.4 安装Maven\",\"t\":[\"1、下载地址：https://maven.apache.org/download.cgi 下载apache-maven-3.9.7-bin.tar.gz安装包，在非root目录下执行命令解压 tar -xzvf apache-maven-3.9.7-bin.tar.gz 2、配置maven阿里云镜像\",\"vim /home/maven/apache-maven-3.9.7/conf/settings.xml \",\"<mirrors> <!--阿里镜像的配置--> <mirror> <id>nexus-aliyun</id> <mirrorOf>central</mirrorOf> <name>Nexus aliyun</name> <url>http://maven.aliyun.com/nexus/content/groups/public</url> </mirror> </mirrors> \",\"3、配置maven环境变量\",\"sudo vim /etc/profile export M2_HOME=/home/maven/apache-maven-3.9.7 export CLASSPATH=$CLASSPATH:$M2_HOME/lib export PATH=$PATH:$M2_HOME/bin # 刷新配置 source /etc/profile # 验证 mvn -v \"]},\"448\":{\"h\":\"二、配置Jenkins\"},\"449\":{\"h\":\"2.1 插件配置\",\"t\":[\"Dashboard --> Manage Jenkins --> Plugins --> Available -->plugins Maven Integration SSH Agent 插件需要下载 Dashboard --> Manage Jenkins --> Tools\"]},\"450\":{\"h\":\"2.2 新增任务\",\"t\":[\"Dashboard --> 新加Item 可SSH 微服务指定打包某个项目减少打包时间\",\"clean install -pl service-modules/service-feel -am -amd -P test-dev -Dmaven.test.skip=true clean package \",\" 本脚本保存5个历史版本\",\"#!/bin/sh server_name=service-feel server_name_dir=service-modules/$server_name # 进入目录编译代码 echo \\\"### cd $WORKSPACE/$server_name_dir/\\\" cd $WORKSPACE/$server_name_dir/ echo \\\"### cp target/*.jar /home/feel/server/$server_name/$server_name-$BUILD_NUMBER.jar\\\" cp target/*.jar /home/feel/server/$server_name/$server_name-$BUILD_NUMBER.jar cd /home/feel/server/$server_name/ echo \\\"### sh restart.sh -f n -v $BUILD_NUMBER\\\" sh restart.sh -f n -v $BUILD_NUMBER echo \\\"### 保留五个版本\\\" ls -t *.jar | sed -n '6,$p' | xargs -I {} rm -rf {} \",\"restart.sh\",\"#! /bin/bash source /etc/profile while getopts v:f: OPT; do case ${OPT} in v) version=${OPTARG} ;; f) tail_flag=${OPTARG} ;; \\\\?) exit 1 esac done if [[ ! $version ]];then echo '11' exit 0 fi echo 'version: '$version jar_name=$(find . -name *-$version.jar | awk '{print $1}' | awk -F\\\"/\\\" '{ print $2 }'); echo 'jar_name: '$jar_name port=9205 echo \\\"port: $port\\\" pid=$(netstat -nlp | grep :$port | awk '{print $7}' | awk -F\\\"/\\\" '{ print $1 }'); if [ -n \\\"$pid\\\" ];then echo \\\"kill -9 $pid\\\" kill -9 $pid fi echo \\\"nohup java -Xms4096m -Xmx6144m -jar $jar_name --server.port=$port --spring.profiles.active=store-dev > /dev/null 2>&1 &\\\" BUILD_ID=dontKillMe nohup java -jar $jar_name --server.port=$port --spring.profiles.active=test-dev > /dev/null 2>&1 & if [ ! $tail_flag ] || [ $tail_flag == 'y' ];then tail -f logs/info.log fi \",\"image.png\"]},\"451\":{\"h\":\"2.3 执行\",\"t\":[\"image.png\"]},\"452\":{\"h\":\"三、前端项目\"},\"453\":{\"h\":\"3.1 安装插件\",\"t\":[\"安装插件 全局配置\"]},\"454\":{\"h\":\"3.2 创建项目\",\"t\":[\"创建一个自由风格的项目. 服务器下载zip命令\",\"#!/bin/bash ui_dir=/home/feel/ui ui_name=dist # 进入目录编译代码 echo \\\"### cd $WORKSPACE/\\\" cd $WORKSPACE/ echo \\\"### node -V\\\" node -V echo \\\"### npm cache clean --force\\\" npm cache clean --force echo \\\"### npm install\\\" npm install echo \\\"### rm -rf dist\\\" rm -rf dist echo \\\"### npm run build:stage\\\" npm run build:stage echo \\\"### cp -r dist $ui_dir/$ui_name-$BUILD_NUMBER\\\" cp -r dist $ui_dir/$ui_name-$BUILD_NUMBER echo \\\"### rm -rf $ui_dir/dist/*\\\" rm -rf $ui_dir/dist/* echo \\\"### cp -r $ui_dir/$ui_name-$BUILD_NUMBER/* $ui_dir/dist/\\\" cp -r $ui_dir/$ui_name-$BUILD_NUMBER/* $ui_dir/dist/ cd $ui_dir echo \\\"### zip -r $ui_dir/$ui_name-$BUILD_NUMBER.zip $ui_dir/$ui_name-$BUILD_NUMBER\\\" zip -r $ui_name-$BUILD_NUMBER.zip $ui_dir/$ui_name-$BUILD_NUMBER echo \\\"### rm -rf $ui_dir/$ui_name-$BUILD_NUMBER\\\" rm -rf $ui_name-$BUILD_NUMBER echo \\\"### 保留五个版本\\\" echo \\\"### ls -t $ui_name*.zip | sed -n '6,$p' | xargs -I {} rm -rf {}\\\" ls -t $ui_name*.zip | sed -n '6,$p' | xargs -I {} rm -rf {} \",\" 请自行配置Nginx\"]},\"455\":{\"h\":\"四、用户权限分配\"},\"456\":{\"h\":\"4.1安装插件\"},\"457\":{\"h\":\"Minio集群搭建\",\"t\":[\"分布式Minio采用 纠删码来防范多个节点宕机和位衰减 bit rot 。分布式Minio至少需要4个硬盘，使用分布式Minio自动引入了纠删码功能。\"]},\"458\":{\"h\":\"一、前置条件\",\"t\":[\"host\",\"ip\",\"minio-01\",\"192.168.112.128\",\"minio-02\",\"192.168.112.129\",\"minio-03\",\"192.168.112.130\",\"minio-04\",\"192.168.112.131\",\"在所有服务器分别执行\",\"$ hostnamectl set-hostname minio-01 $ hostnamectl set-hostname minio-02 $ hostnamectl set-hostname minio-03 $ hostnamectl set-hostname minio-04 \",\"在所有服务器全部执行vim /etc/hosts\",\"192.168.112.128 minio-01 192.168.112.129 minio-02 192.168.112.130 minio-03 192.168.112.131 minio-04 \",\"防火墙\",\"systemctl stop firewalld.service sudo firewall-cmd --zone=public --add-port=9000/tcp --permanent sudo firewall-cmd --zone=public --add-port=9001/tcp --permanent sudo firewall-cmd --reload \",\"修改系统最大文件数\",\"## 查看系统最大文件数 $ ulimit -n ## 查看系统最大文件数 $ ulimit -a ## 修改系统最大文件数 $ echo \\\"* soft nofile 65535\\\" >> /etc/security/limits.conf $ echo \\\"* hard nofile 65535\\\" >> /etc/security/limits.conf $ sysctl -p ## 重启服务器 $ reboot \"]},\"459\":{\"h\":\"二、下载并安装\",\"t\":[\"groupadd -r minio-user useradd -M -r -g minio-user minio-user mkdir /home/minio mkdir /home/minio/data chown minio-user:minio-user /home/minio/ chown minio-user:minio-user /home/minio/data chown -R minio-user:minio-user /home/minio/ chown -R minio-user:minio-user /home/minio/data cd /home/minio wget https://dl.min.io/server/minio/release/linux-amd64/archive/minio-20240113075303.0.0-1.x86_64.rpm rpm -i minio-20240113075303.0.0-1.x86_64.rpm #查看是否有权限 ls -ld /home/minio/data drwxr-xr-x. 2 minio-user minio-user 6 Aug 18 17:44 /home/minio/data \"]},\"460\":{\"h\":\"2.1 minio集群配置\",\"t\":[\"vim /etc/default/minio /etc/default/minio 文件中找到以下字段，修改其中的配置 ## 这块是文件磁盘的位置 因为我们之前配置了hosts,所以直接使用host,{1...4} 这边是一种池化写法 MINIO_VOLUMES=\\\"http://minio-0{1...4}/home/minio/data\\\" ## minio-console的地址 就是web界面控制台 MINIO_OPTS=\\\"--console-address :9001\\\" # console的登陆账号 MINIO_ROOT_USER=admin # console的登陆密码 密码有长度限制 MINIO_ROOT_PASSWORD=minioadmin \"]},\"461\":{\"h\":\"2.2 minio.service配置\",\"t\":[\"vim /usr/lib/systemd/system/minio.service \",\"[Unit] Description=MinIO Documentation=https://docs.min.io Wants=network-online.target After=network-online.target AssertFileIsExecutable=/usr/local/bin/minio [Service] Type=notify WorkingDirectory=/home/minio User=minio-user Group=minio-user ProtectProc=invisible EnvironmentFile=-/etc/default/minio ExecStartPre=/bin/bash -c \\\"if [ -z \\\\\\\"${MINIO_VOLUMES}\\\\\\\" ]; then echo \\\\\\\"Variable MINIO_VOLUMES not set in /etc/default/minio\\\\\\\"; exit 1; fi\\\" ExecStart=/usr/local/bin/minio server $MINIO_OPTS $MINIO_VOLUMES # Let systemd restart this service always Restart=always # Specifies the maximum file descriptor number that can be opened by this process LimitNOFILE=1048576 # Specifies the maximum number of threads this process can create TasksMax=infinity # Disable timeout logic and wait until process is stopped TimeoutStopSec=infinity SendSIGKILL=no [Install] WantedBy=multi-user.target \",\"systemctl enable minio.service systemctl daemon-reload systemctl start minio.service \"]},\"462\":{\"h\":\"2.3 启动报错\",\"t\":[\"Error: Drive /home/minio/data is part of root drive, will not be used (*errors.errorString)为Minio只能使用新的磁盘lsblk _lsblk_命令的功能是查看系统中硬盘,闪存盘,CD-ROM等块设备的信息,包括这些设备之间的依赖关系查看日志：sudo journalctl -u minio.service\",\"#格式化 mkfs.xfs /dev/sdb #挂载 mount /dev/sdb /home/minio/data #查看磁盘 lsblk #配置自启 vim /etc/fstab /dev/sdb /home/data xfs defaults 0 0 \",\"image.png\"]},\"463\":{\"h\":\"2.4 查看状态\",\"t\":[\"4台无ERROR则集群搭建成功\",\"systemctl status minio \",\"image.png\"]},\"464\":{\"h\":\"三、Nginx转发\",\"t\":[\"# 反向代理配置 upstream minio-cluster{ ip_hash; server minio-01:9001; server minio-02:9001; server minio-03:9001; server minio-04:9001; } upstream minio{ server minio-01:9000; server minio-02:9000; server minio-03:9000; server minio-04:9000; } server { listen 9001 ssl; server_name 域名; charset utf-8; # ssl证书地址 ssl_certificate /etc/nginx/cert/.pem; # pem文件的路径 ssl_certificate_key /etc/nginx/cert/.key; # key文件的路径 # ssl验证相关配置 ssl_session_timeout 5m; #缓存有效期 ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4; #加密算法 ssl_protocols TLSv1 TLSv1.1 TLSv1.2; #安全链接可选的加密协议 ssl_prefer_server_ciphers on; #使用服务器端的首选算法 access_log /home/nginx/logs/minio.log main; client_max_body_size 10G; location / { proxy_set_header Host $http_host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header REMOTE-HOST $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection \\\"upgrade\\\"; proxy_next_upstream http_500 http_502 http_503 http_504 error timeout invalid_header; proxy_pass http://minio-cluster; } } server { listen 9000 ssl; server_name 域名; charset utf-8; # ssl证书地址 ssl_certificate /etc/nginx/cert/.pem; # pem文件的路径 ssl_certificate_key /etc/nginx/cert/.key; # key文件的路径 # ssl验证相关配置 ssl_session_timeout 5m; #缓存有效期 ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4; #加密算法 ssl_protocols TLSv1 TLSv1.1 TLSv1.2; #安全链接可选的加密协议 ssl_prefer_server_ciphers on; #使用服务器端的首选算法 #add_header 'Cross-Origin-Embedder-Policy' 'require-corp'; #add_header 'Cross-Origin-Opener-Policy' 'same-origin'; #add_header Access-Control-Allow-Credentials: true; #add_header Access-Control-Allow-Origin *; #add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS'; #add_header Access-Control-Allow-Headers 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization'; client_max_body_size 10G; location / { proxy_set_header Host $http_host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header REMOTE-HOST $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_pass http://minio; } } \",\"image.png\"]},\"465\":{\"h\":\"Minio数据迁移\",\"t\":[\"Minio Server + Minio Client 实现minio 不同集群之间的数据迁移、数据备份\"]},\"466\":{\"h\":\"一、mc安装\",\"t\":[\" wget http://dl.minio.org.cn/client/mc/release/linux-amd64/mc -P /usr/local/bin/ cd /usr/local/bin/ chmod +x /usr/local/bin/mc \"]},\"467\":{\"h\":\"二、添加minio集群\",\"t\":[\"添加集群语法： mc config host add <自定义名称> <http/https>://<IP>:<端口> <账户> <密码>\",\"mc config host add minio_1 http://192.168.102.202:9000 wmsadmin zxht-password mc config host add minio_2 http://192.168.112.128:9000 cd3OauTlJ3ZQZJyREBS3 aiNIeTJLBpnQ3bgj4zimDsv9byufZnbqfkkf0hlf \",\"删除集群语法： mc config host remove <自定义名称> <http/https>://<IP>:<端口> <账户> <密码>\"]},\"468\":{\"h\":\"三、数据同步\",\"t\":[\"全量同步语法： mc mirror --remove --overwrite --watch <源集群> <目标集群>某个桶同步语法： mc mirror --remove --overwrite --watch <源集群/桶名称> <目标集群/桶名称>以下是全量同步minio_1同步到minio_2\",\"## 只会同步文件，本地修改或删除，云存储不会变化 mc mirror --watch minio_1 minio_2 ## 同步文件后，本地修改文件，会自行在另一集群进行相应的修改 mc mirror --overwrite --watch minio_1 minio_2 ## 同步文件后，本地修改/删除文件，会自行在另一集群进行相应的修改/删除 mc mirror --remove --overwrite --watch minio_1/minio-test minio_2/minio-test \",\"cp 和 mirror 区别mc cp 和 mc mirror 都是 minIO Client（mc）的命令，用于在 minIO 对象存储服务中进行文件传输和同步操作。mc cp：mc cp 用于将本地文件或对象从一个位置复制到另一个位置。可以用来上传/下载文件、目录，或者在不同桶（bucket）之间进行复制。通常用于单个文件或目录的复制操作。mc mirror：mc mirror 用于在两个目录之间进行镜像同步。它会递归地比较源目录和目标目录中的内容，并确保它们保持同步。如果目标目录中不存在源目录中的文件，则会将其复制过去；如果源目录中的文件被删除了，则目标目录中相应的文件也会被删除。总的来说，mc cp 主要用于简单的文件复制操作，而 mc mirror 则更适合于目录之间的完整同步操作，可以保持目录结构的一致性，并确保两个目录中的文件保持同步状态。\"]},\"469\":{\"h\":\"Mysql5.7集群搭建\",\"t\":[\"集群执行流程会有很小的延迟，基本没有影响1、从库不断试探主库二进制日志文件，如果发现有更新则发送请求到来获取主库中新的内容2、向主库中写数据：包括添加，删除，修改，建库建表等3、主库写的命令更新到二进制文件中日志的偏移量4、如果从库试探二进制文件发现偏移量与从记录的偏移量值不同则表示主库有更新，就启动IO线程向主库请求从从某个偏移量开始到而二进制日期文件结束位置之间的所有数据5、主库根据从库的请求的偏移量位置来推送数据到从库中，从库接受到数据后，会更新从库记录的偏移量位置6、从库获取了主库的数据库以后，将这些命令数据写入日志文件中，然后唤醒sql线程同时让当前的IO线程挂起7、sql线程根据记录中日志文件的偏移量读取日志文件中的命令8、sql线程拿到命令以后在本地数据库进行回放（从库执行主库sql语句），回访完成当前sql线程挂机（休眠等待）\"]},\"470\":{\"h\":\"一、安装Mysql\",\"t\":[\"CentOS7环境之RPM方式离线安装MySQL5.7官网下载Mysql：https://downloads.mysql.com/archives/community/\"]},\"471\":{\"h\":\"1.1 删除mariadb\",\"t\":[\"CentOS7 一般yum安装包中有自带的mariadb，会导致依赖冲突首先执行命令rpm -qa|grep mariadb查看是否有mariadb的安装包，若没有可以无视，直接进入第二，安装mysql 5.7。\",\"#查看 rpm -qa|grep mariadb #删除 rpm -e --nodeps mariadb-libs \"]},\"472\":{\"h\":\"1.2 检查是否安装过mysql\",\"t\":[\"检查是否安装过mysql\",\"#安装前先检查下，是否之前安装过mysql服务 [root@192 mysql-5.7.42]# rpm -qa | grep mysql mysql-community-libs-compat-5.7.42-1.el7.x86_64 mysql-community-client-5.7.42-1.el7.x86_64 mysql-community-server-5.7.42-1.el7.x86_64 mysql-community-libs-5.7.42-1.el7.x86_64 #如果之前安装过，我们可以通过下面命令来卸载安装包 [root@192 mysql-5.7.42]# rpm -e --nodeps 安装包名称 #如果之前安装过mysql，datadir目录下会有数据存在，需要清空该目录 #查看 datadir 指定的目录 [root@192 mysql-5.7.42]# cat /etc/my.cnf | grep datadir datadir=/var/lib/mysql #删除 /var/lib/mysql 目录下的所有内容 [root@192 mysql-5.7.42]# cd /var/lib/mysql #执行rm命令前，一定要查看所在目录的位置 [root@192 mysql-5.7.42]# rm -rf ./* \"]},\"473\":{\"h\":\"1.3 安装mysql\",\"t\":[\"cd /usr/local # 在当前目录下（mysql）下创建一个 mysql-5.7 文件夹 mkdir mysql-5.7.42 # 解压安装包到该目录下 tar -xvf mysql-5.7.42-1.el7.x86_64.rpm-bundle.tar -C mysql-5.7.42 \",\"解压完成之后可以切换到 mysql-5.7 目录下查看解压后的文件可以看到解压后的文件都是 rpm 文件，所以需要用到rpm包资源管理器相关的指令安装这些 rpm 的安装包在安装执行 rpm 安装包之前先下载一些插件，因为 mysql 里面有些 rpm 的安装依赖于该插件。\",\"yum install openssl-devel # 和 yum -y install libaio perl net-tools \",\"安装完该插件之后，依次执行以下命令安装这些 rpm 包\",\"#按顺序执行下面命令 rpm -ivh mysql-community-common-5.7.42-1.el7.x86_64.rpm rpm -ivh mysql-community-libs-5.7.42-1.el7.x86_64.rpm rpm -ivh mysql-community-libs-compat-5.7.42-1.el7.x86_64.rpm rpm -ivh mysql-community-client-5.7.42-1.el7.x86_64.rpm rpm -ivh mysql-community-server-5.7.42-1.el7.x86_64.rpm \",\"Tips：按照顺序依次执行安装命令 （删除mariadb则不会出现当前问题）如果在安装过程中遇到了缺少依赖的报错，我们可以通过添加 --force --nodeps，来跳过依赖检查，进行强制安装\",\"[root@192 mysql-5.7.42]# rpm -ivh mysql-community-libs-5.7.42-1.el7.x86_64.rpm warning: mysql-community-libs-5.7.42-1.el7.x86_64.rpm: Header V4 RSA/SHA256 Signature, key ID 3a79bd29: NOKEY error: Failed dependencies: mysql-community-common(x86-64) >= 5.7.9 is needed by mysql-community-libs-5.7.42-1.el7.x86_64 mariadb-libs is obsoleted by mysql-community-libs-5.7.42-1.el7.x86_64 \"]},\"474\":{\"h\":\"1.4 初始化mysql\",\"t\":[\"#初始化MySQL数据库 mysqld --initialize --user=mysql #查看root用户的临时密码 cat /var/log/mysqld.log | grep 'temporary password' # 登录mysql systemctl start mysqld mysql -uroot -p +密码 #修改密码 set password = password(\\\"123456\\\"); # 开启远程连接(任意ip使用root用户连接) update mysql.user set host='%' where user='root'; flush privileges; \"]},\"475\":{\"h\":\"1.5 添加防火墙\",\"t\":[\"# 打开防火墙 systemctl start firewalld #放开3306端口 firewall-cmd --zone=public --add-port=3307/tcp --permanent #重新加载配 firewall-cmd --reload # 查看防火墙所以开放端口 firewall-cmd --zone=public --list-ports \",\"Tips ：mysql配置文件路径 /etc/my.cnfmysql自动进行systemctl托管，自带自启，无需配置\",\"systemctl start mysqld # 启动mysql服务 systemctl status mysqld # 查看mysql服务状态 systemctl enable mysqld #设置开机启动 systemctl daemon-reload # 刷新所有修改过的配置文件 \"]},\"476\":{\"h\":\"二、修改my.cnf\",\"t\":[\"[client] port = 3307 socket = /var/lib/mysql/mysql.sock default-character-set=utf8 [mysqld] port = 3307 #数据存放路径 datadir=/var/lib/mysql #通信 socket=/var/lib/mysql/mysql.sock #多日志文件 symbolic-links=0 #日志存放路径 log-error=/var/log/mysqld.log pid-file=/var/run/mysqld/mysqld.pid character-set-server=utf8 #不区分表名大小写 lower_case_table_names=1 #自动提交事物 autocommit = 1 \",\"修改端口号启动报错，被拦截添加一个新的SELinux策略\",\"[root@192 ~]# journalctl -xe -- Support: http://lists.freedesktop.org/mailman/listinfo/systemd-devel -- -- Unit mysqld.service has failed. -- -- The result is failed. Jul 27 02:40:51 192.168.47.132 systemd[1]: Unit mysqld.service entered failed state. Jul 27 02:40:51 192.168.47.132 systemd[1]: mysqld.service failed. Jul 27 02:40:51 192.168.47.132 setroubleshoot[8589]: SELinux is preventing /usr/sbin/mysqld from name_bind access on the tcp_socket port 3307. For complete SELinux messages run: sealert -l 040c1cb3-de34-4530-8723-cb5bcdb2e5fc \",\"sudo semanage port -a -t mysqld_port_t -p tcp 3307 sudo restorecon -Rv /etc/my.cnf # 如果你的MySQL配置文件路径不同，请替换这里的路径 sudo systemctl restart mysqld \"]},\"477\":{\"h\":\"三、主从配置\"},\"478\":{\"h\":\"1.3 主库Mysql配置\",\"t\":[\"主服务器配置文件my.cnf里面加入\",\"server-id = 1 log-bin=master-bin #添加，主服务器开启二进制日志 log-slave-updates=true #添加，允许从服务器更新二进制日志 systemctl restart mysqld \",\"执行下面SQL，记录下结果中File和Position（偏移量）的值，用于后续复制开始的位置\",\"show master status; \",\"创建数据同步的用户并授权SQL的作用是创建一个用户,并且给用户授予REPLICATION SLAVE权限。常用于建立复制时所需要用到的用户权限，也就是slave必须被master授权具有该权限的用户，才能通过该用户复制\",\"GRANT REPLICATION SLAVE ON *.* to 'copyUser'@'%' identified by '123456'; # 重置偏移量 防止创建的用户也同步到从库中 reset master; \"]},\"479\":{\"h\":\"1.4 从库Mysql配置\",\"t\":[\"修改Mysql数据库的配置文件/etc/my.cnf 后重启mysql\",\"vim /etc/my.cnf server-id = 2 #修改，注意id与Master的不同，两个Slave的id也要不同 relay-log=relay-log-bin #添加，开启中继日志，从主服务器上同步日志文件记录到本地 relay-log-index=slave-relay-bin.index #添加，定义中继日志文件的位置和名称 systemctl restart mysqld \",\"登录Mysql数据库，设置主库地址及同步位置\",\"change master to master_host='192.168.47.132',master_port=3307,master_user='copyUser',master_password='123456',master_log_file='master-bin.000001',master_log_pos=154; # 启动从节点 start slave; # 如果配置错了停止掉重新配置即可 stop slave; \",\"参数说明A. master_host : 主库的IP地址 ，master_port：指定端口B. master_user : 访问主库进行主从复制的用户名(上面在主库创建的)C. master_password : 访问主库进行主从复制的用户名对应的密码D. master_log_file : 从哪个日志文件开始同步(上述查询master状态中展示的有)E. master_log_pos : 从指定日志文件的哪个位置开始同步(上述查询master状态中展示的有)查看从数据库的状态\",\"show slave status\\\\G; #查看 Slave 状态 //确保 IO 和 SQL 线程都是 Yes，代表同步正常。 Slave_IO_Running: Yes #负责与主机的io通信 Slave_SQL_Running: Yes #负责自己的slave mysql进程 \",\"Tips：不要在从库进行写的操作，可能会导致Slave_SQL_Running sql回放失败，解决方案：根据show slave status\\\\G找到问题，删除相应数据，重新启动slave即可，或者重新删掉从库所有数据，重新配置从库即可。\"]},\"480\":{\"h\":\"Nacos集群搭建\"},\"481\":{\"h\":\"一、JDK安装\",\"t\":[\"cd /usr/local tar -zxvf jdk-8u411-linux-x64.tar.gz #配置环境变量 vim /etc/profile #添加内容 set java environment JAVA_HOME=/usr/local/jdk1.8.0_411 JRE_HOME=/usr/local/jdk1.8.0_411/jre CLASS_PATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin export JAVA_HOME JRE_HOME CLASS_PATH PATH #使配置生效 source /etc/profile java -version \"]},\"482\":{\"h\":\"二、Nacos单机\",\"t\":[\"下载地址：https://github.com/alibaba/nacos/releases\",\"cd /home tar -zxvf nacos-server-2.4.0.1.tar.gz \"]},\"483\":{\"h\":\"2.1 配置自启脚本\",\"t\":[\"#编辑命令vim /usr/lib/systemd/system/nacos.service\",\"[Unit] Description=nacos After=network.target [Service] Type=forking #单节点方式启动 ExecStart=/home/nacos/bin/startup.sh -m standalone # 集群方式启动 # ExecStart=/home/nacos/bin/startup.sh ExecReload=/home/nacos/bin/shutdown.sh ExecStop=/home/nacos/bin/shutdown.sh PrivateTmp=true [Install] WantedBy=multi-user.target \",\"#刷新配置systemctl daemon-reloadsystemctl enable nacos.service\"]},\"484\":{\"h\":\"2.2 配置Nacos JDK目录\",\"t\":[\"#切换目录 cd /home/nacos/bin/ #编辑 vim startup.sh #获取JAVA_HOME echo $JAVA_HOME /usr/local/jdk1.8.0_411 \",\"sudo firewall-cmd --permanent --add-port=8848/tcpsudo firewall-cmd --reloadsystemctl start nacossystemctl status nacos\"]},\"485\":{\"h\":\"三、Nacos集群\",\"t\":[\"IP Address\",\"Port\",\"192.168.47.132\",\"8848\",\"192.168.47.133\",\"8848\",\"192.168.47.134\",\"8848\",\"create database nacos_config charset utf8 执行文件到数据库 /home/nacos/conf - mysql-schema.sql \"]},\"486\":{\"h\":\"3.1 配置Nacos节点信息\",\"t\":[\"#切换目录 cd /home/nacos/conf #拷贝文件 cp cluster.conf.example cluster.conf #编辑 vim cluster.conf #加入节点信息 192.168.47.132:8848 192.168.47.133:8848 192.168.47.134:8848 \"]},\"487\":{\"h\":\"3.2 配置数据库节点信息\",\"t\":[\"#切换目录 cd /home/nacos/conf #编辑 vim application.properties # 表明用MySQL作为后端存储 spring.datasource.platform=mysql # 有几个数据库实例 db.num=1 # 第1个实例【从0开始】 db.url.0=jdbc:mysql://192.168.21.3:3306/nacos_config?characterEncoding=utf8&connectTimeout=1000&socketTimeout=3000&autoReconnect=true&useUnicode=true&useSSL=false&serverTimezone=UTC db.user.0=nacos db.password.0=123456 \",\"image.png\"]},\"488\":{\"h\":\"3.3 修改启动方式\",\"t\":[\"#编辑命令 vim /usr/lib/systemd/system/nacos.service 修改 ExecStart=/home/nacos/bin/startup.sh -m standalone 为： ExecStart=/home/nacos/bin/startup.sh #刷新配置 systemctl daemon-reload systemctl start nacos systemctl status nacos 日志查看 [root@192 conf]# tail -f /home/nacos/logs/start.out \",\"image.png\"]},\"489\":{\"h\":\"3.4 开启鉴权\",\"t\":[\"参考文档：https://nacos.io/zh-cn/docs/v2/guide/user/auth.html\",\"#切换目录 cd /home/nacos/conf #编辑 vim application.properties systemctl restart nacos tail -f /home/nacos/logs/start.out \",\"image.png\"]},\"490\":{\"h\":\"四、Nginx转发\",\"t\":[\"vim /etc/hosts\",\"192.168.47.132 middleware-01 192.168.47.133 middleware-02 192.168.47.134 middleware-03 \",\"# 反向代理配置 upstream nacos-cluster{ ip_hash; server middleware-01:8848; server middleware-02:8848; server middleware-03:8848; } server { listen 8848; access_log /home/nginx/logs/8848.log main; client_max_body_size 50M; location / { proxy_set_header Host $host; proxy_set_header Remote_Addr $remote_addr; proxy_set_header X-Real-IP $remote_addr; proxy_pass http://nacos-cluster/nacos/; } } \"]},\"491\":{\"h\":\"五、Java连接\",\"t\":[\"修改密码\",\"<dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-security</artifactId> </dependency> 执行下边这个代码 System.err.println(new BCryptPasswordEncoder().encode(\\\"nacos\\\")); 使用的数据库为 nacos， 用户表 users 修改用户账号密码就是替换users表的账户密码信息 \",\"<profiles> <profile> <id>test-dev</id> <properties> <spring.profiles.active>test-dev</spring.profiles.active> <nacos-server-addr>ip:8848</nacos-server-addr> <username>nacos</username> <password>nacos</password> </properties> <activation> <activeByDefault>true</activeByDefault> </activation> </profile> </profiles> \",\"spring: application: # 应用名称 name: service-feel profiles: # 环境配置 active: @spring.profiles.active@ cloud: nacos: discovery: namespace: ${spring.profiles.active} # 服务注册地址 server-addr: ${nacos-server-addr} username: ${username} password: ${password} config: namespace: ${spring.profiles.active} # 配置中心地址 server-addr: ${nacos-server-addr} # 配置文件格式 file-extension: yml username: ${username} password: ${password} # 共享配置 shared-configs: - application-${spring.profiles.active}.${spring.cloud.nacos.config.file-extension} \"]},\"492\":{\"h\":\"Redis集群搭建\",\"t\":[\"官网：https://redis.io/downloads/ 指定版本下载地址：https://download.redis.io/releases/ 千万别用redis6版本，很痛苦Redis6.0版本需要将gcc版本升级到5.3以上，而我们的gcc版本默认是4.8.5，所有需要对gcc版本进行升级\"]},\"493\":{\"h\":\"一、安装Redis\",\"t\":[\"cd /usr/local tar -zxvf redis-7.0.2.tar.gz \",\"由于redis是c语言编写的，所以我们需要先安装gcc，安装的命令如下：\",\"yum install gcc-c++ gcc -v 如果gcc版本太低，redis6.0之后gcc需要升级 cd redis-7.0.2/ #进行编译 make && make install #启动指定配置文件 配置文件中daemonize改为yes vim redis.conf #存放redis配置文件 mkdir -p /usr/local/redis/6379/etc mkdir -p /usr/local/redis/6340/etc mkdir -p /usr/local/redis/bin #redis下的redis.conf复制/usr/local/redis/etc cp /usr/local/redis-7.0.2/redis.conf /usr/local/redis/6379/etc/ cp /usr/local/redis-7.0.2/redis.conf /usr/local/redis/6340/etc/ #移动文件到/usr/local/redis/bin下 sudo mv /usr/local/bin/* /usr/local/redis/bin/ #启动指定配置文件 配置文件中daemonize改为yes /usr/local/redis/bin/redis-server /usr/local/redis/6379/etc/redis.conf /usr/local/redis/bin/redis-server /usr/local/redis/6340/etc/redis.conf #连接 ./redis-cli \"]},\"494\":{\"h\":\"二、配置开机自启\",\"t\":[\"vim /etc/systemd/system/redis6379.service # redis6379.service以下内容 [Unit] Description=Redis Server After=network.target [Service] Type=forking ExecStart=/usr/local/redis/bin/redis-server /usr/local/redis/6379/etc/redis.conf Restart=always PrivateTmp=true [Install] WantedBy=multi-user.target vim /etc/systemd/system/redis6340.service # redis6340.service以下内容 [Unit] Description=Redis Server After=network.target [Service] Type=forking ExecStart=/usr/local/redis/bin/redis-server /usr/local/redis/6340/etc/redis.conf Restart=always PrivateTmp=true [Install] WantedBy=multi-user.target #重新加载 systemd 配置 sudo systemctl daemon-reload #启动 sudo systemctl start redis6379 sudo systemctl start redis6340 systemctl status redis6340 systemctl stop redis6340 #设置开机自启 sudo systemctl enable redis6379 sudo systemctl enable redis6340 \",\"image.png\"]},\"495\":{\"h\":\"三、redis集群配置（三主三从）\",\"t\":[\"requirepass 123456 #bind 192.168.56.103 # 注释 port 6379 # 监听端口号 daemonize yes # 启用守护进程模式，Redis 在后台运行 pidfile /usr/local/redis/logs/redis_6379.pid # 指定 PID 文件的路径 logfile /usr/local/redis/logs/redis_6379.log # 指定日志文件的路径 appendonly yes # 开启 AOF 持久化模式 appendfilename \\\"appendonly.aof\\\" # AOF 文件的文件名 appendfsync everysec # 每秒同步一次 AOF 文件到磁盘 masterauth 123456 #不配置集群无需以下配置 cluster-enabled yes # 开启 Redis 集群模式 cluster-config-file nodes-6379.conf # 集群配置文件的文件名 cluster-node-timeout 5000 # 节点超时时间，单位为毫秒 cluster-migration-barrier 1 # 集群迁移障碍，用于避免群集中的数据分区 cluster-require-full-coverage yes # 集群是否需要全覆盖（所有槽位都被分配） \",\"redis集群需要使用ruby\",\"yum install ruby yum install rubygems gem install redis --version 3.0.0 \",\"启动redis\",\" #放开3306端口 firewall-cmd --zone=public --add-port=6379/tcp --permanent firewall-cmd --zone=public --add-port=6340/tcp --permanent #开放redis集群总线端口。集群总线端口是redis客户端连接的端口+10000。 firewall-cmd --zone=public --add-port=16379/tcp --permanent firewall-cmd --zone=public --add-port=16340/tcp --permanent #重新加载配 firewall-cmd --reload mkdir /usr/local/redis/logs /usr/local/redis/bin/redis-server /usr/local/redis/6379/etc/redis.conf /usr/local/redis/bin/redis-server /usr/local/redis/6340/etc/redis.conf cd /usr/local/redis-7.0.2/src # 启动集群模式 1 为主除从 ./redis-cli -a 123456 --cluster create 192.168.112.128:6379 192.168.112.129:6379 192.168.112.130:6379 192.168.112.128:6340 192.168.112.129:6340 192.168.112.130:6340 --cluster-replicas 1 \",\" 验证集群\",\"#连接任意客户端 ./redis-cli -a -c -h -p ./redis-cli -a 123456 -c -h 127.0.0.1 -p 6379 #查看集群信息 cluster info #查看节点列表 cluster nodes cluster slots \"]},\"496\":{\"h\":\"四、主从复制（一主二从）\",\"t\":[\"image.png\",\"# 一主两从 #停止redis服务 cd /usr/local/redis-7.0.2/ sudo find / -name nodes-6379.conf sudo find / -name dump.rdb #删除dump.rdb nodes-6379.conf #三台机器redis数据需要删除 #注释掉集群模式 cluster-enabled yes cluster-config-file nodes.conf cluster-node-timeout 15000 #添加从库配置 replicaof 192.168.112.128 6379 #主要就是从库添加这个参数，指定主库的ip和端口 masterauth 123456 #主库上有密码的话，需要在从库添加这个参数 # 查看 ./redis-cli -a 123456 info replication #客户端命令报错 https://blog.csdn.net/liummmin/article/details/108580120 \",\" 从库\"]},\"497\":{\"h\":\"五、哨兵模式配置\",\"t\":[\"cp /usr/local/redis-7.0.2/sentinel.conf /usr/local/redis/6379/etc/ cp /usr/local/redis-7.0.2/sentinel.conf /usr/local/redis/6340/etc/ cd /usr/local/redis/6379/etc/ vi sentinel.conf cd /usr/local/redis/6340/etc/ vi sentinel.conf #端口默认为26379。 port:26379 #关闭保护模式，可以外部访问。 protected-mode:no #设置为后台启动。 daemonize:yes #日志文件。 logfile /usr/local/redis/logs/sentinel_6379.log #指定主机IP地址和端口，并且指定当有2台哨兵认为主机挂了，则对主机进行容灾切换。 sentinel monitor mymaster 192.168.231.130 6379 2 #当在Redis实例中开启了requirepass，这里就需要提供密码。 sentinel auth-pass mymaster 123456 #这里设置了主机多少秒无响应，则认为挂了。 sentinel down-after-milliseconds mymaster 3000 #主备切换时，最多有多少个slave同时对新的master进行同步，这里设置为默认的1。 sentinel parallel-syncs mymaster 1 #故障转移的超时时间，这里设置为三分钟。 sentinel failover-timeout mymaster 180000 firewall-cmd --add-port=26379/tcp --permanent --zone=public firewall-cmd --add-port=26340/tcp --permanent --zone=public firewall-cmd --reload #启动 /usr/local/redis/bin/redis-sentinel /usr/local/redis/6379/etc/sentinel.conf /usr/local/redis/bin/redis-sentinel /usr/local/redis/6340/etc/sentinel.conf #验证 ./redis-cli -p 26379 info sentinel \",\"image.png\"]},\"498\":{\"h\":\"4.1 配置哨兵自启\",\"t\":[\"vim /etc/systemd/system/redis26379.service [Unit] Description=Redis Server After=network.target [Service] Type=forking ExecStart=/usr/local/redis/bin/redis-sentinel /usr/local/redis/6379/etc/sentinel.conf Restart=always PrivateTmp=true [Install] WantedBy=multi-user.target vim /etc/systemd/system/redis26340.service [Unit] Description=Redis Server After=network.target [Service] Type=forking ExecStart=/usr/local/redis/bin/redis-sentinel /usr/local/redis/6340/etc/sentinel.conf Restart=always PrivateTmp=true [Install] WantedBy=multi-user.target #重新加载 systemd 配置 sudo systemctl daemon-reload #设置开机自启 sudo systemctl enable redis26379 sudo systemctl enable redis26340 \",\"可以看到，哨兵已经监听到当前的主机IP端口和运行状态，并且有1台从机，6个哨兵。\"]},\"499\":{\"h\":\"4.2 容灾切换\",\"t\":[\"登陆6379\",\"./redis-cli -p 6379 auth 123456 #查看当前主服务器 ./redis-cli -p 6379 -a 123456 info replication ./redis-cli -p 26379 info sentinel #停止主节点 systemctl stop redis6379 \",\"自行验证\"]}},\"dirtCount\":0,\"index\":[[\"登陆6379\",{\"1\":{\"499\":1}}],[\"登录mysql数据库\",{\"1\":{\"479\":1}}],[\"登录mysql\",{\"1\":{\"474\":1}}],[\"登录mysql后\",{\"1\":{\"143\":1}}],[\"登录用户名\",{\"1\":{\"440\":1}}],[\"登录成功\",{\"1\":{\"425\":2}}],[\"登录已失效\",{\"1\":{\"379\":1}}],[\"登录注册\",{\"0\":{\"149\":1}}],[\"登录\",{\"1\":{\"121\":1}}],[\"登录地址\",{\"1\":{\"21\":1}}],[\"哨兵已经监听到当前的主机ip端口和运行状态\",{\"1\":{\"498\":1}}],[\"哨兵模式配置\",{\"0\":{\"497\":1}}],[\"哨兵模式\",{\"0\":{\"233\":1},\"1\":{\"233\":1}}],[\"故障转移的超时时间\",{\"1\":{\"497\":1}}],[\"端口默认为26379\",{\"1\":{\"497\":1}}],[\"端口号\",{\"1\":{\"352\":1}}],[\"移动文件到\",{\"1\":{\"493\":1}}],[\"很痛苦redis6\",{\"1\":{\"492\":1}}],[\"很容易出现问题\",{\"1\":{\"232\":1}}],[\"千万别用redis6版本\",{\"1\":{\"492\":1}}],[\"共享配置\",{\"1\":{\"491\":1}}],[\"拷贝文件\",{\"1\":{\"486\":1}}],[\"偏移量\",{\"1\":{\"478\":1}}],[\"刷新所有修改过的配置文件\",{\"1\":{\"475\":1}}],[\"刷新配置systemctl\",{\"1\":{\"483\":1}}],[\"刷新配置\",{\"1\":{\"140\":1,\"447\":1,\"488\":1}}],[\"休眠等待\",{\"1\":{\"469\":1}}],[\"域名\",{\"1\":{\"464\":2}}],[\"闪存盘\",{\"1\":{\"462\":1}}],[\"纠删码来防范多个节点宕机和位衰减\",{\"1\":{\"457\":1}}],[\"微服务指定打包某个项目减少打包时间\",{\"1\":{\"450\":1}}],[\"微信\",{\"1\":{\"0\":1}}],[\"压缩完成\",{\"1\":{\"441\":1}}],[\"压缩中\",{\"1\":{\"441\":1}}],[\"压缩制品dist\",{\"1\":{\"441\":1}}],[\"流程配置信息的几个说明点\",{\"1\":{\"441\":1}}],[\"流量削峰等问题\",{\"1\":{\"351\":1}}],[\"私钥文件地址\",{\"1\":{\"440\":1,\"441\":1}}],[\"私有化构造函数\",{\"1\":{\"422\":1}}],[\"私有化构造器\",{\"1\":{\"283\":1,\"397\":1}}],[\"制品库\",{\"1\":{\"440\":1}}],[\"东八区\",{\"1\":{\"439\":1}}],[\"至此持续集成就完成了\",{\"1\":{\"438\":1}}],[\"详细文档\",{\"1\":{\"434\":1}}],[\"省略\",{\"1\":{\"434\":1}}],[\"源文件路径\",{\"1\":{\"432\":1}}],[\"源代码等\",{\"1\":{\"368\":1}}],[\"于是就想了一下\",{\"1\":{\"432\":1}}],[\"于是看了下代码记录\",{\"1\":{\"223\":1}}],[\"脚本执行结束\",{\"1\":{\"441\":1}}],[\"脚本\",{\"1\":{\"431\":1}}],[\"管理员\",{\"1\":{\"425\":2}}],[\"管理用户\",{\"1\":{\"77\":3}}],[\"抽象接口\",{\"1\":{\"425\":1}}],[\"抽象处理者定义一个请求处理的方法\",{\"1\":{\"425\":1}}],[\"客户只需要将请求发送到链上即可\",{\"1\":{\"425\":1}}],[\"客户端命令报错\",{\"1\":{\"496\":1}}],[\"客户端第一次发送的报文是\",{\"1\":{\"282\":1}}],[\"客户端收到之后回复ack建立连接\",{\"1\":{\"282\":1}}],[\"客户端使用代理描述文字\",{\"1\":{\"175\":1}}],[\"客户端是不知道访问的到底是哪一台服务器\",{\"1\":{\"158\":1}}],[\"客户端了解代理服务器和目标服务器都是谁\",{\"1\":{\"158\":1}}],[\"往往是各部门协同合作完成某些任务\",{\"1\":{\"425\":1}}],[\"且内部自动维护一个下一节点对象\",{\"1\":{\"424\":1}}],[\"且会去掉前后空格\",{\"1\":{\"384\":1}}],[\"责任链模式的独到之处是其将节点处理者组合成了链式结构\",{\"1\":{\"425\":1}}],[\"责任链模式的本质是解耦请求与处理\",{\"1\":{\"425\":1}}],[\"责任链模式主要是解耦了请求与处理\",{\"1\":{\"425\":1}}],[\"责任链模式是将链中的每一个节点看作是一个对象\",{\"1\":{\"424\":1}}],[\"责任链模式\",{\"0\":{\"423\":1}}],[\"懒汉式单例模式在首次调用获取实例方法时才进行实例化\",{\"1\":{\"422\":1}}],[\"懒汉式单例模式\",{\"1\":{\"422\":1}}],[\"懒汉式\",{\"1\":{\"422\":1}}],[\"坏处\",{\"1\":{\"422\":2}}],[\"饿汉式单例模式饿汉式单例模式在类加载时就实例化一个对象\",{\"1\":{\"422\":1}}],[\"饿汉式是线程安全的\",{\"1\":{\"422\":1}}],[\"饿汉式\",{\"1\":{\"422\":1}}],[\"白话\",{\"1\":{\"418\":1}}],[\"策略模式提供了可以替换继承关系的办法\",{\"1\":{\"416\":1}}],[\"策略模式提供了管理相关的算法族的办法\",{\"1\":{\"416\":1}}],[\"策略模式优缺点1\",{\"1\":{\"416\":1}}],[\"彼此不知道对方存在\",{\"1\":{\"416\":1}}],[\"赠送新用户优惠券等\",{\"1\":{\"415\":1}}],[\"观察者和被观察者要存在依赖关系2\",{\"1\":{\"416\":1}}],[\"观察者\",{\"1\":{\"415\":1}}],[\"观察者模式是一种对象行为模式\",{\"1\":{\"416\":1}}],[\"观察者模式\",{\"0\":{\"415\":1,\"416\":1}}],[\"广播塔就充当了这个角色\",{\"1\":{\"415\":1}}],[\"广播器和监听器之间的解耦\",{\"1\":{\"415\":1}}],[\"广播器起到的是中介的作用\",{\"1\":{\"415\":1}}],[\"广播器\",{\"1\":{\"415\":1}}],[\"广播电台就是一个事件源\",{\"1\":{\"415\":1}}],[\"音乐和其他内容\",{\"1\":{\"415\":2}}],[\"想象我们正在听广播\",{\"1\":{\"415\":1}}],[\"想办法让索引⽣效\",{\"1\":{\"25\":1}}],[\"各个监听器接收到事件后\",{\"1\":{\"415\":1}}],[\"各个线程互不影响\",{\"1\":{\"396\":1}}],[\"各种范式呈递次规范\",{\"1\":{\"78\":1}}],[\"属于行为型模式\",{\"1\":{\"424\":1}}],[\"属于\",{\"1\":{\"394\":1}}],[\"属性\",{\"1\":{\"267\":1}}],[\"属性绑定\",{\"0\":{\"193\":1}}],[\"属性名\",{\"1\":{\"188\":2,\"189\":1}}],[\"属性组\",{\"1\":{\"78\":4}}],[\"确保\",{\"1\":{\"479\":1}}],[\"确保了线程安全\",{\"1\":{\"394\":1,\"396\":1}}],[\"确定一个矩形\",{\"1\":{\"348\":1}}],[\"确定一个多边形\",{\"0\":{\"349\":1},\"1\":{\"346\":1}}],[\"仓库名\",{\"1\":{\"392\":1}}],[\"哇\",{\"1\":{\"391\":1}}],[\"便于快速查看日志\",{\"1\":{\"391\":1}}],[\"缓冲队列500\",{\"1\":{\"391\":1}}],[\"缓存有效期\",{\"1\":{\"464\":2}}],[\"缓存击穿解决方案\",{\"1\":{\"231\":1}}],[\"缓存\",{\"1\":{\"231\":1}}],[\"缓存也就没有意义了风险\",{\"1\":{\"231\":1}}],[\"缓存穿透个人理解\",{\"1\":{\"231\":1}}],[\"缓存的常问题\",{\"0\":{\"231\":1}}],[\"缓存目录\",{\"1\":{\"172\":1}}],[\"入参\",{\"1\":{\"390\":1}}],[\"诊断上下文映射\",{\"1\":{\"390\":1}}],[\"已重启\",{\"1\":{\"431\":1}}],[\"已停止\",{\"1\":{\"431\":1}}],[\"已启动\",{\"1\":{\"431\":1}}],[\"已每个线程为一个维度进行链路追踪\",{\"1\":{\"390\":1}}],[\"已经为我们提供了\",{\"1\":{\"286\":1,\"400\":1}}],[\"已经被创建得线程\",{\"1\":{\"285\":1,\"399\":1}}],[\"格式化\",{\"1\":{\"462\":1}}],[\"格式化输出\",{\"1\":{\"389\":2}}],[\"格式的\",{\"1\":{\"304\":1}}],[\"产品部\",{\"1\":{\"387\":2}}],[\"产生一个新的binlog文件\",{\"1\":{\"144\":1}}],[\"产生的bin\",{\"1\":{\"143\":1}}],[\"产生的问题\",{\"1\":{\"76\":3}}],[\"嵌套问题\",{\"0\":{\"386\":1}}],[\"嵌套路由映射\",{\"1\":{\"208\":1}}],[\"抛出的所有异常类型处理\",{\"1\":{\"385\":1}}],[\"统⼀异常处理器捕获异常\",{\"1\":{\"385\":1}}],[\"统一异常处理\",{\"1\":{\"385\":1}}],[\"统计聚合查询\",{\"0\":{\"345\":1},\"1\":{\"345\":1}}],[\"算通过验证\",{\"1\":{\"384\":1}}],[\"算法\",{\"1\":{\"163\":1}}],[\"信用卡验证\",{\"1\":{\"384\":1}}],[\"递归的对关联对象进行校验\",{\"1\":{\"384\":1}}],[\"规范中所有内置\",{\"1\":{\"383\":1}}],[\"规范提案\",{\"1\":{\"383\":1}}],[\"叫做bean\",{\"1\":{\"383\":1}}],[\"亲\",{\"1\":{\"379\":1}}],[\"校验类\",{\"1\":{\"425\":1}}],[\"校验通过放行\",{\"1\":{\"378\":1}}],[\"校验不通过拦截\",{\"1\":{\"378\":1}}],[\"校验全部参数\",{\"1\":{\"376\":1}}],[\"空检查\",{\"1\":{\"384\":1}}],[\"空拦截\",{\"1\":{\"381\":1}}],[\"空参\",{\"1\":{\"376\":1}}],[\"空闲时间的单位\",{\"1\":{\"284\":1,\"398\":1}}],[\"空闲时间超过minevictableidletimemillis\",{\"1\":{\"21\":1}}],[\"遍历循环\",{\"1\":{\"376\":1}}],[\"令牌续命\",{\"1\":{\"375\":1,\"380\":1}}],[\"卷王\",{\"1\":{\"371\":1}}],[\"荣耀证书\",{\"1\":{\"371\":1}}],[\"荣获<span\",{\"1\":{\"370\":1}}],[\"恭喜<span\",{\"1\":{\"370\":1}}],[\"电⼦邮件\",{\"1\":{\"368\":1}}],[\"防止创建的用户也同步到从库中\",{\"1\":{\"478\":1}}],[\"防止流读取一次后就没有了\",{\"1\":{\"10\":1}}],[\"防火墙\",{\"1\":{\"458\":1}}],[\"防⽌消息丢失\",{\"1\":{\"366\":1}}],[\"借助死信机制\",{\"1\":{\"366\":1}}],[\"借助⼯具\",{\"1\":{\"23\":1}}],[\"⽆论元数据\",{\"1\":{\"365\":1}}],[\"跟普通集群模式不⼀样的是\",{\"1\":{\"365\":1}}],[\"跟时间没有任何关系\",{\"1\":{\"286\":1,\"400\":1}}],[\"意思是threadlocal中填充的变量\",{\"1\":{\"394\":1}}],[\"意思是java\",{\"1\":{\"383\":1}}],[\"意思是不挂断运行命令\",{\"1\":{\"116\":1}}],[\"意思就是在多台机器上启动多个rabbitmq实例\",{\"1\":{\"365\":1}}],[\"成功结果就不展示了\",{\"1\":{\"432\":1}}],[\"成功\",{\"1\":{\"362\":1}}],[\"成功了三个分片\",{\"1\":{\"326\":1}}],[\"异常类型\",{\"1\":{\"361\":1,\"385\":1}}],[\"异步消息\",{\"1\":{\"351\":1}}],[\"异步连接数配置\",{\"1\":{\"323\":1}}],[\"异步连接延时配置\",{\"1\":{\"323\":1}}],[\"现\",{\"1\":{\"361\":1}}],[\"现在\",{\"1\":{\"79\":1,\"264\":1}}],[\"订单超时⾃处理\",{\"1\":{\"360\":1}}],[\"订阅锁释放的消息\",{\"1\":{\"278\":1}}],[\"专⻔⽤来转发死信消息\",{\"1\":{\"360\":1}}],[\"专为性能优化而开发\",{\"1\":{\"156\":1}}],[\"队列容量\",{\"1\":{\"391\":1}}],[\"队列满了\",{\"1\":{\"366\":1}}],[\"队列拒绝\",{\"1\":{\"366\":1}}],[\"队列或交换器\",{\"1\":{\"360\":2}}],[\"队列已满死信交换器\",{\"1\":{\"360\":1}}],[\"队列名\",{\"1\":{\"353\":1}}],[\"队列名或路由名\",{\"1\":{\"352\":1,\"357\":1}}],[\"队列名称\",{\"1\":{\"352\":1}}],[\"死信接受延迟队列\",{\"1\":{\"360\":1}}],[\"死信接收队列\",{\"1\":{\"360\":2}}],[\"死信路由匹配\",{\"1\":{\"360\":1}}],[\"死信路由转换\",{\"1\":{\"360\":1}}],[\"死信交换器\",{\"1\":{\"360\":2}}],[\"死信转换器\",{\"1\":{\"360\":1}}],[\"死信队列\",{\"1\":{\"360\":4,\"363\":1}}],[\"死信\",{\"1\":{\"360\":1,\"366\":1}}],[\"死噗特得\",{\"1\":{\"280\":1}}],[\"死噗斯\",{\"1\":{\"280\":1}}],[\"扩展目标对象的功能\",{\"1\":{\"417\":1}}],[\"扩展\",{\"0\":{\"387\":1},\"1\":{\"355\":1,\"391\":1}}],[\"扩容每次会增加\",{\"1\":{\"243\":1}}],[\"扩容机制\",{\"1\":{\"243\":1}}],[\"扩容原容量的1\",{\"1\":{\"241\":1}}],[\"交换器根据消息的路由匹配内容\",{\"1\":{\"358\":1}}],[\"交换器\",{\"1\":{\"352\":1,\"357\":2}}],[\"交集\",{\"1\":{\"225\":1}}],[\"创造队列\",{\"1\":{\"352\":1,\"355\":1}}],[\"创建制品仓generic类型存储dist压缩包\",{\"1\":{\"441\":1}}],[\"创建项目\",{\"0\":{\"434\":1,\"454\":1}}],[\"创建新的部署目录如\",{\"1\":{\"432\":1}}],[\"创建代理对象的过程更加耗时和占用内存\",{\"1\":{\"419\":1}}],[\"创建模板对象\",{\"1\":{\"371\":1}}],[\"创建rabbitmq管理事务\",{\"1\":{\"361\":1}}],[\"创建rabbitmq事务管理\",{\"1\":{\"361\":1}}],[\"创建redis容器并设置密码\",{\"0\":{\"120\":1}}],[\"创建延迟队列\",{\"1\":{\"360\":3}}],[\"创建绑定关系\",{\"1\":{\"357\":1}}],[\"创建交换器\",{\"1\":{\"357\":1}}],[\"创建所需的队列\",{\"1\":{\"357\":1}}],[\"创建通道对象\",{\"1\":{\"353\":1}}],[\"创建连接对象\",{\"1\":{\"353\":1}}],[\"创建连接工厂\",{\"1\":{\"353\":1}}],[\"创建队列属性信息\",{\"1\":{\"360\":1}}],[\"创建队列\",{\"1\":{\"352\":1,\"353\":1,\"355\":1,\"357\":1}}],[\"创建查询请求的对象\",{\"1\":{\"339\":1}}],[\"创建deletebyqueryrequest\",{\"1\":{\"338\":1}}],[\"创建db4数据库\",{\"1\":{\"33\":1}}],[\"创建的索引信息\",{\"0\":{\"322\":1}}],[\"创建的过程\",{\"1\":{\"102\":1}}],[\"创建指定数据结构索引\",{\"0\":{\"320\":1}}],[\"创建线程\",{\"1\":{\"284\":1,\"398\":1}}],[\"创建一个自由风格的项目\",{\"1\":{\"454\":1}}],[\"创建一个map索引包含经纬度数据\",{\"1\":{\"346\":1}}],[\"创建一个索引\",{\"1\":{\"346\":1}}],[\"创建一个带geo\",{\"1\":{\"346\":1}}],[\"创建一个事件源applicationevent\",{\"1\":{\"281\":1}}],[\"创建一个文件夹\",{\"1\":{\"157\":1}}],[\"创建该类的数组不会触发初始化\",{\"1\":{\"239\":1}}],[\"创建之前\",{\"1\":{\"215\":1}}],[\"创建完成\",{\"1\":{\"215\":1}}],[\"创建完表后\",{\"1\":{\"63\":1}}],[\"创建成功\",{\"0\":{\"206\":1}}],[\"创建vue项⽬\",{\"0\":{\"200\":1},\"1\":{\"200\":2}}],[\"创建vue实例\",{\"1\":{\"188\":1}}],[\"创建目录\",{\"1\":{\"138\":3,\"439\":1}}],[\"创建数据同步的用户并授权sql的作用是创建一个用户\",{\"1\":{\"478\":1}}],[\"创建数据目录\",{\"1\":{\"108\":1}}],[\"创建数据库\",{\"0\":{\"33\":1},\"1\":{\"33\":3}}],[\"创建配置文件目录\",{\"1\":{\"108\":1}}],[\"创建文件夹\",{\"1\":{\"97\":1,\"104\":1}}],[\"创建容器对应的yaml文件\",{\"1\":{\"102\":1}}],[\"创建容器\",{\"1\":{\"95\":1,\"104\":1,\"105\":1}}],[\"创建并运行容器\",{\"1\":{\"95\":1,\"97\":1}}],[\"创建复合主键\",{\"1\":{\"78\":1}}],[\"创建收藏表\",{\"1\":{\"78\":1}}],[\"创建用户表\",{\"1\":{\"78\":1}}],[\"创建旅游线路表\",{\"1\":{\"78\":1}}],[\"创建旅游线路分类表\",{\"1\":{\"78\":1}}],[\"创建\",{\"1\":{\"33\":2,\"39\":1,\"153\":1,\"280\":1,\"354\":1}}],[\"创建联合索引\",{\"1\":{\"19\":1}}],[\"创建索引同时手动指定配置信息\",{\"1\":{\"319\":1}}],[\"创建索引之后\",{\"1\":{\"19\":1}}],[\"创建索引\",{\"1\":{\"19\":2,\"112\":1,\"219\":1,\"319\":1,\"320\":1}}],[\"创建存储过程\",{\"1\":{\"18\":2}}],[\"创建函数\",{\"1\":{\"17\":2}}],[\"创建触发器\",{\"1\":{\"15\":1}}],[\"创建视图\",{\"1\":{\"14\":2}}],[\"创建表时候也可创建索引\",{\"1\":{\"219\":1}}],[\"创建表时添加约束\",{\"1\":{\"61\":1}}],[\"创建表之后\",{\"1\":{\"64\":1}}],[\"创建表完后\",{\"1\":{\"61\":1}}],[\"创建表\",{\"0\":{\"39\":1},\"1\":{\"13\":1,\"39\":2}}],[\"账号密码均为guest\",{\"1\":{\"351\":1}}],[\"⾼可⽤\",{\"1\":{\"351\":1}}],[\"弧行\",{\"1\":{\"347\":1}}],[\"距离类型\",{\"1\":{\"347\":1}}],[\"距离\",{\"1\":{\"347\":1}}],[\"火车站\",{\"1\":{\"346\":1}}],[\"坐标拾取\",{\"1\":{\"346\":1}}],[\"构造查询条件\",{\"1\":{\"343\":1,\"344\":1,\"345\":1,\"347\":1,\"348\":1}}],[\"构建完成\",{\"1\":{\"441\":1}}],[\"构建镜像并推送到\",{\"1\":{\"440\":1}}],[\"构建方式有很多种\",{\"1\":{\"437\":1}}],[\"构建连接对象\",{\"1\":{\"323\":1}}],[\"构建单页应用变得轻而易举\",{\"1\":{\"208\":1}}],[\"构建一个文件对象\",{\"1\":{\"84\":1}}],[\"武汉\",{\"1\":{\"339\":1}}],[\"清空es上下文\",{\"1\":{\"337\":1}}],[\"清除算法的碎片问题\",{\"1\":{\"271\":1}}],[\"找不到队列\",{\"1\":{\"354\":1}}],[\"找后续内容\",{\"1\":{\"337\":1}}],[\"找到相应文档内容\",{\"1\":{\"328\":1}}],[\"找到匹配的\",{\"1\":{\"280\":1}}],[\"找到刚刚上传jar包的目录\",{\"1\":{\"117\":1}}],[\"找到慢的原因\",{\"1\":{\"24\":1}}],[\"找到执⾏慢的sql语句\",{\"1\":{\"23\":1}}],[\"拿到版本号\",{\"1\":{\"381\":1}}],[\"拿完数据的文档id\",{\"1\":{\"337\":1}}],[\"拿出来一次性查出来之后\",{\"1\":{\"223\":1}}],[\"耗时较长\",{\"1\":{\"337\":2}}],[\"得到多个文档的id\",{\"1\":{\"337\":2}}],[\"深分页scroll\",{\"0\":{\"337\":1}}],[\"范围统计\",{\"0\":{\"344\":1},\"1\":{\"344\":1}}],[\"范围查询\",{\"1\":{\"335\":1}}],[\"范围类型\",{\"1\":{\"317\":1}}],[\"王五\",{\"1\":{\"334\":1}}],[\"号匹配多个字符\",{\"1\":{\"334\":1}}],[\"台湾\",{\"1\":{\"332\":1}}],[\"郑州人民公园\",{\"1\":{\"346\":1}}],[\"郑州\",{\"1\":{\"331\":1}}],[\"批量删除文档失败\",{\"1\":{\"329\":1}}],[\"北京\",{\"1\":{\"328\":3,\"330\":1,\"339\":1}}],[\"命中数\",{\"1\":{\"326\":1}}],[\"命令的功能是查看系统中硬盘\",{\"1\":{\"462\":1}}],[\"命令验证\",{\"1\":{\"446\":1}}],[\"命令即可\",{\"1\":{\"446\":1}}],[\"命令行参数\",{\"1\":{\"153\":1}}],[\"命令解释如下\",{\"1\":{\"128\":1}}],[\"命令\",{\"1\":{\"116\":1,\"157\":1,\"314\":2,\"315\":2}}],[\"命令执行作业时\",{\"1\":{\"116\":1}}],[\"失败\",{\"1\":{\"326\":1,\"376\":1}}],[\"跳过\",{\"1\":{\"326\":1}}],[\"跳转\",{\"0\":{\"210\":1}}],[\"协议\",{\"1\":{\"323\":1}}],[\"覆盖没了\",{\"1\":{\"321\":1}}],[\"覆盖式修改\",{\"1\":{\"321\":1}}],[\"覆盖索引未使用\",{\"1\":{\"223\":1}}],[\"覆盖索引\",{\"1\":{\"19\":1,\"223\":1}}],[\"曹雪芹\",{\"1\":{\"321\":2}}],[\"红楼梦\",{\"1\":{\"321\":2}}],[\"红黑树\",{\"1\":{\"246\":1,\"250\":1}}],[\"健康状况\",{\"1\":{\"319\":1}}],[\"纬度\",{\"1\":{\"317\":1,\"347\":1}}],[\"布尔类型\",{\"1\":{\"317\":1}}],[\"取反\",{\"1\":{\"339\":1}}],[\"取值范围为\",{\"1\":{\"317\":4}}],[\"取消事务\",{\"1\":{\"226\":1}}],[\"寇哲邱莹莹快快乐乐身体健康\",{\"1\":{\"312\":1}}],[\"细粒度分词\",{\"1\":{\"312\":1}}],[\"细致的导航控制\",{\"1\":{\"208\":1}}],[\"粗粒度分词\",{\"1\":{\"312\":1}}],[\"暂未启动完毕\",{\"1\":{\"310\":1}}],[\"什么时候扩展了集群中的\",{\"1\":{\"306\":1}}],[\"什么是责任链模式\",{\"0\":{\"424\":1}}],[\"什么是集合\",{\"1\":{\"240\":1}}],[\"什么是sql\",{\"0\":{\"30\":1},\"1\":{\"30\":1}}],[\"放开3306端口\",{\"1\":{\"475\":1,\"495\":1}}],[\"放行之后访问service层\",{\"1\":{\"396\":1}}],[\"放行\",{\"1\":{\"381\":1}}],[\"放的都是主分片\",{\"1\":{\"306\":1}}],[\"放在队列中\",{\"1\":{\"351\":1}}],[\"放在不同的服务器上\",{\"1\":{\"306\":1}}],[\"放在mysqld下编辑配置文件\",{\"1\":{\"143\":1}}],[\"几亿条\",{\"1\":{\"306\":1}}],[\"几个概念\",{\"1\":{\"78\":1}}],[\"理解责任链模式应当理解的是其模式而不是具体实现\",{\"1\":{\"425\":1}}],[\"理解\",{\"1\":{\"306\":1}}],[\"备份数\",{\"1\":{\"320\":1}}],[\"备份\",{\"1\":{\"319\":1}}],[\"备份的分片必须放在不同的服务器中\",{\"1\":{\"306\":1}}],[\"备份分片才会帮助检索数据\",{\"1\":{\"306\":1}}],[\"备份分片默认不会帮助检索数据\",{\"1\":{\"306\":1}}],[\"某种类型\",{\"1\":{\"304\":1}}],[\"某一列的值不能重复\",{\"1\":{\"62\":1}}],[\"某一列的值不能为null\",{\"1\":{\"61\":1}}],[\"文档中上传图片返回url\",{\"1\":{\"392\":1}}],[\"文档操作\",{\"0\":{\"321\":1}}],[\"文档存储的field\",{\"1\":{\"320\":1}}],[\"文档是json\",{\"1\":{\"304\":1}}],[\"文档\",{\"1\":{\"304\":2}}],[\"文件到磁盘\",{\"1\":{\"495\":1}}],[\"文件的文件名\",{\"1\":{\"495\":1}}],[\"文件的路径\",{\"1\":{\"495\":1}}],[\"文件\",{\"1\":{\"473\":1}}],[\"文件夹\",{\"1\":{\"473\":1}}],[\"文件夹中文件都可读可写\",{\"1\":{\"108\":1}}],[\"文件中找到以下字段\",{\"1\":{\"460\":1}}],[\"文件格式验证\",{\"1\":{\"236\":1}}],[\"文件内容\",{\"1\":{\"105\":1}}],[\"文件配置中创建并启动所有容器\",{\"1\":{\"100\":1}}],[\"文件来配置应用程序需要的所有容器\",{\"1\":{\"100\":1}}],[\"名词\",{\"1\":{\"304\":1}}],[\"动词\",{\"1\":{\"304\":1}}],[\"动态代理则刚好解决了这个问题\",{\"1\":{\"421\":1}}],[\"动态代理对被代理的类有要求\",{\"1\":{\"421\":1}}],[\"动态路由\",{\"1\":{\"210\":1}}],[\"动态路由选择\",{\"1\":{\"208\":1}}],[\"动态变化\",{\"1\":{\"195\":1}}],[\"动态改变数据\",{\"1\":{\"188\":1}}],[\"高亮查询\",{\"0\":{\"341\":1}}],[\"高亮显示\",{\"1\":{\"303\":1}}],[\"高性能\",{\"1\":{\"125\":1}}],[\"海量数据的存储\",{\"1\":{\"303\":1}}],[\"海量数据下\",{\"1\":{\"27\":1}}],[\"风格接口\",{\"1\":{\"303\":1}}],[\"组装查询条件\",{\"1\":{\"327\":1,\"329\":1,\"341\":1}}],[\"组建集群\",{\"1\":{\"303\":1}}],[\"组件的定义\",{\"1\":{\"194\":1}}],[\"组件的使用\",{\"1\":{\"194\":1}}],[\"组件\",{\"0\":{\"194\":1}}],[\"⽀持路由匹配\",{\"1\":{\"359\":1}}],[\"⽀持海量数据存储和查询\",{\"1\":{\"302\":1}}],[\"⽀持pb级别的数\",{\"1\":{\"302\":1}}],[\"搜索之前不会对你搜索的关键字进行分词\",{\"1\":{\"325\":1}}],[\"搜索\",{\"1\":{\"302\":1,\"303\":1}}],[\"⽬前市⾯上\",{\"1\":{\"302\":1}}],[\"⽬的就是为了提⾼查询的效率\",{\"1\":{\"19\":1,\"219\":1}}],[\"市⾯上的模板引擎\",{\"1\":{\"368\":1}}],[\"市⾯上有全⽂检索技术\",{\"1\":{\"302\":1}}],[\"市面上容器编排工具有\",{\"1\":{\"100\":1}}],[\"绝对不使⽤模糊查询\",{\"1\":{\"302\":1}}],[\"倒排索引\",{\"0\":{\"305\":1},\"1\":{\"302\":1}}],[\"称之为异步方法\",{\"1\":{\"300\":1,\"414\":1}}],[\"称为\",{\"1\":{\"30\":1}}],[\"换句话说\",{\"1\":{\"294\":1,\"408\":1}}],[\"丢弃队列最前面的任务\",{\"1\":{\"287\":1,\"401\":1}}],[\"丢弃最老任务\",{\"0\":{\"291\":1,\"405\":1},\"1\":{\"287\":1,\"401\":1}}],[\"丢弃任务\",{\"1\":{\"287\":1,\"401\":1}}],[\"丢弃任务并抛出rejectedexecutionexception异常\",{\"1\":{\"287\":1,\"401\":1}}],[\"丢弃策略\",{\"0\":{\"290\":1,\"404\":1},\"1\":{\"287\":1,\"401\":1}}],[\"双重检查锁在实现时需要注意线程安全问题\",{\"1\":{\"422\":1}}],[\"双重检查锁之所以能够提高程序性能\",{\"1\":{\"422\":1}}],[\"双重检查锁\",{\"1\":{\"422\":1}}],[\"双端意味着可以像普通队列一样\",{\"1\":{\"286\":1,\"400\":1}}],[\"双向循环链表\",{\"0\":{\"242\":1}}],[\"双向绑定\",{\"0\":{\"189\":1},\"1\":{\"189\":1,\"195\":1}}],[\"容灾切换\",{\"0\":{\"499\":1}}],[\"容量默认为\",{\"1\":{\"286\":1,\"400\":1}}],[\"容器中的每一次请求都会调用该方法\",{\"1\":{\"253\":1}}],[\"容器化\",{\"1\":{\"125\":1}}],[\"容器化引擎\",{\"1\":{\"90\":1}}],[\"容器id\",{\"1\":{\"108\":1,\"109\":1,\"121\":1}}],[\"容器编排软件\",{\"1\":{\"100\":1}}],[\"容器需要停止\",{\"1\":{\"95\":1}}],[\"容器名称\",{\"1\":{\"95\":1,\"104\":3}}],[\"容器名\",{\"1\":{\"95\":8}}],[\"容器就有对应的虚拟机\",{\"1\":{\"92\":1}}],[\"容器\",{\"1\":{\"92\":1,\"122\":1,\"280\":1}}],[\"容器之间具备隔离性\",{\"1\":{\"90\":1}}],[\"种阻塞队列的实现\",{\"1\":{\"286\":1,\"400\":1}}],[\"种注释\",{\"1\":{\"30\":1}}],[\"拒绝策略场景分析\",{\"0\":{\"288\":1,\"402\":1}}],[\"拒绝策略\",{\"0\":{\"287\":1,\"401\":1},\"1\":{\"284\":1,\"398\":1}}],[\"拒绝访问的地址\",{\"1\":{\"21\":1}}],[\"阻塞队列为空并且线程池中执行的任务也为空时\",{\"1\":{\"297\":1,\"411\":1}}],[\"阻塞队列+最大线程数\",{\"1\":{\"285\":1,\"399\":1}}],[\"阻塞队列容量已满\",{\"1\":{\"285\":1,\"399\":1}}],[\"阻塞队列\",{\"0\":{\"286\":1,\"400\":1},\"1\":{\"284\":1,\"398\":1}}],[\"池化思想\",{\"1\":{\"283\":1,\"397\":1}}],[\"超出阻塞队列的最大容量\",{\"1\":{\"285\":1,\"399\":1}}],[\"超时后自动关闭\",{\"1\":{\"282\":1}}],[\"超过2s\",{\"1\":{\"21\":1}}],[\"序列号\",{\"1\":{\"282\":1}}],[\"逻辑处理\",{\"1\":{\"281\":1}}],[\"奶味\",{\"1\":{\"280\":1}}],[\"奈斯dei特\",{\"1\":{\"280\":1}}],[\"瑞块儿死\",{\"1\":{\"280\":1}}],[\"瑞块儿的\",{\"1\":{\"280\":1}}],[\"互不影响\",{\"1\":{\"280\":2}}],[\"互不干扰持久性\",{\"1\":{\"217\":1}}],[\"声明时事物\",{\"1\":{\"280\":1}}],[\"像注解方式也是通过反射创建对象到map\",{\"1\":{\"280\":1}}],[\"负责自己的slave\",{\"1\":{\"479\":1}}],[\"负责与主机的io通信\",{\"1\":{\"479\":1}}],[\"负责解析请求\",{\"1\":{\"280\":1}}],[\"负载均衡算法\",{\"1\":{\"166\":1}}],[\"负载均衡前端访问后端地址请指向nginx服务器地址nginx\",{\"1\":{\"165\":1}}],[\"负载均衡\",{\"1\":{\"161\":2,\"165\":1,\"166\":1,\"303\":1}}],[\"里面有些\",{\"1\":{\"473\":1}}],[\"里面存放的是各种对象\",{\"1\":{\"280\":1}}],[\"里面的方法\",{\"1\":{\"280\":1}}],[\"里面的\",{\"1\":{\"280\":1}}],[\"里定义的方法\",{\"1\":{\"258\":1}}],[\"框架\",{\"1\":{\"280\":1}}],[\"拦截并返回自定义内容\",{\"1\":{\"381\":1}}],[\"拦截请求\",{\"1\":{\"381\":1}}],[\"拦截转发给\",{\"1\":{\"280\":1}}],[\"拦截器\",{\"1\":{\"378\":1,\"390\":1}}],[\"拦截器的执行顺序与其注册顺序一致\",{\"1\":{\"257\":1}}],[\"拦截器3个方法\",{\"0\":{\"256\":1}}],[\"拦截器是在面向切面编程中应用的\",{\"1\":{\"255\":1}}],[\"拦截器是依赖java反射机制来实现的\",{\"1\":{\"255\":1}}],[\"拦截器是什么实现的\",{\"0\":{\"255\":1}}],[\"拦截器是实现handlerlnterceptor接口\",{\"1\":{\"254\":1}}],[\"拦截器就是实现intercaputer\",{\"1\":{\"254\":1}}],[\"拦截器和过滤器的区别\",{\"0\":{\"252\":1}}],[\"强一致性\",{\"1\":{\"279\":1}}],[\"强制索引\",{\"1\":{\"223\":1}}],[\"强制\",{\"1\":{\"118\":1}}],[\"释放锁\",{\"1\":{\"279\":1}}],[\"释放锁操作\",{\"1\":{\"279\":1}}],[\"释放锁zookeeper\",{\"1\":{\"279\":1}}],[\"极端复杂场景\",{\"1\":{\"279\":1}}],[\"锁的模型健壮\",{\"1\":{\"279\":1}}],[\"锁的模型不够健壮\",{\"1\":{\"279\":1}}],[\"锁的是一个key值\",{\"1\":{\"277\":1}}],[\"谁能够获取到锁\",{\"1\":{\"279\":2}}],[\"把这个事件发送给所有注册的监听器\",{\"1\":{\"415\":1}}],[\"把会变的改为变量\",{\"1\":{\"374\":1}}],[\"把死信消息发送到要处理的队列\",{\"1\":{\"366\":1}}],[\"把要传输的数据\",{\"1\":{\"351\":1}}],[\"把一个索引进行分片\",{\"1\":{\"306\":1}}],[\"把请求参数传递给\",{\"1\":{\"280\":1}}],[\"把状态也同步到了另外的节点成功后才给客户端返回成功标识但是性能没有redis高\",{\"1\":{\"279\":1}}],[\"把表都删除\",{\"1\":{\"13\":1}}],[\"能够接收新任务\",{\"1\":{\"294\":1,\"408\":1}}],[\"能够及时的通过异常发现\",{\"1\":{\"289\":1,\"403\":1}}],[\"能够保证绝对一致\",{\"1\":{\"279\":1}}],[\"能经受高负载的考验\",{\"1\":{\"156\":1}}],[\"假设a方法调用一个带事物的b方法时候\",{\"1\":{\"280\":1}}],[\"假设我们有a\",{\"1\":{\"280\":1}}],[\"假设集合a\",{\"1\":{\"22\":1}}],[\"假如我的业务操作比有效时间长\",{\"1\":{\"278\":1}}],[\"看到active\",{\"1\":{\"435\":1}}],[\"看门狗逻辑\",{\"0\":{\"278\":1}}],[\"看看有没出现for循环的sql从而导致接口性能下降\",{\"1\":{\"223\":1}}],[\"直至所有部门都通过一遍后事情才能完成\",{\"1\":{\"425\":1}}],[\"直至有对象处理这个请求为止\",{\"1\":{\"424\":1}}],[\"直线距离检索方式\",{\"0\":{\"347\":1},\"1\":{\"346\":1}}],[\"直到有一个消费者线程消费了一个元素\",{\"1\":{\"286\":1,\"400\":1}}],[\"直到有一个生产者线程生产了一个元素\",{\"1\":{\"286\":1,\"400\":1}}],[\"直到加锁成功为止\",{\"1\":{\"278\":1}}],[\"直到业务代码执行完毕由客户端自己解锁\",{\"1\":{\"278\":1}}],[\"直到当前的锁被释放掉\",{\"1\":{\"277\":1}}],[\"直接进入第二\",{\"1\":{\"471\":1}}],[\"直接进入老年代\",{\"1\":{\"271\":1}}],[\"直接对controller层进行jsr303校验\",{\"1\":{\"385\":1}}],[\"直接转发\",{\"0\":{\"357\":1},\"1\":{\"357\":1}}],[\"直接去es的上下文中\",{\"1\":{\"337\":1}}],[\"直接去分词库中匹配\",{\"1\":{\"328\":1}}],[\"直接添加到老年代中\",{\"1\":{\"271\":1}}],[\"直接内存\",{\"1\":{\"269\":1}}],[\"直接引用\",{\"1\":{\"238\":1}}],[\"直接报错\",{\"1\":{\"230\":1}}],[\"直接删除当前key\",{\"1\":{\"229\":1}}],[\"直接匹配\",{\"1\":{\"159\":1}}],[\"直接回滚\",{\"1\":{\"146\":1}}],[\"直接输入浏览器访问即可\",{\"1\":{\"133\":1}}],[\"直接输入mysql命令\",{\"1\":{\"77\":1}}],[\"直接在图形界面中操作\",{\"1\":{\"131\":1}}],[\"直接在buckets菜单中创建一个桶为test\",{\"1\":{\"129\":1}}],[\"直接⽤\",{\"1\":{\"17\":1}}],[\"普通集群模式\",{\"1\":{\"365\":1}}],[\"普通模式\",{\"1\":{\"363\":1}}],[\"普通消息\",{\"1\":{\"352\":1}}],[\"普通索引3\",{\"1\":{\"19\":1,\"219\":1}}],[\"普遍的锁是无法解决安全问题的\",{\"1\":{\"277\":1}}],[\"⼿动ack\",{\"1\":{\"275\":1,\"364\":1}}],[\"雪花算法\",{\"1\":{\"275\":1,\"364\":1}}],[\"刚消费到\",{\"1\":{\"275\":1}}],[\"消费的慢\",{\"1\":{\"355\":1}}],[\"消费者\",{\"1\":{\"360\":1}}],[\"消费者2\",{\"1\":{\"355\":1}}],[\"消费者1\",{\"1\":{\"355\":1}}],[\"消费者接收\",{\"1\":{\"352\":1}}],[\"消费者可以到指定队列拉取消息\",{\"1\":{\"351\":1}}],[\"消费者线程就可以拿到这个元素并返回\",{\"1\":{\"286\":1,\"400\":1}}],[\"消费者线程调用\",{\"1\":{\"286\":1,\"400\":1}}],[\"消费端如何保证消息不丢失\",{\"1\":{\"363\":1}}],[\"消费端\",{\"0\":{\"275\":1}}],[\"消息⼀对多\",{\"1\":{\"366\":1}}],[\"消息⼀对⼀\",{\"1\":{\"366\":1}}],[\"消息补偿机制\",{\"1\":{\"363\":1}}],[\"消息是否还添加到队列\",{\"1\":{\"362\":1}}],[\"消息id\",{\"1\":{\"362\":1}}],[\"消息内部唯一id\",{\"1\":{\"362\":1}}],[\"消息内容\",{\"1\":{\"352\":1,\"357\":1}}],[\"消息都不发送\",{\"1\":{\"361\":1}}],[\"消息过期\",{\"1\":{\"360\":1}}],[\"消息被拒绝\",{\"1\":{\"360\":1}}],[\"消息同\",{\"1\":{\"356\":1}}],[\"消息队列或消息中间件\",{\"1\":{\"366\":1}}],[\"消息队列\",{\"1\":{\"351\":1}}],[\"消息\",{\"1\":{\"273\":1,\"274\":1,\"351\":1}}],[\"没⼈⽣产⽤单机模式普通集群模式\",{\"1\":{\"365\":1}}],[\"没能处理这个消息\",{\"1\":{\"273\":1}}],[\"没有操作权限\",{\"1\":{\"425\":1}}],[\"没有实现任何接口\",{\"1\":{\"420\":1}}],[\"没有或不匹配进行拦截\",{\"1\":{\"381\":1}}],[\"没有包含指定注解\",{\"1\":{\"379\":1}}],[\"没有超时\",{\"1\":{\"326\":1}}],[\"没有备份分片\",{\"1\":{\"306\":1}}],[\"没有任何意义\",{\"1\":{\"286\":1,\"400\":1}}],[\"没有用到除核心线程以外\",{\"1\":{\"285\":1,\"399\":1}}],[\"没有用到任何索引的情况下\",{\"1\":{\"223\":1}}],[\"没有问题\",{\"1\":{\"279\":1}}],[\"没有额外空间对它进行分配担保\",{\"1\":{\"271\":1}}],[\"没有在jvm内存区\",{\"1\":{\"269\":2}}],[\"没有将\",{\"1\":{\"235\":1}}],[\"没有则会自动创建\",{\"1\":{\"116\":1}}],[\"没有部门\",{\"1\":{\"70\":2}}],[\"没有索引的时候\",{\"1\":{\"19\":1}}],[\"没有索引之前\",{\"1\":{\"19\":1}}],[\"没有返回值的函数\",{\"1\":{\"18\":1}}],[\"没有返回值函数\",{\"1\":{\"18\":1}}],[\"没有multipartfile类进行接受文件\",{\"1\":{\"3\":1}}],[\"告诉mq接收到了\",{\"1\":{\"273\":1}}],[\"机制是互斥的\",{\"1\":{\"363\":1}}],[\"机制\",{\"1\":{\"273\":1}}],[\"经度\",{\"1\":{\"317\":1,\"347\":1}}],[\"经纬度类型\",{\"1\":{\"317\":1}}],[\"经历超过默认15次gc或者设定的4\",{\"1\":{\"271\":1}}],[\"经常被用在需要释放资源的情况下\",{\"1\":{\"258\":1}}],[\"幸存者1和幸存者2区交换位置\",{\"1\":{\"271\":1}}],[\"讲下gc\",{\"0\":{\"270\":1}}],[\"讲sql\",{\"1\":{\"146\":1}}],[\"栈管运⾏\",{\"1\":{\"269\":1}}],[\"伊甸区+幸存者区\",{\"1\":{\"269\":1}}],[\"堆内存中也会划分为年轻代和老年代\",{\"1\":{\"269\":1}}],[\"堆管存储\",{\"1\":{\"269\":1}}],[\"堆\",{\"1\":{\"269\":2}}],[\"略\",{\"1\":{\"268\":1,\"280\":1}}],[\"串行流\",{\"1\":{\"263\":1}}],[\"串行化\",{\"1\":{\"76\":1}}],[\"真实角色专注于自己的事情\",{\"1\":{\"418\":1}}],[\"真实姓名长度\",{\"1\":{\"78\":1}}],[\"真正的引入了函数编程\",{\"1\":{\"263\":1}}],[\"⽅法名\",{\"1\":{\"376\":1}}],[\"⽅法\",{\"1\":{\"269\":4}}],[\"⽅法区jdk1\",{\"1\":{\"269\":1}}],[\"⽅法可以⽤\",{\"1\":{\"266\":1}}],[\"⽅法实现\",{\"1\":{\"261\":1}}],[\"⽅式\",{\"1\":{\"23\":1}}],[\"造成死循环\",{\"1\":{\"362\":1}}],[\"造成内存浪费以及时间的消耗\",{\"1\":{\"271\":1}}],[\"造成相同的对象散列到不同的位置而造成对象的不能覆盖的问题\",{\"1\":{\"259\":1}}],[\"造成雪崩解决方案\",{\"1\":{\"231\":1}}],[\"俗称子类继承父类注意\",{\"1\":{\"258\":1}}],[\"体现\",{\"1\":{\"258\":1}}],[\"尽可能地隐藏对象的内部实现细节\",{\"1\":{\"258\":1}}],[\"尽量大\",{\"1\":{\"157\":1}}],[\"尽量⽤union\",{\"1\":{\"26\":1}}],[\"尽量避免在索引列上使⽤计算\",{\"1\":{\"26\":1}}],[\"尽量多使⽤commit\",{\"1\":{\"26\":1}}],[\"封装脚本文件\",{\"0\":{\"431\":1}}],[\"封装程度\",{\"1\":{\"391\":1}}],[\"封装定义\",{\"1\":{\"258\":1}}],[\"封装查询语句\",{\"1\":{\"14\":1}}],[\"形成拦截器链\",{\"1\":{\"257\":1}}],[\"渲染视图完毕之后执行aftercompletion\",{\"1\":{\"256\":1}}],[\"控制台输出\",{\"1\":{\"389\":1}}],[\"控制层参数添加\",{\"1\":{\"385\":1}}],[\"控制层的方法进行匹配\",{\"1\":{\"376\":1}}],[\"控制反转\",{\"1\":{\"280\":2}}],[\"控制用户对类的修改和访问权限\",{\"1\":{\"258\":1}}],[\"控制用户行为\",{\"1\":{\"170\":1}}],[\"控制器方法执行之后执行posthandle\",{\"1\":{\"256\":1}}],[\"控制器方法执行之前执行prehandle\",{\"1\":{\"256\":1}}],[\"处理逻辑\",{\"1\":{\"385\":1}}],[\"处理该任务线程池的默认拒绝策略为abortpolicy\",{\"1\":{\"287\":1,\"401\":1}}],[\"处理新的任务\",{\"1\":{\"285\":1,\"399\":1}}],[\"处理完视图和模型数据\",{\"1\":{\"256\":1}}],[\"处理后\",{\"1\":{\"252\":1}}],[\"处理中\",{\"1\":{\"252\":2}}],[\"前置条件\",{\"0\":{\"458\":1}}],[\"前置\",{\"1\":{\"252\":1}}],[\"前端项目\",{\"0\":{\"452\":1}}],[\"前端\",{\"0\":{\"185\":1}}],[\"了\",{\"1\":{\"258\":1}}],[\"了一条双向链表\",{\"1\":{\"248\":1}}],[\"了解\",{\"0\":{\"76\":1},\"1\":{\"30\":1,\"78\":2}}],[\"继承是从已有的类中派生出新的类\",{\"1\":{\"258\":1}}],[\"继承自\",{\"1\":{\"248\":1}}],[\"继承与\",{\"1\":{\"245\":1}}],[\"大于\",{\"1\":{\"344\":1}}],[\"大概10几种\",{\"1\":{\"314\":1}}],[\"大概就是45~50秒之间可以返回响应\",{\"1\":{\"223\":1}}],[\"大的变化\",{\"1\":{\"247\":1}}],[\"拉起镜像\",{\"0\":{\"309\":1}}],[\"拉链法\",{\"1\":{\"247\":1}}],[\"拉取jdk8作为基础镜像\",{\"1\":{\"117\":1}}],[\"拉取镜像\",{\"1\":{\"108\":1,\"109\":1,\"309\":1}}],[\"拉取镜像有时会遇到困难\",{\"1\":{\"94\":1}}],[\"链表则是主要为了解决哈希冲突\",{\"1\":{\"249\":1}}],[\"链表则是\",{\"1\":{\"247\":1}}],[\"链接\",{\"1\":{\"187\":1}}],[\"综上\",{\"1\":{\"244\":1}}],[\"与equals\",{\"1\":{\"244\":1}}],[\"由被观察者轮询调用观察者的处理代码ps\",{\"1\":{\"416\":1}}],[\"由mq服务端给其推送消息\",{\"1\":{\"351\":1}}],[\"由调用线程处理该任务\",{\"1\":{\"292\":1,\"406\":1}}],[\"由调用线程\",{\"1\":{\"287\":1,\"401\":1}}],[\"由源码可以看出\",{\"1\":{\"244\":1}}],[\"由于redis是c语言编写的\",{\"1\":{\"493\":1}}],[\"由于指令重排的原因\",{\"1\":{\"422\":1}}],[\"由于底层使用了反射机制\",{\"1\":{\"419\":1}}],[\"由于cglib是通过生成子类的方式实现代理\",{\"1\":{\"419\":1}}],[\"由于⽹络故障或客户端延迟消费mq⾃动重试过程中可能会导致消息的重复消费\",{\"1\":{\"364\":1}}],[\"由于我们使用的es的版本是7\",{\"1\":{\"323\":1}}],[\"由于发布者和订阅者之间没有直接耦合\",{\"1\":{\"281\":1}}],[\"由于缓存是不命中的\",{\"1\":{\"231\":1}}],[\"由于编码时\",{\"1\":{\"181\":1}}],[\"由于数据不多\",{\"1\":{\"19\":1}}],[\"倍\",{\"1\":{\"243\":1}}],[\"修饰方法\",{\"1\":{\"378\":1}}],[\"修饰\",{\"1\":{\"266\":1,\"422\":1}}],[\"修饰的变量必须初始化\",{\"1\":{\"258\":1}}],[\"修饰性能差\",{\"1\":{\"243\":1}}],[\"修改启动方式\",{\"0\":{\"488\":1}}],[\"修改端口号启动报错\",{\"1\":{\"476\":1}}],[\"修改mysql数据库的配置文件\",{\"1\":{\"479\":1}}],[\"修改my\",{\"0\":{\"476\":1}}],[\"修改其中的配置\",{\"1\":{\"460\":1}}],[\"修改系统最大文件数\",{\"1\":{\"458\":2}}],[\"修改原有系统的基础上选择算法或行为\",{\"1\":{\"416\":1}}],[\"修改用户账号密码就是替换users表的账户密码信息\",{\"1\":{\"491\":1}}],[\"修改用户详情\",{\"1\":{\"385\":1}}],[\"修改用户密码\",{\"1\":{\"77\":1}}],[\"修改文档\",{\"1\":{\"321\":1}}],[\"修改文件配置修改maxmemory大小\",{\"1\":{\"230\":1}}],[\"修改文件重启服务后\",{\"1\":{\"178\":1}}],[\"修改配置文件\",{\"1\":{\"164\":1}}],[\"修改kibana\",{\"1\":{\"109\":1}}],[\"修改密码之后\",{\"1\":{\"314\":1}}],[\"修改密码\",{\"1\":{\"108\":1,\"141\":1,\"314\":1,\"351\":2,\"474\":1,\"491\":1}}],[\"修改elasticsearch\",{\"1\":{\"108\":1}}],[\"修改默认提交方式\",{\"1\":{\"74\":1}}],[\"修改事务的默认提交方式\",{\"1\":{\"74\":1}}],[\"修改列名称\",{\"1\":{\"41\":1}}],[\"修改的效率\",{\"1\":{\"19\":1}}],[\"修改\",{\"0\":{\"35\":1},\"1\":{\"15\":1,\"35\":2,\"41\":1,\"469\":1,\"479\":1,\"488\":1}}],[\"修改数据库的字符集\",{\"1\":{\"35\":1}}],[\"修改数据\",{\"0\":{\"46\":1},\"1\":{\"13\":1,\"46\":1,\"214\":1}}],[\"修改表的字符集\",{\"1\":{\"41\":1}}],[\"修改表名\",{\"1\":{\"41\":2}}],[\"修改表\",{\"0\":{\"41\":1},\"1\":{\"13\":1}}],[\"线上日志查看过慢\",{\"1\":{\"388\":1}}],[\"线程都是\",{\"1\":{\"479\":1}}],[\"线程变量\",{\"1\":{\"394\":1}}],[\"线程数量大于最大线程时\",{\"1\":{\"287\":1,\"401\":1}}],[\"线程工厂\",{\"1\":{\"284\":1,\"398\":1}}],[\"线程的空闲时间\",{\"1\":{\"284\":1,\"398\":1}}],[\"线程池名称等\",{\"1\":{\"391\":1}}],[\"线程池名的前缀\",{\"1\":{\"391\":1}}],[\"线程池最大的线程数\",{\"1\":{\"391\":1}}],[\"线程池最多可以创建的线程数量\",{\"1\":{\"284\":1,\"398\":1}}],[\"线程池创建时候初始化的线程数\",{\"1\":{\"391\":1}}],[\"线程池彻底终止\",{\"1\":{\"298\":1,\"412\":1}}],[\"线程池中执行的任务为空时\",{\"1\":{\"297\":1,\"411\":1}}],[\"线程池会变为tidying状态\",{\"1\":{\"297\":1,\"411\":1}}],[\"线程池由\",{\"1\":{\"296\":1,\"410\":1}}],[\"线程池由running\",{\"1\":{\"295\":1,\"409\":1}}],[\"线程池处在tidying状态时\",{\"1\":{\"298\":1,\"412\":1}}],[\"线程池处在stop状态时\",{\"1\":{\"296\":1,\"410\":1}}],[\"线程池处在shutdown状态时\",{\"1\":{\"295\":1,\"409\":1}}],[\"线程池处在running状态时\",{\"1\":{\"294\":1,\"408\":1}}],[\"线程池被一旦被创建\",{\"1\":{\"294\":1,\"408\":1}}],[\"线程池可以接收新的任务和执行已添加的任务\",{\"1\":{\"294\":1,\"408\":1}}],[\"线程池的初始化状态是running\",{\"1\":{\"294\":1,\"408\":1}}],[\"线程池的5种状态\",{\"1\":{\"293\":1,\"407\":1}}],[\"线程池的五大状态\",{\"0\":{\"293\":1,\"407\":1}}],[\"线程池的运行过程\",{\"0\":{\"285\":1,\"399\":1}}],[\"线程池验证当前线程是否达到最大限制\",{\"1\":{\"285\":1,\"399\":1}}],[\"线程池7大参数\",{\"0\":{\"284\":1,\"398\":1}}],[\"线程池优点\",{\"1\":{\"283\":1,\"397\":1}}],[\"线程池\",{\"1\":{\"283\":1,\"397\":1}}],[\"线程私有堆\",{\"1\":{\"269\":1}}],[\"线程私有本地方法栈\",{\"1\":{\"269\":1}}],[\"线程私有\",{\"1\":{\"269\":1}}],[\"线程安全\",{\"1\":{\"243\":1,\"249\":1}}],[\"线路id\",{\"1\":{\"78\":1}}],[\"比较消耗性能\",{\"1\":{\"279\":2}}],[\"比较key是否相等是先比较hashcode\",{\"1\":{\"244\":1}}],[\"比较适合顺序添加\",{\"1\":{\"241\":1}}],[\"比如发送欢迎邮件\",{\"1\":{\"415\":1}}],[\"比如用户服务\",{\"1\":{\"415\":1}}],[\"比如一个用户完成了注册\",{\"1\":{\"415\":1}}],[\"比如播放新的内容\",{\"1\":{\"415\":1}}],[\"比如调executors\",{\"1\":{\"294\":1,\"408\":1}}],[\"比如输入000\",{\"1\":{\"173\":1}}],[\"比如\",{\"1\":{\"159\":1,\"231\":1,\"306\":1,\"333\":1}}],[\"比如perl\",{\"1\":{\"156\":1}}],[\"比如tomcat镜像\",{\"1\":{\"92\":1}}],[\"比如说student表有30条数据\",{\"1\":{\"223\":1}}],[\"比如说100\",{\"1\":{\"21\":1}}],[\"比如说oracle\",{\"1\":{\"21\":1}}],[\"比如将post请求修改为get请求\",{\"1\":{\"8\":1}}],[\"底层\",{\"1\":{\"302\":2}}],[\"底层采用\",{\"1\":{\"244\":1}}],[\"底层以数组实现\",{\"1\":{\"241\":1}}],[\"底层object数组\",{\"0\":{\"241\":1}}],[\"底层基于go语言\",{\"1\":{\"90\":1}}],[\"集群总线端口是redis客户端连接的端口+10000\",{\"1\":{\"495\":1}}],[\"集群是否需要全覆盖\",{\"1\":{\"495\":1}}],[\"集群迁移障碍\",{\"1\":{\"495\":1}}],[\"集群配置文件的文件名\",{\"1\":{\"495\":1}}],[\"集群模式\",{\"1\":{\"495\":1}}],[\"集群方式启动\",{\"1\":{\"483\":1}}],[\"集群执行流程会有很小的延迟\",{\"1\":{\"469\":1}}],[\"集群\",{\"1\":{\"363\":1}}],[\"集群地址\",{\"1\":{\"323\":1}}],[\"集\",{\"1\":{\"240\":1}}],[\"集合名\",{\"1\":{\"373\":1}}],[\"集合存储的对象可以是不同数据类型\",{\"1\":{\"240\":1}}],[\"集合只能存储引用数据类型\",{\"1\":{\"240\":1}}],[\"集合可变长度的\",{\"1\":{\"240\":1}}],[\"集合和数组的区别\",{\"1\":{\"240\":1}}],[\"集合类型主要有3种\",{\"1\":{\"240\":1}}],[\"集合类存放的都是对象的引用\",{\"1\":{\"240\":1}}],[\"集合就是一个存放数据对象引用的容器\",{\"1\":{\"240\":1}}],[\"集合\",{\"1\":{\"49\":1}}],[\"集合b\",{\"1\":{\"22\":1}}],[\"静态jenkinsfile\",{\"0\":{\"440\":1}}],[\"静态代理相当于是多写了一个代理类\",{\"1\":{\"418\":1}}],[\"静态代理\",{\"0\":{\"418\":1},\"1\":{\"418\":1}}],[\"静态内部类\",{\"1\":{\"283\":2,\"397\":2}}],[\"静态属性的对象\",{\"1\":{\"270\":1}}],[\"静态区\",{\"1\":{\"269\":2}}],[\"静态方法\",{\"0\":{\"266\":1},\"1\":{\"239\":1}}],[\"静态变量\",{\"1\":{\"239\":2,\"269\":2}}],[\"静态资源\",{\"1\":{\"164\":1}}],[\"静态资源直接放在nginx\",{\"1\":{\"164\":1}}],[\"静态资源需要\",{\"1\":{\"164\":1}}],[\"首页数据\",{\"1\":{\"337\":1}}],[\"首次访问这个类的\",{\"1\":{\"239\":1}}],[\"首先把dist文件上传至nginx文件中\",{\"1\":{\"432\":1}}],[\"首先小高从代码的角度考虑\",{\"1\":{\"223\":1}}],[\"首先我们在开发中要避免使用select\",{\"1\":{\"223\":1}}],[\"首先安装node\",{\"0\":{\"197\":1}}],[\"首先卸载node\",{\"1\":{\"182\":1}}],[\"赋值时\",{\"1\":{\"317\":1}}],[\"赋值在准备阶段完成\",{\"1\":{\"237\":1}}],[\"赋予权限\",{\"1\":{\"138\":3}}],[\"符号引用验证\",{\"1\":{\"236\":1}}],[\"反之亦然\",{\"1\":{\"281\":1}}],[\"反射的机制即基于这一基础\",{\"1\":{\"235\":1}}],[\"反向代理配置\",{\"1\":{\"464\":1,\"490\":1}}],[\"反向代理服务器是配置在服务端的\",{\"1\":{\"158\":1}}],[\"反向代理\",{\"1\":{\"158\":1,\"166\":2}}],[\"编辑命令\",{\"1\":{\"488\":1}}],[\"编辑命令vim\",{\"1\":{\"483\":1}}],[\"编辑\",{\"1\":{\"484\":1,\"486\":1,\"487\":1,\"489\":1}}],[\"编程时事物\",{\"1\":{\"280\":1}}],[\"编译\",{\"1\":{\"440\":1}}],[\"编译字节\",{\"1\":{\"269\":2}}],[\"编译和运行\",{\"1\":{\"235\":1}}],[\"编写源⽂件的模板\",{\"1\":{\"374\":1}}],[\"编写代码赋值输出⽣成⽂件\",{\"1\":{\"374\":1}}],[\"编写代码\",{\"0\":{\"371\":1}}],[\"编写模板文件\",{\"0\":{\"370\":1}}],[\"编写发送消息的代码\",{\"1\":{\"352\":1,\"355\":1}}],[\"编写的开源对象存储套件\",{\"1\":{\"123\":1}}],[\"编写dockerfile文件\",{\"1\":{\"104\":1,\"105\":1,\"117\":1}}],[\"初始化mysql数据库\",{\"1\":{\"474\":1}}],[\"初始化mysql\",{\"0\":{\"474\":1}}],[\"初始化长度10\",{\"1\":{\"241\":1}}],[\"初始化\",{\"0\":{\"239\":1},\"1\":{\"234\":1}}],[\"初始化密码\",{\"1\":{\"139\":1}}],[\"准备\",{\"0\":{\"237\":1},\"1\":{\"234\":1}}],[\"验证集群\",{\"1\":{\"495\":1}}],[\"验证是否是邮件地址\",{\"1\":{\"384\":1}}],[\"验证字符串是否是符合指定格式的数字\",{\"1\":{\"384\":1}}],[\"验证对象\",{\"1\":{\"384\":1}}],[\"验证对象是否不为null\",{\"1\":{\"384\":1}}],[\"验证对象是否为null\",{\"1\":{\"384\":1}}],[\"验证版本号是否为空\",{\"1\":{\"381\":1}}],[\"验证接口是否以\",{\"1\":{\"381\":1}}],[\"验证令牌是否存在\",{\"1\":{\"380\":1}}],[\"验证令牌是否粗存在\",{\"1\":{\"379\":1}}],[\"验证\",{\"0\":{\"236\":1},\"1\":{\"234\":1,\"354\":1,\"384\":8,\"392\":1,\"447\":1,\"497\":1}}],[\"验证安装是否成功\",{\"1\":{\"93\":1}}],[\"节点超时时间\",{\"1\":{\"495\":1}}],[\"节点\",{\"1\":{\"233\":1}}],[\"挂起a事务\",{\"1\":{\"280\":2}}],[\"挂掉了\",{\"1\":{\"233\":1,\"306\":1}}],[\"挂掉之后\",{\"1\":{\"233\":1}}],[\"挂载\",{\"1\":{\"462\":1}}],[\"挂载目录\",{\"1\":{\"439\":1}}],[\"挂载之前\",{\"1\":{\"215\":1}}],[\"挂载完成\",{\"1\":{\"215\":1}}],[\"挂载容器中的配置文件\",{\"1\":{\"108\":1}}],[\"挂载数据卷\",{\"1\":{\"104\":3}}],[\"延迟对象的创建\",{\"1\":{\"422\":1}}],[\"延迟\",{\"1\":{\"366\":1}}],[\"延迟队列创建方式\",{\"1\":{\"360\":1}}],[\"延迟队列\",{\"1\":{\"360\":2}}],[\"延迟消息处理\",{\"1\":{\"360\":1}}],[\"延迟n秒\",{\"1\":{\"232\":2}}],[\"延迟双删\",{\"0\":{\"232\":1}}],[\"弊端\",{\"1\":{\"232\":1}}],[\"随机值\",{\"1\":{\"231\":1}}],[\"随机数\",{\"1\":{\"79\":1}}],[\"采用得是拦截器方式\",{\"1\":{\"390\":1}}],[\"采用不同的查询方式\",{\"1\":{\"329\":1}}],[\"采用了相同的过期时间\",{\"1\":{\"231\":1}}],[\"采集\",{\"1\":{\"302\":1}}],[\"采⽤v\",{\"1\":{\"192\":1}}],[\"采⽤⾃下⽽上的顺序解析where⼦句\",{\"1\":{\"26\":1}}],[\"采⽤第三⽅技术\",{\"1\":{\"25\":1}}],[\"采⽤联合索引\",{\"1\":{\"25\":1}}],[\"过期\",{\"1\":{\"366\":1}}],[\"过期时间缓存击穿个人理解\",{\"1\":{\"231\":1}}],[\"过滤掉info日志\",{\"1\":{\"389\":1}}],[\"过滤\",{\"1\":{\"340\":1}}],[\"过滤器实例时调用该方法\",{\"1\":{\"253\":1}}],[\"过滤不安全的内容\",{\"1\":{\"170\":1}}],[\"过滤数据\",{\"1\":{\"22\":1}}],[\"过滤所有url\",{\"1\":{\"21\":1}}],[\"利用不存在的数据\",{\"1\":{\"231\":1}}],[\"利用aop\",{\"1\":{\"21\":1}}],[\"写接收则会报错\",{\"1\":{\"354\":1}}],[\"写一个类实现webmvcconfigurer接口抽血addinterceptors方法来增加拦截的路径\",{\"1\":{\"254\":1}}],[\"写入缓存\",{\"1\":{\"231\":1}}],[\"写分离和分布式主键功能\",{\"1\":{\"28\":1}}],[\"②\",{\"1\":{\"230\":1}}],[\"惰性删除\",{\"1\":{\"229\":1}}],[\"环境配置\",{\"1\":{\"491\":1}}],[\"环境\",{\"1\":{\"440\":1}}],[\"环境的不同\",{\"1\":{\"227\":1}}],[\"环境变量安装完成之后就已存在\",{\"1\":{\"182\":1}}],[\"环境变量\",{\"1\":{\"181\":1}}],[\"立即持久化到aof文件中\",{\"1\":{\"227\":1}}],[\"到了后期文件会比较大\",{\"1\":{\"227\":1}}],[\"速度比较快\",{\"1\":{\"227\":1}}],[\"先进后出\",{\"1\":{\"286\":1,\"400\":1}}],[\"先进先出\",{\"1\":{\"285\":1,\"286\":1,\"351\":1,\"399\":1,\"400\":1}}],[\"先进行缓存清除\",{\"1\":{\"232\":1}}],[\"先执行发送\",{\"1\":{\"354\":1}}],[\"先执行缓存清除\",{\"1\":{\"232\":1}}],[\"先执行update操作\",{\"1\":{\"232\":1}}],[\"先通过watch命令去监听一个或多个key\",{\"1\":{\"226\":1}}],[\"先开启事务\",{\"1\":{\"226\":1}}],[\"先删除表\",{\"1\":{\"45\":1}}],[\"积分存储等操作\",{\"1\":{\"225\":1}}],[\"差集和并集的操作\",{\"1\":{\"225\":1}}],[\"地理边界框查询生成器\",{\"1\":{\"347\":1,\"348\":1}}],[\"地理位置\",{\"1\":{\"225\":1}}],[\"地图经纬度搜索\",{\"0\":{\"346\":1}}],[\"地板\",{\"1\":{\"79\":1}}],[\"另一台服务器\",{\"1\":{\"306\":1}}],[\"另一个事务添加了一条数据\",{\"1\":{\"76\":1}}],[\"另外来说的话\",{\"1\":{\"279\":1}}],[\"另外\",{\"1\":{\"248\":1,\"306\":1}}],[\"另外三种数据结构\",{\"1\":{\"225\":1}}],[\"话不多说\",{\"1\":{\"223\":1}}],[\"映入眼帘的就是select\",{\"1\":{\"223\":1}}],[\"映射\",{\"1\":{\"240\":1}}],[\"映射上了location\",{\"1\":{\"159\":1}}],[\"映射端口\",{\"1\":{\"104\":3,\"120\":1}}],[\"之后再次进入容器输入后\",{\"1\":{\"314\":1}}],[\"之后\",{\"1\":{\"298\":1,\"412\":1}}],[\"之后小高又到数据库通过执行计划explain查看sql的执行情况\",{\"1\":{\"223\":1}}],[\"之后又查看了sql\",{\"1\":{\"223\":1}}],[\"之间进行复制\",{\"1\":{\"468\":1}}],[\"之间的通信端口\",{\"1\":{\"108\":1}}],[\"之间相隔的天数\",{\"1\":{\"51\":1}}],[\"心想\",{\"1\":{\"223\":1}}],[\"果然石山不是一天累计起来的呀\",{\"1\":{\"223\":1}}],[\"果不其然\",{\"1\":{\"223\":1}}],[\"果同时出现using\",{\"1\":{\"19\":1,\"22\":1}}],[\"额外\",{\"1\":{\"223\":1}}],[\"仅仅是按照优先级取任务\",{\"1\":{\"286\":1,\"400\":1}}],[\"仅仅能查到一条数据的sql\",{\"1\":{\"223\":1}}],[\"仅参考\",{\"1\":{\"181\":1}}],[\"哪个从机会被选为新的主节点\",{\"1\":{\"233\":1}}],[\"哪个字段需要判断是否为null\",{\"1\":{\"48\":1}}],[\"哪些表存在union查询\",{\"1\":{\"223\":1}}],[\"衍生查询\",{\"1\":{\"223\":1}}],[\"顺序执行\",{\"1\":{\"223\":1}}],[\"标识not的意思\",{\"1\":{\"339\":1}}],[\"标识符\",{\"1\":{\"223\":1}}],[\"标记是否进行参数校验\",{\"1\":{\"378\":1}}],[\"标记整理算法将需要清理的对象进行标记\",{\"1\":{\"271\":1}}],[\"标记清除后会出现大量不连续的内存碎片\",{\"1\":{\"271\":1}}],[\"标记清除算法将所有需要回收的算法进行标记\",{\"1\":{\"271\":1}}],[\"标签\",{\"1\":{\"437\":1}}],[\"标签的属性\",{\"1\":{\"195\":1}}],[\"标签绑定变量\",{\"1\":{\"195\":2}}],[\"标签属性名=\",{\"1\":{\"193\":2}}],[\"导致实例化多个对象的情况\",{\"1\":{\"422\":1}}],[\"导致缓存在某一时刻同时失效\",{\"1\":{\"231\":1}}],[\"导致索引失效的情况\",{\"1\":{\"223\":1}}],[\"导包\",{\"1\":{\"209\":1}}],[\"回访完成当前sql线程挂机\",{\"1\":{\"469\":1}}],[\"回收核心线程\",{\"0\":{\"299\":1,\"413\":1},\"1\":{\"299\":1,\"413\":1}}],[\"回收线程\",{\"1\":{\"284\":1,\"398\":1}}],[\"回调的机制\",{\"1\":{\"273\":1}}],[\"回表查询\",{\"1\":{\"223\":1}}],[\"回表操作会导致额外的i\",{\"1\":{\"223\":1}}],[\"回滚之后就重新发送消息\",{\"1\":{\"273\":1}}],[\"回滚事务\",{\"1\":{\"74\":1}}],[\"回滚\",{\"1\":{\"74\":1,\"361\":1}}],[\"即表示成功\",{\"1\":{\"435\":1}}],[\"即通过代理对象访问目标对象\",{\"1\":{\"417\":1}}],[\"即⼀种基于模板和要改变的数据\",{\"1\":{\"368\":1}}],[\"即可继续其他的操作\",{\"1\":{\"300\":1,\"414\":1}}],[\"即采用生产者消费者模式\",{\"1\":{\"286\":1,\"400\":1}}],[\"即便使用redlock算法来实现\",{\"1\":{\"279\":1}}],[\"即不调用控制器方法\",{\"1\":{\"256\":1}}],[\"即调用控制器方法\",{\"1\":{\"256\":1}}],[\"即使这两个对象指向相同的数据\",{\"1\":{\"244\":1}}],[\"即使丢失1\",{\"1\":{\"125\":1}}],[\"即\",{\"1\":{\"237\":1}}],[\"即许多行具有相同的索引值\",{\"1\":{\"223\":1}}],[\"即多列索引\",{\"1\":{\"223\":1}}],[\"即查询中使用的列不完全是索引列\",{\"1\":{\"223\":1}}],[\"尤其是没有实现接口的类\",{\"1\":{\"419\":1}}],[\"尤其是在表很大的情况下\",{\"1\":{\"223\":1}}],[\"尤其是text类型的字段\",{\"1\":{\"223\":1}}],[\"他会根据你查询的字段类型不一样\",{\"1\":{\"329\":1}}],[\"他会读取磁盘中的消息\",{\"1\":{\"274\":1}}],[\"他们都在ioc容器里面\",{\"1\":{\"280\":1}}],[\"他先试了一下这个接口的响应时间\",{\"1\":{\"223\":1}}],[\"他首先能查到这条数据\",{\"1\":{\"223\":1}}],[\"他始终会将请求发送到指定的服务器上\",{\"1\":{\"160\":1}}],[\"举个实际的例子\",{\"1\":{\"415\":1}}],[\"举个例子\",{\"1\":{\"223\":1}}],[\"举一个比较详细的例子\",{\"1\":{\"396\":1}}],[\"举几个例子\",{\"1\":{\"221\":1}}],[\"叶子节点的value存储的是主键key\",{\"1\":{\"222\":1}}],[\"页子节点存储的key是主键值\",{\"1\":{\"222\":1}}],[\"页面\",{\"1\":{\"194\":1}}],[\"还是queue⾥的消息都会存在于多个实例上\",{\"1\":{\"365\":1}}],[\"还有\",{\"1\":{\"306\":1}}],[\"还有一种情况就是mq会将超时未确认\",{\"1\":{\"275\":1}}],[\"还有一种是rabbitmq的confirm\",{\"1\":{\"273\":1}}],[\"还有一中情况就是\",{\"1\":{\"271\":1}}],[\"还有一个经典案例就是\",{\"1\":{\"221\":1}}],[\"还可以实现数据分析处理\",{\"1\":{\"302\":1}}],[\"还可以避免对象存活率较高时的持续复制\",{\"1\":{\"271\":1}}],[\"还得根据实际业务是否允许丢弃老任务来认真衡量\",{\"1\":{\"291\":1,\"405\":1}}],[\"还没有处理\",{\"1\":{\"275\":1}}],[\"还能够提升redis存储数据的能力\",{\"1\":{\"233\":1}}],[\"还未进行update操作\",{\"1\":{\"232\":1}}],[\"还未来得及进行缓存清除\",{\"1\":{\"232\":1}}],[\"还包含对应的jdk\",{\"1\":{\"92\":1}}],[\"区别mc\",{\"1\":{\"468\":1}}],[\"区分单词\",{\"1\":{\"359\":2}}],[\"区分大小写\",{\"1\":{\"175\":1}}],[\"区间查找\",{\"1\":{\"220\":1}}],[\"聚合查询\",{\"0\":{\"342\":1}}],[\"聚合函数的计算\",{\"1\":{\"55\":1}}],[\"聚合函数\",{\"0\":{\"55\":1},\"1\":{\"13\":1,\"22\":1,\"55\":1,\"56\":1}}],[\"聚簇索引就是主键索引\",{\"1\":{\"223\":1}}],[\"聚簇索引\",{\"1\":{\"219\":1,\"222\":1}}],[\"×\",{\"1\":{\"217\":6}}],[\"√\",{\"1\":{\"217\":10}}],[\"脏写\",{\"1\":{\"217\":1}}],[\"脏读指的是一个事务读到了其他事务未提交的数据\",{\"1\":{\"217\":1}}],[\"脏读\",{\"1\":{\"76\":2,\"217\":2}}],[\"销毁完成\",{\"1\":{\"215\":1}}],[\"销毁之前\",{\"1\":{\"215\":1}}],[\"适用与以下场景\",{\"1\":{\"425\":1}}],[\"适用于对类进行代理的场景\",{\"1\":{\"419\":1}}],[\"适合做分布式锁\",{\"1\":{\"279\":1}}],[\"适合处理mutation中⽅法耗时\",{\"1\":{\"213\":1}}],[\"适⽤于索引列\",{\"1\":{\"26\":1}}],[\"状态说明\",{\"1\":{\"294\":1,\"295\":1,\"296\":1,\"297\":1,\"298\":1,\"408\":1,\"409\":1,\"410\":1,\"411\":1,\"412\":1}}],[\"状态必须是一致的\",{\"1\":{\"217\":1}}],[\"状态\",{\"1\":{\"213\":1,\"479\":1}}],[\"状态快照导入导出等高级调试功能\",{\"1\":{\"212\":1}}],[\"调用真实对象的方法\",{\"1\":{\"420\":1}}],[\"调用结束\",{\"1\":{\"390\":1}}],[\"调用者无需等待它的完成\",{\"1\":{\"300\":1,\"414\":1}}],[\"调用线程池的shutdownnow\",{\"1\":{\"296\":1,\"410\":1}}],[\"调用get\",{\"1\":{\"264\":1}}],[\"调用存储过程\",{\"1\":{\"18\":1}}],[\"调⽤mutation的⽅法\",{\"1\":{\"213\":1}}],[\"调试\",{\"1\":{\"212\":1}}],[\"接受消息\",{\"1\":{\"352\":1}}],[\"接⼝\",{\"1\":{\"273\":1}}],[\"接收队列\",{\"1\":{\"360\":1}}],[\"接收死信消息\",{\"1\":{\"360\":1}}],[\"接收\",{\"1\":{\"354\":1}}],[\"接收成功\",{\"1\":{\"352\":1}}],[\"接收到\",{\"1\":{\"273\":1}}],[\"接收参数\",{\"0\":{\"211\":1}}],[\"接口的版本号自动校验\",{\"1\":{\"381\":1}}],[\"接口鉴权\",{\"0\":{\"379\":1},\"1\":{\"375\":1}}],[\"接口也可以提供\",{\"1\":{\"286\":1,\"400\":1}}],[\"接口\",{\"1\":{\"241\":1,\"286\":2,\"400\":2,\"418\":1}}],[\"接口返回的url就是文件的访问地址\",{\"1\":{\"133\":1}}],[\"类名\",{\"1\":{\"376\":1}}],[\"类似mysql\",{\"1\":{\"304\":1}}],[\"类似于priorityblockingqueue\",{\"1\":{\"286\":1,\"400\":1}}],[\"类\",{\"1\":{\"258\":1,\"264\":1,\"267\":1,\"376\":1}}],[\"类加载的\",{\"1\":{\"239\":1}}],[\"类加载过程\",{\"0\":{\"234\":1}}],[\"类对象\",{\"1\":{\"239\":1}}],[\"类初始化\",{\"1\":{\"239\":2}}],[\"类的\",{\"1\":{\"239\":1}}],[\"类的声明信息存储起来\",{\"1\":{\"235\":1}}],[\"类的链接\",{\"1\":{\"208\":1}}],[\"类型为经纬度\",{\"1\":{\"346\":1}}],[\"类型注解\",{\"0\":{\"267\":1}}],[\"类型\",{\"1\":{\"41\":1,\"304\":2,\"320\":1,\"325\":1,\"326\":1,\"357\":1}}],[\"展示由\",{\"1\":{\"208\":1}}],[\"路由传参\",{\"1\":{\"360\":1}}],[\"路由匹配\",{\"1\":{\"360\":1,\"366\":2}}],[\"路由参数\",{\"1\":{\"208\":1}}],[\"路径\",{\"1\":{\"83\":1,\"159\":6}}],[\"让请求在处理链中能进行传递与被处理\",{\"1\":{\"425\":1}}],[\"让用\",{\"1\":{\"208\":1}}],[\"让表于表产生关系\",{\"1\":{\"64\":1}}],[\"稍后会说明\",{\"1\":{\"203\":1}}],[\"项目结构\",{\"1\":{\"207\":1}}],[\"项目名\",{\"0\":{\"202\":1},\"1\":{\"200\":1}}],[\"项⽬名\",{\"1\":{\"200\":1}}],[\"出来一个\",{\"1\":{\"233\":1}}],[\"出现git版本号则表示安装成功\",{\"1\":{\"446\":1}}],[\"出现错别字\",{\"1\":{\"333\":1}}],[\"出现json数据则启动成功\",{\"1\":{\"310\":1}}],[\"出现在模式字符串的开始处\",{\"1\":{\"223\":1}}],[\"出现即安装成功\",{\"1\":{\"197\":1}}],[\"出错了\",{\"1\":{\"74\":1}}],[\"针对keyword类型\",{\"1\":{\"332\":1}}],[\"针对多个索引同时查询\",{\"1\":{\"330\":1}}],[\"针对时间类型指定具体的格式\",{\"1\":{\"317\":1}}],[\"针对有⼤对象的state进⾏拆分\",{\"1\":{\"213\":1}}],[\"针对变量的内容有html标签\",{\"1\":{\"195\":1}}],[\"针对于drop删除\",{\"1\":{\"146\":1}}],[\"针对于delete\",{\"1\":{\"146\":1}}],[\"点击\",{\"1\":{\"195\":1}}],[\"点击链接保存\",{\"1\":{\"178\":1}}],[\"核心线程数5\",{\"1\":{\"391\":1}}],[\"核心线程数\",{\"1\":{\"284\":1,\"398\":1}}],[\"核心控制器\",{\"1\":{\"280\":1}}],[\"核心深度集成\",{\"1\":{\"208\":1}}],[\"核心总结\",{\"0\":{\"195\":1}}],[\"核⼼点\",{\"1\":{\"166\":1}}],[\"绑定\",{\"1\":{\"357\":1,\"360\":1}}],[\"绑定属性\",{\"1\":{\"195\":1}}],[\"绑定事件\",{\"1\":{\"195\":1}}],[\"绑定到指定标签上\",{\"1\":{\"194\":1}}],[\"绑定html属性\",{\"1\":{\"193\":1}}],[\"绘制标签\",{\"1\":{\"194\":1}}],[\"沟霸3\",{\"1\":{\"191\":1}}],[\"沟霸2\",{\"1\":{\"191\":1}}],[\"沟霸1\",{\"1\":{\"191\":1}}],[\"奥迪\",{\"1\":{\"189\":1}}],[\"模糊\",{\"1\":{\"366\":1}}],[\"模糊匹配\",{\"0\":{\"359\":1}}],[\"模糊查询性能较低https\",{\"1\":{\"336\":1}}],[\"模糊查询\",{\"1\":{\"49\":1,\"223\":1,\"333\":1}}],[\"模式\",{\"1\":{\"208\":1,\"273\":1}}],[\"模式或\",{\"1\":{\"208\":1}}],[\"模块化\",{\"1\":{\"208\":1}}],[\"模板⽂件中的语法格式\",{\"0\":{\"373\":1}}],[\"模板引擎=模板⻚⾯+动态数据=输出的⻚⾯\",{\"1\":{\"368\":1}}],[\"模板引擎\",{\"1\":{\"368\":1}}],[\"模板引擎概述\",{\"0\":{\"368\":1}}],[\"模板\",{\"1\":{\"188\":1}}],[\"⻚⾯内部有三部分组成\",{\"1\":{\"188\":1}}],[\"⻚⾯需要处理\",{\"1\":{\"13\":1}}],[\"插件需要下载\",{\"1\":{\"449\":1}}],[\"插件配置\",{\"0\":{\"449\":1}}],[\"插件实现自动化持续部署\",{\"1\":{\"426\":1}}],[\"插件数据到本机的文件夹\",{\"1\":{\"108\":1}}],[\"插入的时候\",{\"1\":{\"259\":1}}],[\"插入和删除操作较多时\",{\"1\":{\"242\":1}}],[\"插入速度较快查询较慢\",{\"1\":{\"242\":1}}],[\"插入元素的时候\",{\"1\":{\"241\":1}}],[\"插值语法\",{\"0\":{\"188\":1},\"1\":{\"195\":1}}],[\"英文翻译\",{\"0\":{\"180\":1}}],[\"问题二\",{\"1\":{\"179\":1}}],[\"问题一\",{\"1\":{\"179\":1}}],[\"问题\",{\"1\":{\"179\":1}}],[\"问题描述\",{\"0\":{\"5\":1}}],[\"视频原画倍速播放\",{\"1\":{\"178\":1}}],[\"视图解析器根据名称找到视图\",{\"1\":{\"280\":1}}],[\"视图名\",{\"1\":{\"14\":2}}],[\"视图\",{\"0\":{\"14\":1},\"1\":{\"14\":2}}],[\"阿里镜像的配置\",{\"1\":{\"447\":1}}],[\"阿里云工具包\",{\"1\":{\"426\":1}}],[\"阿里云盘\",{\"1\":{\"178\":1}}],[\"阿⾥云\",{\"1\":{\"23\":1}}],[\"谷歌浏览器动态代理插件\",{\"0\":{\"178\":1}}],[\"禁用防火墙\",{\"1\":{\"177\":1}}],[\"推荐采⽤这种\",{\"1\":{\"273\":1}}],[\"推荐同时开启aof和rdb\",{\"1\":{\"227\":1}}],[\"推荐适应下面的配置方法\",{\"1\":{\"175\":1}}],[\"推荐使用此拒绝策略\",{\"1\":{\"289\":1,\"403\":1}}],[\"推荐使用\",{\"1\":{\"45\":1,\"146\":1,\"321\":1}}],[\"允许从服务器更新二进制日志\",{\"1\":{\"478\":1}}],[\"允许操作\",{\"1\":{\"425\":2}}],[\"允许线程的空闲时间60秒\",{\"1\":{\"391\":1}}],[\"允许在同一声明类型\",{\"1\":{\"267\":1}}],[\"允许所有访问请求\",{\"1\":{\"175\":1}}],[\"允许认证用户访问\",{\"1\":{\"175\":1}}],[\"允许访问的地址\",{\"1\":{\"21\":1}}],[\"认证访问\",{\"1\":{\"175\":1}}],[\"认证个数\",{\"1\":{\"175\":1}}],[\"认证模块\",{\"1\":{\"171\":1}}],[\"减少重复的工作\",{\"1\":{\"194\":1}}],[\"减少开销\",{\"1\":{\"19\":1}}],[\"减轻网络使用压力等\",{\"1\":{\"170\":1}}],[\"帮助研发团队快速落地敏捷开发与\",{\"1\":{\"433\":1}}],[\"帮助用户加速web访问\",{\"1\":{\"170\":1}}],[\"帮助咱们实现突破访问权限\",{\"1\":{\"158\":1}}],[\"待维护\",{\"1\":{\"167\":1}}],[\"按顺序执行下面命令\",{\"1\":{\"473\":1}}],[\"按序号索引数据需要进行前向或后向遍历\",{\"1\":{\"242\":1}}],[\"按次序先后分配\",{\"1\":{\"166\":1}}],[\"按照顺序依次执行安装命令\",{\"1\":{\"473\":1}}],[\"按照每天生成日志文件\",{\"1\":{\"389\":1}}],[\"按照\",{\"1\":{\"343\":1}}],[\"按照上述两个步骤启动成功即可\",{\"1\":{\"128\":1}}],[\"按照下面模板便可简单编写出dockerfile文件\",{\"1\":{\"117\":1}}],[\"按照性别分组\",{\"1\":{\"56\":4}}],[\"决定这事交给集群中哪⼀个⼈做\",{\"1\":{\"166\":1}}],[\"⽹络加速器等\",{\"1\":{\"166\":1}}],[\"翻墙软件\",{\"1\":{\"166\":1}}],[\"咱们把静态资源放在nginx\",{\"1\":{\"164\":1}}],[\"咱们主要关注这个文件\",{\"1\":{\"157\":1}}],[\"块中的\",{\"1\":{\"162\":1,\"163\":1}}],[\"块是http\",{\"1\":{\"162\":1,\"163\":1}}],[\"权重⼤的\",{\"1\":{\"166\":1}}],[\"权重\",{\"0\":{\"162\":1},\"1\":{\"160\":1,\"166\":1}}],[\"权限列表\",{\"1\":{\"77\":2}}],[\"权限管理\",{\"1\":{\"77\":1}}],[\"轮询访问\",{\"1\":{\"161\":1}}],[\"轮询\",{\"0\":{\"161\":1},\"1\":{\"160\":1,\"166\":1}}],[\"精确\",{\"1\":{\"366\":1}}],[\"精确匹配\",{\"1\":{\"159\":1}}],[\"精度比float小一半\",{\"1\":{\"317\":1}}],[\"精准匹配\",{\"1\":{\"159\":2}}],[\"匹配转发\",{\"0\":{\"358\":1}}],[\"匹配一个字符\",{\"1\":{\"334\":1}}],[\"匹配度越高\",{\"1\":{\"326\":1}}],[\"匹配分数\",{\"1\":{\"326\":1}}],[\"匹配以gif|jpg|png|js|css|html为结尾的路径\",{\"1\":{\"164\":1}}],[\"匹配以gif或者jpg或者png为结尾的路径\",{\"1\":{\"159\":1}}],[\"匹配全部路径\",{\"1\":{\"159\":1}}],[\"匹配后\",{\"1\":{\"159\":1}}],[\"匹配所有以\",{\"1\":{\"159\":3}}],[\"匹配开头路径\",{\"1\":{\"159\":1}}],[\"匹配\",{\"1\":{\"159\":1}}],[\"匹配前缀\",{\"1\":{\"159\":1}}],[\"~\",{\"1\":{\"159\":7,\"164\":1,\"317\":1,\"476\":1}}],[\"^~\",{\"1\":{\"159\":5}}],[\"优先处理策略\",{\"0\":{\"292\":1,\"406\":1},\"1\":{\"287\":1,\"401\":1}}],[\"优先选择aof文件\",{\"1\":{\"227\":1}}],[\"优先级越高哨兵\",{\"1\":{\"233\":1}}],[\"优先级6\",{\"1\":{\"159\":1}}],[\"优先级5\",{\"1\":{\"159\":1}}],[\"优先级4\",{\"1\":{\"159\":1}}],[\"优先级最低\",{\"1\":{\"159\":1}}],[\"优先级最高\",{\"1\":{\"159\":2}}],[\"优先级次之\",{\"1\":{\"159\":1}}],[\"优先级关系如下\",{\"1\":{\"159\":1}}],[\"优点策略模式提供了对\",{\"1\":{\"416\":1}}],[\"优点\",{\"1\":{\"220\":1,\"241\":1}}],[\"优势\",{\"1\":{\"146\":1}}],[\"达到负载均衡\",{\"1\":{\"158\":1}}],[\"正则查询\",{\"1\":{\"336\":1}}],[\"正则匹配后缀\",{\"1\":{\"159\":1}}],[\"正则匹配优先级\",{\"1\":{\"159\":1}}],[\"正则匹配\",{\"1\":{\"159\":1}}],[\"正则表达式相同\",{\"1\":{\"159\":1}}],[\"正则表达式\",{\"1\":{\"159\":2}}],[\"正向代理\",{\"1\":{\"166\":1}}],[\"正向代理和反向代理\",{\"1\":{\"166\":1}}],[\"正向代理和反向代理介绍正向代理\",{\"1\":{\"158\":1}}],[\"正向代理服务是由客户端设立的\",{\"1\":{\"158\":1}}],[\"正确返回successfully\",{\"1\":{\"110\":1}}],[\"工厂模式\",{\"1\":{\"353\":1}}],[\"工作进程\",{\"1\":{\"157\":1}}],[\"工具类\",{\"0\":{\"82\":1}}],[\"考虑到后续安装ssl证书\",{\"1\":{\"157\":1}}],[\"占用1个字节\",{\"1\":{\"317\":1}}],[\"占用2个字节\",{\"1\":{\"317\":1}}],[\"占用4个字节\",{\"1\":{\"317\":2}}],[\"占用8个字节\",{\"1\":{\"317\":2}}],[\"占⽤内存⼩\",{\"1\":{\"156\":1}}],[\"占位符\",{\"1\":{\"49\":1}}],[\"稳定性极强\",{\"1\":{\"156\":1}}],[\"淘宝\",{\"1\":{\"156\":1}}],[\"网关中配置filter提高效率\",{\"1\":{\"380\":1}}],[\"网易\",{\"1\":{\"156\":1}}],[\"网络\",{\"1\":{\"92\":1}}],[\"京东\",{\"1\":{\"156\":1}}],[\"百度\",{\"1\":{\"156\":1}}],[\"事物主要分为\",{\"1\":{\"280\":1}}],[\"事物的效果就会永久地保留在数据库中mysql默认的事物隔离级别是\",{\"1\":{\"217\":1}}],[\"事物中的所有元素必须作为一个整体提交或回滚一致性\",{\"1\":{\"217\":1}}],[\"事物\",{\"0\":{\"217\":1}}],[\"事件一旦被发布\",{\"1\":{\"415\":1}}],[\"事件模型的工作方式也是类似的\",{\"1\":{\"415\":1}}],[\"事件\",{\"1\":{\"415\":1}}],[\"事件源\",{\"1\":{\"415\":1}}],[\"事件框架或组件收到一个事件后\",{\"1\":{\"281\":1}}],[\"事件对象的产生者\",{\"1\":{\"281\":1}}],[\"事件监听器和事件发布三要素\",{\"1\":{\"281\":1}}],[\"事件监听器applicationlistener监听事件\",{\"1\":{\"281\":1}}],[\"事件监听三要素事件源\",{\"1\":{\"281\":1}}],[\"事件监听概念\",{\"1\":{\"281\":1}}],[\"事件用于在松散耦合的组件之间交换信息\",{\"1\":{\"281\":1}}],[\"事件名=\",{\"1\":{\"192\":3}}],[\"事件绑定\",{\"0\":{\"192\":1}}],[\"事实上nginx的并发能力确实在同类型的网页服务器中表现较好\",{\"1\":{\"156\":1}}],[\"事务机制和\",{\"1\":{\"363\":1}}],[\"事务机制和confirm机制\",{\"1\":{\"363\":1}}],[\"事务机制可以开启事务\",{\"1\":{\"273\":1}}],[\"事务⽤来保证多条消息的发送\",{\"1\":{\"361\":1}}],[\"事务会自动取消\",{\"1\":{\"226\":1}}],[\"事务b紧接着更新了数据\",{\"1\":{\"217\":1}}],[\"事务a事先读取了数据\",{\"1\":{\"217\":1}}],[\"事务操作前后\",{\"1\":{\"75\":1}}],[\"事务的隔离级别\",{\"0\":{\"76\":1}}],[\"事务的四大特征\",{\"0\":{\"75\":1},\"1\":{\"75\":1}}],[\"事务的基本介绍\",{\"0\":{\"74\":1}}],[\"事务提交的两种方式\",{\"1\":{\"74\":1}}],[\"事务\",{\"0\":{\"73\":1},\"1\":{\"273\":1}}],[\"事务处理\",{\"1\":{\"12\":1,\"216\":1}}],[\"应对rambler的网站\",{\"1\":{\"156\":1}}],[\"应用名称\",{\"1\":{\"491\":1}}],[\"应用程序事件允许我们发送和接收特定事件\",{\"1\":{\"281\":1}}],[\"应用程序开发的状态管理模式\",{\"1\":{\"212\":1}}],[\"应用程序的工具\",{\"1\":{\"100\":1}}],[\"应用场景\",{\"0\":{\"124\":1,\"425\":1},\"1\":{\"419\":1}}],[\"应用向连接池申请连接时\",{\"1\":{\"21\":1}}],[\"应用向连接池申请连接\",{\"1\":{\"21\":1}}],[\"段\",{\"1\":{\"153\":1}}],[\"免费购买\",{\"1\":{\"151\":1}}],[\"购买隧道\",{\"0\":{\"151\":1}}],[\"该变量对其他线程而言是隔离的\",{\"1\":{\"394\":1}}],[\"该方法返回map中所有key值的列表\",{\"1\":{\"378\":1}}],[\"该方法在容器启动初始化过滤器时被调用\",{\"1\":{\"253\":1}}],[\"该临时节点也会被删除\",{\"1\":{\"279\":1}}],[\"该对象又不需要被回收了\",{\"1\":{\"258\":1}}],[\"该对象被回收的时候被调用\",{\"1\":{\"258\":1}}],[\"该阶段会把一些静态方法替换为指向数据内存的指针或句柄等\",{\"1\":{\"238\":1}}],[\"该失败的失败\",{\"1\":{\"226\":1}}],[\"该成功的成功\",{\"1\":{\"226\":1}}],[\"该如何操作\",{\"1\":{\"146\":1}}],[\"该表中码为\",{\"1\":{\"78\":1}}],[\"克隆binlog2sql\",{\"1\":{\"146\":1}}],[\"恢复时需要在binlog中找到两个位置\",{\"1\":{\"144\":1}}],[\"下创建一个\",{\"1\":{\"473\":1}}],[\"下面是threadpooltaskexecutor和threadpoolexecutor之间的主要区别\",{\"1\":{\"391\":1}}],[\"下面具体通过mysql\",{\"1\":{\"144\":1}}],[\"下页数据\",{\"1\":{\"337\":1}}],[\"下\",{\"1\":{\"304\":1}}],[\"下一次客户端发包的时候就会根据序列号去发送\",{\"1\":{\"282\":1}}],[\"下拉1\",{\"1\":{\"191\":4}}],[\"下载文件\",{\"1\":{\"468\":1}}],[\"下载apache\",{\"1\":{\"447\":1}}],[\"下载地址\",{\"1\":{\"447\":1,\"482\":1}}],[\"下载jenkins的war包\",{\"0\":{\"445\":1}}],[\"下载js库\",{\"1\":{\"200\":1}}],[\"下载安装源\",{\"1\":{\"308\":1}}],[\"下载安装\",{\"0\":{\"182\":1}}],[\"下载tar包\",{\"1\":{\"157\":1}}],[\"下载并解压安装包\",{\"1\":{\"157\":1}}],[\"下载并安装\",{\"0\":{\"459\":1},\"1\":{\"93\":1}}],[\"下载客户端\",{\"0\":{\"153\":1}}],[\"下载\",{\"1\":{\"101\":1,\"445\":1}}],[\"下载镜像\",{\"1\":{\"95\":1}}],[\"卸载jenkins残留文件\",{\"1\":{\"445\":1}}],[\"卸载\",{\"1\":{\"234\":1}}],[\"卸载命令\",{\"1\":{\"196\":1}}],[\"卸载指定版本号\",{\"1\":{\"184\":1}}],[\"卸载mysql\",{\"0\":{\"137\":1}}],[\"卸载docker\",{\"1\":{\"93\":1}}],[\"桶名称>以下是全量同步minio\",{\"1\":{\"468\":1}}],[\"桶名称>\",{\"1\":{\"468\":1}}],[\"桶名\",{\"1\":{\"133\":1}}],[\"秘钥\",{\"1\":{\"133\":1}}],[\"长度是否在给定的范围之内\",{\"1\":{\"384\":1}}],[\"长度检查\",{\"1\":{\"384\":1}}],[\"长度\",{\"1\":{\"282\":1}}],[\"长度最少8个字符\",{\"1\":{\"128\":1}}],[\"长度最少3个字符\",{\"1\":{\"128\":1}}],[\"长度的内容替换为\",{\"1\":{\"52\":1}}],[\"本地修改\",{\"1\":{\"468\":1}}],[\"本地修改文件\",{\"1\":{\"468\":1}}],[\"本地修改或删除\",{\"1\":{\"468\":1}}],[\"本地⽅法栈\",{\"1\":{\"269\":2}}],[\"本脚本保存5个历史版本\",{\"1\":{\"450\":1}}],[\"本次使用的是ssh连接当然也可以选择账户+密码\",{\"1\":{\"441\":1}}],[\"本文使用的是idea操作\",{\"1\":{\"426\":1}}],[\"本文只是抛砖引玉\",{\"1\":{\"125\":1}}],[\"本身是单线程机制\",{\"1\":{\"300\":1,\"414\":1}}],[\"本质上也是⼀种索引访问\",{\"1\":{\"19\":1}}],[\"功能包括\",{\"1\":{\"208\":1}}],[\"功能很强大\",{\"1\":{\"125\":1}}],[\"功能库\",{\"0\":{\"81\":1},\"1\":{\"81\":1}}],[\"图形界面操作\",{\"0\":{\"129\":1}}],[\"图形化界面操作es\",{\"1\":{\"310\":1}}],[\"图形化界面\",{\"1\":{\"125\":1}}],[\"图片文件的最大大小\",{\"1\":{\"133\":1}}],[\"图片中内容\",{\"1\":{\"83\":3}}],[\"图片路径\",{\"1\":{\"83\":2}}],[\"云存储不会变化\",{\"1\":{\"468\":1}}],[\"云原生\",{\"1\":{\"125\":1}}],[\"云服务部署springboot项目\",{\"1\":{\"114\":1}}],[\"云服务\",{\"0\":{\"114\":1}}],[\"支持restful\",{\"1\":{\"303\":1}}],[\"支持纠删码\",{\"1\":{\"125\":1}}],[\"支持一个对象文件可以是任意大小\",{\"1\":{\"125\":1}}],[\"支付宝\",{\"1\":{\"0\":1}}],[\"特别适用于基于spring的应用程序开发\",{\"1\":{\"391\":1}}],[\"特殊符号\",{\"1\":{\"359\":1}}],[\"特点是占有内存少\",{\"1\":{\"156\":1}}],[\"特点\",{\"0\":{\"125\":1},\"1\":{\"156\":1}}],[\"特有\",{\"1\":{\"30\":1}}],[\"无线电接收器就是监听器\",{\"1\":{\"415\":1}}],[\"无缝集成\",{\"1\":{\"391\":1}}],[\"无缝对接\",{\"1\":{\"124\":1}}],[\"无需配置\",{\"1\":{\"475\":1}}],[\"无需鉴权已放行\",{\"1\":{\"391\":1}}],[\"无需指定具体的内容\",{\"1\":{\"317\":1}}],[\"无需下载极速在线查看\",{\"1\":{\"178\":1}}],[\"无论是否抛出异常\",{\"1\":{\"258\":1}}],[\"无序关心请求的是具体内容和处理细节\",{\"1\":{\"425\":1}}],[\"无序\",{\"0\":{\"244\":1}}],[\"无序的\",{\"1\":{\"225\":1}}],[\"无用的字段增加网络消耗\",{\"1\":{\"223\":1}}],[\"无脑下一步\",{\"1\":{\"197\":1}}],[\"无法查检长度为0的字符串\",{\"1\":{\"384\":1}}],[\"无法存储这么多的数据\",{\"1\":{\"233\":1}}],[\"无法使用索引\",{\"1\":{\"221\":1}}],[\"无法重复获取\",{\"1\":{\"6\":1}}],[\"无法再次获取\",{\"1\":{\"6\":1}}],[\"却拥有着不错的性能\",{\"1\":{\"123\":1}}],[\"虽然轻量\",{\"1\":{\"123\":1}}],[\"杀死\",{\"1\":{\"118\":1}}],[\"杀死进程\",{\"1\":{\"116\":1}}],[\"作用\",{\"1\":{\"258\":1}}],[\"作者\",{\"1\":{\"117\":1}}],[\"作为异常处理的一部分\",{\"1\":{\"258\":1}}],[\"作为一款高性能存储\",{\"1\":{\"125\":1}}],[\"作为一张表\",{\"1\":{\"72\":1}}],[\"作为枚举查询条件\",{\"1\":{\"72\":1}}],[\"作为判断条件\",{\"1\":{\"72\":1}}],[\"作为条件判断\",{\"0\":{\"58\":1}}],[\"介绍一种\",{\"1\":{\"116\":1}}],[\"介绍页\",{\"0\":{\"0\":1}}],[\"服务注册地址\",{\"1\":{\"491\":1}}],[\"服务$\",{\"1\":{\"431\":3}}],[\"服务jar名称\",{\"1\":{\"431\":1}}],[\"服务端收到之后回复ack等于序列号加长度\",{\"1\":{\"282\":1}}],[\"服务\",{\"1\":{\"269\":1}}],[\"服务器下载zip命令\",{\"1\":{\"454\":1}}],[\"服务器使用jdk8\",{\"1\":{\"444\":1}}],[\"服务器远程地址\",{\"1\":{\"441\":2}}],[\"服务器收到之后回复syn+ack\",{\"1\":{\"282\":1}}],[\"服务器\",{\"1\":{\"156\":1}}],[\"服务器设置防火墙\",{\"1\":{\"116\":1}}],[\"服务器开放端口号\",{\"1\":{\"116\":1}}],[\"服务名称\",{\"1\":{\"104\":3}}],[\"缺点策略模式将造成产生很多策略类\",{\"1\":{\"416\":1}}],[\"缺点同上\",{\"1\":{\"241\":1}}],[\"缺点\",{\"1\":{\"241\":1,\"418\":1}}],[\"缺省情况下该作业的所有输出被重定向到nohup\",{\"1\":{\"116\":1}}],[\"缺陷\",{\"1\":{\"13\":2}}],[\"若没有可以无视\",{\"1\":{\"471\":1}}],[\"若部署时出现permission\",{\"1\":{\"431\":1}}],[\"若无法访问\",{\"1\":{\"428\":1}}],[\"若无请留空\",{\"1\":{\"153\":1}}],[\"若未创建队列\",{\"1\":{\"354\":1}}],[\"若未开启则需要开启编辑配置文件配置开启binlog\",{\"1\":{\"143\":1}}],[\"若用户想在线程池变为tidying时\",{\"1\":{\"297\":1,\"411\":1}}],[\"若误删整表\",{\"1\":{\"146\":1}}],[\"若不知偏移量也可直接全部反编译\",{\"1\":{\"146\":1}}],[\"若为空则添加环境变量\",{\"1\":{\"141\":1}}],[\"若安装失败需删除插件重新安装\",{\"1\":{\"110\":1,\"311\":1}}],[\"若发现拉取不到镜像\",{\"1\":{\"94\":1}}],[\"退出\",{\"1\":{\"109\":1}}],[\"退出容器\",{\"1\":{\"108\":1,\"111\":1,\"315\":1}}],[\"向主库中写数据\",{\"1\":{\"469\":1}}],[\"向多个对象中的一个提交一个请求\",{\"1\":{\"425\":1}}],[\"向防火墙规则中添加一个开放的端口\",{\"1\":{\"179\":1}}],[\"向外暴露两个端口\",{\"1\":{\"108\":1}}],[\"向上取整\",{\"1\":{\"79\":1}}],[\"版本\",{\"1\":{\"181\":1}}],[\"版本的工具\",{\"1\":{\"181\":1}}],[\"版本一致\",{\"1\":{\"108\":1}}],[\"版本号常量\",{\"1\":{\"381\":1}}],[\"版本号兼容过滤\",{\"1\":{\"375\":1}}],[\"版本号\",{\"1\":{\"95\":2,\"184\":1,\"381\":1,\"437\":1}}],[\"切入点\",{\"1\":{\"376\":1}}],[\"切面类\",{\"1\":{\"376\":1}}],[\"切面\",{\"1\":{\"280\":1,\"376\":1}}],[\"切换目录\",{\"1\":{\"484\":1,\"486\":1,\"487\":1,\"489\":1}}],[\"切换到安装路径\",{\"1\":{\"308\":1}}],[\"切换到mysql数据库\",{\"1\":{\"77\":1}}],[\"切换指定的node版本\",{\"1\":{\"184\":1}}],[\"切换node版本\",{\"1\":{\"184\":1}}],[\"切记开启端口号\",{\"1\":{\"106\":1}}],[\"安全链接可选的加密协议\",{\"1\":{\"464\":2}}],[\"安全组\",{\"1\":{\"98\":1}}],[\"安装的命令如下\",{\"1\":{\"493\":1}}],[\"安装完该插件之后\",{\"1\":{\"473\":1}}],[\"安装完毕后退出容器重启es\",{\"1\":{\"311\":1}}],[\"安装包之前先下载一些插件\",{\"1\":{\"473\":1}}],[\"安装包名称\",{\"1\":{\"472\":1}}],[\"安装包地址\",{\"1\":{\"181\":1}}],[\"安装前先检查下\",{\"1\":{\"472\":1}}],[\"安装插件\",{\"0\":{\"453\":1},\"1\":{\"453\":1}}],[\"安装git\",{\"0\":{\"446\":1}}],[\"安装jdk\",{\"0\":{\"444\":1}}],[\"安装jdk1\",{\"0\":{\"115\":1}}],[\"安装配置\",{\"0\":{\"443\":1}}],[\"安装依赖\",{\"1\":{\"441\":1}}],[\"安装依赖包\",{\"1\":{\"157\":1}}],[\"安装docker\",{\"0\":{\"308\":1}}],[\"安装vue\",{\"0\":{\"196\":1,\"199\":1}}],[\"安装vue开发者工具\",{\"1\":{\"187\":1}}],[\"安装指定版本node\",{\"1\":{\"184\":1}}],[\"安装node\",{\"1\":{\"184\":1}}],[\"安装nginx\",{\"1\":{\"157\":1}}],[\"安装命令\",{\"0\":{\"171\":1}}],[\"安装位置\",{\"1\":{\"146\":1,\"182\":1}}],[\"安装工具\",{\"1\":{\"146\":1}}],[\"安装路径\",{\"1\":{\"139\":1}}],[\"安装maven\",{\"0\":{\"447\":1}}],[\"安装mysql\",{\"0\":{\"138\":1,\"470\":1,\"473\":1},\"1\":{\"471\":1}}],[\"安装minio\",{\"0\":{\"126\":1}}],[\"安装成功后直接访问地址\",{\"1\":{\"129\":1}}],[\"安装redis\",{\"0\":{\"119\":1,\"493\":1}}],[\"安装ingest\",{\"0\":{\"111\":1},\"1\":{\"111\":1}}],[\"安装宝塔面板\",{\"1\":{\"106\":1}}],[\"宝塔面板\",{\"1\":{\"106\":1}}],[\"宝塔面板快速部署网站\",{\"0\":{\"106\":1}}],[\"依次执行以下命令安装这些\",{\"1\":{\"473\":1}}],[\"依次出现的关键词的顺序\",{\"1\":{\"22\":1}}],[\"依赖的对象被称为观察者\",{\"1\":{\"415\":1}}],[\"依赖的镜像\",{\"1\":{\"104\":3}}],[\"依赖关系\",{\"1\":{\"391\":1}}],[\"依赖jar\",{\"0\":{\"369\":1},\"1\":{\"352\":1}}],[\"依赖注入\",{\"1\":{\"280\":1}}],[\"搭建es\",{\"0\":{\"307\":1}}],[\"搭建squid的步骤如下\",{\"1\":{\"170\":1}}],[\"搭建mysql\",{\"0\":{\"105\":1}}],[\"搭建mysql的集群\",{\"1\":{\"25\":1}}],[\"搭建tomcat\",{\"0\":{\"104\":1}}],[\"加入节点信息\",{\"1\":{\"486\":1}}],[\"加入一个\",{\"1\":{\"231\":1}}],[\"加密算法\",{\"1\":{\"464\":2}}],[\"加锁和解锁操作是非常耗费时间的\",{\"1\":{\"422\":1}}],[\"加锁预先设置下热点数据缓存雪崩问题缓存雪崩个人理解\",{\"1\":{\"231\":1}}],[\"加事务\",{\"1\":{\"361\":1}}],[\"加了\",{\"1\":{\"243\":1}}],[\"加载指的是把class字节码文件通过类加载器装载入内存中\",{\"1\":{\"235\":1}}],[\"加载\",{\"0\":{\"235\":1},\"1\":{\"234\":1}}],[\"加载yaml文件\",{\"1\":{\"102\":1}}],[\"加上一个\",{\"1\":{\"231\":1}}],[\"加上\",{\"1\":{\"51\":1}}],[\"软连接\",{\"1\":{\"101\":1}}],[\"软件相关列表\",{\"0\":{\"172\":1}}],[\"软件默认的地址\",{\"1\":{\"95\":1}}],[\"软件本身端口\",{\"1\":{\"95\":1}}],[\"软件\",{\"1\":{\"92\":1}}],[\"软件集合包\",{\"1\":{\"92\":1}}],[\"软件实现\",{\"1\":{\"23\":1}}],[\"好用\",{\"1\":{\"100\":1}}],[\"好处\",{\"1\":{\"13\":2,\"422\":2}}],[\"简介\",{\"1\":{\"212\":1}}],[\"简写形式\",{\"1\":{\"192\":1,\"193\":1}}],[\"简单易用\",{\"1\":{\"279\":1}}],[\"简单来说\",{\"1\":{\"235\":1}}],[\"简单查询\",{\"1\":{\"223\":1}}],[\"简单\",{\"1\":{\"100\":1}}],[\"简化操作\",{\"1\":{\"14\":1}}],[\"连接任意客户端\",{\"1\":{\"495\":1}}],[\"连接\",{\"1\":{\"493\":1}}],[\"连接服务器\",{\"1\":{\"353\":1}}],[\"连接超时时间\",{\"1\":{\"323\":2}}],[\"连接时\",{\"1\":{\"223\":1}}],[\"连接的条件\",{\"1\":{\"223\":1}}],[\"连接尝试失败\",{\"1\":{\"179\":1}}],[\"连接测试\",{\"1\":{\"98\":1}}],[\"连接池中的minidle数量以内的连接\",{\"1\":{\"21\":1}}],[\"连接池回收连接的时候会判断该连接是否还可用\",{\"1\":{\"21\":1}}],[\"连接池会判断这条连接是否是可用的\",{\"1\":{\"21\":1}}],[\"连接池将会判断连接是否处于空闲状态\",{\"1\":{\"21\":1}}],[\"访问主库进行主从复制的用户名对应的密码d\",{\"1\":{\"479\":1}}],[\"访问主库进行主从复制的用户名\",{\"1\":{\"479\":1}}],[\"访问\",{\"1\":{\"239\":1}}],[\"访问路径成功即创建成功\",{\"1\":{\"200\":1}}],[\"访问的url\",{\"1\":{\"133\":1}}],[\"访问minio服务器\",{\"1\":{\"125\":1}}],[\"访问测试\",{\"1\":{\"97\":1,\"121\":1}}],[\"访问内置监控页面的路径\",{\"1\":{\"21\":1}}],[\"固定访问某个地址\",{\"1\":{\"163\":1}}],[\"固定\",{\"1\":{\"95\":1}}],[\"示例\",{\"1\":{\"95\":1}}],[\"建库建表等3\",{\"1\":{\"469\":1}}],[\"建议使用在stirng\",{\"1\":{\"384\":1}}],[\"建议是一些无关紧要的业务采用此策略\",{\"1\":{\"290\":1,\"404\":1}}],[\"建议redis配置完成后\",{\"1\":{\"227\":1}}],[\"建议根据运行\",{\"1\":{\"94\":1}}],[\"建一个联合索引\",{\"1\":{\"19\":1}}],[\"国内使用nginx的网站有很多\",{\"1\":{\"156\":1}}],[\"国内各大云服务商均提供了\",{\"1\":{\"94\":1}}],[\"国内从\",{\"1\":{\"94\":1}}],[\"请替换这里的路径\",{\"1\":{\"476\":1}}],[\"请自行配置nginx\",{\"1\":{\"454\":1}}],[\"请到\",{\"1\":{\"440\":1}}],[\"请确保远端环境中有\",{\"1\":{\"440\":1}}],[\"请查看是否开启端口号\",{\"1\":{\"428\":1}}],[\"请假天数\",{\"1\":{\"387\":1}}],[\"请假天数>3\",{\"1\":{\"387\":1}}],[\"请传递接口的版本号\",{\"1\":{\"381\":1}}],[\"请检查防火墙\",{\"1\":{\"98\":1}}],[\"请检查防火墙或安全组\",{\"1\":{\"97\":1}}],[\"请切换到另一个加速器地址\",{\"1\":{\"94\":1}}],[\"请求会自动进行传递直至有节点对象进行处理\",{\"1\":{\"425\":1}}],[\"请求先被\",{\"1\":{\"280\":1}}],[\"请求全部转到数据库\",{\"1\":{\"231\":1}}],[\"请求日志记录等场景非常有用\",{\"1\":{\"8\":1}}],[\"请求参数校验\",{\"1\":{\"8\":1}}],[\"请求参数修改\",{\"1\":{\"8\":1}}],[\"请求方法修改\",{\"1\":{\"8\":1}}],[\"请求url修改\",{\"1\":{\"8\":1}}],[\"请求头修改\",{\"1\":{\"8\":1}}],[\"请求的body内容是通过输入流\",{\"1\":{\"6\":1}}],[\"请求体丢失\",{\"1\":{\"5\":1,\"10\":1}}],[\"官网nginx是由俄罗斯人研发的\",{\"1\":{\"156\":1}}],[\"官网\",{\"1\":{\"146\":1,\"156\":1,\"170\":1,\"492\":1}}],[\"官方文档\",{\"1\":{\"382\":1}}],[\"官方提供的中国\",{\"1\":{\"94\":1}}],[\"官方和国\",{\"1\":{\"94\":1}}],[\"官⽅⽂档\",{\"1\":{\"28\":1}}],[\"此教学为jenkins新版本\",{\"1\":{\"443\":1}}],[\"此拒绝策略\",{\"1\":{\"291\":1,\"405\":1}}],[\"此时发现了两个\",{\"1\":{\"418\":1}}],[\"此时spring会查找所有实现了接口的bean\",{\"1\":{\"418\":1}}],[\"此时maste宕机了\",{\"1\":{\"279\":1}}],[\"此时\",{\"1\":{\"233\":1}}],[\"此时请求2进行查询到了旧数据并写入了redis\",{\"1\":{\"232\":1}}],[\"此时请求2查询到并使用了redis中的旧数据\",{\"1\":{\"232\":1}}],[\"此时他已经知道这个事情不简单了\",{\"1\":{\"223\":1}}],[\"此时旧的binlog文件不会再有写入\",{\"1\":{\"144\":1}}],[\"此时可以配置镜像加速器\",{\"1\":{\"94\":1}}],[\"此处是设定了文件的最大大小\",{\"1\":{\"133\":1}}],[\"此方法解析一个路径的二维码图片\",{\"1\":{\"83\":1}}],[\"基础镜像\",{\"1\":{\"439\":1}}],[\"基础查询\",{\"0\":{\"48\":1},\"1\":{\"48\":2}}],[\"基本没有影响1\",{\"1\":{\"469\":1}}],[\"基本演示\",{\"0\":{\"385\":1}}],[\"基本上不⽤\",{\"1\":{\"356\":1}}],[\"基本上都是直接调用底层hashmap\",{\"1\":{\"243\":1}}],[\"基本概念\",{\"0\":{\"304\":1}}],[\"基本类型作为参数被传递时肯定是值传递\",{\"1\":{\"259\":1}}],[\"基本类型和字符型\",{\"1\":{\"239\":1}}],[\"基本操作\",{\"1\":{\"93\":1}}],[\"基于方式一封装成一个shell文件\",{\"1\":{\"431\":1}}],[\"基于继承\",{\"1\":{\"419\":1}}],[\"基于接口\",{\"1\":{\"419\":1}}],[\"基于注解+拦截器\",{\"1\":{\"378\":1,\"379\":1}}],[\"基于注解+拦截器实现\",{\"0\":{\"377\":1}}],[\"基于aop的环绕通知\",{\"1\":{\"376\":1}}],[\"基于aop环绕通知\",{\"0\":{\"376\":1}}],[\"基于apache\",{\"1\":{\"123\":1}}],[\"基于模板引擎实现java源代码的⽣成\",{\"0\":{\"374\":1}}],[\"基于exchange实现的消息可以被发送到多个队列中\",{\"1\":{\"356\":1}}],[\"基于java反射实现的\",{\"1\":{\"254\":1}}],[\"基于\",{\"1\":{\"244\":1,\"300\":1,\"414\":1}}],[\"基于组件的路由配置\",{\"1\":{\"208\":1}}],[\"基于发起请求的客户端的ip地址不同\",{\"1\":{\"160\":1}}],[\"基于k8s的编排\",{\"1\":{\"125\":1}}],[\"基于docker\",{\"1\":{\"104\":1,\"105\":1}}],[\"虚拟机栈为虚拟机执行\",{\"1\":{\"269\":1}}],[\"虚拟机栈\",{\"1\":{\"269\":3}}],[\"虚拟机所使用的磁盘\",{\"1\":{\"92\":1}}],[\"虚拟\",{\"1\":{\"92\":1}}],[\"虚读\",{\"1\":{\"76\":1}}],[\"停止主节点\",{\"1\":{\"499\":1}}],[\"停止redis服务\",{\"1\":{\"496\":1}}],[\"停止服务\",{\"1\":{\"431\":1}}],[\"停止stop\",{\"1\":{\"177\":1}}],[\"停止容器\",{\"1\":{\"95\":1}}],[\"停止\",{\"0\":{\"177\":1},\"1\":{\"93\":1}}],[\"停止等\",{\"1\":{\"92\":1}}],[\"停止mysql服务\",{\"1\":{\"77\":1}}],[\"镜像集群模式\",{\"1\":{\"365\":2}}],[\"镜像模式\",{\"1\":{\"363\":1}}],[\"镜像启动后暴露的端口\",{\"1\":{\"117\":1}}],[\"镜像名\",{\"1\":{\"95\":1}}],[\"镜像名称\",{\"1\":{\"95\":2}}],[\"镜像加速服务\",{\"1\":{\"94\":1}}],[\"镜像\",{\"1\":{\"92\":1}}],[\"生成的公钥文件\",{\"1\":{\"435\":1}}],[\"生成的私钥文件id\",{\"1\":{\"435\":1}}],[\"生成了三个文件\",{\"1\":{\"435\":1}}],[\"生成\",{\"1\":{\"389\":2}}],[\"生成死信\",{\"1\":{\"360\":1}}],[\"生成密码文件\",{\"0\":{\"173\":1}}],[\"生产者才会返回\",{\"1\":{\"286\":1,\"400\":1}}],[\"生产者线程调用\",{\"1\":{\"286\":1,\"400\":1}}],[\"生产者消息丢失\",{\"0\":{\"273\":1}}],[\"生产环境\",{\"1\":{\"91\":1}}],[\"生命周期\",{\"1\":{\"215\":8}}],[\"生日\",{\"1\":{\"78\":1}}],[\"更易于使用和管理\",{\"1\":{\"391\":1}}],[\"更推荐使用\",{\"1\":{\"242\":1}}],[\"更糟糕的是我们没有把这次查询的\",{\"1\":{\"231\":1}}],[\"更安全\",{\"1\":{\"227\":1}}],[\"更改state中定义的数据\",{\"1\":{\"213\":1}}],[\"更快的给用户响应\",{\"1\":{\"164\":1}}],[\"更快速的启动时间\",{\"1\":{\"91\":1}}],[\"更高效的利用系统资源\",{\"1\":{\"91\":1}}],[\"更新之后\",{\"1\":{\"215\":1}}],[\"更新之前\",{\"1\":{\"215\":1}}],[\"更新\",{\"1\":{\"79\":1}}],[\"性能差异\",{\"1\":{\"419\":1}}],[\"性能消耗较小\",{\"1\":{\"279\":1}}],[\"性能消耗大\",{\"1\":{\"223\":1}}],[\"性能角度考虑\",{\"1\":{\"279\":1}}],[\"性能比较低\",{\"1\":{\"227\":1}}],[\"性能提升\",{\"1\":{\"223\":1}}],[\"性能损耗大\",{\"1\":{\"223\":1}}],[\"性能低\",{\"1\":{\"217\":1}}],[\"性能远超apahce\",{\"1\":{\"166\":1}}],[\"性能是其最重要的考量\",{\"1\":{\"156\":1}}],[\"性能更加卓越\",{\"1\":{\"90\":1}}],[\"性别\",{\"1\":{\"67\":1,\"78\":1}}],[\"相对于jdk动态代理而言\",{\"1\":{\"419\":1}}],[\"相对比来说redis比zookeeper性能要好\",{\"1\":{\"279\":1}}],[\"相对rdb较慢的\",{\"1\":{\"227\":1}}],[\"相同的情况下再根据equals\",{\"1\":{\"259\":1}}],[\"相当于让请求流动了起来\",{\"1\":{\"425\":1}}],[\"相当于名称\",{\"1\":{\"344\":1,\"345\":1,\"347\":1,\"348\":1}}],[\"相当于查看\",{\"1\":{\"319\":1}}],[\"相当于mysql\",{\"1\":{\"304\":2}}],[\"相当于插队\",{\"1\":{\"285\":1,\"399\":1}}],[\"相当于java中的for循环\",{\"1\":{\"191\":1}}],[\"相当于java中的if语句\",{\"1\":{\"190\":1}}],[\"相当于引入外部的配置文件\",{\"1\":{\"157\":1}}],[\"相当于\",{\"1\":{\"104\":6}}],[\"相比传统虚拟机\",{\"1\":{\"90\":1}}],[\"相互独立的\",{\"1\":{\"76\":1}}],[\"相互独立\",{\"1\":{\"75\":1}}],[\"危险容器\",{\"1\":{\"85\":1}}],[\"运营商不是联通\",{\"1\":{\"339\":1}}],[\"运⾏vue项⽬\",{\"1\":{\"200\":1}}],[\"运行成功\",{\"0\":{\"207\":1}}],[\"运行命令\",{\"1\":{\"121\":1}}],[\"运行\",{\"1\":{\"108\":1}}],[\"运行容器\",{\"1\":{\"95\":1,\"109\":1}}],[\"运维\",{\"0\":{\"167\":1},\"1\":{\"85\":1},\"2\":{\"168\":1}}],[\"运算符\",{\"1\":{\"49\":1}}],[\"快速跳转\",{\"1\":{\"85\":1}}],[\"面试\",{\"0\":{\"85\":1},\"2\":{\"86\":1}}],[\"发起下一页请求\",{\"1\":{\"337\":1}}],[\"发布者不知道订阅者的存在\",{\"1\":{\"416\":1}}],[\"发布订阅模式ps\",{\"1\":{\"416\":1}}],[\"发布订阅消息\",{\"1\":{\"356\":1}}],[\"发布事件\",{\"1\":{\"281\":1}}],[\"发布锁释放的消息\",{\"1\":{\"278\":1}}],[\"发送端如何保证消息不丢失\",{\"1\":{\"363\":1}}],[\"发送\",{\"1\":{\"357\":1}}],[\"发送消息到了交换器\",{\"1\":{\"366\":1}}],[\"发送消息到交换器\",{\"1\":{\"358\":1}}],[\"发送消息直接到队列\",{\"1\":{\"366\":1}}],[\"发送消息\",{\"1\":{\"352\":1,\"353\":1,\"357\":1,\"360\":3,\"361\":1}}],[\"发送和消费消息的软件\",{\"1\":{\"351\":1}}],[\"发送之后服务端收到后会立即断开连接\",{\"1\":{\"282\":1}}],[\"发送文件\",{\"1\":{\"84\":1}}],[\"发送普通文件\",{\"1\":{\"84\":1}}],[\"发现还是比较简单的\",{\"1\":{\"432\":1}}],[\"发现sql的索引都没有加\",{\"1\":{\"223\":1}}],[\"发现小寇\",{\"1\":{\"223\":1}}],[\"发现出问题了\",{\"1\":{\"74\":1}}],[\"发现执行没有问题\",{\"1\":{\"74\":1}}],[\"发现原来sharding\",{\"1\":{\"28\":1}}],[\"邮件接收者邮箱\",{\"1\":{\"84\":1}}],[\"邮件内容\",{\"1\":{\"84\":1}}],[\"邮件发送人邮箱\",{\"1\":{\"84\":1}}],[\"邮件题目\",{\"1\":{\"84\":1}}],[\"邮箱配置\",{\"1\":{\"84\":1}}],[\"邮箱\",{\"1\":{\"78\":1,\"84\":1}}],[\"个二维码\",{\"1\":{\"83\":2}}],[\"个内容\",{\"1\":{\"52\":1}}],[\"我的一些接口需求鉴权\",{\"1\":{\"396\":1}}],[\"我的业务代码还没执行完就自动给我解锁了\",{\"1\":{\"278\":1}}],[\"我爱北京天安门\",{\"1\":{\"261\":1}}],[\"我是controller\",{\"1\":{\"252\":1}}],[\"我们平时处理一些事务\",{\"1\":{\"425\":1}}],[\"我们需要⼀次性发多条消息\",{\"1\":{\"361\":1}}],[\"我们需要完成配置\",{\"1\":{\"27\":1}}],[\"我们输入字符的大概\",{\"1\":{\"333\":1}}],[\"我们可以通过添加\",{\"1\":{\"473\":1}}],[\"我们可以通过下面命令来卸载安装包\",{\"1\":{\"472\":1}}],[\"我们可以发现他具有两种角色\",{\"1\":{\"425\":1}}],[\"我们可以根据需要处理这些事件\",{\"1\":{\"281\":1}}],[\"我们可以在一个接口上使用\",{\"1\":{\"262\":1}}],[\"我们一般来使用声明时事物\",{\"1\":{\"280\":1}}],[\"我们在设置缓存的\",{\"1\":{\"231\":1}}],[\"我们就要把student作为主表\",{\"1\":{\"223\":1}}],[\"我们通过sql执行计划explain可以看到select\",{\"1\":{\"223\":1}}],[\"我在这里设定了\",{\"1\":{\"133\":1}}],[\"我这是给出了一个默认桶名\",{\"1\":{\"133\":1}}],[\"我使用这种方式就可以识别微信的二维码了\",{\"1\":{\"83\":1}}],[\"解耦\",{\"1\":{\"417\":1}}],[\"解除阻塞等待状态\",{\"1\":{\"278\":1}}],[\"解析阶段是将符号引用替换为直接引用\",{\"1\":{\"238\":1}}],[\"解析\",{\"0\":{\"238\":1},\"1\":{\"234\":1}}],[\"解析二维码\",{\"1\":{\"83\":1}}],[\"解压完成之后可以切换到\",{\"1\":{\"473\":1}}],[\"解压安装包到该目录下\",{\"1\":{\"473\":1}}],[\"解压缩\",{\"1\":{\"441\":1}}],[\"解压后\",{\"1\":{\"153\":1}}],[\"解压\",{\"1\":{\"110\":1}}],[\"解码\",{\"1\":{\"83\":3}}],[\"解决方法传参\",{\"1\":{\"396\":1}}],[\"解决方案一\",{\"1\":{\"418\":1}}],[\"解决方案\",{\"1\":{\"55\":1,\"479\":1}}],[\"解决方案如下\",{\"1\":{\"3\":1}}],[\"解决海量数据的快速搜索\",{\"1\":{\"302\":1}}],[\"解决了标记\",{\"1\":{\"271\":1}}],[\"解决了单点故障的问题\",{\"1\":{\"233\":1}}],[\"解决冲突\",{\"1\":{\"247\":1}}],[\"解决完select\",{\"1\":{\"223\":1}}],[\"解决开发中遇到问题解决三部曲\",{\"1\":{\"22\":1}}],[\"解决getinputstream获取流\",{\"1\":{\"10\":1}}],[\"解决\",{\"0\":{\"7\":1},\"1\":{\"22\":1,\"25\":1,\"388\":1}}],[\"解决这个问题的常见方法是通过httpservletrequestwrapper类来包装请求对象\",{\"1\":{\"6\":1}}],[\"qa\",{\"1\":{\"472\":1}}],[\"qa|grep\",{\"1\":{\"471\":2}}],[\"qq\",{\"1\":{\"394\":1}}],[\"qos\",{\"1\":{\"389\":13}}],[\"ql\",{\"1\":{\"172\":1,\"445\":1}}],[\"q\",{\"1\":{\"116\":1}}],[\"qiniu\",{\"1\":{\"94\":1}}],[\"qrcodeutils\",{\"1\":{\"83\":1}}],[\"qrcodemultireader\",{\"1\":{\"83\":2}}],[\"qrcode\",{\"1\":{\"83\":1}}],[\"qualifier\",{\"1\":{\"418\":2}}],[\"queuebuilder\",{\"1\":{\"360\":1}}],[\"queuedeclare\",{\"1\":{\"353\":1}}],[\"queuelistenerworktwo\",{\"1\":{\"355\":1}}],[\"queuelistenerwork\",{\"1\":{\"355\":3}}],[\"queuelistenertwo\",{\"1\":{\"354\":2}}],[\"queuelistener\",{\"1\":{\"352\":2}}],[\"queues\",{\"1\":{\"352\":1,\"354\":1,\"355\":2,\"360\":1,\"362\":1}}],[\"queue\",{\"1\":{\"351\":1,\"352\":2,\"353\":3,\"355\":2,\"357\":4,\"360\":3,\"362\":1}}],[\"querybuilders\",{\"1\":{\"327\":1,\"328\":1,\"329\":1,\"330\":1,\"331\":1,\"332\":1,\"333\":1,\"334\":1,\"335\":1,\"336\":1,\"337\":1,\"338\":1,\"339\":5,\"340\":2,\"341\":1,\"347\":1,\"348\":1}}],[\"query的取参数\",{\"1\":{\"211\":1}}],[\"query\",{\"0\":{\"338\":1},\"1\":{\"30\":2,\"157\":1,\"210\":1,\"211\":1,\"325\":1,\"327\":1,\"328\":1,\"329\":1,\"330\":1,\"331\":1,\"332\":1,\"333\":1,\"334\":1,\"335\":1,\"336\":1,\"337\":1,\"339\":1,\"340\":1,\"341\":1,\"347\":2,\"348\":2,\"349\":1}}],[\"quit\",{\"1\":{\"157\":1}}],[\"quickstart\",{\"1\":{\"434\":1}}],[\"quick\\u0002\",{\"1\":{\"28\":1}}],[\"quick\",{\"1\":{\"28\":1}}],[\"zcf\",{\"1\":{\"441\":1}}],[\"zxvf\",{\"1\":{\"481\":1,\"482\":1,\"493\":1}}],[\"zxf\",{\"1\":{\"441\":1}}],[\"zxht\",{\"1\":{\"439\":1,\"467\":1}}],[\"zxing\",{\"1\":{\"83\":4}}],[\"z\",{\"1\":{\"430\":1,\"431\":1,\"461\":1}}],[\"zh\",{\"1\":{\"489\":1}}],[\"zhihu\",{\"1\":{\"394\":1}}],[\"zhuanlan\",{\"1\":{\"394\":1}}],[\"zhangsan\",{\"1\":{\"39\":1,\"74\":2,\"77\":1}}],[\"zz\",{\"1\":{\"389\":1}}],[\"zzjava\",{\"1\":{\"105\":2}}],[\"zookeeper天生设计定位就是分布式协调\",{\"1\":{\"279\":1}}],[\"zookeeper就不一样\",{\"1\":{\"279\":1}}],[\"zookeeper可靠性比redis更好\",{\"1\":{\"279\":1}}],[\"zookeeper使用会话有效期方式解决死锁现象\",{\"1\":{\"279\":1}}],[\"zookeeper是分布式协调工具\",{\"1\":{\"279\":1}}],[\"zookeeper是master节点加锁后\",{\"1\":{\"279\":1}}],[\"zookeeper\",{\"1\":{\"279\":1}}],[\"zone=public\",{\"1\":{\"116\":1,\"141\":1,\"157\":1,\"177\":1,\"179\":1,\"445\":1,\"458\":2,\"475\":2,\"495\":4,\"497\":2}}],[\"zset\",{\"1\":{\"225\":2}}],[\"zlib\",{\"1\":{\"157\":2}}],[\"zip\",{\"1\":{\"110\":1,\"311\":1,\"454\":6}}],[\"行为一致\",{\"1\":{\"286\":1,\"400\":1}}],[\"行为\",{\"1\":{\"79\":1}}],[\"限制\",{\"1\":{\"79\":1}}],[\"限度\",{\"1\":{\"79\":1}}],[\"参考文档\",{\"1\":{\"170\":1,\"489\":1}}],[\"参考\",{\"1\":{\"79\":1}}],[\"参数错误\",{\"1\":{\"431\":1,\"432\":1}}],[\"参数有误\",{\"1\":{\"385\":1}}],[\"参数校验\",{\"0\":{\"378\":1}}],[\"参数校验的几种方式\",{\"0\":{\"375\":1}}],[\"参数为空\",{\"1\":{\"376\":1}}],[\"参数为发送的类型\",{\"1\":{\"352\":1}}],[\"参数\",{\"1\":{\"376\":1}}],[\"参数使用逗号隔开\",{\"1\":{\"117\":1}}],[\"参数说明a\",{\"1\":{\"479\":1}}],[\"参数说明\",{\"1\":{\"95\":1,\"352\":1,\"353\":1,\"357\":1}}],[\"参数列表\",{\"1\":{\"51\":1,\"52\":1}}],[\"参数变量\",{\"1\":{\"18\":1}}],[\"参数类型为返回类型\",{\"1\":{\"354\":1,\"355\":2}}],[\"参数类型\",{\"1\":{\"18\":1}}],[\"参数类型有三种\",{\"1\":{\"18\":1}}],[\"参数名\",{\"1\":{\"17\":1,\"18\":1,\"261\":1}}],[\"检出\",{\"1\":{\"440\":1,\"441\":1}}],[\"检索指定范围的行\",{\"1\":{\"223\":1}}],[\"检查是否安装过mysql\",{\"0\":{\"472\":1},\"1\":{\"472\":1}}],[\"检查数字是否介于min和max之间\",{\"1\":{\"384\":1}}],[\"检查约束元素是否为null或者是empty\",{\"1\":{\"384\":1}}],[\"检查约束字符串是不是null还有被trim的长度是否大于0\",{\"1\":{\"384\":1}}],[\"检查\",{\"1\":{\"79\":1}}],[\"检测需要关闭的空闲连接\",{\"1\":{\"21\":1}}],[\"间隔\",{\"1\":{\"79\":1}}],[\"天然支持集群\",{\"1\":{\"306\":1}}],[\"天\",{\"1\":{\"79\":1}}],[\"天后的日期\",{\"1\":{\"51\":1}}],[\"右下角\",{\"1\":{\"348\":1}}],[\"右填充\",{\"1\":{\"79\":1}}],[\"右外连接\",{\"0\":{\"71\":1},\"1\":{\"13\":1}}],[\"左上角\",{\"1\":{\"348\":1}}],[\"左填充\",{\"1\":{\"79\":1}}],[\"左外连接\",{\"0\":{\"70\":1},\"1\":{\"13\":1}}],[\"上述查询master状态中展示的有\",{\"1\":{\"479\":2}}],[\"上传文件到远端服务器\",{\"1\":{\"441\":1}}],[\"上传制品\",{\"1\":{\"441\":1}}],[\"上海\",{\"1\":{\"325\":1,\"327\":1,\"328\":1,\"329\":1,\"330\":1}}],[\"上多次使用同一个注解\",{\"1\":{\"267\":1}}],[\"上图是动态资源的请求工程\",{\"1\":{\"164\":1}}],[\"上\",{\"1\":{\"159\":1}}],[\"上面在主库创建的\",{\"1\":{\"479\":1}}],[\"上面的\",{\"1\":{\"233\":1}}],[\"上面已经准备了两个tomcat\",{\"1\":{\"159\":1}}],[\"上面\",{\"1\":{\"79\":1,\"164\":1,\"306\":1}}],[\"上架时间\",{\"1\":{\"78\":1}}],[\"降低耦合度\",{\"1\":{\"366\":1}}],[\"降低\",{\"1\":{\"79\":1}}],[\"降序\",{\"1\":{\"54\":1,\"79\":1}}],[\"拼接字符串\",{\"1\":{\"79\":1}}],[\"具体处理者对请求进行处理\",{\"1\":{\"425\":1}}],[\"具体实现\",{\"1\":{\"396\":1}}],[\"具体的某个异常类型处理\",{\"1\":{\"385\":1}}],[\"具体策略\",{\"1\":{\"230\":1}}],[\"具体到java\",{\"1\":{\"6\":1}}],[\"具有\",{\"1\":{\"79\":1}}],[\"平安\",{\"1\":{\"339\":1}}],[\"平时操作的就是容器\",{\"1\":{\"92\":1}}],[\"平时不会出现\",{\"1\":{\"19\":1}}],[\"平均的分配给每一台服务器\",{\"1\":{\"160\":1}}],[\"平均\",{\"1\":{\"79\":1}}],[\"计数\",{\"1\":{\"79\":1}}],[\"计算近似值的\",{\"1\":{\"225\":1}}],[\"计算平均值\",{\"1\":{\"55\":1}}],[\"计算和\",{\"1\":{\"55\":1}}],[\"计算最小值\",{\"1\":{\"55\":1}}],[\"计算最大值\",{\"1\":{\"55\":1}}],[\"计算个数\",{\"1\":{\"55\":1}}],[\"计算date\",{\"1\":{\"51\":1}}],[\"计算结果都为null\",{\"1\":{\"48\":1}}],[\"计算列\",{\"1\":{\"48\":1}}],[\"计算记录条数时候\",{\"1\":{\"26\":1}}],[\"选择spring+docker模板变量配置信息\",{\"1\":{\"437\":1}}],[\"选择使用哪种代理方式取决于具体的需求和场景\",{\"1\":{\"419\":1}}],[\"选择elasticsearch\",{\"1\":{\"302\":1}}],[\"选择vue版本\",{\"0\":{\"204\":1}}],[\"选择vue的版本\",{\"1\":{\"200\":1}}],[\"选择模块\",{\"0\":{\"203\":1}}],[\"选择需要的\",{\"1\":{\"200\":1}}],[\"选择⾃定义选项\",{\"1\":{\"200\":1}}],[\"选择add\",{\"1\":{\"197\":1}}],[\"选择产品\",{\"1\":{\"151\":1}}],[\"选择\",{\"0\":{\"205\":1},\"1\":{\"79\":1}}],[\"选择不包含非空的列进行计算\",{\"1\":{\"55\":1}}],[\"删\",{\"1\":{\"79\":1}}],[\"删除dump\",{\"1\":{\"496\":1}}],[\"删除dist文件\",{\"1\":{\"432\":2}}],[\"删除相应数据\",{\"1\":{\"479\":1}}],[\"删除mariadb则不会出现当前问题\",{\"1\":{\"473\":1}}],[\"删除mariadb\",{\"0\":{\"471\":1}}],[\"删除文件\",{\"1\":{\"468\":1}}],[\"删除文档\",{\"1\":{\"321\":1}}],[\"删除集群语法\",{\"1\":{\"467\":1}}],[\"删除压缩文件\",{\"1\":{\"441\":1}}],[\"删除之前部署文件\",{\"1\":{\"432\":1}}],[\"删除之前部署的文件目录\",{\"1\":{\"432\":1}}],[\"删除元素的时候\",{\"1\":{\"241\":1}}],[\"删除出现的两个文件\",{\"1\":{\"196\":1}}],[\"删除上面一致的\",{\"1\":{\"175\":1}}],[\"删除镜像\",{\"1\":{\"95\":1}}],[\"删除容器\",{\"1\":{\"95\":1}}],[\"删除所有docker开头的文件\",{\"1\":{\"93\":1}}],[\"删除repo文件\",{\"1\":{\"93\":1}}],[\"删除本机的docker文件\",{\"1\":{\"93\":1}}],[\"删除用户\",{\"1\":{\"77\":1,\"351\":1}}],[\"删除外键\",{\"1\":{\"64\":1}}],[\"删除自动增长\",{\"1\":{\"63\":1}}],[\"删除主键\",{\"1\":{\"63\":1}}],[\"删除唯一约束\",{\"1\":{\"62\":1}}],[\"删除name的非空约束\",{\"1\":{\"61\":1}}],[\"删除列\",{\"1\":{\"41\":1}}],[\"删除索引\",{\"1\":{\"19\":2,\"219\":1,\"319\":1}}],[\"删除存储过程\",{\"1\":{\"18\":2}}],[\"删除函数\",{\"1\":{\"17\":2}}],[\"删除\",{\"0\":{\"36\":1},\"1\":{\"15\":1,\"19\":1,\"36\":2,\"42\":1,\"468\":1,\"469\":1,\"471\":1,\"472\":1}}],[\"删除触发器\",{\"1\":{\"15\":2}}],[\"删除视图\",{\"1\":{\"14\":2}}],[\"删除数据库\",{\"1\":{\"36\":1}}],[\"删除数据\",{\"0\":{\"45\":1},\"1\":{\"13\":1,\"45\":2}}],[\"删除表中所有数据\",{\"1\":{\"146\":1}}],[\"删除表中的数据\",{\"1\":{\"13\":1}}],[\"删除表中数据\",{\"1\":{\"13\":1}}],[\"删除表\",{\"0\":{\"42\":1},\"1\":{\"13\":1,\"42\":1}}],[\"增强了程序的灵活性和可维护性\",{\"1\":{\"415\":1}}],[\"增加可执行权限\",{\"1\":{\"431\":1}}],[\"增加用户赋予超级管理员权限\",{\"1\":{\"351\":1}}],[\"增加\",{\"1\":{\"248\":1}}],[\"增加查询分析器解析\",{\"1\":{\"223\":1}}],[\"增\",{\"1\":{\"79\":1}}],[\"增删改\",{\"1\":{\"74\":1}}],[\"增删改表中数据\",{\"0\":{\"43\":1},\"1\":{\"77\":1}}],[\"改变状态的对象被称为主题\",{\"1\":{\"415\":1}}],[\"改变vuex属性\",{\"1\":{\"214\":1}}],[\"改变\",{\"1\":{\"79\":1}}],[\"改sql语句2\",{\"1\":{\"25\":1}}],[\"目标对象类型\",{\"1\":{\"419\":1}}],[\"目标存在\",{\"1\":{\"79\":1}}],[\"目的实现复用\",{\"1\":{\"194\":1}}],[\"目前的写法\",{\"1\":{\"422\":1}}],[\"目前已经发展成为开源社区中最为流行的缓存代理服务器之一\",{\"1\":{\"170\":1}}],[\"目前关系数据库有六种范式\",{\"1\":{\"78\":1}}],[\"目录下查看解压后的文件可以看到解压后的文件都是\",{\"1\":{\"473\":1}}],[\"目录下的所有内容\",{\"1\":{\"472\":1}}],[\"目录下\",{\"1\":{\"176\":1}}],[\"目录\",{\"1\":{\"80\":1,\"185\":1,\"468\":1}}],[\"角色\",{\"1\":{\"79\":1}}],[\"任意ip使用root用户连接\",{\"1\":{\"474\":1}}],[\"任意条件符合即可\",{\"1\":{\"339\":1}}],[\"任务数量\",{\"1\":{\"297\":1,\"411\":1}}],[\"任务队列永远都可以添加任务\",{\"1\":{\"286\":1,\"400\":1}}],[\"任务队列是基于阻塞队列实现的\",{\"1\":{\"286\":1,\"400\":1}}],[\"任何人都可以提交jsr\",{\"1\":{\"383\":1}}],[\"任何一个事件都有一个来源\",{\"1\":{\"281\":1}}],[\"任何非主属性不依赖于其它非主属性\",{\"1\":{\"78\":1}}],[\"任选其⼀\",{\"1\":{\"23\":1}}],[\"除此之外还有一些附加的\",{\"1\":{\"383\":1}}],[\"除非另外指定了输出文件\",{\"1\":{\"116\":1}}],[\"除过码属性组的属性\",{\"1\":{\"78\":1}}],[\"除了数字类型\",{\"1\":{\"44\":1}}],[\"码属性组中的所有属性\",{\"1\":{\"78\":1}}],[\"码\",{\"1\":{\"78\":1}}],[\"系统中任意信息的丢失或失败不会影响系统的继续运作\",{\"1\":{\"279\":1}}],[\"系统变量\",{\"1\":{\"16\":1}}],[\"系名\",{\"1\":{\"78\":1}}],[\"传播机制为\",{\"1\":{\"280\":6}}],[\"传播机制为默认的\",{\"1\":{\"280\":1}}],[\"传递的是值的引用\",{\"1\":{\"259\":1}}],[\"传递的是值的拷贝\",{\"1\":{\"259\":1}}],[\"传递的参数是按引用进行传递\",{\"1\":{\"259\":1}}],[\"传递的参数是按值的拷贝传递\",{\"1\":{\"259\":1}}],[\"传递函数依赖于a\",{\"1\":{\"78\":1}}],[\"传递函数依赖\",{\"1\":{\"78\":1}}],[\"传输困难\",{\"1\":{\"227\":1}}],[\"传输起来很方便\",{\"1\":{\"227\":1}}],[\"传输的\",{\"1\":{\"6\":1}}],[\"传统虚拟机搭建的\",{\"1\":{\"91\":1}}],[\"姓名\",{\"1\":{\"78\":1}}],[\"姓名最大20个字符\",{\"1\":{\"39\":1}}],[\"部分语句的事件尚未被写入输出\",{\"1\":{\"145\":1}}],[\"部分函数依赖\",{\"1\":{\"78\":1}}],[\"部署至服务器\",{\"1\":{\"441\":1}}],[\"部署成功\",{\"1\":{\"440\":1}}],[\"部署到远端服务\",{\"1\":{\"440\":1}}],[\"部署完后端项目\",{\"1\":{\"432\":1}}],[\"部署前端项目\",{\"0\":{\"432\":1}}],[\"部署路径\",{\"1\":{\"431\":1,\"432\":1}}],[\"部署服务端项目\",{\"0\":{\"428\":1}}],[\"部署\",{\"0\":{\"116\":1}}],[\"部门\",{\"1\":{\"387\":2}}],[\"部门和员工\",{\"1\":{\"78\":2}}],[\"部门表的名称\",{\"1\":{\"67\":2}}],[\"完成当前对象的实例化\",{\"1\":{\"283\":1,\"397\":1}}],[\"完成vue创建\",{\"1\":{\"194\":1}}],[\"完整gc回收流程\",{\"0\":{\"271\":1}}],[\"完整的实现了分库分表\",{\"1\":{\"28\":1}}],[\"完全匹配\",{\"1\":{\"159\":1}}],[\"完全函数依赖\",{\"1\":{\"78\":1}}],[\"课程名称\",{\"1\":{\"78\":4}}],[\"学习的\",{\"1\":{\"100\":1}}],[\"学号\",{\"1\":{\"78\":6}}],[\"学生和课程\",{\"1\":{\"78\":2}}],[\"非\",{\"1\":{\"323\":1}}],[\"非唯一性索引\",{\"1\":{\"223\":1}}],[\"非最外层\",{\"1\":{\"223\":1}}],[\"非叶子节点存储的key就是主键值\",{\"1\":{\"222\":1}}],[\"非叶子节点只存放索引值\",{\"1\":{\"220\":1}}],[\"非官方\",{\"1\":{\"181\":1}}],[\"非常注重效率\",{\"1\":{\"156\":1}}],[\"非代理上网用户请务必留空\",{\"1\":{\"153\":1}}],[\"非主属性\",{\"1\":{\"78\":1}}],[\"非码属性必须完全依赖于码\",{\"1\":{\"78\":1}}],[\"非空\",{\"1\":{\"78\":2,\"385\":2}}],[\"非空且唯一\",{\"1\":{\"63\":1}}],[\"非空约束\",{\"0\":{\"61\":1},\"1\":{\"60\":1,\"61\":1}}],[\"又称完美范式\",{\"1\":{\"78\":1}}],[\"又称直积\",{\"1\":{\"22\":1}}],[\"科德范式\",{\"1\":{\"78\":1}}],[\"巴斯\",{\"1\":{\"78\":1}}],[\"遵从不同的规范要求\",{\"1\":{\"78\":1}}],[\"收藏时间\",{\"1\":{\"78\":1}}],[\"男\",{\"1\":{\"78\":1,\"190\":1}}],[\"价格\",{\"1\":{\"78\":1}}],[\"旅游线路\",{\"1\":{\"78\":1}}],[\"旅游线路名称非空\",{\"1\":{\"78\":1}}],[\"旅游线路主键\",{\"1\":{\"78\":1}}],[\"旅游线路分类名称非空\",{\"1\":{\"78\":1}}],[\"旅游线路分类主键\",{\"1\":{\"78\":1}}],[\"案例\",{\"1\":{\"78\":1}}],[\"指的是在一个分布式系统中\",{\"1\":{\"279\":1}}],[\"指的是在方法调用时\",{\"1\":{\"259\":2}}],[\"指的是引用不可变\",{\"1\":{\"258\":1}}],[\"指的是v\",{\"1\":{\"189\":1}}],[\"指查询一个一定不存在的数据\",{\"1\":{\"231\":1}}],[\"指明当前表所参照的字段\",{\"1\":{\"223\":1}}],[\"指定主机ip地址和端口\",{\"1\":{\"497\":1}}],[\"指定主库的ip和端口\",{\"1\":{\"496\":1}}],[\"指定日志文件的路径\",{\"1\":{\"495\":1}}],[\"指定\",{\"1\":{\"495\":1}}],[\"指定版本下载地址\",{\"1\":{\"492\":1}}],[\"指定端口b\",{\"1\":{\"479\":1}}],[\"指定的目录\",{\"1\":{\"472\":1}}],[\"指定的消息头rabbitmq死信和延迟\",{\"1\":{\"366\":1}}],[\"指定node版本\",{\"1\":{\"441\":1}}],[\"指定name\",{\"1\":{\"344\":1}}],[\"指定路径\",{\"1\":{\"439\":1}}],[\"指定注入实现类\",{\"1\":{\"418\":1}}],[\"指定一个name\",{\"1\":{\"346\":1}}],[\"指定检索的条件\",{\"1\":{\"338\":1}}],[\"指定elasticsearch连接信息\",{\"1\":{\"323\":1}}],[\"指定当前field可以被作为查询的条件\",{\"1\":{\"320\":1}}],[\"指定数据结构\",{\"1\":{\"320\":2}}],[\"指定gt\",{\"1\":{\"317\":1}}],[\"指定时间格式\",{\"1\":{\"317\":1}}],[\"指定时区\",{\"1\":{\"104\":3}}],[\"指定淘汰机制的方式\",{\"1\":{\"230\":1}}],[\"指定bin\",{\"1\":{\"143\":1}}],[\"指定图形界面的密码\",{\"1\":{\"128\":1}}],[\"指定图形界面的用户名\",{\"1\":{\"128\":1}}],[\"指定要启动的镜像\",{\"1\":{\"108\":1}}],[\"指向一的一方的主键\",{\"1\":{\"78\":1}}],[\"指针控制语⾔\",{\"1\":{\"12\":1,\"216\":1}}],[\"人和身份证\",{\"1\":{\"78\":2}}],[\"人数要大于2个人\",{\"1\":{\"56\":1}}],[\"人数\",{\"1\":{\"56\":5}}],[\"九\",{\"0\":{\"78\":1}}],[\"撤销权限\",{\"1\":{\"77\":2}}],[\"给匹配到所有队列根据名称进行匹配转发向交换器发送消息\",{\"1\":{\"358\":1}}],[\"给锁续期\",{\"1\":{\"278\":1}}],[\"给张三用户授予所有权限\",{\"1\":{\"77\":1}}],[\"给id添加主键约束\",{\"1\":{\"63\":2}}],[\"授予权限\",{\"1\":{\"77\":2}}],[\"授权\",{\"1\":{\"77\":2,\"101\":1}}],[\"通信\",{\"1\":{\"476\":1}}],[\"通配查询\",{\"1\":{\"334\":1}}],[\"通配符\",{\"1\":{\"77\":1,\"208\":1}}],[\"通常用于单个文件或目录的复制操作\",{\"1\":{\"468\":1}}],[\"通常称被修饰的变量为常量\",{\"1\":{\"258\":1}}],[\"通常等于cpu数量或者2倍于cpu\",{\"1\":{\"157\":1}}],[\"通用匹配\",{\"1\":{\"159\":1}}],[\"通过以上类图\",{\"1\":{\"425\":1}}],[\"通过放行\",{\"1\":{\"379\":1}}],[\"通过自定义注解进行标记\",{\"1\":{\"378\":1}}],[\"通过死信交换器发送过来的消息\",{\"1\":{\"360\":1}}],[\"通过交换器来发送\",{\"1\":{\"357\":1}}],[\"通过fanout交换器\",{\"1\":{\"357\":1}}],[\"通过你编写的正则表达式去匹配内容\",{\"1\":{\"336\":1}}],[\"通过执行时延从队列中提取任务\",{\"1\":{\"286\":1,\"400\":1}}],[\"通过注册监听器并发布事件\",{\"1\":{\"281\":1}}],[\"通过applicationcontext发布事件\",{\"1\":{\"281\":1}}],[\"通过流把文件从一个地方输入到另一个地方\",{\"1\":{\"263\":1}}],[\"通过javac命令编译成字节码\",{\"1\":{\"235\":1}}],[\"通过代码去处理业务逻辑\",{\"1\":{\"223\":1}}],[\"通过explain关键字可以看到sql语句的执行过程\",{\"1\":{\"223\":1}}],[\"通过id实际上是拿到了整条数据进行了一个回表的操作\",{\"1\":{\"223\":1}}],[\"通过mysqlbinlog将binlog转为sql\",{\"1\":{\"145\":1}}],[\"通过文件内部的定义\",{\"1\":{\"102\":1}}],[\"通过\",{\"1\":{\"100\":1,\"359\":2}}],[\"通过镜像安装之后\",{\"1\":{\"92\":1}}],[\"通过内部函数代替⾃定义函数提⾼sql效率\",{\"1\":{\"26\":1}}],[\"通过包装请求对象并使用\",{\"1\":{\"10\":1}}],[\"通过扩展httpservletrequestwrapper\",{\"1\":{\"8\":1}}],[\"通过重写getmethod方法\",{\"1\":{\"8\":1}}],[\"通过重写getrequesturi\",{\"1\":{\"8\":1}}],[\"通过重写getheader\",{\"1\":{\"8\":1}}],[\"通过重写getparameter\",{\"1\":{\"8\":1}}],[\"关联仓库后选择模板\",{\"1\":{\"441\":1}}],[\"关联项目\",{\"1\":{\"437\":1}}],[\"关于ssh相关命令\",{\"1\":{\"435\":1}}],[\"关于redlock的讨论可以看how\",{\"1\":{\"279\":1}}],[\"关于集合\",{\"0\":{\"240\":1}}],[\"关于localtion路径映射\",{\"0\":{\"159\":1}}],[\"关于minio工具类等其他代码请联系作者获取\",{\"1\":{\"133\":1}}],[\"关闭保护模式\",{\"1\":{\"497\":1}}],[\"关闭ssh开机自动启动命令\",{\"1\":{\"435\":1}}],[\"关闭释放\",{\"1\":{\"353\":1}}],[\"关闭node\",{\"1\":{\"184\":1}}],[\"关闭开机自启动\",{\"1\":{\"177\":1}}],[\"关闭\",{\"1\":{\"157\":2}}],[\"关闭两个窗口\",{\"1\":{\"77\":1}}],[\"关键字来保证线程安全性\",{\"1\":{\"422\":1}}],[\"关键字修饰共享变量\",{\"1\":{\"422\":1}}],[\"关键字实现多线程下的线程安全\",{\"1\":{\"422\":1}}],[\"关键字建议使用大写\",{\"1\":{\"30\":1}}],[\"关键字\",{\"1\":{\"18\":1,\"30\":4,\"215\":1}}],[\"你创建\",{\"1\":{\"365\":1}}],[\"你在es中设置的密码\",{\"1\":{\"315\":1}}],[\"你的新密码\",{\"1\":{\"77\":1}}],[\"你必须选择记录条数最少的表作为基础表\",{\"1\":{\"26\":1}}],[\"敲回车\",{\"1\":{\"77\":1}}],[\"打包项⽬\",{\"1\":{\"200\":1}}],[\"打开防火墙\",{\"1\":{\"475\":1}}],[\"打开帮助文档\",{\"1\":{\"318\":1}}],[\"打开node\",{\"1\":{\"184\":1}}],[\"打开\",{\"1\":{\"178\":1}}],[\"打开网址\",{\"0\":{\"148\":1}}],[\"打开任务管理器\",{\"1\":{\"77\":1}}],[\"打开新的cmd窗口\",{\"1\":{\"77\":1}}],[\"打赏作者\",{\"1\":{\"0\":1}}],[\"密码有长度限制\",{\"1\":{\"460\":1}}],[\"密码连接\",{\"1\":{\"323\":1}}],[\"密码长度\",{\"1\":{\"78\":1}}],[\"密码\",{\"1\":{\"77\":1,\"84\":1,\"121\":2,\"174\":1,\"351\":1}}],[\"八\",{\"0\":{\"77\":1}}],[\"转到死信交换器\",{\"1\":{\"360\":1}}],[\"转换成\",{\"1\":{\"323\":1}}],[\"转账操作\",{\"1\":{\"76\":1}}],[\"转载\",{\"1\":{\"22\":1}}],[\"演示\",{\"1\":{\"76\":1}}],[\"级别从左显示5个字符宽度\",{\"1\":{\"389\":2}}],[\"级别字符串\",{\"1\":{\"76\":1}}],[\"级联\",{\"1\":{\"79\":1}}],[\"级联删除\",{\"1\":{\"64\":1}}],[\"级联更新\",{\"1\":{\"64\":1}}],[\"级联操作\",{\"1\":{\"64\":1}}],[\"幻读指的是一个事务被其他事务插入或者删除的数据有影响\",{\"1\":{\"217\":1}}],[\"幻读\",{\"1\":{\"76\":4,\"217\":3}}],[\"幻灯片页\",{\"0\":{\"2\":1}}],[\"两者不能共存\",{\"1\":{\"363\":1}}],[\"两边的条件没有使用同一个索引\",{\"1\":{\"223\":1}}],[\"两个slave的id也要不同\",{\"1\":{\"479\":1}}],[\"两个点\",{\"1\":{\"348\":1}}],[\"两个对象有相同的hashcode值\",{\"1\":{\"244\":1}}],[\"两个对象相等\",{\"1\":{\"244\":1}}],[\"两个事物之间是相互隔离的\",{\"1\":{\"217\":1}}],[\"两个集合x和y的笛卡尔积\",{\"1\":{\"22\":1}}],[\"两日期差\",{\"1\":{\"79\":1}}],[\"两次读取到的数据不一样\",{\"1\":{\"76\":1}}],[\"隔离级别从小到大安全性越来越高\",{\"1\":{\"76\":1}}],[\"隔离级别\",{\"1\":{\"76\":1}}],[\"隔离性\",{\"1\":{\"75\":1}}],[\"隔开\",{\"1\":{\"15\":1,\"323\":1}}],[\"原生支持和无需额外依赖\",{\"1\":{\"419\":1}}],[\"原生接受消息队列\",{\"1\":{\"354\":2}}],[\"原逻辑不变\",{\"1\":{\"418\":1}}],[\"原来\",{\"1\":{\"385\":1}}],[\"原来用\",{\"1\":{\"264\":1}}],[\"原理\",{\"1\":{\"337\":1}}],[\"原子性就是最小单位\",{\"1\":{\"217\":1}}],[\"原子性\",{\"1\":{\"75\":1,\"217\":1}}],[\"原因\",{\"0\":{\"6\":1},\"1\":{\"223\":1,\"232\":1}}],[\"代替匿名内部类\",{\"1\":{\"261\":1}}],[\"代理对象实现了与目标对象相同的接口\",{\"1\":{\"419\":1}}],[\"代理增强逻辑\",{\"1\":{\"418\":1}}],[\"代理类\",{\"1\":{\"418\":1}}],[\"代理角色目的就是帮助真实角色完成一件事情\",{\"1\":{\"418\":1}}],[\"代理角色和真实角色都需要实现同一个接口\",{\"1\":{\"418\":1}}],[\"代理模式是一种设计模式\",{\"1\":{\"417\":1}}],[\"代理模式\",{\"0\":{\"417\":1}}],[\"代理静态⻚⾯\",{\"1\":{\"166\":1}}],[\"代理服务器的请求和响应\",{\"1\":{\"166\":1}}],[\"代理⽤户发出的请求\",{\"1\":{\"166\":1}}],[\"代理\",{\"1\":{\"166\":1}}],[\"代理设置\",{\"1\":{\"153\":1}}],[\"代码实现\",{\"1\":{\"357\":1}}],[\"代码里吧pdf\",{\"1\":{\"111\":1}}],[\"代码逻辑\",{\"1\":{\"17\":1}}],[\"代表同步正常\",{\"1\":{\"479\":1}}],[\"代表这个值存在\",{\"1\":{\"264\":1}}],[\"代表nginx的错误日志存放的位置\",{\"1\":{\"157\":1}}],[\"代表只要docker启动\",{\"1\":{\"104\":3}}],[\"代表手动提交\",{\"1\":{\"74\":1}}],[\"代表自动提交\",{\"1\":{\"74\":1}}],[\"手册\",{\"1\":{\"172\":1}}],[\"手动应答\",{\"1\":{\"362\":1}}],[\"手动操作\",{\"1\":{\"362\":1}}],[\"手动连接并发送消息\",{\"1\":{\"353\":1}}],[\"手动指定下es的版本\",{\"1\":{\"323\":1}}],[\"手动指定id\",{\"1\":{\"321\":1}}],[\"手动ack确认\",{\"1\":{\"275\":1}}],[\"手动结束mysqld\",{\"1\":{\"77\":1}}],[\"手动提交\",{\"1\":{\"74\":1}}],[\"手机号\",{\"1\":{\"62\":1,\"78\":1}}],[\"+密码\",{\"1\":{\"474\":1}}],[\"+name\",{\"1\":{\"390\":1}}],[\"+new\",{\"1\":{\"354\":1}}],[\"+msg+system\",{\"1\":{\"360\":3,\"361\":1}}],[\"+msg\",{\"1\":{\"354\":1,\"355\":2,\"362\":1}}],[\"+scrollid+\",{\"1\":{\"337\":1}}],[\"+kibana\",{\"1\":{\"302\":1}}],[\"+logstash\",{\"1\":{\"302\":1}}],[\"+10\",{\"1\":{\"116\":1}}],[\"+x\",{\"1\":{\"101\":1,\"140\":1,\"308\":1,\"466\":1}}],[\"+docker\",{\"1\":{\"91\":1}}],[\"+i+\",{\"1\":{\"83\":2}}],[\"+\",{\"1\":{\"74\":1,\"76\":1,\"83\":6,\"108\":2,\"223\":1,\"337\":1,\"345\":3,\"355\":1,\"379\":1,\"420\":2,\"421\":2,\"441\":1,\"465\":1}}],[\"+500\",{\"1\":{\"74\":1}}],[\"李四账户\",{\"1\":{\"74\":1}}],[\"被拦截添加一个新的selinux策略\",{\"1\":{\"476\":1}}],[\"被观察者维护观察者列表\",{\"1\":{\"416\":1}}],[\"被标注的值必须不小于约束中指定的最小值\",{\"1\":{\"384\":1}}],[\"被标注的值必须不大于约束中指定的最大值\",{\"1\":{\"384\":1}}],[\"被执行完成之后\",{\"1\":{\"298\":1,\"412\":1}}],[\"被调用不一定会立即回收该对象\",{\"1\":{\"258\":1}}],[\"被修饰的类不能被继承\",{\"1\":{\"258\":1}}],[\"被修饰的方法不允许任何子类重写\",{\"1\":{\"258\":1}}],[\"被修饰的变量不可变\",{\"1\":{\"258\":1}}],[\"被放入到一个队列中\",{\"1\":{\"226\":1}}],[\"被索引优化查询的数据个数\",{\"1\":{\"223\":1}}],[\"被分配到的概率就⼤\",{\"1\":{\"166\":1}}],[\"被drop删除之后\",{\"1\":{\"146\":1}}],[\"被其他所有属性所完全依赖\",{\"1\":{\"78\":1}}],[\"被事务管理\",{\"1\":{\"74\":1}}],[\"被复制的表名\",{\"1\":{\"39\":1}}],[\"七牛云加速器\",{\"1\":{\"94\":1}}],[\"七\",{\"0\":{\"73\":1,\"166\":1,\"300\":1,\"414\":1},\"1\":{\"135\":1}}],[\"才是所谓的rabbitmq的⾼可⽤模式\",{\"1\":{\"365\":1}}],[\"才可以重新使用kibana\",{\"1\":{\"314\":1}}],[\"才可以删除\",{\"1\":{\"279\":1}}],[\"才能通过该用户复制\",{\"1\":{\"478\":1}}],[\"才能重新加锁\",{\"1\":{\"277\":1}}],[\"才能作为外部查询的等职判断条件或不等值条件判断\",{\"1\":{\"72\":1}}],[\"才会存放备份分片\",{\"1\":{\"306\":1}}],[\"才会回调⽣产者的接⼝返回ack\",{\"1\":{\"274\":1}}],[\"才会判断第二条件\",{\"1\":{\"54\":1}}],[\"外部\",{\"1\":{\"373\":1}}],[\"外卖订单15分钟不付款\",{\"1\":{\"360\":1}}],[\"外网面板地址\",{\"1\":{\"106\":1}}],[\"外界访问端口\",{\"1\":{\"95\":1}}],[\"外连接查询\",{\"0\":{\"69\":1}}],[\"外键获取对象\",{\"1\":{\"283\":1,\"397\":1}}],[\"外键\",{\"1\":{\"78\":3,\"79\":1}}],[\"外键字段名称\",{\"1\":{\"64\":2}}],[\"外键列名称\",{\"1\":{\"64\":1}}],[\"外键列u\",{\"1\":{\"64\":1}}],[\"外键名称\",{\"1\":{\"64\":4}}],[\"外键约束3\",{\"1\":{\"218\":1}}],[\"外键约束\",{\"0\":{\"64\":1},\"1\":{\"12\":1,\"60\":1,\"64\":2}}],[\"​\",{\"1\":{\"68\":1,\"71\":2,\"72\":5,\"74\":13,\"76\":1,\"91\":4}}],[\"显然线程安全\",{\"1\":{\"259\":1}}],[\"显式内连接\",{\"1\":{\"68\":1}}],[\"显示\",{\"1\":{\"190\":1}}],[\"显示行数\",{\"1\":{\"116\":1}}],[\"显示的字节数\",{\"1\":{\"116\":1}}],[\"显示详细的处理信息\",{\"1\":{\"116\":1}}],[\"显示内连接\",{\"0\":{\"68\":1}}],[\"显示所有\",{\"1\":{\"59\":1}}],[\"显示可能应⽤在这张表中的索引\",{\"1\":{\"19\":1,\"22\":1}}],[\"`\",{\"1\":{\"194\":2}}],[\"```powershell\",{\"1\":{\"177\":1}}],[\"```\",{\"1\":{\"108\":1,\"109\":1,\"177\":1}}],[\"```yml\",{\"1\":{\"108\":1,\"109\":1}}],[\"`account`\",{\"1\":{\"77\":1}}],[\"`name`\",{\"1\":{\"70\":2}}],[\"`id`\",{\"1\":{\"67\":1,\"68\":1,\"70\":1,\"71\":1}}],[\"`dept\",{\"1\":{\"67\":1,\"68\":1,\"70\":1,\"71\":1}}],[\"`title`\",{\"1\":{\"19\":1}}],[\"`title`=\",{\"1\":{\"19\":3}}],[\"员工表的性别\",{\"1\":{\"67\":1}}],[\"员工表的姓名\",{\"1\":{\"67\":1}}],[\"例子\",{\"1\":{\"67\":1,\"70\":1,\"71\":1}}],[\"例如核心线程数\",{\"1\":{\"391\":1}}],[\"例如create\",{\"1\":{\"143\":1}}],[\"例如\",{\"1\":{\"22\":1,\"68\":1,\"78\":5,\"94\":1,\"123\":1,\"223\":1,\"306\":1}}],[\"隐式内连接\",{\"1\":{\"67\":1}}],[\"六\",{\"0\":{\"65\":1,\"106\":1,\"165\":1,\"215\":1,\"233\":1,\"299\":1,\"413\":1},\"1\":{\"134\":1}}],[\"含义\",{\"1\":{\"63\":1}}],[\"唯一性索引\",{\"1\":{\"223\":1}}],[\"唯一\",{\"0\":{\"244\":1,\"246\":1},\"1\":{\"78\":3,\"79\":1,\"95\":1,\"352\":1}}],[\"唯一约束可以有null值\",{\"1\":{\"62\":1}}],[\"唯一约束\",{\"0\":{\"62\":1},\"1\":{\"60\":1,\"62\":1}}],[\"唯⼀索引\",{\"1\":{\"219\":1}}],[\"唯⼀索引4\",{\"1\":{\"19\":1}}],[\"唯⼀性索引扫描\",{\"1\":{\"19\":1}}],[\"唯⼀约束5\",{\"1\":{\"218\":1}}],[\"唯⼀约束\",{\"1\":{\"12\":1}}],[\"保留五个版本\",{\"1\":{\"450\":1,\"454\":1}}],[\"保留重复记录\",{\"1\":{\"59\":1}}],[\"保存在某个索引\",{\"1\":{\"304\":1}}],[\"保证多个消息要么都成功\",{\"1\":{\"366\":1}}],[\"保证一致性和分区容错性\",{\"1\":{\"279\":1}}],[\"保证可用性和分区容错性\",{\"1\":{\"279\":1}}],[\"保证每个请求不管成功或者失败都有响应\",{\"1\":{\"279\":1}}],[\"保证\",{\"1\":{\"233\":1}}],[\"保证数据的正确性\",{\"1\":{\"60\":1,\"218\":1}}],[\"概念\",{\"1\":{\"60\":1,\"63\":1,\"74\":1,\"76\":1,\"78\":1,\"218\":1}}],[\"约束\",{\"0\":{\"60\":1,\"218\":1},\"1\":{\"79\":1,\"383\":1}}],[\"约束条件\",{\"1\":{\"13\":2}}],[\"五个组成部分\",{\"1\":{\"213\":1}}],[\"五\",{\"0\":{\"60\":1,\"103\":1,\"113\":1,\"164\":1,\"212\":1,\"232\":1,\"239\":1,\"293\":1,\"324\":1,\"372\":1,\"407\":1,\"491\":1,\"497\":1},\"1\":{\"133\":1}}],[\"合并多个数组\",{\"1\":{\"79\":1}}],[\"合并向张表的结果\",{\"1\":{\"59\":1}}],[\"合并结果的两张表\",{\"1\":{\"59\":1}}],[\"合并两张表的结果\",{\"1\":{\"59\":3}}],[\"合并查询\",{\"0\":{\"59\":1}}],[\"为主除从\",{\"1\":{\"495\":1}}],[\"为minio只能使用新的磁盘lsblk\",{\"1\":{\"462\":1}}],[\"为每个线程都创建一个副本\",{\"1\":{\"394\":1,\"396\":1}}],[\"为变量赋值\",{\"1\":{\"371\":1}}],[\"为什么使用\",{\"1\":{\"300\":1,\"414\":1}}],[\"为什么要进行延迟双删一般我们在更新数据库数据时\",{\"1\":{\"232\":1}}],[\"为0\",{\"1\":{\"297\":1,\"411\":1}}],[\"为了保证数据的安全\",{\"1\":{\"306\":1}}],[\"为了确保是锁的一致性问题\",{\"1\":{\"279\":1}}],[\"为了防止恢复数据后影响最新业务\",{\"1\":{\"144\":1}}],[\"为对应的引用\",{\"1\":{\"259\":1}}],[\"为\",{\"1\":{\"239\":1,\"488\":1}}],[\"为该表的码\",{\"1\":{\"78\":1}}],[\"为其赋予一个临时表名\",{\"1\":{\"58\":1,\"72\":1}}],[\"为字段添加约束条件\",{\"1\":{\"12\":1}}],[\"做第二次查询\",{\"1\":{\"58\":1,\"72\":1}}],[\"子线程\",{\"1\":{\"391\":4}}],[\"子线程无法进行链路追踪\",{\"1\":{\"391\":1}}],[\"子类可以使用该方法\",{\"1\":{\"258\":1}}],[\"子类访问父类的静态变量\",{\"1\":{\"239\":1}}],[\"子类初始化\",{\"1\":{\"239\":1}}],[\"子表查询作为临时表\",{\"1\":{\"72\":1}}],[\"子查询的结果集\",{\"1\":{\"72\":1}}],[\"子查询得到的结果\",{\"1\":{\"72\":1}}],[\"子查询作为临时表\",{\"1\":{\"58\":1}}],[\"子查询结果\",{\"1\":{\"58\":1,\"72\":2}}],[\"子查询\",{\"0\":{\"58\":1,\"72\":1},\"1\":{\"72\":3}}],[\"子句\",{\"1\":{\"54\":1}}],[\"公式\",{\"1\":{\"57\":1}}],[\"要想多个定时任务并行执行\",{\"1\":{\"300\":1,\"414\":1}}],[\"要用到的字段\",{\"1\":{\"223\":1}}],[\"要么cp\",{\"1\":{\"279\":1}}],[\"要么都失败\",{\"1\":{\"366\":1}}],[\"要么都失败隔离性\",{\"1\":{\"217\":1}}],[\"要么都成功\",{\"1\":{\"217\":1}}],[\"要么同时成功\",{\"1\":{\"75\":1}}],[\"要么同时失败\",{\"1\":{\"74\":1,\"75\":1}}],[\"要遵循后边的范式要求\",{\"1\":{\"78\":1}}],[\"要求元素都实现\",{\"1\":{\"286\":1,\"400\":1}}],[\"要求\",{\"1\":{\"56\":2}}],[\"要启用pscache\",{\"1\":{\"21\":1}}],[\"女同学的平均分\",{\"1\":{\"56\":4}}],[\"升序\",{\"1\":{\"54\":1,\"79\":1}}],[\"位置开始\",{\"1\":{\"52\":1}}],[\"中涉及到\",{\"1\":{\"440\":1}}],[\"中管理和部署阿里云资源\",{\"1\":{\"426\":1}}],[\"中国\",{\"1\":{\"339\":1}}],[\"中国伟大\",{\"1\":{\"312\":2}}],[\"中可以存海量\",{\"1\":{\"306\":1}}],[\"中最大的数据存储单位\",{\"1\":{\"306\":1}}],[\"中某个table里面的内容\",{\"1\":{\"304\":1}}],[\"中止策略\",{\"0\":{\"289\":1,\"403\":1},\"1\":{\"287\":2,\"401\":2}}],[\"中需要实现\",{\"1\":{\"286\":1,\"400\":1}}],[\"中的一项子规范\",{\"1\":{\"383\":1}}],[\"中的table\",{\"1\":{\"304\":1}}],[\"中的\",{\"1\":{\"304\":1}}],[\"中的insert\",{\"1\":{\"304\":1}}],[\"中的方法执行完以后\",{\"1\":{\"280\":1}}],[\"中的add\",{\"1\":{\"244\":1}}],[\"中\",{\"1\":{\"273\":1,\"286\":1,\"304\":1,\"400\":1,\"422\":1}}],[\"中文网\",{\"1\":{\"156\":1}}],[\"中记录完整的行数据\",{\"1\":{\"143\":1}}],[\"中间表至少包含两个字段\",{\"1\":{\"78\":1}}],[\"中间件解决\",{\"1\":{\"25\":1}}],[\"中指定\",{\"1\":{\"52\":1}}],[\"秒\",{\"1\":{\"51\":1}}],[\"年\",{\"1\":{\"51\":1,\"79\":1}}],[\"年开源⾄今\",{\"1\":{\"28\":1}}],[\"月季公园\",{\"1\":{\"346\":1}}],[\"月\",{\"1\":{\"51\":1,\"79\":1}}],[\"描述分辨多个服务器\",{\"1\":{\"427\":1}}],[\"描述\",{\"1\":{\"51\":1}}],[\"小数存在精度\",{\"1\":{\"384\":2}}],[\"小数类型\",{\"1\":{\"39\":1}}],[\"小于\",{\"1\":{\"344\":2}}],[\"小于等于30\",{\"1\":{\"49\":1}}],[\"小李都参与过这段代码\",{\"1\":{\"223\":1}}],[\"小哲\",{\"1\":{\"223\":1}}],[\"小高没有直接去加索引\",{\"1\":{\"223\":1}}],[\"小高直接就是改成了select\",{\"1\":{\"223\":1}}],[\"小高把for循环的sql\",{\"1\":{\"223\":1}}],[\"小高气不打一处来\",{\"1\":{\"223\":1}}],[\"小高发现在业务逻辑的处理中\",{\"1\":{\"223\":1}}],[\"小高开始分析这个接口\",{\"1\":{\"223\":1}}],[\"小高是一个程序员\",{\"1\":{\"223\":1}}],[\"小表驱动大表就是指用数据量较小\",{\"1\":{\"223\":1}}],[\"小表驱动大表\",{\"1\":{\"223\":1}}],[\"枚举\",{\"1\":{\"49\":1}}],[\"|grep\",{\"1\":{\"93\":1,\"109\":1,\"116\":2,\"388\":1}}],[\"|\",{\"1\":{\"93\":1,\"117\":1,\"145\":1,\"164\":1,\"165\":5,\"306\":5,\"384\":1,\"430\":3,\"431\":3,\"440\":1,\"445\":1,\"450\":7,\"454\":4,\"472\":2,\"474\":1}}],[\"||\",{\"1\":{\"49\":1,\"165\":1,\"396\":2,\"425\":1,\"450\":1}}],[\"|x∈a\",{\"1\":{\"22\":1}}],[\"起别名\",{\"1\":{\"48\":1}}],[\"起始⾏索引\",{\"1\":{\"22\":1}}],[\"四⼤域\",{\"1\":{\"368\":1}}],[\"四次挥手\",{\"1\":{\"282\":1}}],[\"四个连接数\",{\"1\":{\"164\":1}}],[\"四舍五入\",{\"1\":{\"79\":1}}],[\"四舍五⼊\",{\"1\":{\"13\":1}}],[\"四\",{\"0\":{\"47\":1,\"99\":1,\"111\":1,\"118\":1,\"130\":1,\"160\":1,\"208\":1,\"223\":1,\"228\":1,\"238\":1,\"287\":1,\"323\":1,\"371\":1,\"387\":1,\"401\":1,\"421\":1,\"432\":1,\"441\":1,\"455\":1,\"490\":1,\"496\":1},\"1\":{\"179\":1}}],[\"然后唤醒sql线程同时让当前的io线程挂起7\",{\"1\":{\"469\":1}}],[\"然后就会报错\",{\"1\":{\"418\":1}}],[\"然后就可以回滚事务\",{\"1\":{\"273\":1}}],[\"然后播放电台的内容\",{\"1\":{\"415\":1}}],[\"然后每次你写消息到queue的时候\",{\"1\":{\"365\":1}}],[\"然后由消费者去处理\",{\"1\":{\"351\":1}}],[\"然后放入二级缓存\",{\"1\":{\"280\":1}}],[\"然后把数据模型填充到视图里面再渲染成\",{\"1\":{\"280\":1}}],[\"然后把使用的清除\",{\"1\":{\"271\":1}}],[\"然后在那个判断库存上加锁\",{\"1\":{\"277\":1}}],[\"然后⽣产者继续发送消息\",{\"1\":{\"273\":1}}],[\"然后发送消息\",{\"1\":{\"273\":1}}],[\"然后清除一端边界以外的内存\",{\"1\":{\"271\":1}}],[\"然后清除\",{\"1\":{\"271\":1}}],[\"然后他的年龄会+1\",{\"1\":{\"271\":1}}],[\"然后将需要回收的对象回收之后\",{\"1\":{\"271\":1}}],[\"然后伊甸区的内存不足\",{\"1\":{\"271\":1}}],[\"然后到了真正要被回收的时候\",{\"1\":{\"258\":1}}],[\"然后返回旧的v\",{\"1\":{\"244\":1}}],[\"然后运行则是把编译声称的\",{\"1\":{\"235\":1}}],[\"然后去关联scores的studentid\",{\"1\":{\"223\":1}}],[\"然后使用其索引和条件对大表进行数据筛选\",{\"1\":{\"223\":1}}],[\"然后再回旋查询\",{\"1\":{\"223\":1}}],[\"然后再创建一张一样的表\",{\"1\":{\"45\":1}}],[\"然后重启我们的mysql服务查看是否开启bin\",{\"1\":{\"143\":1}}],[\"然后借助docker\",{\"1\":{\"102\":1}}],[\"然后\",{\"1\":{\"100\":1,\"223\":1}}],[\"然⽽\",{\"1\":{\"19\":1}}],[\"效率会很低\",{\"1\":{\"306\":1}}],[\"效率比较低\",{\"1\":{\"271\":2}}],[\"效率低b+tree底层有一个单项链表\",{\"1\":{\"220\":1}}],[\"效率更高\",{\"1\":{\"45\":1}}],[\"效率不错\",{\"1\":{\"19\":1,\"22\":1}}],[\"添加从库配置\",{\"1\":{\"496\":1}}],[\"添加内容\",{\"1\":{\"481\":1}}],[\"添加\",{\"1\":{\"478\":2,\"479\":2}}],[\"添加防火墙\",{\"0\":{\"475\":1}}],[\"添加集群语法\",{\"1\":{\"467\":1}}],[\"添加minio集群\",{\"0\":{\"467\":1}}],[\"添加minio的依赖\",{\"1\":{\"132\":1}}],[\"添加拦截器\",{\"1\":{\"378\":2}}],[\"添加文档\",{\"1\":{\"321\":1}}],[\"添加以下内容\",{\"1\":{\"315\":1}}],[\"添加如下内容\",{\"1\":{\"314\":1}}],[\"添加一个对象时\",{\"1\":{\"271\":1}}],[\"添加一列\",{\"1\":{\"41\":1}}],[\"添加进去的值就是作为hashmap\",{\"1\":{\"244\":1}}],[\"添加了一个新的数据\",{\"1\":{\"230\":1}}],[\"添加端口后刷新防火墙\",{\"1\":{\"179\":1}}],[\"添加两个模块\",{\"1\":{\"157\":1}}],[\"添加配置\",{\"0\":{\"133\":1}}],[\"添加依赖\",{\"0\":{\"132\":1}}],[\"添加jar到镜像并命名为code\",{\"1\":{\"117\":1}}],[\"添加用户\",{\"1\":{\"77\":1}}],[\"添加级联操作\",{\"1\":{\"64\":1}}],[\"添加外键\",{\"1\":{\"64\":1}}],[\"添加外部数据\",{\"1\":{\"22\":1}}],[\"添加自动增长\",{\"1\":{\"63\":1}}],[\"添加主键\",{\"1\":{\"63\":1}}],[\"添加主键约束\",{\"1\":{\"63\":2}}],[\"添加唯一约束\",{\"1\":{\"62\":2}}],[\"添加非空约束\",{\"1\":{\"61\":1}}],[\"添加数据\",{\"0\":{\"44\":1},\"1\":{\"44\":2,\"74\":1}}],[\"张三账户\",{\"1\":{\"74\":1}}],[\"张三给李四转账\",{\"1\":{\"74\":1}}],[\"张三\",{\"1\":{\"39\":1,\"333\":1,\"340\":1}}],[\"来跳过依赖检查\",{\"1\":{\"473\":1}}],[\"来避免这个问题\",{\"1\":{\"300\":1,\"414\":1}}],[\"来对队列中的元素进行比较\",{\"1\":{\"286\":1,\"400\":1}}],[\"来实现的\",{\"1\":{\"245\":1}}],[\"来保存元素\",{\"1\":{\"244\":1}}],[\"来提升nginx的并发能力\",{\"1\":{\"164\":1}}],[\"来写\",{\"1\":{\"104\":3}}],[\"来替代字段列表\",{\"1\":{\"48\":1}}],[\"来自动赋值\",{\"1\":{\"39\":1}}],[\"来获取输入流\",{\"1\":{\"6\":1}}],[\"包\",{\"1\":{\"473\":1}}],[\"包名\",{\"1\":{\"376\":1}}],[\"包裹dao\",{\"1\":{\"299\":1,\"413\":1}}],[\"包括添加\",{\"1\":{\"469\":1}}],[\"包括这些设备之间的依赖关系查看日志\",{\"1\":{\"462\":1}}],[\"包括http\",{\"1\":{\"170\":1}}],[\"包括在select后⾯\",{\"1\":{\"26\":1}}],[\"包含如下特性\",{\"1\":{\"303\":1}}],[\"包含核心线程\",{\"1\":{\"285\":1,\"399\":1}}],[\"包含子查询sql中的子查询\",{\"1\":{\"223\":1}}],[\"包含子查询sql中的主查询\",{\"1\":{\"223\":1}}],[\"包含一套软件\",{\"1\":{\"92\":1}}],[\"包含年月日时分秒\",{\"1\":{\"39\":2}}],[\"日志查看\",{\"1\":{\"488\":1}}],[\"日志存放路径\",{\"1\":{\"476\":1}}],[\"日志输出级别\",{\"1\":{\"389\":1}}],[\"日志消息\",{\"1\":{\"389\":2}}],[\"日志目录\",{\"1\":{\"172\":1}}],[\"日志\",{\"0\":{\"176\":1},\"1\":{\"157\":1}}],[\"日志等级\",{\"1\":{\"153\":1}}],[\"日志文件保留天数\",{\"1\":{\"389\":2}}],[\"日志文件输出的文件名\",{\"1\":{\"389\":2}}],[\"日志文件\",{\"1\":{\"153\":1,\"497\":1}}],[\"日志监控\",{\"1\":{\"21\":1}}],[\"日\",{\"1\":{\"51\":1}}],[\"日期检查\",{\"1\":{\"384\":1}}],[\"日期范围\",{\"1\":{\"344\":1}}],[\"日期类型\",{\"1\":{\"78\":1}}],[\"日期\",{\"1\":{\"39\":2}}],[\"整数类型\",{\"1\":{\"39\":1}}],[\"存入的json数据\",{\"1\":{\"326\":1}}],[\"存入老年代gc回收算法1\",{\"1\":{\"271\":1}}],[\"存入老年代对象晋升到老年代一共有四种情况1\",{\"1\":{\"271\":1}}],[\"存的是\",{\"1\":{\"280\":1}}],[\"存⼊redis或者数据库\",{\"1\":{\"275\":1,\"364\":1}}],[\"存⼊磁盘中\",{\"1\":{\"274\":1}}],[\"存放redis配置文件\",{\"1\":{\"493\":1}}],[\"存放远程免密登录的公钥\",{\"1\":{\"435\":1}}],[\"存放存活对象的survivor区太小\",{\"1\":{\"271\":1}}],[\"存放路径\",{\"1\":{\"157\":1}}],[\"存不下\",{\"1\":{\"233\":1}}],[\"存在消息管理器\",{\"1\":{\"416\":1}}],[\"存在注解\",{\"1\":{\"379\":1}}],[\"存在\",{\"1\":{\"378\":1,\"380\":1}}],[\"存在问题\",{\"1\":{\"76\":1}}],[\"存在再删除\",{\"1\":{\"36\":1}}],[\"存储\",{\"1\":{\"302\":1}}],[\"存储类的信息\",{\"1\":{\"269\":2}}],[\"存储一个对象数据的\",{\"1\":{\"225\":1}}],[\"存储的都是死信消息延迟队列\",{\"1\":{\"360\":1}}],[\"存储的数据有限\",{\"1\":{\"233\":1}}],[\"存储的是一个文本文件\",{\"1\":{\"227\":1}}],[\"存储的是一个byte\",{\"1\":{\"225\":1}}],[\"存储的key是user\",{\"1\":{\"223\":1}}],[\"存储了索引值和数据地址\",{\"1\":{\"220\":1}}],[\"存储数据\",{\"1\":{\"213\":1}}],[\"存储过程名称\",{\"1\":{\"18\":3}}],[\"存储过程\",{\"1\":{\"18\":2}}],[\"存储过程中\",{\"1\":{\"16\":1}}],[\"存储body容器\",{\"1\":{\"8\":1}}],[\"判断第一个值\",{\"1\":{\"378\":1}}],[\"判断查询是否存在数据\",{\"1\":{\"337\":1}}],[\"判断是不是大对象\",{\"1\":{\"271\":1}}],[\"判断是否存在\",{\"1\":{\"33\":1}}],[\"判断对象是否存活gcroots就是对象\",{\"1\":{\"270\":1}}],[\"判断的时候先根据hashcode进行的判断\",{\"1\":{\"259\":1}}],[\"判断的时候\",{\"1\":{\"195\":1}}],[\"判断以给定名字注册的bean定义是一个singleton还是一个prototype\",{\"1\":{\"84\":1}}],[\"判断\",{\"1\":{\"49\":1}}],[\"判断数据库存在\",{\"1\":{\"36\":1}}],[\"判断不存在\",{\"1\":{\"33\":1}}],[\"练习\",{\"1\":{\"33\":1}}],[\"列结构即由数组和链表或红黑树组成\",{\"1\":{\"248\":1}}],[\"列表中所有观察者都会接收到状态改变的通知观察者把自己注册到被观察者持有的列表中由被观察者轮询调用观察者的处理代码当被观察者发布通知\",{\"1\":{\"416\":1}}],[\"列表中的元素过多时\",{\"1\":{\"223\":1}}],[\"列表\",{\"1\":{\"240\":1}}],[\"列的隐式类型转换\",{\"1\":{\"223\":1}}],[\"列的数据类型可以不同\",{\"1\":{\"59\":1}}],[\"列子\",{\"1\":{\"74\":1}}],[\"列明\",{\"1\":{\"72\":1}}],[\"列数必须相同\",{\"1\":{\"59\":1}}],[\"列名和值要一一对应\",{\"1\":{\"44\":1}}],[\"列名\",{\"1\":{\"41\":4,\"58\":1,\"72\":3}}],[\"列名n\",{\"1\":{\"39\":1,\"44\":2}}],[\"列名2\",{\"1\":{\"39\":1,\"44\":2,\"46\":1}}],[\"列名1\",{\"1\":{\"39\":1,\"44\":2,\"46\":1}}],[\"列\",{\"0\":{\"31\":1}}],[\"列等\",{\"1\":{\"30\":1}}],[\"及创建用户\",{\"1\":{\"30\":1}}],[\"等同于所有节点访问同一份最新的数据副本\",{\"1\":{\"279\":1}}],[\"等操作符\",{\"1\":{\"223\":1}}],[\"等2\",{\"1\":{\"156\":1}}],[\"等相同参数将会覆盖掉此配置\",{\"1\":{\"153\":1}}],[\"等\",{\"1\":{\"30\":4,\"156\":1,\"223\":2}}],[\"等于系统表\",{\"1\":{\"19\":1}}],[\"方式二修改配置文件\",{\"1\":{\"183\":1}}],[\"方式二\",{\"1\":{\"110\":1,\"116\":1,\"323\":1,\"439\":1}}],[\"方式一\",{\"0\":{\"430\":1},\"1\":{\"110\":1,\"116\":1,\"183\":1,\"439\":1}}],[\"方便在非spring管理环境中获取bean\",{\"1\":{\"84\":1}}],[\"方言\",{\"1\":{\"30\":1,\"57\":1}}],[\"方法的时候\",{\"1\":{\"296\":1,\"410\":1}}],[\"方法的时候也会发生阻塞\",{\"1\":{\"286\":1,\"400\":1}}],[\"方法的时候就会发生阻塞\",{\"1\":{\"286\":1,\"400\":1}}],[\"方法b定义的事务类型\",{\"1\":{\"280\":1}}],[\"方法区\",{\"1\":{\"269\":1}}],[\"方法服务\",{\"1\":{\"269\":1}}],[\"方法参数\",{\"1\":{\"269\":1}}],[\"方法调用的数据需要通过栈进行传递\",{\"1\":{\"269\":1}}],[\"方法会返回该对象\",{\"1\":{\"264\":1}}],[\"方法会返回true\",{\"1\":{\"264\":1}}],[\"方法会使用hashmap\",{\"1\":{\"244\":1}}],[\"方法判断出来的结果为true\",{\"1\":{\"259\":1}}],[\"方法进行判断\",{\"1\":{\"259\":1}}],[\"方法只会被调用一次\",{\"1\":{\"258\":1}}],[\"方法和类\",{\"1\":{\"258\":1}}],[\"方法返回\",{\"1\":{\"257\":1}}],[\"方法所在的类\",{\"1\":{\"239\":1}}],[\"方法获取请求的\",{\"1\":{\"10\":1}}],[\"方法\",{\"1\":{\"6\":1,\"239\":1,\"244\":1,\"257\":1,\"258\":2,\"269\":1,\"376\":1}}],[\"方法时\",{\"1\":{\"6\":1,\"295\":1,\"409\":1}}],[\"们使⽤的sharding\",{\"1\":{\"28\":1}}],[\"会更新从库记录的偏移量位置6\",{\"1\":{\"469\":1}}],[\"会自行在另一集群进行相应的修改\",{\"1\":{\"468\":2}}],[\"会沿着链的路径依此传递给每一个节点对象\",{\"1\":{\"424\":1}}],[\"会线程不安全\",{\"1\":{\"422\":1}}],[\"会出现一个spring注入的问题启动时报错\",{\"1\":{\"418\":1}}],[\"会通知所有的观察者\",{\"1\":{\"415\":1}}],[\"会从上下文中移除\",{\"1\":{\"337\":1}}],[\"会报空指针异常\",{\"1\":{\"299\":1,\"413\":1}}],[\"会由stop\",{\"1\":{\"297\":1,\"411\":1}}],[\"会执行钩子函数terminated\",{\"1\":{\"297\":1,\"411\":1}}],[\"会返回一个\",{\"1\":{\"280\":1}}],[\"会接收到请求并转发给handlermapping\",{\"1\":{\"280\":1}}],[\"会在redis使用setnx命令创建相同的一个key\",{\"1\":{\"279\":1}}],[\"会在zookeeper上创建同一个临时节点\",{\"1\":{\"279\":1}}],[\"会加锁\",{\"1\":{\"277\":1}}],[\"会回传nack\",{\"1\":{\"275\":1}}],[\"会给⽣产者回传⼀个\",{\"1\":{\"273\":1}}],[\"会造成hashcode的值不同\",{\"1\":{\"259\":1}}],[\"会向一个专门的方法栈中放入该拦截器的\",{\"1\":{\"257\":1}}],[\"会用新的v覆盖掉旧的v\",{\"1\":{\"244\":1}}],[\"会引发\",{\"1\":{\"239\":1}}],[\"会引起冲突\",{\"1\":{\"28\":1}}],[\"会导致依赖冲突首先执行命令rpm\",{\"1\":{\"471\":1}}],[\"会导致初始化\",{\"1\":{\"239\":1}}],[\"会导致\",{\"1\":{\"239\":1,\"363\":1}}],[\"会导致请求1清除了缓存\",{\"1\":{\"232\":1}}],[\"会导致索引失效\",{\"1\":{\"223\":2}}],[\"会再100ms的间隔中默认查看3个key\",{\"1\":{\"229\":1}}],[\"会根据你的操作系统不同\",{\"1\":{\"227\":1}}],[\"会被放在一个队列中\",{\"1\":{\"226\":1}}],[\"会将客户端的请求\",{\"1\":{\"160\":1}}],[\"会下载镜像\",{\"1\":{\"95\":1}}],[\"会影响新增\",{\"1\":{\"19\":1}}],[\"后重启mysql\",{\"1\":{\"479\":1}}],[\"后续的操作可能也会需要用户的信息\",{\"1\":{\"396\":1}}],[\"后续再次获取required\",{\"1\":{\"5\":1}}],[\"后\",{\"1\":{\"258\":1}}],[\"后台运行\",{\"1\":{\"95\":1,\"445\":1}}],[\"后不可以跟聚合函数\",{\"1\":{\"56\":1}}],[\"后来查阅⽂档\",{\"1\":{\"28\":1}}],[\"报错\",{\"1\":{\"363\":1}}],[\"报\",{\"1\":{\"28\":1}}],[\"垂直分片\",{\"1\":{\"28\":1}}],[\"水平分片\",{\"1\":{\"28\":1}}],[\"单节点方式启动\",{\"1\":{\"483\":1}}],[\"单次关闭ssh\",{\"1\":{\"435\":1}}],[\"单次开启ssh\",{\"1\":{\"435\":1}}],[\"单机模式\",{\"1\":{\"365\":2}}],[\"单机或集群\",{\"1\":{\"28\":1}}],[\"单例模式是一种创建型设计模式\",{\"1\":{\"422\":1}}],[\"单例模式\",{\"0\":{\"422\":1},\"1\":{\"283\":1,\"397\":1}}],[\"单个任意字符\",{\"1\":{\"49\":1}}],[\"单双都可以\",{\"1\":{\"44\":1}}],[\"单行注释\",{\"1\":{\"30\":1}}],[\"单位为毫秒\",{\"1\":{\"495\":1}}],[\"单位米\",{\"1\":{\"347\":1}}],[\"单位字节\",{\"1\":{\"230\":1}}],[\"单位是秒\",{\"1\":{\"157\":1}}],[\"单位是毫秒\",{\"1\":{\"21\":2}}],[\"单位元\",{\"1\":{\"13\":1}}],[\"单位\",{\"1\":{\"13\":2,\"21\":1}}],[\"炼以及稳定性打磨后\",{\"1\":{\"28\":1}}],[\"读已提交如果是一个读事物\",{\"1\":{\"217\":1}}],[\"读已提交\",{\"1\":{\"76\":1,\"217\":1}}],[\"读未提交如果一个事物已经开始写数据\",{\"1\":{\"217\":1}}],[\"读未提交\",{\"1\":{\"76\":1,\"217\":1}}],[\"读取到另一个事务中没有提交的数据\",{\"1\":{\"76\":1}}],[\"读\",{\"1\":{\"28\":1}}],[\"读写\",{\"1\":{\"18\":1}}],[\"⼦句只在两种严格的条件下使⽤索引\",{\"1\":{\"26\":1}}],[\"⼦查询\",{\"1\":{\"13\":1}}],[\"替换union\",{\"1\":{\"26\":1}}],[\"总的来说\",{\"1\":{\"391\":1,\"468\":1}}],[\"总命中\",{\"1\":{\"326\":1}}],[\"总共有三级缓存\",{\"1\":{\"280\":1}}],[\"总不可能一直轮询尝试加锁\",{\"1\":{\"278\":1}}],[\"总会被首先初始化\",{\"1\":{\"239\":1}}],[\"总结来说\",{\"1\":{\"419\":1}}],[\"总结\",{\"0\":{\"366\":1},\"1\":{\"159\":1}}],[\"总是使⽤索引的第⼀个列\",{\"1\":{\"26\":1}}],[\"总之\",{\"1\":{\"3\":1,\"6\":1}}],[\"滤\",{\"1\":{\"26\":1}}],[\"那我们只需要放在\",{\"1\":{\"418\":1}}],[\"那我们如何保证消息\",{\"1\":{\"364\":1}}],[\"那就是全表扫\",{\"1\":{\"223\":1}}],[\"那就不存在a\",{\"1\":{\"221\":1}}],[\"那些\",{\"1\":{\"26\":1}}],[\"那么产生这个行为的组件\",{\"1\":{\"415\":1}}],[\"那么每个线程可以访问自己内部的副本变量\",{\"1\":{\"394\":1}}],[\"那么对其中的元素进行递归校验\",{\"1\":{\"384\":1}}],[\"那么\",{\"1\":{\"306\":1}}],[\"那么当我们a有事物时候\",{\"1\":{\"280\":1}}],[\"那么可以重发\",{\"1\":{\"273\":1}}],[\"那么可以提交事务\",{\"1\":{\"273\":1}}],[\"那么⽣产者会收到异常报错\",{\"1\":{\"273\":1}}],[\"那么依赖老年代进行担保\",{\"1\":{\"271\":1}}],[\"那么就无法为其创建代理对象\",{\"1\":{\"420\":1}}],[\"那么就要配合confirm机制\",{\"1\":{\"274\":1}}],[\"那么就会比较耗费性能\",{\"1\":{\"241\":1}}],[\"那么就需要使用容器编排工具\",{\"1\":{\"100\":1}}],[\"那么赋值会在初始化阶段完成\",{\"1\":{\"237\":1}}],[\"那么编译阶段值就确定了\",{\"1\":{\"237\":1}}],[\"那么rdb文件中的内容会被aof覆盖掉\",{\"1\":{\"227\":1}}],[\"那么在redis宕机重启之后\",{\"1\":{\"227\":1}}],[\"那么在连接操作之后\",{\"1\":{\"223\":1}}],[\"那么这个队列中的命令全部执行\",{\"1\":{\"226\":1}}],[\"那么这些操作要么同时成功\",{\"1\":{\"74\":1}}],[\"那么即使存在索引\",{\"1\":{\"223\":1}}],[\"那么索引可能不会被有效利用\",{\"1\":{\"223\":1}}],[\"那么索引可能不会被使用\",{\"1\":{\"223\":1}}],[\"那么索引可能失效\",{\"1\":{\"223\":1}}],[\"那么我们首先要把80w数据全部查出来性能肯定是大大降低了的\",{\"1\":{\"223\":1}}],[\"那么b的值也就是无序的\",{\"1\":{\"221\":1}}],[\"那么b就是无序的\",{\"1\":{\"221\":1}}],[\"那么b树需要回旋查询\",{\"1\":{\"220\":1}}],[\"那么需要使⽤v\",{\"1\":{\"188\":1}}],[\"那么将配置⽂件中的缓冲区的join\",{\"1\":{\"19\":1,\"22\":1}}],[\"那么为什么还要创建联合索引呢\",{\"1\":{\"19\":1}}],[\"那么书的⽬录就是索引\",{\"1\":{\"19\":1}}],[\"常见于orderby语句\",{\"1\":{\"223\":1}}],[\"常见功能\",{\"1\":{\"81\":1}}],[\"常用于建立复制时所需要用到的用户权限\",{\"1\":{\"478\":1}}],[\"常用注解\",{\"0\":{\"384\":1}}],[\"常用的集合类有哪些\",{\"1\":{\"240\":1}}],[\"常用的5种数据结构\",{\"1\":{\"225\":1}}],[\"常用命令\",{\"0\":{\"184\":1}}],[\"常用单词\",{\"0\":{\"79\":1}}],[\"常规匹配\",{\"1\":{\"159\":1}}],[\"常规方式\",{\"1\":{\"159\":1}}],[\"常⽤的sql优化⽅案\",{\"0\":{\"26\":1}}],[\"常⻅于排序order\",{\"1\":{\"19\":1,\"22\":1}}],[\"常⻅于主键或唯⼀索引扫描\",{\"1\":{\"19\":1}}],[\"结合自己项目进行关联\",{\"1\":{\"437\":1}}],[\"结合项⽬模块\",{\"1\":{\"25\":1}}],[\"结果进程就挂了\",{\"1\":{\"275\":1}}],[\"结果放入\",{\"1\":{\"231\":1}}],[\"结果\",{\"1\":{\"50\":1,\"231\":1,\"355\":1}}],[\"结果3\",{\"1\":{\"50\":1}}],[\"结果2\",{\"1\":{\"50\":1}}],[\"结果1\",{\"1\":{\"50\":1}}],[\"结构化查询语言\",{\"1\":{\"30\":1}}],[\"结构化查询语⾔\",{\"1\":{\"12\":1}}],[\"拆分地址\",{\"1\":{\"323\":1}}],[\"拆分为多个sql语句\",{\"1\":{\"25\":1}}],[\"拆分业务逻辑\",{\"1\":{\"25\":1}}],[\"多日志文件\",{\"1\":{\"476\":1}}],[\"多环境配置\",{\"0\":{\"438\":1}}],[\"多线程问题\",{\"0\":{\"391\":1}}],[\"多线程异步定时任务\",{\"0\":{\"300\":1,\"414\":1}}],[\"多态就是父类的引用指向子类的实例\",{\"1\":{\"259\":1}}],[\"多态建立在封装和继承之上它是指在父类中定义的属性和方法被子类继承之后\",{\"1\":{\"258\":1}}],[\"多拦截器执行顺序\",{\"0\":{\"257\":1}}],[\"多次读同一个数据\",{\"1\":{\"217\":1}}],[\"多租户支持\",{\"1\":{\"125\":1}}],[\"多对多关系实现需要借助第三张中间表\",{\"1\":{\"78\":1}}],[\"多对多\",{\"1\":{\"78\":2}}],[\"多对一\",{\"1\":{\"78\":2}}],[\"多行多列\",{\"1\":{\"72\":1}}],[\"多行注释\",{\"1\":{\"30\":1}}],[\"多表之间的关系\",{\"1\":{\"78\":2}}],[\"多表查询\",{\"0\":{\"65\":1}}],[\"多表join的次数⾮常多\",{\"1\":{\"19\":1,\"22\":1}}],[\"多个对象可以处理同一请求\",{\"1\":{\"425\":1}}],[\"多个field对应一个text\",{\"1\":{\"330\":1}}],[\"多个客户端\",{\"1\":{\"279\":2}}],[\"多个⼈⼲\",{\"1\":{\"166\":1}}],[\"多个事务之间隔离的\",{\"1\":{\"76\":1}}],[\"多个事务之间\",{\"1\":{\"75\":1}}],[\"多个字符串连接\",{\"1\":{\"52\":1}}],[\"多个字段的查询\",{\"1\":{\"48\":1}}],[\"多个任意字符\",{\"1\":{\"49\":1}}],[\"多库\",{\"1\":{\"28\":1}}],[\"多主多从\",{\"1\":{\"25\":1}}],[\"舍弃连接\",{\"1\":{\"25\":1}}],[\"再传入到远端服务器中使用\",{\"1\":{\"440\":1}}],[\"再查看私钥\",{\"1\":{\"435\":1}}],[\"再比较equles\",{\"1\":{\"244\":1}}],[\"再执行update\",{\"1\":{\"232\":1}}],[\"再执行update操作\",{\"1\":{\"232\":1}}],[\"再执行缓存清除\",{\"1\":{\"232\":2}}],[\"再执⾏where\",{\"1\":{\"25\":1}}],[\"再次尝试加锁\",{\"1\":{\"278\":1}}],[\"再次开启aof\",{\"1\":{\"227\":1}}],[\"再次⽣成虚拟表v2\",{\"1\":{\"22\":1}}],[\"再提交\",{\"1\":{\"74\":1}}],[\"再创建\",{\"1\":{\"33\":1}}],[\"⽐如\",{\"1\":{\"166\":2,\"360\":1}}],[\"⽐如合理设计索引\",{\"1\":{\"25\":1}}],[\"⽐如说在查询的时候\",{\"1\":{\"19\":1,\"22\":1}}],[\"⼲掉没⽤的表连接3\",{\"1\":{\"25\":1}}],[\"尝试处理1\",{\"1\":{\"25\":1}}],[\"联合主键\",{\"1\":{\"78\":1}}],[\"联合查询的多表关系不是最短路径\",{\"1\":{\"24\":1,\"25\":1}}],[\"联合索引查找的原理就是最左匹配原则\",{\"1\":{\"221\":1}}],[\"联合索引\",{\"1\":{\"19\":2,\"219\":1,\"223\":1}}],[\"影响性能\",{\"1\":{\"24\":1,\"25\":1}}],[\"汇总⼀些常⻅\",{\"1\":{\"24\":1}}],[\"进而产生问题\",{\"1\":{\"258\":1}}],[\"进⾏匹配队列\",{\"1\":{\"358\":1}}],[\"进⾏优先分配\",{\"1\":{\"166\":1}}],[\"进⾏分析\",{\"1\":{\"24\":1}}],[\"进程标识符\",{\"1\":{\"157\":1}}],[\"进入id\",{\"1\":{\"435\":1}}],[\"进入kibana容器\",{\"1\":{\"315\":1}}],[\"进入root用户\",{\"1\":{\"170\":1}}],[\"进入redis目录\",{\"1\":{\"121\":1}}],[\"进入redis的容器\",{\"1\":{\"121\":1}}],[\"进入目录编译代码\",{\"1\":{\"450\":1,\"454\":1}}],[\"进入目录测试\",{\"1\":{\"200\":1}}],[\"进入目录\",{\"1\":{\"157\":1}}],[\"进入nginx目录\",{\"1\":{\"157\":1}}],[\"进入到我们的binlog日志位置\",{\"1\":{\"144\":1}}],[\"进入到容器内部\",{\"1\":{\"95\":1}}],[\"进入elasticsearch容器\",{\"1\":{\"111\":1}}],[\"进入es容器\",{\"1\":{\"108\":2,\"314\":1}}],[\"进入容器bin目录\",{\"1\":{\"122\":1}}],[\"进入容器\",{\"1\":{\"109\":1,\"351\":1}}],[\"进行编译\",{\"1\":{\"493\":1}}],[\"进行强制安装\",{\"1\":{\"473\":1}}],[\"进行校验真伪\",{\"1\":{\"379\":1}}],[\"进行校验\",{\"1\":{\"378\":1}}],[\"进行校验参数\",{\"1\":{\"376\":1}}],[\"进行发送\",{\"1\":{\"359\":1}}],[\"进行去重\",{\"1\":{\"343\":1}}],[\"进行相应的处理\",{\"1\":{\"297\":1,\"411\":1,\"415\":1}}],[\"进行攻击\",{\"1\":{\"231\":1}}],[\"进行数据的组装\",{\"1\":{\"223\":1}}],[\"进行纵向的计算\",{\"1\":{\"55\":1}}],[\"进行日志输出\",{\"1\":{\"21\":1}}],[\"因此很多时候事情完成一半便会转交给下一个部门\",{\"1\":{\"425\":1}}],[\"因此\",{\"1\":{\"422\":1}}],[\"因此就存在一个天然的缺陷\",{\"1\":{\"420\":1}}],[\"因此更加灵活\",{\"1\":{\"419\":1}}],[\"因此它适用于对接口进行代理的场景\",{\"1\":{\"419\":1}}],[\"因此在一些特定场景下\",{\"1\":{\"419\":1}}],[\"因此在创建大量代理对象时\",{\"1\":{\"419\":1}}],[\"因此在使用spring框架的项目中无需额外导入依赖\",{\"1\":{\"391\":1}}],[\"因此无法代理被标记为final的方法\",{\"1\":{\"419\":1}}],[\"因此如果存在多个任务同时触发\",{\"1\":{\"300\":1,\"414\":1}}],[\"因此可以在不影响发布者的情况下修改订阅者\",{\"1\":{\"281\":1}}],[\"因此不推荐使用\",{\"1\":{\"258\":1}}],[\"因此查找的时候非常快\",{\"1\":{\"241\":1}}],[\"因果而异\",{\"1\":{\"22\":1}}],[\"因为表单值为\",{\"1\":{\"384\":1}}],[\"因为性能太低\",{\"1\":{\"302\":1}}],[\"因为\",{\"1\":{\"300\":1,\"396\":1,\"414\":1,\"473\":1}}],[\"因为类的代理对象必须是在类的实例对象已生成的基础上去生成的\",{\"1\":{\"280\":1}}],[\"因为zookeeper临时节点先天性可控的有效期\",{\"1\":{\"279\":1}}],[\"因为zookeeper节点命名路径保证唯一\",{\"1\":{\"279\":1}}],[\"因为redis有效期不是很好控制\",{\"1\":{\"279\":1}}],[\"因为redis是nosql数据库\",{\"1\":{\"279\":1}}],[\"因为redis的key保证唯一\",{\"1\":{\"279\":1}}],[\"因为临时节点生命周期与session会话绑定在一块\",{\"1\":{\"279\":1}}],[\"因为是集群\",{\"1\":{\"277\":1}}],[\"因为前面调用过一次\",{\"1\":{\"258\":1}}],[\"因为select\",{\"1\":{\"223\":1}}],[\"因为它们往往涉及到全表扫描\",{\"1\":{\"223\":1}}],[\"因为它只需要开始于索引\",{\"1\":{\"19\":1}}],[\"因为⽀持异步\",{\"1\":{\"213\":1}}],[\"因为这类操作对数据本身并没有修改\",{\"1\":{\"143\":1}}],[\"因为我们之前配置了hosts\",{\"1\":{\"460\":1}}],[\"因为我\",{\"1\":{\"28\":1}}],[\"因为我使用的框架非springboot\",{\"1\":{\"3\":1}}],[\"因为在索引列上计算会导致索引失效\",{\"1\":{\"26\":1}}],[\"因为索引\",{\"1\":{\"19\":1}}],[\"因为只匹配⼀⾏数\",{\"1\":{\"19\":1}}],[\"因为此时输入流中已经没有数据可读取了\",{\"1\":{\"6\":1}}],[\"因为输入流的数据已经被读取和消耗掉了\",{\"1\":{\"6\":1}}],[\"去除不需要的\",{\"1\":{\"200\":1}}],[\"去除重复记录\",{\"1\":{\"59\":2}}],[\"去除重复\",{\"1\":{\"48\":1}}],[\"去记录查询的sql语句的执⾏时间\",{\"1\":{\"23\":1}}],[\"去分析代码\",{\"1\":{\"22\":1}}],[\"去重计数查询\",{\"0\":{\"343\":1}}],[\"去重重复结果\",{\"1\":{\"22\":1}}],[\"去重\",{\"1\":{\"22\":1}}],[\"根据show\",{\"1\":{\"479\":1}}],[\"根据filter存入\",{\"1\":{\"396\":1}}],[\"根据模板⽂件\",{\"1\":{\"371\":1}}],[\"根据绑定转发到指定的队列\",{\"1\":{\"360\":1}}],[\"根据名称获取\",{\"1\":{\"344\":1}}],[\"根据一个long和scaled来表达一个浮点型\",{\"1\":{\"317\":1}}],[\"根据全限定类名使用反射创建对象放入map中\",{\"1\":{\"280\":1}}],[\"根据请求信息和配置信息找到匹配的\",{\"1\":{\"280\":1}}],[\"根据\",{\"1\":{\"233\":1}}],[\"根据id值去匹配聚簇索引\",{\"1\":{\"223\":1}}],[\"根据ip地址的哈希算法\",{\"1\":{\"166\":1}}],[\"根据ip地址计算出一个结果\",{\"1\":{\"160\":1}}],[\"根据索引存储的\",{\"1\":{\"223\":1}}],[\"根据以上步骤安装完后\",{\"1\":{\"177\":1}}],[\"根据权重值\",{\"1\":{\"166\":1}}],[\"根据hash\",{\"1\":{\"163\":1}}],[\"根据配置的权重比例访问相应服务\",{\"1\":{\"162\":1}}],[\"根据这个结果找对应的服务器\",{\"1\":{\"160\":1}}],[\"根据这个原理\",{\"1\":{\"26\":1}}],[\"根据服务器的权重值不同\",{\"1\":{\"160\":1}}],[\"根据硬件调整\",{\"1\":{\"157\":2}}],[\"根据时间进行反编译执行sql\",{\"1\":{\"146\":1}}],[\"根据时间去查看是否为当时删除的数据\",{\"1\":{\"146\":1}}],[\"根据偏移量去执行反编译sql\",{\"1\":{\"146\":1}}],[\"根据实际情况\",{\"1\":{\"28\":1}}],[\"根据执⾏慢的sql语句\",{\"1\":{\"24\":1}}],[\"根据分析结果\",{\"1\":{\"22\":1}}],[\"根据异常\",{\"1\":{\"22\":1}}],[\"根据表统计信息及索引选⽤情况\",{\"1\":{\"19\":1,\"22\":1}}],[\"⽇志平台主要存储的查询的数据\",{\"1\":{\"302\":1}}],[\"⽇志\",{\"1\":{\"22\":1}}],[\"⽇期类型\",{\"1\":{\"12\":1,\"216\":1}}],[\"定程度上减少对象的数量\",{\"1\":{\"416\":1}}],[\"定时任务\",{\"1\":{\"391\":1}}],[\"定期删除\",{\"1\":{\"229\":1}}],[\"定长字符串\",{\"1\":{\"78\":1}}],[\"定位\",{\"1\":{\"22\":2,\"23\":1}}],[\"定义中继日志文件的位置和名称\",{\"1\":{\"479\":1}}],[\"定义日志文件的存储地址\",{\"1\":{\"389\":1}}],[\"定义注解的使用范围\",{\"1\":{\"378\":1}}],[\"定义注解运行时有效性\",{\"1\":{\"378\":1}}],[\"定义一个联合索引为\",{\"1\":{\"221\":1}}],[\"定义\",{\"1\":{\"214\":1}}],[\"定义容器的信息\",{\"1\":{\"102\":1}}],[\"定义实例\",{\"1\":{\"84\":1}}],[\"定义存储过程\",{\"1\":{\"18\":1}}],[\"定义局部变量\",{\"1\":{\"16\":1}}],[\"∧\",{\"1\":{\"22\":1}}],[\"记录下结果中file和position\",{\"1\":{\"478\":1}}],[\"记录的\",{\"1\":{\"297\":1,\"411\":1}}],[\"记录⼤部分对象存储所需要的空间\",{\"1\":{\"269\":1}}],[\"记录每个线程的执⾏的字节⾏数\",{\"1\":{\"269\":1}}],[\"记录就是执⾏超过2秒的sql语句2\",{\"1\":{\"23\":1}}],[\"记录到日志中\",{\"1\":{\"21\":1}}],[\"记作axb\",{\"1\":{\"22\":1}}],[\"设计模式\",{\"1\":{\"85\":1,\"353\":1}}],[\"设计出合理的关系型数据库\",{\"1\":{\"78\":1}}],[\"设计关系数据库时\",{\"1\":{\"78\":1}}],[\"设计数据库时\",{\"1\":{\"78\":1}}],[\"设a\",{\"1\":{\"22\":1}}],[\"设置为后台启动\",{\"1\":{\"497\":1}}],[\"设置开机自启\",{\"1\":{\"494\":1,\"498\":1}}],[\"设置开机启动\",{\"1\":{\"475\":1}}],[\"设置主库地址及同步位置\",{\"1\":{\"479\":1}}],[\"设置主页\",{\"1\":{\"97\":1}}],[\"设置好后重启系统\",{\"1\":{\"435\":1}}],[\"设置好了之后可以方便我们定位处理任务所在的线程池\",{\"1\":{\"391\":1}}],[\"设置日志级别\",{\"1\":{\"389\":1}}],[\"设置对应变量数据\",{\"1\":{\"371\":1}}],[\"设置对应的死信交换器\",{\"1\":{\"360\":2}}],[\"设置手动\",{\"1\":{\"362\":1}}],[\"设置了有效期为10秒\",{\"1\":{\"360\":1}}],[\"设置队列信息\",{\"1\":{\"360\":1}}],[\"设置队列中每个消息的有效期\",{\"1\":{\"360\":2}}],[\"设置交换器匹配的路由名称\",{\"1\":{\"360\":2}}],[\"设置查询条件\",{\"1\":{\"339\":1}}],[\"设置每页展示几条数据\",{\"1\":{\"337\":1}}],[\"设置es上下文生产时间\",{\"1\":{\"337\":2}}],[\"设置密码\",{\"0\":{\"313\":1},\"1\":{\"314\":1}}],[\"设置key\",{\"1\":{\"231\":1}}],[\"设置redis的最大内存\",{\"1\":{\"230\":1}}],[\"设置redis密码\",{\"1\":{\"121\":1}}],[\"设置\",{\"0\":{\"215\":1}}],[\"设置是的需要保存为模板\",{\"1\":{\"200\":1}}],[\"设置配置⽂件\",{\"1\":{\"200\":1}}],[\"设置项⽬信息\",{\"1\":{\"200\":1}}],[\"设置npm安装程序时的缓存位置\",{\"1\":{\"198\":1}}],[\"设置npm安装程序时的默认位置\",{\"1\":{\"198\":1}}],[\"设置安装路径\",{\"0\":{\"198\":1}}],[\"设置事件\",{\"1\":{\"195\":1}}],[\"设置模板\",{\"1\":{\"194\":1}}],[\"设置唯一id\",{\"1\":{\"143\":1}}],[\"设置启动占用内存\",{\"1\":{\"108\":1}}],[\"设置数据卷\",{\"1\":{\"95\":1}}],[\"设置端口号\",{\"1\":{\"95\":1}}],[\"设置加速地址\",{\"1\":{\"94\":1}}],[\"设置发送时间\",{\"1\":{\"84\":1}}],[\"设置邮件正文内容\",{\"1\":{\"84\":1}}],[\"设置邮件接收者\",{\"1\":{\"84\":1}}],[\"设置邮件发送者\",{\"1\":{\"84\":1}}],[\"设置邮件主题\",{\"1\":{\"84\":1}}],[\"设置复杂模式开启\",{\"1\":{\"83\":1}}],[\"设置复合主键\",{\"1\":{\"78\":1}}],[\"设置优化精度\",{\"1\":{\"83\":1}}],[\"设置编码格式\",{\"1\":{\"83\":1}}],[\"设置不同的隔离级别就可以解决这些问题\",{\"1\":{\"76\":1}}],[\"设置分片信息\",{\"1\":{\"28\":1}}],[\"设置最⼤连接\",{\"1\":{\"25\":1}}],[\"设置最大文件尺寸\",{\"1\":{\"3\":1}}],[\"设置用户变量\",{\"1\":{\"18\":1}}],[\"yes\",{\"1\":{\"479\":3,\"495\":4,\"496\":1,\"497\":1}}],[\"year\",{\"1\":{\"51\":1,\"79\":1,\"223\":1}}],[\"your\",{\"1\":{\"386\":7}}],[\"you\",{\"1\":{\"145\":1,\"310\":1,\"386\":13}}],[\"yum\",{\"1\":{\"93\":3,\"106\":1,\"115\":1,\"137\":1,\"146\":1,\"157\":1,\"171\":2,\"444\":2,\"445\":1,\"446\":1,\"473\":2,\"493\":1,\"495\":2}}],[\"yml增加\",{\"1\":{\"389\":1}}],[\"yml配置\",{\"1\":{\"323\":1}}],[\"yml配置文件中添加以下内容\",{\"1\":{\"315\":1}}],[\"yml配置中添加minio相关的配置\",{\"1\":{\"133\":1}}],[\"yml文件\",{\"1\":{\"108\":1,\"109\":1}}],[\"yml\",{\"1\":{\"28\":1,\"100\":2,\"104\":2,\"105\":2,\"108\":4,\"109\":1,\"309\":4,\"314\":1,\"315\":1,\"352\":1,\"491\":1}}],[\"y∈b\",{\"1\":{\"22\":1}}],[\"y\",{\"1\":{\"22\":3,\"93\":1,\"106\":1,\"115\":1,\"137\":1,\"146\":1,\"157\":1,\"165\":1,\"171\":2,\"444\":2,\"445\":1,\"450\":1,\"473\":1}}],[\"yyyy\",{\"1\":{\"21\":1,\"28\":1,\"39\":3,\"317\":1,\"320\":1,\"344\":1,\"389\":6}}],[\"yy\",{\"1\":{\"15\":1}}],[\"x64\",{\"1\":{\"481\":1}}],[\"xfs\",{\"1\":{\"462\":2}}],[\"xr\",{\"1\":{\"459\":1}}],[\"xargs\",{\"1\":{\"445\":1,\"450\":1,\"454\":2}}],[\"xe\",{\"1\":{\"476\":1}}],[\"xex\",{\"1\":{\"389\":1}}],[\"xe4ndjvssmb\",{\"1\":{\"178\":1}}],[\"xiandafu\",{\"1\":{\"367\":1}}],[\"xzvf\",{\"1\":{\"447\":1}}],[\"xz\",{\"1\":{\"138\":1}}],[\"xvf\",{\"1\":{\"138\":1,\"157\":1,\"473\":1}}],[\"x86\",{\"1\":{\"115\":1,\"138\":2,\"308\":3,\"444\":2,\"445\":2,\"459\":2,\"472\":4,\"473\":11}}],[\"xpack\",{\"1\":{\"108\":2,\"314\":2}}],[\"xml文件\",{\"1\":{\"389\":1}}],[\"xml\",{\"1\":{\"386\":1,\"389\":2,\"447\":1}}],[\"xml⽂件\",{\"1\":{\"368\":1}}],[\"xml配置的bean\",{\"1\":{\"280\":1}}],[\"xmx6144m\",{\"1\":{\"165\":1,\"450\":1}}],[\"xmx512m\",{\"1\":{\"108\":2,\"309\":1}}],[\"xms4096m\",{\"1\":{\"165\":1,\"450\":1}}],[\"xms64m\",{\"1\":{\"108\":1}}],[\"xms512m\",{\"1\":{\"108\":1,\"309\":1}}],[\"xxx开头的路径\",{\"1\":{\"159\":1}}],[\"xxx\",{\"1\":{\"93\":1,\"159\":1,\"200\":1}}],[\"x\",{\"1\":{\"22\":4,\"157\":1,\"165\":5,\"360\":3,\"389\":2,\"459\":1,\"464\":8,\"490\":1}}],[\"排行榜\",{\"1\":{\"225\":1}}],[\"排除null值\",{\"1\":{\"55\":1}}],[\"排除一些不必要的url\",{\"1\":{\"21\":1}}],[\"排序方式\",{\"1\":{\"54\":1}}],[\"排序方式2\",{\"1\":{\"54\":1}}],[\"排序方式1\",{\"1\":{\"54\":1}}],[\"排序字段2\",{\"1\":{\"54\":1}}],[\"排序字段1\",{\"1\":{\"54\":1}}],[\"排序查询\",{\"0\":{\"54\":1},\"1\":{\"54\":2}}],[\"排序\",{\"1\":{\"22\":1,\"47\":1,\"79\":1}}],[\"9339869909381422\",{\"1\":{\"345\":1}}],[\"9300\",{\"1\":{\"108\":5,\"309\":2}}],[\"92\",{\"1\":{\"352\":1,\"353\":1}}],[\"9223372036854774808~922337203685477480\",{\"1\":{\"317\":1}}],[\"9200用于http\",{\"1\":{\"108\":1}}],[\"9200\",{\"1\":{\"108\":4,\"109\":2,\"113\":1,\"309\":3,\"310\":1,\"323\":2}}],[\"90\",{\"1\":{\"161\":1,\"391\":2}}],[\"900\",{\"1\":{\"227\":1}}],[\"9001是api的端口\",{\"1\":{\"128\":1}}],[\"9001\",{\"1\":{\"128\":3,\"133\":1,\"460\":1,\"464\":5}}],[\"9000是图形界面的端口\",{\"1\":{\"128\":1}}],[\"9000\",{\"1\":{\"128\":3,\"129\":1,\"464\":5,\"467\":2}}],[\"9000000e\",{\"1\":{\"317\":1}}],[\"900000\",{\"1\":{\"21\":1}}],[\"9\",{\"0\":{\"335\":1},\"1\":{\"22\":1,\"26\":1,\"77\":1,\"95\":2,\"97\":1,\"104\":3,\"110\":1,\"165\":1,\"200\":1,\"223\":1,\"336\":2,\"445\":4,\"447\":4,\"450\":2,\"473\":1}}],[\"⽣产者产⽣消息并把消息放⼊队列\",{\"1\":{\"351\":1}}],[\"⽣产者会重新发送\",{\"1\":{\"274\":1}}],[\"⽣成⽂件\",{\"1\":{\"371\":1}}],[\"⽣成全局id\",{\"1\":{\"275\":1,\"364\":1}}],[\"⽣成虚拟表v1\",{\"1\":{\"22\":1}}],[\"⽣效\",{\"1\":{\"19\":1}}],[\"笛卡尔积的符号化为\",{\"1\":{\"22\":1}}],[\"笛卡尔积乘积指在数学上\",{\"1\":{\"22\":1}}],[\"笛卡尔积是什么\",{\"1\":{\"22\":1}}],[\"笛卡尔积计算\",{\"1\":{\"22\":2}}],[\"笛卡尔积查询\",{\"1\":{\"13\":1}}],[\"也算是字符串类型\",{\"1\":{\"320\":1}}],[\"也无法保证其实现100\",{\"1\":{\"279\":1}}],[\"也就可以理解为常量\",{\"1\":{\"259\":1}}],[\"也就是slave必须被master授权具有该权限的用户\",{\"1\":{\"478\":1}}],[\"也就是有事件触发时\",{\"1\":{\"416\":1}}],[\"也就是二级缓存只能解决普通实例对象的循环依赖\",{\"1\":{\"280\":1}}],[\"也就是字节码\",{\"1\":{\"269\":1}}],[\"也就是同一个内存空间\",{\"1\":{\"259\":1}}],[\"也就是变量所对应的内存空间的地址\",{\"1\":{\"259\":1}}],[\"也就是我们常说的\",{\"1\":{\"235\":1}}],[\"也就是我们常用的id2\",{\"1\":{\"219\":1}}],[\"也就是当数据量很大的时候\",{\"1\":{\"233\":1}}],[\"也就是叶子节点\",{\"1\":{\"220\":1}}],[\"也就是事物b读取到了事物a未提交的数据\",{\"1\":{\"217\":1}}],[\"也就是pscache\",{\"1\":{\"21\":1}}],[\"也就是说该变量是当前线程独有的变量\",{\"1\":{\"394\":1}}],[\"也就是说传递前和传递后都指向同一个引用\",{\"1\":{\"259\":1}}],[\"也就是说传递后就互不相关了\",{\"1\":{\"259\":1}}],[\"也就是说每一个对象都有这么个方法\",{\"1\":{\"258\":1}}],[\"也就是说\",{\"1\":{\"19\":1,\"22\":1}}],[\"也就是说虽然all和index都是读全表\",{\"1\":{\"19\":1}}],[\"也需要做一次元素复制操作\",{\"1\":{\"241\":1}}],[\"也可以灵活地增加\",{\"1\":{\"416\":1}}],[\"也可以像栈一样\",{\"1\":{\"286\":1,\"400\":1}}],[\"也可以存储引用数据类型\",{\"1\":{\"240\":1}}],[\"也可以作为云对象存储的网关层\",{\"1\":{\"124\":1}}],[\"也集成到\",{\"1\":{\"212\":1}}],[\"也会被拒绝\",{\"1\":{\"21\":1}}],[\"重置偏移量\",{\"1\":{\"478\":1}}],[\"重写threadpooltaskexecutor\",{\"1\":{\"391\":1}}],[\"重写httpservletrequestwrapper\",{\"0\":{\"8\":1}}],[\"重命名安装下载的安装包\",{\"1\":{\"308\":1}}],[\"重复输出的内容<\",{\"1\":{\"373\":1}}],[\"重复执行会报错\",{\"1\":{\"319\":1}}],[\"重复注解机制本身必须用\",{\"1\":{\"267\":1}}],[\"重复注解\",{\"1\":{\"267\":1}}],[\"重复率就会降低\",{\"1\":{\"231\":1}}],[\"重点\",{\"0\":{\"228\":1}}],[\"重点在于表中已经存在的数据被其他事务修改了\",{\"1\":{\"217\":1}}],[\"重点在于事务开始后\",{\"1\":{\"217\":1}}],[\"重启ssh服务\",{\"1\":{\"435\":1}}],[\"重启stop\",{\"1\":{\"177\":1}}],[\"重启服务器\",{\"1\":{\"458\":1}}],[\"重启服务器防火墙\",{\"1\":{\"116\":1}}],[\"重启服务\",{\"1\":{\"431\":1}}],[\"重启即可\",{\"1\":{\"315\":1}}],[\"重启之后\",{\"1\":{\"274\":1}}],[\"重启等\",{\"0\":{\"177\":1}}],[\"重启nignx\",{\"1\":{\"157\":1}}],[\"重启es\",{\"1\":{\"110\":1,\"314\":1}}],[\"重启es容器\",{\"1\":{\"108\":1}}],[\"重启容器\",{\"1\":{\"95\":1,\"111\":1}}],[\"重启\",{\"1\":{\"93\":1,\"109\":1,\"157\":1}}],[\"重新加载\",{\"1\":{\"494\":1,\"498\":1}}],[\"重新加载配\",{\"1\":{\"475\":1,\"495\":1}}],[\"重新加载配置\",{\"1\":{\"94\":1}}],[\"重新配置从库即可\",{\"1\":{\"479\":1}}],[\"重新启动slave即可\",{\"1\":{\"479\":1}}],[\"重新提交被拒绝的任务\",{\"1\":{\"287\":1,\"401\":1}}],[\"重新进入获取锁的步骤\",{\"1\":{\"279\":1}}],[\"重新添加上一个属性\",{\"1\":{\"83\":1}}],[\"重新计算\",{\"1\":{\"21\":1}}],[\"启用守护进程模式\",{\"1\":{\"495\":1}}],[\"启用statviewservlet\",{\"1\":{\"21\":1}}],[\"启用内置过滤器\",{\"1\":{\"21\":1}}],[\"启动集群模式\",{\"1\":{\"495\":1}}],[\"启动redis\",{\"1\":{\"495\":1}}],[\"启动指定配置文件\",{\"1\":{\"493\":2}}],[\"启动从节点\",{\"1\":{\"479\":1}}],[\"启动报错\",{\"0\":{\"462\":1}}],[\"启动系统服务\",{\"1\":{\"439\":1}}],[\"启动服务\",{\"1\":{\"431\":1}}],[\"启动日志\",{\"1\":{\"309\":1}}],[\"启动防火墙\",{\"1\":{\"177\":1}}],[\"启动start\",{\"1\":{\"177\":1}}],[\"启动脚本\",{\"1\":{\"172\":1}}],[\"启动nginx服务\",{\"1\":{\"157\":1}}],[\"启动镜像\",{\"0\":{\"128\":1}}],[\"启动密码\",{\"1\":{\"120\":1}}],[\"启动容器的名称\",{\"1\":{\"120\":1}}],[\"启动容器\",{\"1\":{\"95\":1}}],[\"启动时间很长\",{\"1\":{\"91\":1}}],[\"启动mysql服务\",{\"1\":{\"77\":1,\"475\":1}}],[\"启动\",{\"0\":{\"154\":1,\"177\":1},\"1\":{\"21\":1,\"92\":1,\"93\":1,\"157\":1,\"258\":1,\"494\":1,\"497\":1}}],[\"开始执行脚本\",{\"1\":{\"441\":1}}],[\"开始上传\",{\"1\":{\"441\":1}}],[\"开始构建\",{\"1\":{\"441\":1}}],[\"开始的索引\",{\"1\":{\"57\":2}}],[\"开机自动启动ssh命令\",{\"1\":{\"435\":1}}],[\"开机自启\",{\"1\":{\"157\":1}}],[\"开发方式\",{\"1\":{\"433\":1}}],[\"开发环境\",{\"1\":{\"91\":1}}],[\"开闭原则\",{\"1\":{\"416\":1}}],[\"开辟了内存但属性为赋值的bean\",{\"1\":{\"280\":1}}],[\"开放redis集群总线端口\",{\"1\":{\"495\":1}}],[\"开放端口\",{\"1\":{\"177\":1}}],[\"开放端⼝6379\",{\"1\":{\"121\":1}}],[\"开放80端口\",{\"1\":{\"157\":1}}],[\"开放8081\",{\"1\":{\"97\":1}}],[\"开放3307\",{\"1\":{\"98\":1}}],[\"开启\",{\"1\":{\"495\":2}}],[\"开启鉴权\",{\"0\":{\"489\":1}}],[\"开启中继日志\",{\"1\":{\"479\":1}}],[\"开启远程连接\",{\"1\":{\"474\":1}}],[\"开启rabbitmq的持久化\",{\"1\":{\"274\":1}}],[\"开启bin\",{\"0\":{\"143\":1},\"1\":{\"143\":1}}],[\"开启事务\",{\"1\":{\"74\":2,\"226\":1,\"361\":1}}],[\"开启session统计功能\",{\"1\":{\"21\":1}}],[\"开启慢sql监控\",{\"1\":{\"21\":1}}],[\"开启druiddatasource的状态监控\",{\"1\":{\"21\":1}}],[\"开头\",{\"1\":{\"16\":1}}],[\"自带自启\",{\"1\":{\"475\":1}}],[\"自定义注解\",{\"1\":{\"378\":1}}],[\"自定义名称\",{\"1\":{\"343\":1}}],[\"自定义标签\",{\"1\":{\"194\":1}}],[\"自身进入阻塞状态\",{\"1\":{\"278\":1}}],[\"自平衡的排序二叉树\",{\"1\":{\"246\":1,\"250\":1}}],[\"自行验证\",{\"1\":{\"499\":1}}],[\"自行下载\",{\"1\":{\"177\":1}}],[\"自行模拟删除数据\",{\"1\":{\"144\":1}}],[\"自增\",{\"1\":{\"79\":1}}],[\"自增长\",{\"1\":{\"78\":1}}],[\"自动\",{\"1\":{\"362\":1}}],[\"自动补全\",{\"1\":{\"318\":1}}],[\"自动发现机器\",{\"1\":{\"303\":1}}],[\"自动投票选举\",{\"1\":{\"233\":1}}],[\"自动激活\",{\"1\":{\"208\":1}}],[\"自动提交事物\",{\"1\":{\"476\":1}}],[\"自动提交\",{\"1\":{\"74\":1}}],[\"自动增长\",{\"1\":{\"63\":1,\"78\":2}}],[\"自动填充\",{\"1\":{\"15\":1}}],[\"自己配置监控统计拦截的filter\",{\"1\":{\"21\":1}}],[\"否则都算失败\",{\"1\":{\"274\":1}}],[\"否则过滤器会不起作用\",{\"1\":{\"253\":1}}],[\"否则就会遇到⼀个坑\",{\"1\":{\"28\":1}}],[\"否则监控不到sql\",{\"1\":{\"21\":1}}],[\"否则还是会出现问题\",{\"1\":{\"10\":1}}],[\"监控和管理\",{\"1\":{\"391\":1}}],[\"监控页面\",{\"1\":{\"21\":1}}],[\"监控\",{\"1\":{\"21\":1}}],[\"监听端口号\",{\"1\":{\"495\":1}}],[\"监听器就是\",{\"1\":{\"415\":1}}],[\"监听器\",{\"1\":{\"355\":1,\"415\":2}}],[\"监听t\",{\"1\":{\"15\":1}}],[\"监听表中数据的变化\",{\"1\":{\"15\":1}}],[\"监听表的变化\",{\"1\":{\"15\":1}}],[\"必须同时满足\",{\"1\":{\"339\":1}}],[\"必须开启binlog日志\",{\"1\":{\"146\":1}}],[\"必须先遵循前边的所有范式要求\",{\"1\":{\"78\":1}}],[\"必须配置大于0\",{\"1\":{\"21\":1}}],[\"必须有返回值\",{\"1\":{\"17\":1}}],[\"默认分词器\",{\"1\":{\"312\":1}}],[\"默认是单线程执行的\",{\"1\":{\"300\":1,\"414\":1}}],[\"默认是false\",{\"1\":{\"21\":1}}],[\"默认有效期是30秒\",{\"1\":{\"278\":1}}],[\"默认都有\",{\"1\":{\"223\":1}}],[\"默认监听的端口号\",{\"1\":{\"162\":1,\"163\":1}}],[\"默认策略\",{\"1\":{\"160\":1}}],[\"默认线程池线程线程数数\",{\"1\":{\"156\":1}}],[\"默认为8\",{\"1\":{\"247\":1}}],[\"默认为\",{\"1\":{\"153\":1}}],[\"默认为none\",{\"1\":{\"153\":1}}],[\"默认账户elastic\",{\"1\":{\"108\":1}}],[\"默认\",{\"1\":{\"79\":1,\"230\":1,\"280\":1}}],[\"默认的\",{\"1\":{\"54\":1}}],[\"默认100\",{\"1\":{\"21\":1}}],[\"默认false\",{\"1\":{\"21\":1}}],[\"默认值每种数据库都不相同\",{\"1\":{\"21\":1}}],[\"默认约束\",{\"1\":{\"12\":1}}],[\"毫秒\",{\"1\":{\"21\":1,\"360\":1}}],[\"最多有多少个slave同时对新的master进行同步\",{\"1\":{\"497\":1}}],[\"最新版本jenkins需jdk11环境\",{\"1\":{\"444\":1}}],[\"最常⻅的\",{\"1\":{\"352\":1}}],[\"最常用的\",{\"1\":{\"225\":1}}],[\"最重要的一点是redis的性能很高\",{\"1\":{\"279\":1}}],[\"最复杂的内存区域\",{\"1\":{\"269\":1}}],[\"最好\",{\"1\":{\"231\":1}}],[\"最终⽣成⽂件\",{\"1\":{\"371\":1}}],[\"最终把把消息发送\",{\"1\":{\"358\":1}}],[\"最终⼀个消息只能被消费⼀次\",{\"1\":{\"355\":1}}],[\"最终也是顺利的完成了这次优化\",{\"1\":{\"223\":1}}],[\"最终确定需要恢复的起始位置为的行数\",{\"1\":{\"145\":1}}],[\"最外层\",{\"1\":{\"223\":1}}],[\"最低隔离\",{\"1\":{\"217\":1}}],[\"最高承受50000以上并发\",{\"1\":{\"156\":1}}],[\"最后一页\",{\"1\":{\"337\":1}}],[\"最后一列\",{\"1\":{\"39\":1}}],[\"最后\",{\"1\":{\"232\":1}}],[\"最后执⾏having\",{\"1\":{\"25\":1}}],[\"最大重试次数\",{\"1\":{\"420\":1}}],[\"最大值为\",{\"1\":{\"345\":1}}],[\"最大路由连接数\",{\"1\":{\"323\":1}}],[\"最大连接数\",{\"1\":{\"323\":1}}],[\"最大线程数5\",{\"1\":{\"391\":1}}],[\"最大线程数\",{\"1\":{\"284\":1,\"391\":1,\"398\":1}}],[\"最大\",{\"1\":{\"21\":1}}],[\"最小值为\",{\"1\":{\"345\":1}}],[\"最小线程数\",{\"1\":{\"284\":1,\"398\":1}}],[\"最小\",{\"1\":{\"21\":1}}],[\"最左前缀原则\",{\"1\":{\"19\":1}}],[\"最左侧原则\",{\"1\":{\"19\":1}}],[\"配置哨兵自启\",{\"0\":{\"498\":1}}],[\"配置中心地址\",{\"1\":{\"491\":1}}],[\"配置nacos节点信息\",{\"0\":{\"486\":1}}],[\"配置nacos\",{\"0\":{\"484\":1}}],[\"配置nginx\",{\"1\":{\"157\":1}}],[\"配置自启脚本\",{\"0\":{\"483\":1}}],[\"配置自启\",{\"1\":{\"462\":1}}],[\"配置jenkins\",{\"0\":{\"448\":1}}],[\"配置maven环境变量\",{\"1\":{\"447\":1}}],[\"配置maven阿里云镜像\",{\"1\":{\"447\":1}}],[\"配置好yum源\",{\"1\":{\"446\":1}}],[\"配置你的环境\",{\"1\":{\"438\":1}}],[\"配置coding即可\",{\"1\":{\"435\":1}}],[\"配置完成之后运行\",{\"1\":{\"428\":1}}],[\"配置完成后退出\",{\"1\":{\"143\":1}}],[\"配置restart\",{\"1\":{\"428\":1}}],[\"配置服务器\",{\"0\":{\"427\":1}}],[\"配置灵活性\",{\"1\":{\"391\":1}}],[\"配置⽂件\",{\"1\":{\"368\":1}}],[\"配置两个消费者\",{\"1\":{\"355\":1}}],[\"配置application\",{\"1\":{\"352\":1}}],[\"配置账号密码\",{\"1\":{\"315\":1}}],[\"配置简单等\",{\"1\":{\"303\":1}}],[\"配置淘宝镜像\",{\"0\":{\"183\":1},\"1\":{\"198\":1}}],[\"配置规则可自行更改\",{\"1\":{\"178\":1}}],[\"配置squid\",{\"0\":{\"175\":1}}],[\"配置statviewservlet\",{\"1\":{\"21\":1}}],[\"配置在官网查看\",{\"1\":{\"146\":1}}],[\"配置请在官网查看\",{\"1\":{\"146\":1}}],[\"配置防火墙\",{\"1\":{\"141\":1}}],[\"配置远程连接\",{\"1\":{\"141\":1}}],[\"配置环境变量\",{\"0\":{\"141\":1},\"1\":{\"481\":1}}],[\"配置开机自启动\",{\"1\":{\"177\":1}}],[\"配置开机自启\",{\"0\":{\"140\":1,\"494\":1}}],[\"配置文件中daemonize改为yes\",{\"1\":{\"493\":2}}],[\"配置文件格式\",{\"1\":{\"491\":1}}],[\"配置文件的replica\",{\"1\":{\"233\":1}}],[\"配置文件\",{\"0\":{\"139\":1,\"389\":1},\"1\":{\"172\":1}}],[\"配置不正确\",{\"1\":{\"109\":1}}],[\"配置任意机器可以访问\",{\"1\":{\"108\":1}}],[\"配置数据库节点信息\",{\"0\":{\"487\":1}}],[\"配置数据挂载卷\",{\"1\":{\"108\":1}}],[\"配置数据源\",{\"1\":{\"28\":1}}],[\"配置分片规则\",{\"1\":{\"28\":1}}],[\"配置模式\",{\"1\":{\"28\":1}}],[\"配置druid的sql监控\",{\"1\":{\"23\":1}}],[\"配置监控页面访问密码\",{\"1\":{\"21\":1}}],[\"配置webstatfilter\",{\"1\":{\"21\":1}}],[\"配置一个连接在池中最小生存的时间\",{\"1\":{\"21\":1}}],[\"配置间隔多久才进行一次检测\",{\"1\":{\"21\":1}}],[\"配置获取连接等待超时的时间\",{\"1\":{\"21\":1}}],[\"配置初始化大小\",{\"1\":{\"21\":1}}],[\"配置\",{\"0\":{\"152\":1},\"1\":{\"21\":1,\"494\":1,\"498\":1}}],[\"配合jsr303校验\",{\"1\":{\"385\":1}}],[\"配合使用\",{\"1\":{\"263\":1}}],[\"配合before\",{\"1\":{\"15\":1}}],[\"配合after\",{\"1\":{\"15\":1}}],[\"全量同步语法\",{\"1\":{\"468\":1}}],[\"全局配置\",{\"1\":{\"453\":1}}],[\"全局异常处理器\",{\"1\":{\"385\":2}}],[\"全局\",{\"1\":{\"380\":1}}],[\"全局日期格式\",{\"1\":{\"21\":1}}],[\"全部都不能匹配\",{\"1\":{\"339\":1}}],[\"全部通配\",{\"1\":{\"159\":1}}],[\"全表扫描的时候\",{\"1\":{\"223\":2}}],[\"全文检索\",{\"1\":{\"111\":1}}],[\"全连接\",{\"1\":{\"13\":1}}],[\"注解类\",{\"1\":{\"378\":1}}],[\"注解类型注解\",{\"1\":{\"267\":1}}],[\"注解采用异步执行方式\",{\"1\":{\"300\":1,\"414\":1}}],[\"注解式事件监听器\",{\"1\":{\"281\":1}}],[\"注解可以应用在任何地方\",{\"1\":{\"267\":1}}],[\"注解只能是在声明的地方所使用\",{\"1\":{\"267\":1}}],[\"注解\",{\"1\":{\"262\":1,\"385\":1}}],[\"注册\",{\"0\":{\"209\":1}}],[\"注册对象的类型\",{\"1\":{\"84\":1}}],[\"注意id与master的不同\",{\"1\":{\"479\":1}}],[\"注意你的存放nginx和文件路径一致否则依赖加载不到\",{\"1\":{\"441\":1}}],[\"注意有界队列和无界队列的区别\",{\"1\":{\"286\":1,\"400\":1}}],[\"注意事项同时开启rdb和aof的注意事项\",{\"1\":{\"227\":1}}],[\"注意将子查询\",{\"1\":{\"72\":1}}],[\"注意\",{\"1\":{\"39\":1,\"44\":1,\"45\":1,\"46\":1,\"48\":1,\"54\":1,\"55\":1,\"56\":1,\"58\":1,\"59\":1,\"62\":1,\"63\":1,\"72\":1,\"76\":1,\"85\":1,\"98\":1,\"121\":1,\"128\":1,\"159\":1,\"253\":1,\"363\":1,\"378\":1}}],[\"注释掉集群模式\",{\"1\":{\"496\":1}}],[\"注释\",{\"1\":{\"30\":1,\"495\":1}}],[\"注释内容\",{\"1\":{\"30\":2}}],[\"注\",{\"0\":{\"21\":1},\"1\":{\"108\":1,\"109\":1}}],[\"避免数据的丢失\",{\"1\":{\"306\":1}}],[\"避免数据丢失\",{\"1\":{\"227\":1}}],[\"避免更新丢失\",{\"1\":{\"217\":1}}],[\"避免了脏读\",{\"1\":{\"217\":1}}],[\"避免脏读\",{\"1\":{\"217\":1}}],[\"避免使⽤耗费资源的操作\",{\"1\":{\"26\":1}}],[\"避免改变索引列的类型\",{\"1\":{\"26\":1}}],[\"避免在索引列上使⽤is\",{\"1\":{\"26\":1}}],[\"避免在索引列上使⽤not\",{\"1\":{\"26\":1}}],[\"避免在sql的查询条件中使⽤函数进⾏计算处理\",{\"1\":{\"25\":1}}],[\"避免访问了表的数据⾏\",{\"1\":{\"19\":1,\"22\":1}}],[\"避免四舍五⼊\",{\"1\":{\"13\":1}}],[\"⽂件排序\",{\"1\":{\"19\":1,\"22\":1}}],[\"⽂件通常⽐数据⽂件⼩\",{\"1\":{\"19\":1}}],[\"引用类型作为参数被传递时也是值传递\",{\"1\":{\"259\":1}}],[\"引用传递\",{\"1\":{\"259\":1}}],[\"引入了重复注解机制\",{\"1\":{\"267\":1}}],[\"引入了conf\",{\"1\":{\"157\":1}}],[\"引入外部文件\",{\"1\":{\"165\":1}}],[\"引起来\",{\"1\":{\"44\":1}}],[\"引完成的排序操作称为\",{\"1\":{\"19\":1,\"22\":1}}],[\"引将被列出\",{\"1\":{\"19\":1,\"22\":1}}],[\"⼤致估算出找到所需的记录所需要读取的⾏数\",{\"1\":{\"19\":1,\"22\":1}}],[\"越高的范式数据库冗余越小\",{\"1\":{\"78\":1}}],[\"越好\",{\"1\":{\"19\":1,\"22\":1}}],[\"越先被执⾏\",{\"1\":{\"19\":1}}],[\"则认为挂了\",{\"1\":{\"497\":1}}],[\"则对主机进行容灾切换\",{\"1\":{\"497\":1}}],[\"则对其中的值部分进行校验\",{\"1\":{\"384\":1}}],[\"则更适合于目录之间的完整同步操作\",{\"1\":{\"468\":1}}],[\"则目标目录中相应的文件也会被删除\",{\"1\":{\"468\":1}}],[\"则进行实例化并赋值给\",{\"1\":{\"422\":1}}],[\"则通过生成子类来实现代理\",{\"1\":{\"419\":1}}],[\"则告诉mq消息已经消费\",{\"1\":{\"275\":1,\"364\":1}}],[\"则虚拟机栈负责运⾏代码\",{\"1\":{\"269\":1}}],[\"则此接口就称为函数式接口\",{\"1\":{\"262\":1}}],[\"则该class的两个\",{\"1\":{\"244\":1}}],[\"则该索\",{\"1\":{\"19\":1,\"22\":1}}],[\"则hashcode方法也必须被覆盖\",{\"1\":{\"244\":1}}],[\"则hashcode一定也是相同的\",{\"1\":{\"244\":1}}],[\"则索引可能失效\",{\"1\":{\"223\":1}}],[\"则另外一个事物不允许同时进行写操作\",{\"1\":{\"217\":1}}],[\"则允许其他事物读写\",{\"1\":{\"217\":1}}],[\"则允许所有访问\",{\"1\":{\"21\":1}}],[\"则使用正则表达式最长的那个\",{\"1\":{\"159\":1}}],[\"则表示个参数指向了一个语句中间的事件\",{\"1\":{\"145\":1}}],[\"则返回这些别名\",{\"1\":{\"84\":1}}],[\"则返回true\",{\"1\":{\"84\":1}}],[\"则称这个属性\",{\"1\":{\"78\":1}}],[\"则称\",{\"1\":{\"78\":1}}],[\"则称b依赖于a\",{\"1\":{\"78\":1}}],[\"则b属性值得确定只需要依赖于a属性组中某一些值即可\",{\"1\":{\"78\":1}}],[\"则b属性值得确定需要依赖于a属性组中所有的属性值\",{\"1\":{\"78\":1}}],[\"则第一个事务查询不到自己的修改\",{\"1\":{\"76\":1}}],[\"则查询部门名称\",{\"1\":{\"70\":2}}],[\"则不显示部门名称\",{\"1\":{\"70\":2}}],[\"则不会被查询出来\",{\"1\":{\"56\":1}}],[\"则不参与分组\",{\"1\":{\"56\":1}}],[\"则当前边的条件值一样时\",{\"1\":{\"54\":1}}],[\"则可以使用\",{\"1\":{\"48\":1}}],[\"则会将其复制过去\",{\"1\":{\"468\":1}}],[\"则会将表中所有记录全部修改\",{\"1\":{\"46\":1}}],[\"则会注入有\",{\"1\":{\"418\":1}}],[\"则会引发一些问题\",{\"1\":{\"76\":1}}],[\"则会执行keepalive操作\",{\"1\":{\"21\":1}}],[\"则删除表中所有记录\",{\"1\":{\"45\":1}}],[\"则默认给所有列添加值\",{\"1\":{\"44\":1}}],[\"则默认使用当前的系统时间\",{\"1\":{\"39\":1}}],[\"则\",{\"1\":{\"22\":1,\"235\":1}}],[\"则两个集合的笛卡尔积为\",{\"1\":{\"22\":1}}],[\"则验证这条连接是否可用\",{\"1\":{\"21\":1}}],[\"则没有使⽤索引\",{\"1\":{\"19\":1,\"22\":1}}],[\"和searchrequest指定query的方式不一样\",{\"1\":{\"338\":1}}],[\"和占位符\",{\"1\":{\"334\":1}}],[\"和不分词\",{\"1\":{\"325\":1}}],[\"和mysql中的like是一个套路\",{\"1\":{\"334\":1}}],[\"和mysql\",{\"1\":{\"306\":1}}],[\"和map\",{\"1\":{\"240\":1}}],[\"和数据内容\",{\"1\":{\"282\":1}}],[\"和a事务无关\",{\"1\":{\"280\":2}}],[\"和常量池\",{\"1\":{\"269\":2}}],[\"和⽼年代\",{\"1\":{\"269\":1}}],[\"和直接写路径的两种方式\",{\"1\":{\"159\":1}}],[\"和location\",{\"1\":{\"159\":1}}],[\"和前面工作进程配合起来用\",{\"1\":{\"157\":1}}],[\"和第五范式\",{\"1\":{\"78\":1}}],[\"和定位的点\",{\"1\":{\"22\":1}}],[\"和\",{\"1\":{\"19\":1,\"22\":1,\"28\":1,\"51\":1,\"56\":1,\"78\":1,\"125\":2,\"159\":1,\"220\":1,\"223\":1,\"286\":2,\"384\":5,\"400\":2,\"468\":2,\"473\":1,\"479\":1}}],[\"⽽且可以结合这个机制⾃⼰在内存⾥维护每个消息\",{\"1\":{\"273\":1}}],[\"⽽虚拟机堆负责存储数据\",{\"1\":{\"269\":1}}],[\"⽽是直接使⽤电脑的内存区\",{\"1\":{\"269\":2}}],[\"⽽不是按照表内的索引顺序进⾏读取\",{\"1\":{\"19\":1,\"22\":1}}],[\"⽽all是\",{\"1\":{\"19\":1}}],[\"⽽结束于另⼀点\",{\"1\":{\"19\":1}}],[\"但要考虑logs文件的保留问题\",{\"1\":{\"438\":1}}],[\"但具体由那个对象处理则在运行时动态决定\",{\"1\":{\"425\":1}}],[\"但代理过程相对较慢且占用较多内存\",{\"1\":{\"419\":1}}],[\"但不被多线程共享\",{\"1\":{\"396\":1}}],[\"但不⼀定被查询实际使⽤\",{\"1\":{\"19\":1,\"22\":1}}],[\"但这里就会与一个问题\",{\"1\":{\"396\":1}}],[\"但能处理已添加的任务\",{\"1\":{\"295\":1,\"409\":1}}],[\"但\",{\"1\":{\"286\":1,\"400\":1}}],[\"但插入数据时只需要记录当前项的前后项即可\",{\"1\":{\"242\":1}}],[\"但属于引用类型\",{\"1\":{\"237\":1}}],[\"但如果使用的索引不是最优的\",{\"1\":{\"223\":1}}],[\"但如果相反的我们把scores作为主表\",{\"1\":{\"223\":1}}],[\"但查询只使用了\",{\"1\":{\"223\":1}}],[\"但允许其他事物读取此行数据\",{\"1\":{\"217\":1}}],[\"但可以转换为stirng为\",{\"1\":{\"384\":1}}],[\"但可以通过查询通用日志来查看mysql执行过的所有语句\",{\"1\":{\"143\":1}}],[\"但可能出现不可重复读\",{\"1\":{\"217\":1}}],[\"但是是无界的阻塞队列\",{\"1\":{\"286\":1,\"400\":1}}],[\"但是把它用在\",{\"1\":{\"286\":1,\"400\":1}}],[\"但是现在在ioc手中\",{\"1\":{\"280\":1}}],[\"但是zk也有其缺点\",{\"1\":{\"279\":1}}],[\"但是另一方面使用redis实现分布式锁在很多企业中非常常见\",{\"1\":{\"279\":1}}],[\"但是不抛出异常\",{\"1\":{\"287\":1,\"401\":1}}],[\"但是不存在cap\",{\"1\":{\"279\":1}}],[\"但是不支持java\",{\"1\":{\"156\":1}}],[\"但是这种方式的效率是比较低的\",{\"1\":{\"273\":1}}],[\"但是这种算法代价过高\",{\"1\":{\"271\":1}}],[\"但是可以多重继承多态是面向对象的三大特性之一\",{\"1\":{\"258\":1}}],[\"但是\",{\"1\":{\"233\":1,\"306\":1}}],[\"但是请求2缓存还未写入的尴尬\",{\"1\":{\"232\":1}}],[\"但是数据库也没有这个数据\",{\"1\":{\"231\":1}}],[\"但是命令不会立即执行\",{\"1\":{\"226\":1}}],[\"但是别把cpu跑到100\",{\"1\":{\"157\":1}}],[\"但是如果说还没写的磁盘上\",{\"1\":{\"274\":1}}],[\"但是如果只查找b值的话\",{\"1\":{\"221\":1}}],[\"但是如果创建的容器比较多\",{\"1\":{\"100\":1}}],[\"但是如果多个事务操作同一批数据\",{\"1\":{\"76\":1}}],[\"但是效率越来越低\",{\"1\":{\"76\":1}}],[\"但是只能有一条记录为null\",{\"1\":{\"62\":1}}],[\"但是使用form\",{\"1\":{\"3\":1}}],[\"但index是从索引中读取的\",{\"1\":{\"19\":1}}],[\"的安装依赖于该插件\",{\"1\":{\"473\":1}}],[\"的安装包在安装执行\",{\"1\":{\"473\":1}}],[\"的命令\",{\"1\":{\"468\":1}}],[\"的环境变量的使用\",{\"1\":{\"440\":1}}],[\"的思想\",{\"1\":{\"418\":1}}],[\"的完美支持\",{\"1\":{\"416\":1}}],[\"的构成是否合法\",{\"1\":{\"384\":1}}],[\"的实现\",{\"1\":{\"383\":1}}],[\"的参考实现\",{\"1\":{\"383\":1}}],[\"的参数2\",{\"1\":{\"239\":1}}],[\"的通⽤⼯具\",{\"1\":{\"368\":1}}],[\"的queue\",{\"1\":{\"365\":1}}],[\"的幂等问题\",{\"1\":{\"364\":1}}],[\"的⼀种数据结构\",{\"1\":{\"351\":1}}],[\"的一个数据\",{\"1\":{\"304\":1}}],[\"的一次排序\",{\"1\":{\"223\":1}}],[\"的线程池\",{\"1\":{\"300\":1,\"414\":1}}],[\"的话\",{\"1\":{\"300\":1,\"414\":1}}],[\"的结合体\",{\"1\":{\"286\":1,\"400\":1}}],[\"的结果作为外部查询的一张表\",{\"1\":{\"72\":1}}],[\"的消息重新放回队列\",{\"1\":{\"275\":1}}],[\"的状态\",{\"1\":{\"273\":1}}],[\"的方法\",{\"1\":{\"259\":1}}],[\"的整个生命周期也只会被调用一次\",{\"1\":{\"253\":1}}],[\"的整个生命周期只会被调用一次\",{\"1\":{\"253\":1}}],[\"的主体\",{\"1\":{\"249\":1}}],[\"的默认行为是对堆上的对象产生独特值\",{\"1\":{\"244\":1}}],[\"的相关规定\",{\"1\":{\"244\":1}}],[\"的相关方法来完成\",{\"1\":{\"243\":1}}],[\"的key时候\",{\"1\":{\"279\":1}}],[\"的key\",{\"1\":{\"244\":1}}],[\"的put\",{\"1\":{\"244\":1}}],[\"的操作\",{\"1\":{\"243\":1}}],[\"的情况\",{\"1\":{\"239\":2}}],[\"的\",{\"1\":{\"237\":1,\"244\":1}}],[\"的基本类型\",{\"1\":{\"237\":1}}],[\"的时间要大于一次写操作的时间\",{\"1\":{\"232\":1}}],[\"的时候\",{\"1\":{\"231\":1}}],[\"的过期时间\",{\"1\":{\"231\":1}}],[\"的过渡系统提供的过渡效果\",{\"1\":{\"208\":1}}],[\"的查询\",{\"1\":{\"223\":1}}],[\"的成本\",{\"1\":{\"223\":1}}],[\"的成员而第二个对象是\",{\"1\":{\"22\":1}}],[\"的原因\",{\"1\":{\"222\":1}}],[\"的官方调试工具\",{\"1\":{\"212\":1}}],[\"的官方路由\",{\"1\":{\"208\":1}}],[\"的正确编码\",{\"1\":{\"208\":1}}],[\"的二进制日志\",{\"1\":{\"143\":1}}],[\"的应用场景除了可以作为私有云的对象存储服务来使用\",{\"1\":{\"124\":1}}],[\"的云平台选择\",{\"1\":{\"94\":1}}],[\"的值可以确定唯一c属性的值\",{\"1\":{\"78\":1}}],[\"的值\",{\"1\":{\"78\":2,\"478\":1}}],[\"的进程\",{\"1\":{\"77\":1,\"118\":1}}],[\"的区别是\",{\"1\":{\"306\":1}}],[\"的区别\",{\"1\":{\"56\":1}}],[\"的所有可能有序对的其中一个成员\",{\"1\":{\"22\":1}}],[\"的某⼀点\",{\"1\":{\"19\":1}}],[\"的封装\",{\"1\":{\"14\":1}}],[\"<username>nacos<\",{\"1\":{\"491\":1}}],[\"<url>http\",{\"1\":{\"447\":1}}],[\"<nacos\",{\"1\":{\"491\":1}}],[\"<name>nexus\",{\"1\":{\"447\":1}}],[\"<目标集群\",{\"1\":{\"468\":1}}],[\"<目标集群>某个桶同步语法\",{\"1\":{\"468\":1}}],[\"<源集群\",{\"1\":{\"468\":1}}],[\"<源集群>\",{\"1\":{\"468\":1}}],[\"<密码>\",{\"1\":{\"467\":2}}],[\"<账户>\",{\"1\":{\"467\":2}}],[\"<端口>\",{\"1\":{\"467\":2}}],[\"<自定义名称>\",{\"1\":{\"467\":2}}],[\"<id>test\",{\"1\":{\"491\":1}}],[\"<id>nexus\",{\"1\":{\"447\":1}}],[\"<ip>\",{\"1\":{\"467\":2}}],[\"<input\",{\"1\":{\"189\":1}}],[\"<root\",{\"1\":{\"389\":1}}],[\"<rollingpolicy\",{\"1\":{\"389\":2}}],[\"<logger\",{\"1\":{\"389\":4}}],[\"<layout\",{\"1\":{\"389\":2}}],[\"<label>密码\",{\"1\":{\"194\":1}}],[\"<label>账号\",{\"1\":{\"194\":1}}],[\"<label>\",{\"1\":{\"189\":1}}],[\"<level>error<\",{\"1\":{\"389\":1}}],[\"<mirrorof>central<\",{\"1\":{\"447\":1}}],[\"<mirror>\",{\"1\":{\"447\":1}}],[\"<mirrors>\",{\"1\":{\"447\":1}}],[\"<maxfilesize>10mb<\",{\"1\":{\"389\":2}}],[\"<maxhistory>30<\",{\"1\":{\"389\":2}}],[\"<meta\",{\"1\":{\"188\":2,\"370\":1}}],[\"<file>$\",{\"1\":{\"389\":1}}],[\"<filenamepattern>$\",{\"1\":{\"389\":2}}],[\"<filter\",{\"1\":{\"389\":1}}],[\"<form>\",{\"1\":{\"194\":1}}],[\"<font\",{\"1\":{\"141\":4,\"341\":1}}],[\"<password>nacos<\",{\"1\":{\"491\":1}}],[\"<pattern>\",{\"1\":{\"389\":5}}],[\"<properties>\",{\"1\":{\"491\":1}}],[\"<property\",{\"1\":{\"389\":2}}],[\"<profile>\",{\"1\":{\"491\":1}}],[\"<profiles>\",{\"1\":{\"491\":1}}],[\"<encoder\",{\"1\":{\"389\":4}}],[\"<elasticsearch\",{\"1\":{\"323\":1}}],[\"<activebydefault>true<\",{\"1\":{\"491\":1}}],[\"<activation>\",{\"1\":{\"491\":1}}],[\"<appender\",{\"1\":{\"389\":8}}],[\"<artifactid>juel<\",{\"1\":{\"387\":1}}],[\"<artifactid>hibernate\",{\"1\":{\"383\":1}}],[\"<artifactid>beetl<\",{\"1\":{\"369\":1}}],[\"<artifactid>minio<\",{\"1\":{\"132\":1}}],[\"<artifactid>spring\",{\"1\":{\"84\":1,\"113\":1,\"323\":1,\"352\":1,\"383\":1,\"491\":1}}],[\"<artifactid>shardingsphere\",{\"1\":{\"28\":1}}],[\"<configuration\",{\"1\":{\"389\":1}}],[\"<k><\",{\"1\":{\"194\":1}}],[\"<button\",{\"1\":{\"192\":2,\"193\":1}}],[\"<body>\",{\"1\":{\"188\":1,\"189\":1,\"190\":1,\"191\":1,\"192\":1,\"194\":1,\"215\":1,\"370\":1}}],[\"<option\",{\"1\":{\"191\":1}}],[\"<option>宝马<\",{\"1\":{\"189\":1}}],[\"<option>红旗<\",{\"1\":{\"189\":1}}],[\"<option>奥迪<\",{\"1\":{\"189\":1}}],[\"<option>保时捷<\",{\"1\":{\"189\":1}}],[\"<spring\",{\"1\":{\"491\":1}}],[\"<scope>compile<\",{\"1\":{\"383\":1}}],[\"<script>\",{\"1\":{\"188\":1,\"189\":1,\"190\":1,\"191\":1,\"192\":1,\"194\":1,\"215\":1}}],[\"<script\",{\"1\":{\"188\":1,\"189\":1,\"190\":1,\"191\":1,\"192\":1}}],[\"<style\",{\"1\":{\"215\":1}}],[\"<select\",{\"1\":{\"189\":1,\"191\":1}}],[\"<div>分⽀语句\",{\"1\":{\"370\":1}}],[\"<div>字符串\",{\"1\":{\"370\":1}}],[\"<div>基本类型\",{\"1\":{\"370\":1}}],[\"<div>\",{\"1\":{\"194\":4,\"370\":3}}],[\"<div><h1\",{\"1\":{\"191\":1}}],[\"<div\",{\"1\":{\"188\":1,\"189\":1,\"190\":1,\"191\":1,\"192\":2,\"194\":1,\"215\":1}}],[\"<dependency>\",{\"1\":{\"28\":1,\"84\":1,\"113\":1,\"132\":1,\"323\":1,\"352\":1,\"369\":1,\"383\":2,\"387\":1,\"491\":1}}],[\"<title>$\",{\"1\":{\"370\":1}}],[\"<title>插值语法<\",{\"1\":{\"188\":1}}],[\"<template>\",{\"1\":{\"215\":1}}],[\"<t>\",{\"1\":{\"84\":3,\"391\":3,\"396\":1}}],[\"<http\",{\"1\":{\"467\":2}}],[\"<html\",{\"1\":{\"188\":1,\"215\":1,\"370\":1}}],[\"<h2>$\",{\"1\":{\"370\":2}}],[\"<h2>欢迎登录<\",{\"1\":{\"194\":1}}],[\"<h2\",{\"1\":{\"190\":2}}],[\"<h1\",{\"1\":{\"190\":1}}],[\"<h1>获奖名单\",{\"1\":{\"370\":1}}],[\"<h1>获取数据\",{\"1\":{\"214\":1}}],[\"<h1>男<\",{\"1\":{\"370\":1}}],[\"<h1>beetl模板引擎<\",{\"1\":{\"370\":1}}],[\"<h1>\",{\"1\":{\"188\":1,\"189\":1,\"192\":1,\"194\":2,\"211\":2}}],[\"<head>\",{\"1\":{\"188\":1,\"215\":1,\"370\":1}}],[\"<version>2\",{\"1\":{\"387\":1}}],[\"<version>6\",{\"1\":{\"383\":1}}],[\"<version>3\",{\"1\":{\"369\":1}}],[\"<version>8\",{\"1\":{\"132\":1}}],[\"<version>5\",{\"1\":{\"28\":1}}],[\"<groupid>de\",{\"1\":{\"387\":1}}],[\"<groupid>com\",{\"1\":{\"369\":1}}],[\"<groupid>io\",{\"1\":{\"132\":1}}],[\"<groupid>org\",{\"1\":{\"28\":1,\"84\":1,\"113\":1,\"323\":1,\"352\":1,\"383\":2,\"491\":1}}],[\"<>\",{\"1\":{\"49\":2,\"223\":1}}],[\"<=30\",{\"1\":{\"49\":2}}],[\"<=\",{\"1\":{\"49\":1,\"335\":1}}],[\"<\",{\"1\":{\"19\":1,\"28\":1,\"49\":1,\"83\":1,\"84\":1,\"113\":1,\"117\":1,\"132\":1,\"188\":7,\"189\":6,\"190\":3,\"191\":6,\"192\":5,\"194\":15,\"211\":4,\"214\":2,\"215\":7,\"223\":1,\"323\":2,\"335\":1,\"341\":1,\"352\":2,\"355\":1,\"369\":1,\"370\":18,\"373\":2,\"383\":2,\"387\":2,\"389\":33,\"420\":1,\"421\":1,\"447\":3,\"491\":5}}],[\"语法\",{\"1\":{\"39\":1,\"44\":1,\"45\":1,\"46\":1,\"47\":1,\"50\":1,\"51\":1,\"52\":1,\"54\":1,\"56\":1,\"57\":1,\"59\":2,\"64\":2,\"68\":1,\"70\":1,\"71\":1,\"72\":3,\"77\":2,\"346\":1}}],[\"语法格式\",{\"1\":{\"15\":1,\"95\":2,\"188\":1,\"189\":1,\"190\":1,\"191\":1,\"192\":1,\"193\":1,\"261\":1,\"376\":1}}],[\"语句中\",{\"1\":{\"258\":1}}],[\"语句中出现between\",{\"1\":{\"19\":1}}],[\"语句会自动提交一次事务\",{\"1\":{\"74\":1}}],[\"语句不区分大小写\",{\"1\":{\"30\":1}}],[\"语句可以单行或多行书写\",{\"1\":{\"30\":1}}],[\"⼀对⼀\",{\"1\":{\"352\":1}}],[\"⼀般就是你本地启动了玩玩⼉的\",{\"1\":{\"365\":1}}],[\"⼀般就是在你的where\",{\"1\":{\"19\":1}}],[\"⼀般把具备有效期的队列并且设置的有死信交换器的队列并且没有消费者成为延迟队列\",{\"1\":{\"360\":1}}],[\"⼀般⽤来实现⼀个消息需要发送到多个队列中\",{\"1\":{\"356\":1}}],[\"⼀般⽤来解决应⽤解耦\",{\"1\":{\"351\":1}}],[\"⼀定要带条件\",{\"1\":{\"302\":1}}],[\"⼀个单词\",{\"1\":{\"359\":1}}],[\"⼀个队列可以有多个消费者\",{\"1\":{\"355\":2}}],[\"⼀个队列有⼀个发送端和⼀个消费端\",{\"1\":{\"352\":1}}],[\"⼀个事\",{\"1\":{\"166\":1}}],[\"⼀个或多个\",{\"1\":{\"19\":1,\"22\":1}}],[\"⼀张表的索引的数量不能超过32个\",{\"1\":{\"19\":1}}],[\"独值的⾏\",{\"1\":{\"19\":1}}],[\"返回本地变量\",{\"1\":{\"396\":1}}],[\"返回结果\",{\"1\":{\"344\":1}}],[\"返回false表示拦截\",{\"1\":{\"256\":1}}],[\"返回true为放行\",{\"1\":{\"256\":1}}],[\"返回匹配的所有行\",{\"1\":{\"223\":1}}],[\"返回匹配唯一行数据\",{\"1\":{\"223\":1}}],[\"返回匹配某个单独值的所有⾏\",{\"1\":{\"19\":1}}],[\"返回值\",{\"1\":{\"17\":1}}],[\"⾮唯⼀性索引扫描\",{\"1\":{\"19\":1}}],[\"⾮空约束4\",{\"1\":{\"218\":1}}],[\"⾮空约束\",{\"1\":{\"12\":1}}],[\"据\",{\"1\":{\"19\":1,\"302\":1}}],[\"或方法\",{\"1\":{\"267\":1}}],[\"或表达式\",{\"1\":{\"223\":1}}],[\"或者重新删掉从库所有数据\",{\"1\":{\"479\":1}}],[\"或者在不同桶\",{\"1\":{\"468\":1}}],[\"或者在方法后调用一个方法\",{\"1\":{\"255\":1}}],[\"或者订阅相应的队列\",{\"1\":{\"351\":1}}],[\"或者使用threadpoolexecutor进行创建\",{\"1\":{\"294\":1,\"408\":1}}],[\"或者使⽤可视化⼯具连接redis\",{\"1\":{\"121\":1}}],[\"或者仅仅保存null\",{\"1\":{\"264\":1}}],[\"或者取消了事务\",{\"1\":{\"226\":1}}],[\"或者其中一个条件没有索引\",{\"1\":{\"223\":1}}],[\"或者复制本段内容\",{\"1\":{\"178\":1}}],[\"或者是\",{\"1\":{\"227\":1}}],[\"或者是备份的表结构在数据库中添加\",{\"1\":{\"146\":1}}],[\"或者是运行时没法切出去执行其他任务\",{\"1\":{\"116\":1}}],[\"或者\",{\"1\":{\"48\":1,\"124\":1,\"231\":1}}],[\"或者unique索引\",{\"1\":{\"19\":1}}],[\"或赋值为null\",{\"1\":{\"39\":1}}],[\"或\",{\"1\":{\"30\":1,\"49\":3,\"223\":1,\"239\":1,\"266\":1}}],[\"或字段\",{\"1\":{\"22\":1}}],[\"或getreader\",{\"1\":{\"6\":1}}],[\"kblogs\",{\"1\":{\"441\":4}}],[\"kw\",{\"1\":{\"387\":1}}],[\"kworkflow\",{\"1\":{\"116\":2,\"117\":1}}],[\"kou\",{\"1\":{\"385\":1}}],[\"kouzhe\",{\"1\":{\"173\":2,\"179\":1}}],[\"kancloud\",{\"1\":{\"367\":1}}],[\"know\",{\"1\":{\"310\":1}}],[\"knowledgename\",{\"1\":{\"112\":1}}],[\"knowledge\",{\"1\":{\"112\":1}}],[\"k9akmu\",{\"1\":{\"310\":1}}],[\"k\",{\"1\":{\"194\":1,\"352\":3,\"354\":1,\"355\":4,\"371\":1,\"387\":5,\"396\":1}}],[\"k>\",{\"1\":{\"194\":1}}],[\"kill\",{\"1\":{\"116\":1,\"165\":1,\"430\":2,\"431\":2,\"450\":2}}],[\"kibana快捷键操作\",{\"0\":{\"318\":1}}],[\"kibana\",{\"0\":{\"307\":1,\"315\":1,\"322\":1},\"1\":{\"108\":1,\"109\":5,\"309\":3,\"310\":1,\"315\":2}}],[\"k8s\",{\"1\":{\"100\":1}}],[\"keep\",{\"1\":{\"464\":1}}],[\"keepalive超时时间\",{\"1\":{\"157\":1}}],[\"keepalive\",{\"1\":{\"21\":1,\"157\":1,\"165\":2}}],[\"key文件的路径\",{\"1\":{\"464\":2}}],[\"keyfilevariable\",{\"1\":{\"440\":1,\"441\":1}}],[\"keygen\",{\"1\":{\"435\":1}}],[\"key存在不赋值\",{\"1\":{\"396\":1}}],[\"keyword\",{\"1\":{\"317\":1,\"320\":2,\"325\":1}}],[\"key的生存时间到了\",{\"0\":{\"229\":1}}],[\"key是id值\",{\"1\":{\"223\":1}}],[\"key=admin123\",{\"1\":{\"128\":1}}],[\"key=admin\",{\"1\":{\"128\":1}}],[\"key实际使⽤的索引\",{\"1\":{\"19\":1,\"22\":1}}],[\"keys文件中保存\",{\"1\":{\"435\":1}}],[\"keyset\",{\"1\":{\"378\":1,\"387\":1}}],[\"keys\",{\"1\":{\"19\":2,\"22\":2,\"223\":1,\"435\":2}}],[\"key列显示使⽤了哪个索引\",{\"1\":{\"19\":1}}],[\"key\",{\"1\":{\"19\":3,\"22\":2,\"28\":3,\"60\":2,\"63\":5,\"64\":6,\"74\":1,\"78\":7,\"79\":1,\"128\":4,\"223\":4,\"225\":10,\"231\":1,\"244\":1,\"344\":3,\"360\":1,\"396\":15,\"464\":4,\"473\":1}}],[\"kz898989\",{\"1\":{\"323\":1,\"351\":1}}],[\"kz8989\",{\"1\":{\"174\":1}}],[\"kzkzkz\",{\"1\":{\"21\":1}}],[\"kz\",{\"1\":{\"15\":1,\"117\":1,\"283\":1,\"357\":4,\"360\":4,\"376\":1,\"378\":1,\"379\":1,\"380\":1,\"381\":1,\"391\":17,\"397\":1}}],[\"所属分类\",{\"1\":{\"78\":1}}],[\"所有槽位都被分配\",{\"1\":{\"495\":1}}],[\"所有需要对gcc版本进行升级\",{\"1\":{\"492\":1}}],[\"所有依赖于它的对象都会得到通知并被自动更新\",{\"1\":{\"415\":1}}],[\"所有的条件\",{\"1\":{\"339\":2}}],[\"所有方法不能被重写\",{\"1\":{\"258\":1}}],[\"所有进程包括子进程\",{\"1\":{\"118\":1}}],[\"所有这样的有序对组成的集合叫做a与b的笛卡尔积\",{\"1\":{\"22\":1}}],[\"所有组中id⼤的优先执⾏\",{\"1\":{\"19\":1}}],[\"所以我们需要先安装gcc\",{\"1\":{\"493\":1}}],[\"所以需要用到rpm包资源管理器相关的指令安装这些\",{\"1\":{\"473\":1}}],[\"所以需要将流继续写出去\",{\"1\":{\"10\":1}}],[\"所以直接使用host\",{\"1\":{\"460\":1}}],[\"所以就要把logininfo存起来\",{\"1\":{\"396\":1}}],[\"所以设置\",{\"1\":{\"286\":1,\"400\":1}}],[\"所以使用redis作为分布式锁也不失为一种好的方案\",{\"1\":{\"279\":1}}],[\"所以使用标记整理算法\",{\"1\":{\"271\":1}}],[\"所以相对来说zookeeper比redis更好总结两种方案的优缺点比较\",{\"1\":{\"279\":1}}],[\"所以用来redisson的redlock锁\",{\"1\":{\"277\":1}}],[\"所以一般和\",{\"1\":{\"263\":1}}],[\"所以是线程安全的\",{\"1\":{\"259\":1}}],[\"所以不会再次调用\",{\"1\":{\"258\":1}}],[\"所以不会重复\",{\"1\":{\"244\":1}}],[\"所以有可能调用\",{\"1\":{\"258\":1}}],[\"所以它的底层仍然是基于拉链式散\",{\"1\":{\"248\":1}}],[\"所以select\",{\"1\":{\"223\":1}}],[\"所以这就是不推荐使用select\",{\"1\":{\"222\":1}}],[\"所以能过滤最多数据的条件应放到最后\",{\"1\":{\"26\":1}}],[\"所以要最少记录的表放在最前⾯\",{\"1\":{\"26\":1}}],[\"所以可以把有些查询条件放到on那⾥进⾏筛选5\",{\"1\":{\"25\":1}}],[\"所以他应该属于查找和扫描的混合体\",{\"1\":{\"19\":1}}],[\"所以很快\",{\"1\":{\"19\":1}}],[\"所以性能提升并不明显查看是否存在索引\",{\"1\":{\"19\":1}}],[\"所以\",{\"1\":{\"6\":1,\"242\":1,\"306\":1}}],[\"同步文件后\",{\"1\":{\"468\":2}}],[\"同上\",{\"1\":{\"317\":5}}],[\"同一个用户不能收藏同一个线路两次\",{\"1\":{\"78\":1}}],[\"同时\",{\"1\":{\"391\":1}}],[\"同时开启守护线程\",{\"1\":{\"278\":1}}],[\"同时开启rdb和aof备份\",{\"1\":{\"227\":1}}],[\"同时通过对链表进行相应的\",{\"1\":{\"248\":1}}],[\"同时也减轻了后面服务器的压力\",{\"1\":{\"164\":1}}],[\"同时还支持cgi协议的动态语言\",{\"1\":{\"156\":1}}],[\"同时识别多个二维码\",{\"1\":{\"83\":1}}],[\"同时在链接的表中能过滤的就应该先进⾏过\",{\"1\":{\"26\":1}}],[\"同时存在会出错\",{\"1\":{\"159\":1}}],[\"同时存在\",{\"1\":{\"19\":1}}],[\"同⼀组中从上往下执⾏\",{\"1\":{\"19\":1}}],[\"执⾏命令\",{\"1\":{\"121\":1}}],[\"执⾏顺序由上⾄下\",{\"1\":{\"19\":1}}],[\"执行下边这个代码\",{\"1\":{\"491\":1}}],[\"执行下面sql\",{\"1\":{\"478\":1}}],[\"执行文件到数据库\",{\"1\":{\"485\":1}}],[\"执行rm命令前\",{\"1\":{\"472\":1}}],[\"执行ssh脚本\",{\"1\":{\"441\":1}}],[\"执行构建\",{\"1\":{\"441\":1}}],[\"执行原来的方法\",{\"1\":{\"376\":1}}],[\"执行查询\",{\"1\":{\"339\":1,\"340\":1,\"343\":1,\"344\":1,\"345\":1,\"347\":1,\"348\":1}}],[\"执行删除\",{\"1\":{\"338\":1}}],[\"执行当前选中的请求\",{\"1\":{\"318\":1}}],[\"执行操作yml文件\",{\"1\":{\"311\":1}}],[\"执行操作yml文件没脸\",{\"1\":{\"309\":1}}],[\"执行完terminated\",{\"1\":{\"298\":1,\"412\":1}}],[\"执行流程\",{\"0\":{\"277\":1}}],[\"执行顺序\",{\"1\":{\"252\":1}}],[\"执行淘汰机制\",{\"1\":{\"230\":1}}],[\"执行事务\",{\"1\":{\"226\":1}}],[\"执行一些系列命令\",{\"1\":{\"226\":1}}],[\"执行make\",{\"1\":{\"157\":1}}],[\"执行make命令\",{\"1\":{\"157\":1}}],[\"执行flush\",{\"1\":{\"146\":1}}],[\"执行回滚\",{\"1\":{\"146\":1}}],[\"执行恢复数据\",{\"1\":{\"145\":1}}],[\"执行命令如下\",{\"1\":{\"127\":1,\"128\":1}}],[\"执行命令\",{\"1\":{\"94\":1,\"98\":1,\"102\":1,\"104\":1,\"105\":1,\"157\":1}}],[\"执行后置的处理\",{\"1\":{\"84\":1}}],[\"执行\",{\"0\":{\"451\":1},\"1\":{\"18\":2,\"235\":1,\"258\":1,\"446\":2}}],[\"不配置集群无需以下配置\",{\"1\":{\"495\":1}}],[\"不要在从库进行写的操作\",{\"1\":{\"479\":1}}],[\"不区分表名大小写\",{\"1\":{\"476\":1}}],[\"不覆盖原有值\",{\"1\":{\"396\":1}}],[\"不进行验证\",{\"1\":{\"384\":1}}],[\"不进行分词\",{\"1\":{\"325\":1}}],[\"不建议使用在int类型上\",{\"1\":{\"384\":1}}],[\"不适合做实时的查询\",{\"1\":{\"337\":1}}],[\"不适用\",{\"1\":{\"145\":1}}],[\"不对查询条件进行分词\",{\"1\":{\"325\":1}}],[\"不对的\",{\"1\":{\"49\":1}}],[\"不处理已添加的任务\",{\"1\":{\"296\":1,\"410\":1}}],[\"不接收新任务\",{\"1\":{\"295\":1,\"296\":1,\"409\":1,\"410\":1}}],[\"不是所有的类都能被代理\",{\"1\":{\"421\":1}}],[\"不是处理阻塞队列得任务\",{\"1\":{\"285\":1,\"399\":1}}],[\"不是容器名\",{\"1\":{\"104\":3}}],[\"不用一直轮询\",{\"1\":{\"279\":1}}],[\"不用查询原表\",{\"1\":{\"19\":1}}],[\"不就完蛋了吗\",{\"1\":{\"278\":1}}],[\"不直接清理\",{\"1\":{\"271\":1}}],[\"不足以存下存活对象3\",{\"1\":{\"271\":1}}],[\"不过在前后添加上需要添加的代码\",{\"1\":{\"418\":1}}],[\"不过这里如果有配置拦截器\",{\"1\":{\"280\":1}}],[\"不过还是有一点点区别的\",{\"1\":{\"245\":1}}],[\"不过当前方式不区分大小写\",{\"1\":{\"159\":1}}],[\"不允许出现重复\",{\"1\":{\"279\":2}}],[\"不允许有两个完全相同的对象\",{\"1\":{\"259\":1}}],[\"不允许外部程序直接访问\",{\"1\":{\"258\":1}}],[\"不允许重复的值\",{\"1\":{\"243\":1}}],[\"不允许清空统计数据\",{\"1\":{\"21\":1}}],[\"不读取原文件\",{\"1\":{\"223\":1}}],[\"不包含子查询\",{\"1\":{\"223\":1}}],[\"不满足索引的前缀条件\",{\"1\":{\"223\":1}}],[\"不符合最左匹配规则的原理使用函数\",{\"1\":{\"221\":1}}],[\"不利于范围查找\",{\"1\":{\"220\":1}}],[\"不可变分为引用不可变和对象不可变\",{\"1\":{\"258\":1}}],[\"不可以重复的\",{\"1\":{\"225\":2}}],[\"不可分割\",{\"1\":{\"217\":1}}],[\"不可重复读指的是一个事务中多次读到同一条数据发生了变化\",{\"1\":{\"217\":1}}],[\"不可重复读\",{\"1\":{\"76\":3,\"217\":3}}],[\"不同集群之间的数据迁移\",{\"1\":{\"465\":1}}],[\"不同同时存在\",{\"1\":{\"159\":1}}],[\"不同minio集群可以组成联邦\",{\"1\":{\"125\":1}}],[\"不再筛选其他选项\",{\"1\":{\"159\":1}}],[\"不再去找其他匹配项\",{\"1\":{\"159\":2}}],[\"不显示处理信息\",{\"1\":{\"116\":1}}],[\"不能使用多次\",{\"1\":{\"267\":1}}],[\"不能使用公网ip\",{\"1\":{\"109\":1}}],[\"不能继承多个父类\",{\"1\":{\"258\":1}}],[\"不能0\",{\"1\":{\"223\":1}}],[\"不能多\",{\"1\":{\"223\":1}}],[\"不能重复\",{\"1\":{\"78\":1}}],[\"不设置可能会占用当前系统所有内存\",{\"1\":{\"108\":1}}],[\"不会触发初始化\",{\"1\":{\"239\":2}}],[\"不会导致消息的丢失\",{\"1\":{\"274\":1}}],[\"不会导致\",{\"1\":{\"239\":1}}],[\"不会立即删除\",{\"1\":{\"229\":1}}],[\"不会记录select和show这类操作\",{\"1\":{\"143\":1}}],[\"不会阻塞页面\",{\"1\":{\"95\":1}}],[\"不会存在oracle下pscache占用内存过多的问题\",{\"1\":{\"21\":1}}],[\"不仅仅包含tomcat软件安装包\",{\"1\":{\"92\":1}}],[\"不去除重复记录\",{\"1\":{\"59\":1}}],[\"不参与分组\",{\"1\":{\"56\":2}}],[\"不推荐使用\",{\"1\":{\"45\":1}}],[\"不定义列名\",{\"1\":{\"44\":1}}],[\"不需要目标对象实现接口\",{\"1\":{\"419\":1}}],[\"不需要加逗号\",{\"1\":{\"39\":1}}],[\"不需要额外处理\",{\"1\":{\"13\":1}}],[\"不⽤扫描全部索引\",{\"1\":{\"19\":1}}],[\"有几个数据库实例\",{\"1\":{\"487\":1}}],[\"有三种模式\",{\"1\":{\"365\":1}}],[\"有点类似\",{\"1\":{\"328\":1}}],[\"有点类似于我们之前说的linkedhashmap\",{\"1\":{\"245\":1}}],[\"有一亿条数据\",{\"1\":{\"306\":1}}],[\"有一天他的组长让他去优化一个接口\",{\"1\":{\"223\":1}}],[\"有⼀个叫直接内存\",{\"1\":{\"269\":1}}],[\"有且仅有一个抽象方法\",{\"1\":{\"262\":1}}],[\"有且只有1个\",{\"1\":{\"223\":1}}],[\"有序\",{\"0\":{\"246\":1}}],[\"有序的\",{\"1\":{\"225\":2}}],[\"有10000个key改变了\",{\"1\":{\"227\":1}}],[\"有10个key改变了\",{\"1\":{\"227\":1}}],[\"有1个key改变了\",{\"1\":{\"227\":1}}],[\"有人使用了罕见的for循环sql\",{\"1\":{\"223\":1}}],[\"有时开发者可能会强制使用特定的索引\",{\"1\":{\"223\":1}}],[\"有没有找到\",{\"1\":{\"159\":1}}],[\"有没有映射\",{\"1\":{\"159\":1}}],[\"有没有办法让jar在后台运行呢\",{\"1\":{\"116\":1}}],[\"有报告表明能支持高达50000个并发连接数\",{\"1\":{\"156\":1}}],[\"有表结构才会进行编译\",{\"1\":{\"146\":1}}],[\"有效\",{\"1\":{\"381\":1}}],[\"有效放行\",{\"1\":{\"379\":1}}],[\"有效期是7天\",{\"1\":{\"133\":1}}],[\"有效性和完整性\",{\"1\":{\"60\":1,\"218\":1}}],[\"有兴趣的朋友自己去探索吧~\",{\"1\":{\"125\":1}}],[\"有操作页面\",{\"1\":{\"125\":1}}],[\"有自己的语法格式\",{\"1\":{\"102\":1}}],[\"有多少条记录就会执行多少次删除操作\",{\"1\":{\"45\":1}}],[\"有索引之后\",{\"1\":{\"19\":1}}],[\"有备无患\",{\"1\":{\"19\":4}}],[\"提出新增一个标准化技术规范的正式请求\",{\"1\":{\"383\":1}}],[\"提⾼性能\",{\"1\":{\"366\":1}}],[\"提高数据的存储量\",{\"1\":{\"306\":1}}],[\"提高查询速度\",{\"1\":{\"306\":1}}],[\"提高查询效率\",{\"1\":{\"223\":1}}],[\"提高线程得利用率提高程序得响应速度便于统一管理线程对象可以控制最大并发数\",{\"1\":{\"283\":1,\"397\":1}}],[\"提高代码的可维护性继承定义\",{\"1\":{\"258\":1}}],[\"提高访问的速度\",{\"1\":{\"158\":1}}],[\"提取码\",{\"1\":{\"187\":1}}],[\"提示ok说明成功\",{\"1\":{\"174\":1}}],[\"提示输入密码\",{\"1\":{\"173\":1}}],[\"提示\",{\"1\":{\"114\":1,\"167\":1,\"235\":1,\"244\":1,\"278\":2,\"280\":1,\"281\":1,\"282\":1,\"394\":1,\"443\":1}}],[\"提交任务的线程\",{\"1\":{\"287\":1,\"401\":1}}],[\"提交事务\",{\"1\":{\"74\":1}}],[\"提交\",{\"1\":{\"74\":1}}],[\"提升查询效率\",{\"1\":{\"19\":1}}],[\"提供一站式开发协作工具\",{\"1\":{\"433\":1}}],[\"提供额外的功能操作\",{\"1\":{\"417\":1}}],[\"提供了对目标对象额外的访问方式\",{\"1\":{\"417\":1}}],[\"提供了更多的功能和灵活性\",{\"1\":{\"391\":1}}],[\"提供了更高级别的抽象\",{\"1\":{\"391\":1}}],[\"提供了\",{\"1\":{\"306\":1,\"383\":1}}],[\"提供了诸如零配置的\",{\"1\":{\"212\":1}}],[\"提供公有方法\",{\"1\":{\"283\":1,\"397\":1}}],[\"提供后续使用\",{\"1\":{\"10\":2}}],[\"提供的抽象类\",{\"1\":{\"10\":1}}],[\"都是\",{\"1\":{\"468\":1}}],[\"都是⼀张表\",{\"1\":{\"19\":1}}],[\"都可以使⽤⼿动应答代替⾃动应答针对消费端\",{\"1\":{\"362\":1}}],[\"都不会将指定的查询关键字进行分词\",{\"1\":{\"328\":1}}],[\"都会⾃动把消息到多个实例的queue⾥进⾏消息同步\",{\"1\":{\"365\":1}}],[\"都会有一个栈帧被弹出\",{\"1\":{\"269\":1}}],[\"都会增加写操作的开销和磁盘空间的开销\",{\"1\":{\"19\":1}}],[\"都查询了数据库\",{\"1\":{\"231\":1}}],[\"都没有命中缓存\",{\"1\":{\"231\":1}}],[\"都走数据库\",{\"1\":{\"231\":1}}],[\"都有自己的ip地址和端口号\",{\"1\":{\"92\":1}}],[\"每秒同步一次\",{\"1\":{\"495\":1}}],[\"每秒执行一次持久化\",{\"1\":{\"227\":1}}],[\"每当电台播放新的内容时\",{\"1\":{\"415\":1}}],[\"每天生成一个html格式的日志结束\",{\"1\":{\"389\":1}}],[\"每天生成一个html格式的日志开始\",{\"1\":{\"389\":1}}],[\"每隔10秒就会给锁续期到30秒\",{\"1\":{\"278\":1}}],[\"每次使用其中一块\",{\"1\":{\"271\":1}}],[\"每次只需要\",{\"1\":{\"23\":1}}],[\"每执行一个写操作\",{\"1\":{\"227\":1}}],[\"每个节点处理的请求不同\",{\"1\":{\"424\":1}}],[\"每个线程有自己单独的实例\",{\"1\":{\"396\":1}}],[\"每个机器启动⼀个\",{\"1\":{\"365\":1}}],[\"每个主分片会有备份分片\",{\"1\":{\"306\":1}}],[\"每个分片上有5000万条数据\",{\"1\":{\"306\":1}}],[\"每个消息都会分配⼀个唯⼀的\",{\"1\":{\"273\":1}}],[\"每个工作进程的最大连接数量\",{\"1\":{\"157\":1}}],[\"每个索引\",{\"1\":{\"19\":1}}],[\"每一种类型的数据放在一起\",{\"1\":{\"304\":1}}],[\"每一种数据库操作的方式存在不一样的地方\",{\"1\":{\"30\":1}}],[\"每一个分片都会存在至少一个备份分片\",{\"1\":{\"306\":1}}],[\"每一个索引默认被分成5片存储\",{\"1\":{\"306\":1}}],[\"每一个方法调用结束后\",{\"1\":{\"269\":1}}],[\"每一个缓存key\",{\"1\":{\"231\":1}}],[\"每一次方法调用都会有一个对应的栈帧被压入栈中\",{\"1\":{\"269\":1}}],[\"每一列都是不可分割的原子数据项\",{\"1\":{\"78\":1}}],[\"每页显示3条记录\",{\"1\":{\"57\":1}}],[\"每页显示的条数\",{\"1\":{\"57\":1}}],[\"每页查询的条数\",{\"1\":{\"57\":1}}],[\"每多一个索引\",{\"1\":{\"19\":1}}],[\">plugins\",{\"1\":{\"449\":1}}],[\">0\",{\"1\":{\"380\":2,\"381\":2,\"385\":1}}],[\">$\",{\"1\":{\"370\":2}}],[\">$5<\",{\"1\":{\"215\":1}}],[\">看survivor一半的大小\",{\"1\":{\"271\":1}}],[\">>\",{\"1\":{\"234\":6,\"309\":1,\"445\":2,\"458\":2}}],[\">变大<\",{\"1\":{\"192\":1}}],[\">加一<\",{\"1\":{\"192\":1}}],[\">女<\",{\"1\":{\"190\":1}}],[\">男<\",{\"1\":{\"190\":1}}],[\"><\",{\"1\":{\"188\":1,\"189\":2,\"190\":1,\"191\":1,\"192\":1,\"193\":1,\"215\":1}}],[\">mysqld<\",{\"1\":{\"141\":4}}],[\">mysqld\",{\"1\":{\"141\":2}}],[\">log\",{\"1\":{\"116\":1,\"430\":1,\"431\":1}}],[\">系主任\",{\"1\":{\"78\":1}}],[\">系名\",{\"1\":{\"78\":1}}],[\">c\",{\"1\":{\"78\":1}}],[\">姓名\",{\"1\":{\"78\":1}}],[\">b\",{\"1\":{\"78\":4}}],[\">=\",{\"1\":{\"49\":4,\"335\":1,\"420\":1,\"421\":1,\"473\":1}}],[\">\",{\"1\":{\"19\":13,\"28\":2,\"49\":2,\"56\":5,\"77\":1,\"78\":3,\"84\":1,\"108\":1,\"146\":3,\"157\":2,\"159\":2,\"165\":1,\"188\":4,\"189\":2,\"190\":1,\"191\":4,\"192\":2,\"194\":6,\"211\":2,\"214\":1,\"215\":4,\"223\":1,\"252\":4,\"261\":2,\"295\":1,\"296\":1,\"297\":2,\"298\":1,\"317\":1,\"323\":3,\"335\":1,\"341\":1,\"344\":1,\"352\":1,\"370\":6,\"373\":4,\"378\":1,\"387\":1,\"389\":43,\"391\":3,\"396\":1,\"409\":1,\"410\":1,\"411\":2,\"412\":1,\"425\":2,\"447\":1,\"449\":5,\"450\":3}}],[\"从0开始\",{\"1\":{\"487\":1}}],[\"从指定日志文件的哪个位置开始同步\",{\"1\":{\"479\":1}}],[\"从哪个日志文件开始同步\",{\"1\":{\"479\":1}}],[\"从哪些表中查询数据\",{\"1\":{\"67\":1}}],[\"从主服务器上同步日志文件记录到本地\",{\"1\":{\"479\":1}}],[\"从库\",{\"1\":{\"496\":1}}],[\"从库mysql配置\",{\"0\":{\"479\":1}}],[\"从库执行主库sql语句\",{\"1\":{\"469\":1}}],[\"从库获取了主库的数据库以后\",{\"1\":{\"469\":1}}],[\"从库接受到数据后\",{\"1\":{\"469\":1}}],[\"从库不断试探主库二进制日志文件\",{\"1\":{\"469\":1}}],[\"从交换器到队列中\",{\"1\":{\"366\":1}}],[\"从队列中进⾏消费rabbitmq交换器\",{\"1\":{\"366\":1}}],[\"从队列中进⾏消费\",{\"1\":{\"366\":1}}],[\"从可靠性角度分析\",{\"1\":{\"279\":1}}],[\"从创建到回收\",{\"0\":{\"271\":1}}],[\"从小排序的\",{\"1\":{\"220\":1}}],[\"从最初的binlog日志开始找create\",{\"1\":{\"146\":1}}],[\"从几kb到最大5t不等\",{\"1\":{\"125\":1}}],[\"从而提高程序的执行效率\",{\"1\":{\"422\":1}}],[\"从而提高程序性能\",{\"1\":{\"422\":1}}],[\"从而使用最合适的算法\",{\"1\":{\"271\":1}}],[\"从而使索引失效\",{\"1\":{\"223\":1}}],[\"从而减少数据计算量\",{\"1\":{\"223\":1}}],[\"从而降低查询性能\",{\"1\":{\"223\":1}}],[\"从而保证数据的正确性\",{\"1\":{\"64\":1}}],[\"从而避免了多次读取输入流导致数据被消耗的问题\",{\"1\":{\"6\":1}}],[\"从\",{\"1\":{\"28\":1}}],[\"从硬盘读取的\",{\"1\":{\"19\":1}}],[\"从好到差依次是\",{\"1\":{\"19\":1}}],[\"从好到差依次是system\",{\"1\":{\"19\":1}}],[\"复合过滤器\",{\"1\":{\"339\":1}}],[\"复合索引的顺序问题\",{\"1\":{\"223\":1}}],[\"复合索引\",{\"1\":{\"19\":1}}],[\"复制jar文件到路径\",{\"1\":{\"439\":1}}],[\"复制dist到部署目录\",{\"1\":{\"432\":1}}],[\"复制算法将可用的内存分成两份\",{\"1\":{\"271\":1}}],[\"复制进去\",{\"1\":{\"153\":1}}],[\"复制ik到elasticsearch容器中\",{\"1\":{\"110\":1}}],[\"复制表\",{\"1\":{\"39\":1}}],[\"复杂查询\",{\"1\":{\"13\":1}}],[\"实例在多个方法中共享\",{\"1\":{\"396\":1}}],[\"实例化的并前已完成赋值的bean\",{\"1\":{\"280\":1}}],[\"实际底层就是多个term查询\",{\"1\":{\"329\":1}}],[\"实际通过索引查询到的数据个数\",{\"1\":{\"223\":1}}],[\"实际用到的索引\",{\"1\":{\"223\":1}}],[\"实际能达到ref\",{\"1\":{\"223\":1}}],[\"实际相当于建了\",{\"1\":{\"19\":1}}],[\"实际上就是一个map\",{\"1\":{\"280\":1}}],[\"实际上\",{\"1\":{\"19\":1,\"383\":1}}],[\"实现minio\",{\"1\":{\"465\":1}}],[\"实现研发效能升级\",{\"1\":{\"433\":1}}],[\"实现单例模式通常使用以下两种方式\",{\"1\":{\"422\":1}}],[\"实现类\",{\"1\":{\"418\":1}}],[\"实现一个接口runnable\",{\"1\":{\"418\":1}}],[\"实现一样\",{\"1\":{\"245\":1}}],[\"实现参数校验\",{\"1\":{\"385\":1}}],[\"实现参数的校验\",{\"1\":{\"378\":1}}],[\"实现对接口的请求\",{\"1\":{\"381\":1}}],[\"实现登录之后才可访问的接口\",{\"1\":{\"379\":1}}],[\"实现消息的异步处理\",{\"1\":{\"366\":1}}],[\"实现消息发送\",{\"1\":{\"357\":1}}],[\"实现绑定\",{\"1\":{\"360\":1}}],[\"实现⾼性能\",{\"1\":{\"351\":1}}],[\"实现海量数据下快速搜索\",{\"1\":{\"302\":1}}],[\"实现filter接口\",{\"1\":{\"253\":1}}],[\"实现的\",{\"1\":{\"243\":1,\"244\":1}}],[\"实现了非常简洁的构造方法\",{\"1\":{\"396\":1}}],[\"实现了访问顺序相关逻辑\",{\"1\":{\"248\":1}}],[\"实现了\",{\"1\":{\"241\":1}}],[\"实现数据的⼆次处理\",{\"1\":{\"213\":1}}],[\"实现数据分⽚\",{\"1\":{\"25\":1}}],[\"实现跳转并传递参数\",{\"1\":{\"210\":2}}],[\"实现复⽤\",{\"1\":{\"195\":1}}],[\"实现上\",{\"1\":{\"156\":1}}],[\"实现多层级目录\",{\"1\":{\"133\":1}}],[\"实现容器的创建\",{\"1\":{\"102\":1}}],[\"实现步骤\",{\"1\":{\"94\":1,\"104\":1,\"361\":1,\"362\":1}}],[\"实现方式\",{\"1\":{\"78\":3}}],[\"实现关系\",{\"1\":{\"78\":1}}],[\"实现指定数量的账号数据添加\",{\"1\":{\"18\":1}}],[\"实现逻辑处理\",{\"1\":{\"18\":1}}],[\"实现特定功能的sql语句块\",{\"1\":{\"18\":2}}],[\"实现请求流的修改和增强\",{\"1\":{\"8\":1}}],[\"实现自定义的url处理逻辑\",{\"1\":{\"8\":1}}],[\"实现自定义的请求头处理逻辑\",{\"1\":{\"8\":1}}],[\"实现自定义的参数处理逻辑\",{\"1\":{\"8\":1}}],[\"实现自定义的httpservletrequest\",{\"1\":{\"6\":1}}],[\"涉及到索引字段\",{\"1\":{\"19\":1}}],[\"索引操作\",{\"0\":{\"319\":1}}],[\"索引分片备份\",{\"1\":{\"306\":1}}],[\"索引index是es\",{\"1\":{\"306\":1}}],[\"索引自动分片\",{\"1\":{\"303\":1}}],[\"索引覆盖\",{\"1\":{\"223\":1}}],[\"索引类型\",{\"1\":{\"223\":1}}],[\"索引将不会被使用\",{\"1\":{\"223\":1}}],[\"索引比较完备的表\",{\"1\":{\"223\":1}}],[\"索引查询的效率相对较高\",{\"1\":{\"223\":1}}],[\"索引优化\",{\"0\":{\"223\":1}}],[\"索引失效分类\",{\"1\":{\"221\":1}}],[\"索引失效原理\",{\"0\":{\"221\":1}}],[\"索引值\",{\"1\":{\"220\":1}}],[\"索引底层\",{\"0\":{\"220\":1}}],[\"索引列上的计算\",{\"1\":{\"223\":1}}],[\"索引列\",{\"1\":{\"26\":1}}],[\"索引⽤来读取数据⽽⾮执⾏查找动作\",{\"1\":{\"19\":1,\"22\":1}}],[\"索引表\",{\"1\":{\"19\":1}}],[\"索引的长度\",{\"1\":{\"223\":1}}],[\"索引的优化一般到ref为止\",{\"1\":{\"223\":1}}],[\"索引的选择性较低\",{\"1\":{\"223\":1}}],[\"索引的字段4\",{\"1\":{\"25\":1}}],[\"索引的数量\",{\"1\":{\"25\":1}}],[\"索引的分类\",{\"1\":{\"19\":1,\"219\":1}}],[\"索引的语法格式\",{\"1\":{\"19\":1}}],[\"索引字段=值\",{\"1\":{\"19\":1,\"219\":1}}],[\"索引名\",{\"1\":{\"19\":2,\"219\":2}}],[\"索引可以提⾼查询效率\",{\"1\":{\"19\":1}}],[\"索引\",{\"0\":{\"219\":1},\"1\":{\"19\":2,\"304\":3,\"326\":1}}],[\"0版本需要将gcc版本升级到5\",{\"1\":{\"492\":1}}],[\"0=123456\",{\"1\":{\"487\":1}}],[\"0=nacos\",{\"1\":{\"487\":1}}],[\"0=jdbc\",{\"1\":{\"487\":1}}],[\"02\",{\"1\":{\"391\":3,\"458\":3,\"464\":2,\"476\":3,\"490\":2}}],[\"07\",{\"1\":{\"391\":22}}],[\"0|\",{\"1\":{\"389\":1}}],[\"0或多个单词\",{\"1\":{\"359\":1}}],[\"01\",{\"1\":{\"321\":4,\"458\":3,\"464\":2,\"490\":2}}],[\"0~100的索引值\",{\"1\":{\"220\":1}}],[\"095\",{\"1\":{\"179\":1}}],[\"040c1cb3\",{\"1\":{\"476\":1}}],[\"04\",{\"1\":{\"146\":3,\"458\":3,\"464\":2}}],[\"03\",{\"1\":{\"141\":1,\"458\":3,\"464\":2,\"490\":2}}],[\"002\",{\"1\":{\"360\":1}}],[\"001\",{\"1\":{\"360\":1}}],[\"000016\",{\"1\":{\"146\":1}}],[\"000013\",{\"1\":{\"146\":1}}],[\"000012\",{\"1\":{\"146\":2}}],[\"000005\",{\"1\":{\"145\":1}}],[\"000001\",{\"1\":{\"479\":1}}],[\"000001>backuptmp\",{\"1\":{\"145\":1}}],[\"000001来进行数据恢复\",{\"1\":{\"144\":1}}],[\"00\",{\"1\":{\"141\":5,\"146\":9}}],[\"0开源协议\",{\"1\":{\"123\":1}}],[\"0以后的版本\",{\"1\":{\"28\":1}}],[\"0之后gcc需要升级\",{\"1\":{\"493\":1}}],[\"0之后\",{\"1\":{\"28\":1}}],[\"0<\",{\"1\":{\"28\":1}}],[\"0\",{\"0\":{\"178\":1,\"378\":1},\"1\":{\"18\":2,\"21\":2,\"22\":8,\"28\":2,\"57\":1,\"74\":3,\"83\":1,\"95\":1,\"97\":1,\"104\":3,\"106\":1,\"108\":4,\"115\":1,\"117\":1,\"138\":2,\"139\":3,\"141\":2,\"146\":8,\"165\":1,\"175\":4,\"179\":2,\"184\":2,\"188\":1,\"215\":1,\"258\":1,\"308\":1,\"309\":4,\"310\":4,\"323\":1,\"325\":1,\"326\":4,\"336\":2,\"344\":11,\"345\":4,\"355\":1,\"361\":1,\"369\":1,\"378\":1,\"380\":1,\"381\":1,\"389\":1,\"391\":6,\"392\":1,\"420\":1,\"421\":1,\"430\":2,\"431\":2,\"432\":1,\"444\":1,\"445\":4,\"450\":1,\"459\":4,\"460\":1,\"462\":2,\"481\":2,\"482\":1,\"484\":1,\"493\":4,\"495\":5,\"496\":1,\"497\":2}}],[\"输出结果\",{\"1\":{\"340\":1}}],[\"输出返回结果\",{\"1\":{\"338\":1}}],[\"输出\",{\"1\":{\"18\":1,\"341\":1}}],[\"输出参数\",{\"1\":{\"18\":1}}],[\"输入要执行的命令\",{\"1\":{\"226\":1}}],[\"输入用户名\",{\"1\":{\"174\":1}}],[\"输入密码\",{\"1\":{\"122\":1}}],[\"输入以下内容\",{\"1\":{\"104\":1}}],[\"输入内容\",{\"1\":{\"94\":1}}],[\"输入\",{\"1\":{\"18\":2}}],[\"输⼊输出参数\",{\"1\":{\"18\":1}}],[\"输⼊参数\",{\"1\":{\"18\":1}}],[\"其主要用途是在保证线程安全的同时尽量减少锁的使用\",{\"1\":{\"422\":1}}],[\"其实二级缓存就已经解决了循环依赖问题\",{\"1\":{\"280\":1}}],[\"其实需要自己不断去尝试获取锁\",{\"1\":{\"279\":1}}],[\"其实传递的是引用的地址\",{\"1\":{\"259\":1}}],[\"其实就是定义了操作所有关系型数据库的规则\",{\"1\":{\"30\":1}}],[\"其实就是⼀种特殊的函数\",{\"1\":{\"18\":1}}],[\"其boolean类型的返回值表示是否拦截或放行\",{\"1\":{\"256\":1}}],[\"其内部是基于\",{\"1\":{\"245\":1}}],[\"其中一个属性有值即可放行\",{\"1\":{\"378\":1}}],[\"其中路由内容⽀持模糊匹配\",{\"1\":{\"359\":1}}],[\"其中交换器有四种类型\",{\"1\":{\"356\":1}}],[\"其中发送端和消费端互不影响1\",{\"1\":{\"352\":1}}],[\"其中编译就是把我们写好的java文件\",{\"1\":{\"235\":1}}],[\"其中type\",{\"1\":{\"223\":1}}],[\"其它事物不能访问该数据\",{\"1\":{\"217\":1}}],[\"其读写速率分别可以达到\",{\"1\":{\"125\":1}}],[\"其他5672\",{\"1\":{\"351\":1}}],[\"其他都与虚拟机栈一致\",{\"1\":{\"269\":1}}],[\"其他事务插入或删除了数据\",{\"1\":{\"217\":1}}],[\"其他两种是statement\",{\"1\":{\"143\":1}}],[\"其他类型需要使用引号\",{\"1\":{\"44\":1}}],[\"其他功能增强\",{\"1\":{\"8\":1}}],[\"程序计数器\",{\"1\":{\"269\":2}}],[\"程序将读取\",{\"1\":{\"153\":1}}],[\"程序仍然运行\",{\"1\":{\"116\":1}}],[\"程序中止运行\",{\"1\":{\"116\":1}}],[\"程序\",{\"1\":{\"18\":1}}],[\"⽤队列机制来实现消息传递\",{\"1\":{\"351\":1}}],[\"⽤户可以输⼊内容\",{\"1\":{\"189\":1}}],[\"⽤户变量\",{\"1\":{\"16\":1}}],[\"⽤在表单标签\",{\"1\":{\"189\":1}}],[\"⽤在select\",{\"1\":{\"17\":1}}],[\"⽤in来替换or\",{\"1\":{\"26\":1}}],[\"⽤union替换or\",{\"1\":{\"26\":1}}],[\"⽤>=替代>\",{\"1\":{\"26\":1}}],[\"⽤索引提⾼效率\",{\"1\":{\"26\":1}}],[\"⽤表连接替换exists\",{\"1\":{\"26\":1}}],[\"⽤not\",{\"1\":{\"26\":1}}],[\"⽤exists替代in\",{\"1\":{\"26\":1}}],[\"⽤where⼦句替换having⼦句\",{\"1\":{\"26\":1}}],[\"⽤的越少越好\",{\"1\":{\"19\":1,\"22\":1}}],[\"函数接口的参数\",{\"1\":{\"396\":1}}],[\"函数来实现\",{\"1\":{\"297\":1,\"411\":1}}],[\"函数和表达式\",{\"1\":{\"223\":1}}],[\"函数依赖\",{\"1\":{\"78\":1}}],[\"函数实现特定功能的代码块\",{\"1\":{\"17\":1}}],[\"函数名\",{\"1\":{\"17\":2,\"192\":3}}],[\"函数+局部变量\",{\"1\":{\"16\":1}}],[\"用threadlocal作为容器\",{\"1\":{\"396\":1}}],[\"用作保存每个线程独享的对象\",{\"1\":{\"394\":1,\"396\":1}}],[\"用should组合在一起\",{\"1\":{\"339\":1}}],[\"用must组合在一起\",{\"1\":{\"339\":1}}],[\"用到的是jdk实现的动态代理\",{\"1\":{\"255\":1}}],[\"用到了临时表\",{\"1\":{\"223\":1}}],[\"用pip命令来下载binlog2sql所需要的\",{\"1\":{\"146\":1}}],[\"用多个\",{\"1\":{\"104\":3}}],[\"用户表\",{\"1\":{\"491\":1}}],[\"用户权限分配\",{\"0\":{\"455\":1}}],[\"用户可以在不\",{\"1\":{\"416\":1}}],[\"用户发起请求\",{\"1\":{\"280\":1}}],[\"用户id\",{\"1\":{\"78\":1}}],[\"用户\",{\"1\":{\"78\":1}}],[\"用户主键\",{\"1\":{\"78\":1}}],[\"用户名和密码不为空\",{\"1\":{\"425\":2}}],[\"用户名和密码为空\",{\"1\":{\"425\":1}}],[\"用户名长度\",{\"1\":{\"78\":1}}],[\"用户名\",{\"1\":{\"77\":7,\"351\":2,\"392\":1}}],[\"用户变量\",{\"1\":{\"16\":1}}],[\"用来缓冲执行任务的队列\",{\"1\":{\"391\":1}}],[\"用来存储经纬度的\",{\"1\":{\"317\":1}}],[\"用来调用下一个过滤器\",{\"1\":{\"253\":1}}],[\"用来定义数据库的访问权限和安全级别\",{\"1\":{\"30\":1}}],[\"用来定义数据库对象\",{\"1\":{\"30\":1}}],[\"用来查询数据库中表的记录\",{\"1\":{\"30\":1}}],[\"用来对数据库中表的数据进行增删改\",{\"1\":{\"30\":1}}],[\"用来测试连接是否可用的sql语句\",{\"1\":{\"21\":1}}],[\"用a中元素为第一元素\",{\"1\":{\"22\":1}}],[\"用于避免群集中的数据分区\",{\"1\":{\"495\":1}}],[\"用于后续复制开始的位置\",{\"1\":{\"478\":1}}],[\"用于将本地文件或对象从一个位置复制到另一个位置\",{\"1\":{\"468\":1}}],[\"用于在两个目录之间进行镜像同步\",{\"1\":{\"468\":1}}],[\"用于在\",{\"1\":{\"468\":1}}],[\"用于父线程向线程池中提交任务时\",{\"1\":{\"391\":2}}],[\"用于修饰变量\",{\"1\":{\"258\":1}}],[\"用于判断复合索引是否被完全使用\",{\"1\":{\"223\":1}}],[\"用于主键索引和唯一索引\",{\"1\":{\"223\":1}}],[\"用于展示druid的统计信息\",{\"1\":{\"21\":1}}],[\"用于采集web关联监控的数据\",{\"1\":{\"21\":1}}],[\"用于创建自定义过滤器\",{\"1\":{\"10\":1}}],[\"局部变量\",{\"1\":{\"16\":1}}],[\"第1个实例\",{\"1\":{\"487\":1}}],[\"第1页\",{\"1\":{\"57\":1}}],[\"第六步循环第四步和第五步\",{\"1\":{\"337\":1}}],[\"第六步返回结果\",{\"1\":{\"337\":1}}],[\"第五步如果需要下一页数据\",{\"1\":{\"337\":1}}],[\"第五步根据from的值\",{\"1\":{\"337\":1}}],[\"第四步根据你指定的size的个数去es中检索指定个数的数据\",{\"1\":{\"337\":1}}],[\"第四步将数据根据score进行排序\",{\"1\":{\"337\":1}}],[\"第四次挥手主要是为了防止服务端没有收到ack\",{\"1\":{\"282\":1}}],[\"第四次挥手是客户端给服务端发送ack确认关闭连接\",{\"1\":{\"282\":1}}],[\"第四种隔离级别\",{\"1\":{\"217\":1}}],[\"第四范式\",{\"1\":{\"78\":1}}],[\"第\",{\"1\":{\"83\":2}}],[\"第三步将文档的id存放在一个es的上下文中\",{\"1\":{\"337\":1}}],[\"第三步去各个分片中去拉取指定的全部数据\",{\"1\":{\"337\":1}}],[\"第三步\",{\"1\":{\"314\":1}}],[\"第三次挥手是服务端发送fin包给客户端确认是否关闭连接\",{\"1\":{\"282\":1}}],[\"第三范式\",{\"1\":{\"78\":2}}],[\"第三种隔离级别\",{\"1\":{\"217\":1}}],[\"第三种\",{\"1\":{\"16\":1}}],[\"第二步将词汇去分词库中进行检索\",{\"1\":{\"337\":2}}],[\"第二步\",{\"1\":{\"314\":1,\"315\":1}}],[\"第二次挥手服务端接受后返回客户端ack\",{\"1\":{\"282\":1}}],[\"第二种方案\",{\"1\":{\"232\":2}}],[\"第二种隔离级别\",{\"1\":{\"217\":1}}],[\"第二范式\",{\"1\":{\"78\":2}}],[\"第二十七章\",{\"1\":{\"19\":4}}],[\"第一页数据\",{\"1\":{\"337\":1}}],[\"第一步先将用户指定的关键进行分词\",{\"1\":{\"337\":2}}],[\"第一步\",{\"1\":{\"314\":1,\"315\":1}}],[\"第一次挥手就是客户端发送一个fin包给服务端\",{\"1\":{\"282\":1}}],[\"第一次访问之前缓存中没有\",{\"1\":{\"231\":1}}],[\"第一种方案\",{\"1\":{\"232\":2}}],[\"第一范式\",{\"1\":{\"78\":2}}],[\"第一个对象是\",{\"1\":{\"22\":1}}],[\"第一个\",{\"1\":{\"21\":1}}],[\"第3页\",{\"1\":{\"57\":1}}],[\"第2页\",{\"1\":{\"57\":1}}],[\"第⼆快\",{\"1\":{\"26\":1}}],[\"第⼆种\",{\"1\":{\"16\":1}}],[\"第⼀快\",{\"1\":{\"26\":1}}],[\"第⼀种\",{\"1\":{\"16\":1,\"357\":1}}],[\"循环语句\",{\"1\":{\"370\":1,\"373\":1}}],[\"循环的时候\",{\"1\":{\"195\":1}}],[\"循环读取\",{\"1\":{\"116\":1}}],[\"循环实时查看最后100行记录\",{\"1\":{\"116\":1}}],[\"循环\",{\"0\":{\"191\":1},\"1\":{\"16\":1}}],[\"变量和缓存\",{\"1\":{\"441\":1}}],[\"变量时\",{\"1\":{\"396\":1}}],[\"变量是\",{\"1\":{\"237\":2}}],[\"变量名获取\",{\"1\":{\"374\":1}}],[\"变量名=值\",{\"1\":{\"16\":1}}],[\"变量名\",{\"1\":{\"16\":2,\"193\":2,\"373\":2}}],[\"变量名不能⾃定义\",{\"1\":{\"16\":1}}],[\"变量\",{\"1\":{\"16\":2,\"191\":1,\"258\":1,\"422\":2}}],[\"测试rabbit\",{\"1\":{\"352\":1,\"355\":1}}],[\"测试分词器\",{\"0\":{\"312\":1}}],[\"测试密码文件\",{\"0\":{\"174\":1}}],[\"测试环境\",{\"1\":{\"91\":1}}],[\"测试\",{\"1\":{\"15\":1,\"101\":1,\"188\":1,\"341\":1,\"390\":1}}],[\"测试触发器\",{\"1\":{\"15\":1}}],[\"可ssh\",{\"1\":{\"450\":1}}],[\"可通过脚本copy到备份文件夹\",{\"1\":{\"438\":1}}],[\"可通过该列计算查询中使⽤的索引的⻓度\",{\"1\":{\"19\":1,\"22\":1}}],[\"可打包时选择相应环境\",{\"1\":{\"438\":1}}],[\"可添加tag\",{\"1\":{\"427\":1}}],[\"可部署非阿里云服务器\",{\"1\":{\"426\":1}}],[\"可动态指定一组对象处理请求\",{\"1\":{\"425\":1}}],[\"可视乎访问端口号\",{\"1\":{\"351\":1}}],[\"可视化界面中可以看到\",{\"0\":{\"322\":1}}],[\"可视化\",{\"1\":{\"302\":1}}],[\"可伸缩和最终⼀致性架构\",{\"1\":{\"351\":1}}],[\"可不指定id\",{\"1\":{\"321\":1}}],[\"可靠性\",{\"1\":{\"279\":1}}],[\"可用性\",{\"1\":{\"279\":2}}],[\"可多线程执行\",{\"1\":{\"263\":1}}],[\"可能比cglib慢一些\",{\"1\":{\"419\":1}}],[\"可能触发阻塞\",{\"1\":{\"300\":1,\"414\":1}}],[\"可能会出现多个线程同时访问\",{\"1\":{\"422\":1}}],[\"可能会出现问题\",{\"1\":{\"279\":1}}],[\"可能会使我们无法发现系统的异常状态\",{\"1\":{\"290\":1,\"404\":1}}],[\"可能会产生有效期延迟\",{\"1\":{\"279\":1}}],[\"可能会导致slave\",{\"1\":{\"479\":1}}],[\"可能会导致性能下降\",{\"1\":{\"223\":1}}],[\"可能会导致类型转换\",{\"1\":{\"223\":1}}],[\"可能导致出现超卖的现象\",{\"1\":{\"277\":1}}],[\"可能导致崩溃解决\",{\"1\":{\"231\":1}}],[\"可能设置了过期时间\",{\"1\":{\"231\":1}}],[\"可能用到的索引\",{\"1\":{\"223\":1}}],[\"可能原因包括没有建⽴索引或索引失效\",{\"1\":{\"19\":1,\"22\":1}}],[\"可串行化\",{\"1\":{\"217\":1}}],[\"可重复度\",{\"1\":{\"217\":1}}],[\"可重复读可重复读是指在一个事务内\",{\"1\":{\"217\":1}}],[\"可重复读第一种隔离级别\",{\"1\":{\"217\":1}}],[\"可重复读\",{\"1\":{\"76\":1}}],[\"可序化序列化是最高的事物隔离级别\",{\"1\":{\"217\":1}}],[\"可定制的滚动行为\",{\"1\":{\"208\":1}}],[\"可指定本地文件\",{\"1\":{\"153\":1}}],[\"可根据mysqlbinlog找到删除的偏移量\",{\"1\":{\"146\":1}}],[\"可筛选库筛选表非常的方便\",{\"1\":{\"146\":1}}],[\"可反编译\",{\"1\":{\"146\":1}}],[\"可扩展\",{\"1\":{\"125\":1}}],[\"可使用空格和缩进来增强语句的可读性\",{\"1\":{\"30\":1}}],[\"可增加多条\",{\"1\":{\"15\":1}}],[\"可以看到\",{\"1\":{\"498\":1}}],[\"可以外部访问\",{\"1\":{\"497\":1}}],[\"可以保持目录结构的一致性\",{\"1\":{\"468\":1}}],[\"可以保证在后续处理中仍然能够访问到请求的\",{\"1\":{\"10\":1}}],[\"可以用来上传\",{\"1\":{\"468\":1}}],[\"可以用于任务执行状态的监控\",{\"1\":{\"391\":1}}],[\"可以往下执行\",{\"1\":{\"425\":2}}],[\"可以通过使用享元模式在一\",{\"1\":{\"416\":1}}],[\"可以通过重写terminated\",{\"1\":{\"297\":1,\"411\":1}}],[\"可以通过重写其他方法\",{\"1\":{\"8\":1}}],[\"可以接收\",{\"1\":{\"415\":1}}],[\"可以视为\",{\"1\":{\"415\":1}}],[\"可以与其他spring特性\",{\"1\":{\"391\":1}}],[\"可以\",{\"1\":{\"366\":1}}],[\"可以⾃动传递死信交换器\",{\"1\":{\"366\":1}}],[\"可以在eclipse或intellij\",{\"1\":{\"426\":1}}],[\"可以在消费端开启⼿动处理\",{\"1\":{\"366\":1}}],[\"可以在查询时\",{\"1\":{\"334\":1}}],[\"可以在任意一方添加唯一外键指向另一方的主键\",{\"1\":{\"78\":1}}],[\"可以进行前缀查询\",{\"1\":{\"332\":1}}],[\"可以存储ipv4或者ipv6其他的数据类型参考官网\",{\"1\":{\"317\":1}}],[\"可以创建多个索引\",{\"1\":{\"306\":1}}],[\"可以定义一个或多个类型\",{\"1\":{\"304\":1}}],[\"可以配置用于执行\",{\"1\":{\"300\":1,\"414\":1}}],[\"可以实现延迟消息处理的队列\",{\"1\":{\"360\":1}}],[\"可以实现快速搜索\",{\"1\":{\"302\":1}}],[\"可以实现海量数据的存储\",{\"1\":{\"302\":1}}],[\"可以实现\",{\"1\":{\"286\":1,\"400\":1}}],[\"可以实现组件之间的松耦合通信\",{\"1\":{\"281\":1}}],[\"可以实现数组的遍历等\",{\"1\":{\"191\":1}}],[\"可以支撑高并发的获取\",{\"1\":{\"279\":1}}],[\"可以更好的表达这个概念\",{\"1\":{\"264\":1}}],[\"可以更快速的搭建环境\",{\"1\":{\"90\":1}}],[\"可以具有不同的数据类型或表现出不同的行为\",{\"1\":{\"258\":1}}],[\"可以阻断\",{\"1\":{\"258\":1}}],[\"可以重复的\",{\"1\":{\"225\":1}}],[\"可以避免脏读\",{\"1\":{\"217\":1}}],[\"可以防止脏读和不可重复读\",{\"1\":{\"217\":1}}],[\"可以访问dom元素\",{\"1\":{\"215\":1}}],[\"可以访问当前this实例\",{\"1\":{\"215\":1}}],[\"可以提高网络的访问速度和安全性\",{\"1\":{\"170\":1}}],[\"可以认为\",{\"1\":{\"156\":1}}],[\"可以指定任意config\",{\"1\":{\"153\":1}}],[\"可以指定多个\",{\"1\":{\"104\":3}}],[\"可以手动分享\",{\"1\":{\"133\":1}}],[\"可以很简单的和其他应用结合使用\",{\"1\":{\"123\":1}}],[\"可以确定唯一b属性的值\",{\"1\":{\"78\":2}}],[\"可以解决所有的问题\",{\"1\":{\"76\":1}}],[\"可以添加外键\",{\"1\":{\"64\":1}}],[\"可以来完成值得自动增长\",{\"1\":{\"63\":1}}],[\"可以过滤掉最⼤数量记录的条件必须写在where⼦句的末尾\",{\"1\":{\"26\":1}}],[\"可以考虑java代码中实现数据处理\",{\"1\":{\"25\":1}}],[\"可以把逻辑放到java代码中解决\",{\"1\":{\"25\":1}}],[\"可以把这个数值配置大一些\",{\"1\":{\"21\":1}}],[\"可以使用zookeeper锁\",{\"1\":{\"279\":1}}],[\"可以使用复制算法\",{\"1\":{\"271\":1}}],[\"可以使用minio\",{\"1\":{\"125\":1}}],[\"可以使用\",{\"1\":{\"100\":1,\"335\":1}}],[\"可以使用httpservletrequestwrapper类来进行包装和处理\",{\"1\":{\"6\":1}}],[\"可以使⽤聚合函数的结果或使⽤聚合函数\",{\"1\":{\"22\":1}}],[\"可以直接在任何java项目中使用\",{\"1\":{\"391\":1}}],[\"可以直接\",{\"1\":{\"16\":1}}],[\"可以修改请求的http方法\",{\"1\":{\"8\":1}}],[\"可以修改对请求url的访问方式\",{\"1\":{\"8\":1}}],[\"可以修改对请求头的访问方式\",{\"1\":{\"8\":1}}],[\"可以修改对请求参数的访问方式\",{\"1\":{\"8\":1}}],[\"时无法转换为int\",{\"1\":{\"384\":1}}],[\"时被多个消费\",{\"1\":{\"356\":1}}],[\"时\",{\"1\":{\"51\":1,\"223\":1,\"231\":1,\"239\":2,\"247\":1}}],[\"时间过期\",{\"1\":{\"366\":1}}],[\"时间方式范围统计\",{\"1\":{\"344\":1}}],[\"时间类型的格式化方式\",{\"1\":{\"320\":1}}],[\"时间类型\",{\"1\":{\"317\":1}}],[\"时间没到任务取不出来\",{\"1\":{\"286\":1,\"400\":1}}],[\"时间函数\",{\"1\":{\"51\":2}}],[\"时间查询\",{\"0\":{\"51\":1}}],[\"时间错类型\",{\"1\":{\"39\":1}}],[\"时间\",{\"1\":{\"15\":1}}],[\"时返回缓存中的数据\",{\"1\":{\"6\":1}}],[\"满足任意一个条件\",{\"1\":{\"49\":1}}],[\"满足指定的条件\",{\"1\":{\"15\":1}}],[\"满⾜以下条件任意其⼀\",{\"1\":{\"360\":1}}],[\"满⾜条件要输出的内容<\",{\"1\":{\"373\":1}}],[\"满⾜条件\",{\"1\":{\"15\":1}}],[\"满⾜⼀定的条件\",{\"1\":{\"15\":1}}],[\"$jre\",{\"1\":{\"481\":2}}],[\"$java\",{\"1\":{\"481\":3,\"484\":1}}],[\"$jar\",{\"1\":{\"165\":1,\"450\":3}}],[\"$minio\",{\"1\":{\"461\":2}}],[\"$m2\",{\"1\":{\"447\":2}}],[\"$build\",{\"1\":{\"450\":4,\"454\":10}}],[\"$body\",{\"1\":{\"157\":1,\"165\":1}}],[\"$workspace\",{\"1\":{\"450\":2,\"454\":2}}],[\"$server\",{\"1\":{\"450\":8}}],[\"$store\",{\"1\":{\"214\":2}}],[\"$status\",{\"1\":{\"157\":1,\"165\":1}}],[\"$class\",{\"1\":{\"440\":1,\"441\":1}}],[\"$4\",{\"1\":{\"215\":1}}],[\"$route\",{\"1\":{\"211\":2}}],[\"$router\",{\"1\":{\"210\":3}}],[\"$request\",{\"1\":{\"157\":1,\"165\":1}}],[\"$remote\",{\"1\":{\"157\":2,\"165\":3,\"464\":4,\"490\":2}}],[\"$tail\",{\"1\":{\"165\":2,\"450\":2}}],[\"$time\",{\"1\":{\"157\":1,\"165\":1}}],[\"$7\",{\"1\":{\"165\":1,\"450\":1}}],[\"$p\",{\"1\":{\"450\":1,\"454\":2}}],[\"$pid\",{\"1\":{\"165\":2,\"430\":3,\"431\":3,\"450\":3}}],[\"$port\",{\"1\":{\"165\":1,\"450\":2}}],[\"$proxy\",{\"1\":{\"165\":1,\"464\":2}}],[\"$2\",{\"1\":{\"165\":1,\"215\":1,\"430\":1,\"431\":1,\"450\":1}}],[\"$1\",{\"1\":{\"165\":2,\"450\":2}}],[\"$version\",{\"1\":{\"450\":3}}],[\"$v\",{\"1\":{\"165\":1}}],[\"$host\",{\"1\":{\"165\":1,\"490\":1}}],[\"$http\",{\"1\":{\"157\":3,\"165\":4,\"464\":3}}],[\"$ui\",{\"1\":{\"454\":25}}],[\"$upstream\",{\"1\":{\"165\":1}}],[\"$uri\",{\"1\":{\"165\":2}}],[\"$\",{\"1\":{\"15\":2,\"16\":1,\"17\":2,\"18\":2,\"101\":2,\"116\":5,\"159\":1,\"164\":1,\"165\":1,\"323\":9,\"370\":1,\"373\":1,\"387\":1,\"431\":4,\"432\":6,\"440\":26,\"441\":11,\"450\":1,\"458\":10,\"461\":1,\"491\":10}}],[\"新加item\",{\"1\":{\"450\":1}}],[\"新版本默认的类型1\",{\"1\":{\"304\":1}}],[\"新线程于主线程并非同一个上下文\",{\"1\":{\"299\":1,\"413\":1}}],[\"新生代存活率低\",{\"1\":{\"271\":1}}],[\"新⽣代\",{\"1\":{\"269\":1}}],[\"新的算法或行为\",{\"1\":{\"416\":1}}],[\"新的任务会触发拒绝策略\",{\"1\":{\"285\":1,\"399\":1}}],[\"新的类能吸收已有类的数据属性和行为\",{\"1\":{\"258\":1}}],[\"新的表名\",{\"1\":{\"41\":1}}],[\"新浪\",{\"1\":{\"156\":1}}],[\"新型虚拟机\",{\"1\":{\"90\":1}}],[\"新密码\",{\"1\":{\"77\":2}}],[\"新数据类型\",{\"1\":{\"41\":2}}],[\"新列别\",{\"1\":{\"41\":1}}],[\"新增任务\",{\"0\":{\"450\":1}}],[\"新增文档\",{\"1\":{\"323\":1}}],[\"新增\",{\"1\":{\"15\":1}}],[\"新增数据\",{\"1\":{\"13\":1,\"15\":1}}],[\"新建触发器\",{\"1\":{\"15\":1}}],[\"⾏级触发器\",{\"1\":{\"15\":1}}],[\"表达true和false\",{\"1\":{\"317\":1}}],[\"表达式\",{\"1\":{\"387\":1}}],[\"表达式2\",{\"1\":{\"48\":1}}],[\"表达式1\",{\"1\":{\"48\":2}}],[\"表单标签\",{\"1\":{\"195\":1}}],[\"表语句\",{\"1\":{\"146\":1}}],[\"表2\",{\"1\":{\"70\":1,\"71\":1}}],[\"表1\",{\"1\":{\"70\":1,\"71\":1}}],[\"表\",{\"0\":{\"31\":1},\"1\":{\"30\":1,\"146\":1,\"304\":1}}],[\"表之间的连接必须写在其他where条件之前\",{\"1\":{\"26\":1}}],[\"表明用mysql作为后端存储\",{\"1\":{\"487\":1}}],[\"表明使⽤了连接缓存\",{\"1\":{\"19\":1,\"22\":1}}],[\"表明\",{\"1\":{\"19\":1,\"22\":1}}],[\"表明索引被⽤来执⾏索引键值的查找\",{\"1\":{\"19\":1,\"22\":1}}],[\"表示or的意思\",{\"1\":{\"339\":1}}],[\"表示and的意思\",{\"1\":{\"339\":1}}],[\"表示一个值不存在\",{\"1\":{\"264\":1}}],[\"表示这个值不存在\",{\"1\":{\"264\":1}}],[\"表示可以在任意主机使用用户登录数据库\",{\"1\":{\"77\":1}}],[\"表示\",{\"1\":{\"22\":1}}],[\"表示相应的select操作中使⽤了覆盖索引\",{\"1\":{\"19\":1,\"22\":1}}],[\"表示索引中使⽤的字节数\",{\"1\":{\"19\":1,\"22\":1}}],[\"表示通过索引⼀次就找到了\",{\"1\":{\"19\":1}}],[\"表中只有⼀条记录与之匹配\",{\"1\":{\"19\":1}}],[\"表只有⼀⾏记录\",{\"1\":{\"19\":1}}],[\"表级触发器\",{\"1\":{\"15\":1}}],[\"表名2\",{\"1\":{\"59\":2,\"68\":1}}],[\"表名1\",{\"1\":{\"59\":2,\"68\":1}}],[\"表名列表\",{\"1\":{\"47\":1}}],[\"表名\",{\"1\":{\"13\":7,\"15\":1,\"19\":3,\"22\":2,\"39\":2,\"40\":1,\"41\":6,\"42\":3,\"44\":3,\"45\":4,\"46\":1,\"48\":3,\"58\":1,\"64\":4,\"72\":2,\"77\":2,\"219\":3}}],[\"触发器创建\",{\"1\":{\"15\":1}}],[\"触发器名称\",{\"1\":{\"15\":2}}],[\"触发器的时间\",{\"1\":{\"15\":1}}],[\"触发器的操作类型\",{\"1\":{\"15\":1}}],[\"触发器的分类\",{\"1\":{\"15\":1}}],[\"触发器\",{\"1\":{\"15\":4}}],[\"只输入error日志\",{\"1\":{\"389\":1}}],[\"只对字符串\",{\"1\":{\"384\":1}}],[\"只针对数值类型\",{\"1\":{\"335\":1}}],[\"只针对于mysql5\",{\"1\":{\"146\":1}}],[\"只需要存储一个范围即可\",{\"1\":{\"317\":1}}],[\"只需要添加一个监听器就可以了\",{\"1\":{\"279\":1}}],[\"只要有该注解\",{\"1\":{\"378\":1}}],[\"只要用于参数校验\",{\"1\":{\"375\":1}}],[\"只要第三个参数为true就会将消息添加到队列\",{\"1\":{\"362\":1}}],[\"只要谁能够先创建成功\",{\"1\":{\"279\":2}}],[\"只要持有锁的客户端没有宕机\",{\"1\":{\"278\":1}}],[\"只要超过一般就认为是大对象\",{\"1\":{\"271\":1}}],[\"只要babel模块\",{\"1\":{\"200\":1}}],[\"只不过\",{\"1\":{\"259\":1}}],[\"只会同步文件\",{\"1\":{\"468\":1}}],[\"只会增加\",{\"1\":{\"243\":1}}],[\"只会触发父类的初始化\",{\"1\":{\"239\":1}}],[\"只从索引文件中获取数据\",{\"1\":{\"223\":1}}],[\"只是在文件中方便观看是按个服务\",{\"1\":{\"104\":3}}],[\"只适合容器数量比较少\",{\"1\":{\"100\":1}}],[\"只包含年月日\",{\"1\":{\"39\":1}}],[\"只检索给定范围的⾏\",{\"1\":{\"19\":1}}],[\"只有在缓冲队列满了之后才会申请超过核心线程数的线程\",{\"1\":{\"391\":1}}],[\"只有error队列可以接受到转发的消息\",{\"1\":{\"358\":1}}],[\"只有一台es服务器\",{\"1\":{\"306\":1}}],[\"只有当消息成功持久化磁盘之后\",{\"1\":{\"274\":1}}],[\"只有覆盖索引才不会进行回表操作\",{\"1\":{\"223\":1}}],[\"只有最左侧被当为索引\",{\"1\":{\"19\":1}}],[\"只有group\",{\"1\":{\"14\":1}}],[\"只写\",{\"1\":{\"18\":1}}],[\"只读\",{\"1\":{\"18\":1}}],[\"只能背赋值一次\",{\"1\":{\"258\":1}}],[\"只能进行全表扫描\",{\"1\":{\"221\":1}}],[\"只能承受150个并发\",{\"1\":{\"156\":1}}],[\"只能作为静态页面的web服务器\",{\"1\":{\"156\":1}}],[\"只能正向回滚\",{\"1\":{\"145\":1}}],[\"只能依赖\",{\"1\":{\"28\":1}}],[\"只能定义在函数\",{\"1\":{\"16\":1}}],[\"只能⽤系统提供\",{\"1\":{\"16\":1}}],[\"只能获取一次的问题\",{\"1\":{\"10\":2}}],[\"查找内部的数据\",{\"1\":{\"348\":1}}],[\"查找所有运行的端口\",{\"1\":{\"118\":1}}],[\"查寻角较多场景\",{\"1\":{\"241\":1}}],[\"查看节点列表\",{\"1\":{\"495\":1}}],[\"查看集群信息\",{\"1\":{\"495\":1}}],[\"查看从数据库的状态\",{\"1\":{\"479\":1}}],[\"查看mysql服务状态\",{\"1\":{\"475\":1}}],[\"查看防火墙所以开放端口\",{\"1\":{\"475\":1}}],[\"查看root用户的临时密码\",{\"1\":{\"474\":1}}],[\"查看磁盘\",{\"1\":{\"462\":1}}],[\"查看系统最大文件数\",{\"1\":{\"458\":2}}],[\"查看ssh是否启动\",{\"1\":{\"435\":1}}],[\"查看slow\",{\"1\":{\"23\":1}}],[\"查看部署成功\",{\"1\":{\"428\":1}}],[\"查看当前主服务器\",{\"1\":{\"499\":1}}],[\"查看当前用户列表\",{\"1\":{\"351\":1}}],[\"查看当前的版本\",{\"1\":{\"184\":1}}],[\"查看主节点\",{\"1\":{\"319\":1}}],[\"查看es\",{\"1\":{\"319\":1}}],[\"查看所有数据\",{\"1\":{\"346\":1}}],[\"查看所有索引\",{\"1\":{\"319\":1}}],[\"查看所有节点\",{\"1\":{\"319\":1}}],[\"查看所有全局系统变量\",{\"1\":{\"16\":1}}],[\"查看镜像\",{\"1\":{\"198\":1}}],[\"查看网络可以安装的版本\",{\"1\":{\"184\":1}}],[\"查看已经安装的版本\",{\"1\":{\"184\":1}}],[\"查看列表\",{\"1\":{\"184\":1}}],[\"查看运行状态\",{\"1\":{\"177\":1}}],[\"查看运行容器\",{\"1\":{\"95\":1}}],[\"查看生成的backuptmp\",{\"1\":{\"145\":1}}],[\"查看binlog日志信息包括位置\",{\"1\":{\"144\":1}}],[\"查看binlog状态sql如下\",{\"1\":{\"143\":1}}],[\"查看我们当前使用的binlog\",{\"1\":{\"144\":1}}],[\"查看现有的redis密码\",{\"1\":{\"121\":1}}],[\"查看是哪个进程或者程序占用端口\",{\"1\":{\"118\":1}}],[\"查看是否有权限\",{\"1\":{\"459\":1}}],[\"查看是否安装成功\",{\"0\":{\"310\":1},\"1\":{\"182\":1,\"199\":1,\"308\":1}}],[\"查看是否安装完毕\",{\"1\":{\"110\":1,\"311\":1}}],[\"查看是否error\",{\"1\":{\"95\":1}}],[\"查看指定\",{\"1\":{\"118\":1}}],[\"查看被占用端口对应的\",{\"1\":{\"118\":1}}],[\"查看最后100行日志记录\",{\"1\":{\"116\":1}}],[\"查看实时日志\",{\"1\":{\"116\":1}}],[\"查看日志列表\",{\"1\":{\"144\":1}}],[\"查看日志\",{\"1\":{\"116\":1}}],[\"查看端口号是否开通\",{\"1\":{\"179\":1}}],[\"查看端口号\",{\"1\":{\"116\":1}}],[\"查看某端口占用的线程的pid\",{\"1\":{\"116\":1}}],[\"查看页面是否可以打开\",{\"1\":{\"109\":1}}],[\"查看内网es分配的ip\",{\"1\":{\"109\":1}}],[\"查看容器日志\",{\"1\":{\"95\":1}}],[\"查看容器的详细信息\",{\"1\":{\"95\":1}}],[\"查看本地镜像文件\",{\"1\":{\"95\":1}}],[\"查看安装的docker文件\",{\"1\":{\"93\":1}}],[\"查看状态\",{\"0\":{\"463\":1},\"1\":{\"93\":1}}],[\"查看事务的默认提交方式\",{\"1\":{\"74\":1}}],[\"查看能不能找到最短路径\",{\"1\":{\"25\":1}}],[\"查看表上的索引\",{\"1\":{\"19\":2,\"219\":1}}],[\"查看索引是否⽣效\",{\"1\":{\"19\":1,\"219\":1}}],[\"查看\",{\"1\":{\"18\":1,\"104\":1,\"357\":1,\"359\":1,\"471\":1,\"472\":1,\"479\":1,\"496\":1}}],[\"查看视图\",{\"1\":{\"14\":1}}],[\"查询省份为武汉或者北京\",{\"1\":{\"339\":1}}],[\"查询并删除\",{\"1\":{\"338\":1}}],[\"查询关系\",{\"1\":{\"326\":1}}],[\"查询命中\",{\"1\":{\"326\":1}}],[\"查询用了2毫秒\",{\"1\":{\"326\":1}}],[\"查询用户\",{\"1\":{\"77\":1}}],[\"查询结果说明\",{\"0\":{\"326\":1},\"1\":{\"326\":1}}],[\"查询指定的文档信息\",{\"1\":{\"319\":1}}],[\"查询索引详情\",{\"1\":{\"319\":1}}],[\"查询索引信息\",{\"1\":{\"319\":1}}],[\"查询⼀下该消息是否有消费过\",{\"1\":{\"275\":1,\"364\":1}}],[\"查询全部表中的数据\",{\"1\":{\"223\":1}}],[\"查询全部索引中的数据\",{\"1\":{\"223\":1}}],[\"查询类型\",{\"1\":{\"223\":1}}],[\"查询优化器可能会做出错误的索引选择决策\",{\"1\":{\"223\":1}}],[\"查询列都是索引列那么这些列被称为覆盖索引\",{\"1\":{\"223\":1}}],[\"查询效率非常低\",{\"1\":{\"223\":1}}],[\"查询速度快\",{\"1\":{\"220\":1}}],[\"查询10行之后的所有日志\",{\"1\":{\"116\":1}}],[\"查询日志尾部最后10行的日志\",{\"1\":{\"116\":1}}],[\"查询java进程\",{\"1\":{\"116\":1}}],[\"查询时候转为相应内容\",{\"1\":{\"111\":1}}],[\"查询安装的容器\",{\"1\":{\"95\":1}}],[\"查询权限\",{\"1\":{\"77\":2}}],[\"查询user表\",{\"1\":{\"77\":1}}],[\"查询的是哪张表\",{\"1\":{\"223\":1}}],[\"查询的是右表所有数据以及其交集部分\",{\"1\":{\"71\":1}}],[\"查询的是左表所有数据以及其交集部分\",{\"1\":{\"70\":1}}],[\"查询所有员工信息\",{\"1\":{\"70\":2}}],[\"查询所有数据库的名称\",{\"1\":{\"34\":1}}],[\"查询员工表的名称\",{\"1\":{\"67\":1}}],[\"查询哪些字段\",{\"1\":{\"67\":1}}],[\"查询英语成绩不为null\",{\"1\":{\"49\":1}}],[\"查询英语成绩为null\",{\"1\":{\"49\":1}}],[\"查询年龄22岁\",{\"1\":{\"49\":1}}],[\"查询年龄大于等于20\",{\"1\":{\"49\":1}}],[\"查询年龄大于20岁\",{\"1\":{\"49\":1}}],[\"查询年龄不等于20岁\",{\"1\":{\"49\":1}}],[\"查询年龄等于20岁\",{\"1\":{\"49\":1}}],[\"查询当前表的所有字段\",{\"1\":{\"48\":1}}],[\"查询当前正在使用的数据库名称\",{\"1\":{\"37\":1}}],[\"查询某个数据库中所有的表名称\",{\"1\":{\"40\":1}}],[\"查询某个数据库的创建语句\",{\"1\":{\"34\":1}}],[\"查询某个数据库的字符集\",{\"1\":{\"34\":1}}],[\"查询表中数据\",{\"1\":{\"77\":1}}],[\"查询表中的记录\",{\"0\":{\"47\":1}}],[\"查询表结构\",{\"1\":{\"40\":1}}],[\"查询表\",{\"0\":{\"40\":1}}],[\"查询需要的字段\",{\"1\":{\"22\":1}}],[\"查询涉及到的字段上若存在索引\",{\"1\":{\"19\":1,\"22\":1}}],[\"查询⽤户变量的内容\",{\"1\":{\"18\":1}}],[\"查询系统变量的值\",{\"1\":{\"16\":1}}],[\"查询\",{\"0\":{\"34\":1},\"1\":{\"15\":1,\"34\":2,\"40\":2,\"208\":1,\"325\":1}}],[\"查询语句\",{\"0\":{\"53\":1},\"1\":{\"14\":1,\"19\":1,\"219\":1}}],[\"查询条件构造器\",{\"1\":{\"339\":1}}],[\"查询条件\",{\"1\":{\"13\":1,\"340\":1}}],[\"查询数据\",{\"1\":{\"13\":1}}],[\"使配置生效\",{\"1\":{\"481\":1}}],[\"使得开发者可以在集成开发环境\",{\"1\":{\"426\":1}}],[\"使得事件的生产者和消费者可以独立地进行开发和修改\",{\"1\":{\"415\":1}}],[\"使得上面的结构可以保持键值对的插入顺序\",{\"1\":{\"248\":1}}],[\"使⽤$\",{\"1\":{\"374\":1}}],[\"使⽤插值语法\",{\"1\":{\"188\":1}}],[\"使⽤表的别名\",{\"1\":{\"26\":1}}],[\"使⽤最左前缀原则\",{\"1\":{\"25\":1}}],[\"使⽤了⽤临时表保存中间结果\",{\"1\":{\"19\":1,\"22\":1}}],[\"使⽤⼀个索引来选择⾏\",{\"1\":{\"19\":1}}],[\"使⽤存储过程\",{\"1\":{\"18\":1}}],[\"使⽤函数\",{\"1\":{\"17\":2}}],[\"使⽤视图\",{\"1\":{\"14\":1}}],[\"使用服务器端的首选算法\",{\"1\":{\"464\":2}}],[\"使用分布式minio自动引入了纠删码功能\",{\"1\":{\"457\":1}}],[\"使用jdk11启动jenkins\",{\"1\":{\"445\":1}}],[\"使用静态代理时\",{\"1\":{\"418\":1}}],[\"使用策略模式可以避免使用多重条件转移语句\",{\"1\":{\"416\":1}}],[\"使用场景\",{\"0\":{\"396\":1}}],[\"使用cdn\",{\"1\":{\"392\":1}}],[\"使用多线程时\",{\"1\":{\"391\":1}}],[\"使用多线程调用dao层时\",{\"1\":{\"299\":1,\"413\":1}}],[\"使用springboottest时会启动springboot\",{\"1\":{\"355\":1}}],[\"使用slf4j\",{\"1\":{\"21\":1}}],[\"使用docker安装rabbitmq\",{\"1\":{\"351\":1}}],[\"使用较多\",{\"1\":{\"336\":1}}],[\"使用此策略\",{\"1\":{\"290\":1,\"404\":1}}],[\"使用双向队列实现的有界双端阻塞队列\",{\"1\":{\"286\":1,\"400\":1}}],[\"使用双向链表实现存储\",{\"1\":{\"242\":1}}],[\"使用直接关闭临时节点session会话连接\",{\"1\":{\"279\":1}}],[\"使用getlock加锁\",{\"1\":{\"277\":1}}],[\"使用list结构实现栈和队列结构\",{\"1\":{\"225\":1}}],[\"使用到了临时表\",{\"1\":{\"223\":1}}],[\"使用步骤\",{\"1\":{\"208\":1}}],[\"使用nvm多版本控制\",{\"1\":{\"181\":1}}],[\"使用nginx\",{\"1\":{\"156\":1}}],[\"使用vim命令编写一个dockerfile文件\",{\"1\":{\"117\":1}}],[\"使用内网es分配的ip启动kibana\",{\"1\":{\"109\":1}}],[\"使用一个命令\",{\"1\":{\"100\":1}}],[\"使用的数据库为\",{\"1\":{\"491\":1}}],[\"使用的就是\",{\"1\":{\"418\":1}}],[\"使用的centos\",{\"1\":{\"93\":1}}],[\"使用的是easyexcel解析\",{\"1\":{\"3\":1}}],[\"使用率特别低\",{\"1\":{\"91\":1}}],[\"使用新密码登录\",{\"1\":{\"77\":1}}],[\"使用无验证方式启动mysql服务\",{\"1\":{\"77\":1}}],[\"使用where条件消除无用数据\",{\"1\":{\"67\":1}}],[\"使用数据库\",{\"1\":{\"37\":2}}],[\"使用\",{\"0\":{\"37\":1},\"1\":{\"63\":1,\"125\":1,\"192\":1,\"223\":3,\"234\":1,\"300\":2,\"414\":2,\"421\":1,\"422\":2}}],[\"使用联合索引会大大的减少开销\",{\"1\":{\"19\":1}}],[\"使用函数等导致索引失效的情况\",{\"1\":{\"223\":1}}],[\"使用函数\",{\"1\":{\"16\":1}}],[\"使用binary方式请求是可以解析\",{\"1\":{\"3\":1}}],[\"操作在某些情况下可能会导致回表\",{\"1\":{\"223\":2}}],[\"操作\",{\"1\":{\"74\":1,\"248\":1}}],[\"操作表\",{\"1\":{\"39\":1}}],[\"操作表crud\",{\"0\":{\"38\":1}}],[\"操作⽅式\",{\"1\":{\"15\":1}}],[\"操作视图就跟表⼀样\",{\"1\":{\"14\":1}}],[\"操作视图跟操作表⼀样\",{\"1\":{\"14\":1}}],[\"操作数据库和表\",{\"1\":{\"77\":1}}],[\"操作数据库crud\",{\"0\":{\"32\":1}}],[\"操作数据库\",{\"0\":{\"31\":1},\"1\":{\"12\":1,\"33\":1}}],[\"临时表\",{\"1\":{\"14\":1}}],[\"对外暴露获取实例的静态方法\",{\"1\":{\"422\":1}}],[\"对接sso校验是否登录\",{\"1\":{\"396\":1}}],[\"对实体类增加注解\",{\"1\":{\"385\":1}}],[\"对消息过滤\",{\"1\":{\"366\":1}}],[\"对某一个field进行大于或者小于的范围指定\",{\"1\":{\"335\":1}}],[\"对你的关键字去文档分词库中去匹配内容\",{\"1\":{\"325\":1}}],[\"对元素没有要求\",{\"1\":{\"286\":1,\"400\":1}}],[\"对文档内容分词\",{\"1\":{\"325\":1}}],[\"对文档内容存储\",{\"1\":{\"111\":1}}],[\"对文件内容不做任何\",{\"1\":{\"263\":1}}],[\"对两个equals方法返回true\",{\"1\":{\"244\":1}}],[\"对象存储服务中进行文件传输和同步操作\",{\"1\":{\"468\":1}}],[\"对象存活率较高时\",{\"1\":{\"271\":1}}],[\"对象加载时间过长\",{\"1\":{\"422\":1}}],[\"对象是否小等于指定的值\",{\"1\":{\"384\":1}}],[\"对象是否大等于指定的值\",{\"1\":{\"384\":1}}],[\"对象是否符合正则表达式的规则\",{\"1\":{\"384\":1}}],[\"对象是否在当前时间之后\",{\"1\":{\"384\":1}}],[\"对象是否在当前时间之前\",{\"1\":{\"384\":1}}],[\"对象是否为\",{\"1\":{\"384\":2}}],[\"对象a和b是么有直接联系的\",{\"1\":{\"280\":1}}],[\"对象太大\",{\"1\":{\"271\":1}}],[\"对象无论如何都不会相等\",{\"1\":{\"244\":1}}],[\"对象\",{\"1\":{\"237\":1}}],[\"对索引列进行处理\",{\"1\":{\"223\":1}}],[\"对事物的操作\",{\"1\":{\"217\":1}}],[\"对state的数据进⾏⼆次处理\",{\"1\":{\"213\":1}}],[\"对目标服务器隐藏客户端的ip地址\",{\"1\":{\"158\":1}}],[\"对应到广播例子中\",{\"1\":{\"415\":1}}],[\"对应队列名称\",{\"1\":{\"352\":1,\"354\":1}}],[\"对应数据\",{\"1\":{\"220\":1}}],[\"对应代码片段\",{\"1\":{\"215\":1}}],[\"对应name\",{\"1\":{\"210\":1}}],[\"对应path\",{\"1\":{\"210\":1}}],[\"对应的资源\",{\"1\":{\"159\":1}}],[\"对应的镜像加速服务\",{\"1\":{\"94\":1}}],[\"对应客户端的clienttoken\",{\"1\":{\"153\":1}}],[\"对应一条隧道的authtoken\",{\"1\":{\"153\":1}}],[\"对指定的数据库开启bin\",{\"1\":{\"143\":1}}],[\"对指定接口的执行时间\",{\"1\":{\"21\":1}}],[\"对全部数据库开启则注释掉binlog\",{\"1\":{\"143\":1}}],[\"对表中的数据进行限定\",{\"1\":{\"60\":1,\"218\":1}}],[\"对号⼊座\",{\"1\":{\"25\":1}}],[\"对于zk集群的压力会比较大\",{\"1\":{\"279\":1}}],[\"对于zk分布式锁而言\",{\"1\":{\"279\":1}}],[\"对于redis的分布式锁而言\",{\"1\":{\"279\":1}}],[\"对于某些热点数据\",{\"1\":{\"231\":1}}],[\"对于类似于\",{\"1\":{\"223\":1}}],[\"对于每个索引键的查询\",{\"1\":{\"223\":2}}],[\"对于每个索引键\",{\"1\":{\"19\":1}}],[\"对于大量数据的表\",{\"1\":{\"19\":1}}],[\"对查询语句\",{\"1\":{\"14\":1}}],[\"对请求进行个性化处理\",{\"1\":{\"8\":1}}],[\"元数据指rabbitmq的配置数据\",{\"1\":{\"365\":1}}],[\"元数据验证\",{\"1\":{\"236\":1}}],[\"元空间\",{\"1\":{\"269\":1}}],[\"元空间程序计数器\",{\"1\":{\"269\":1}}],[\"元\",{\"1\":{\"13\":1,\"74\":1}}],[\"分片信息\",{\"1\":{\"326\":1}}],[\"分片数\",{\"1\":{\"320\":1}}],[\"分片\",{\"1\":{\"319\":1}}],[\"分成两个分片\",{\"1\":{\"306\":1}}],[\"分布式minio至少需要4个硬盘\",{\"1\":{\"457\":1}}],[\"分布式minio采用\",{\"1\":{\"457\":1}}],[\"分布式索引\",{\"1\":{\"303\":1}}],[\"分布式搜索和分析引擎\",{\"1\":{\"302\":1}}],[\"分布式锁\",{\"0\":{\"276\":1}}],[\"分区容忍性\",{\"1\":{\"279\":1}}],[\"分区容错性\",{\"1\":{\"279\":1}}],[\"分为两种\",{\"1\":{\"273\":1}}],[\"分代收集算法分代收集算法就是目前虚拟机使用的回收算法\",{\"1\":{\"271\":1}}],[\"分钟的随机值\",{\"1\":{\"231\":1}}],[\"分支\",{\"0\":{\"190\":1},\"1\":{\"437\":1}}],[\"分支条件查询\",{\"0\":{\"50\":1}}],[\"分配请求\",{\"1\":{\"166\":1}}],[\"分配不同的数量\",{\"1\":{\"160\":1}}],[\"分词器配置\",{\"0\":{\"110\":1}}],[\"分数越高\",{\"1\":{\"326\":1}}],[\"分数\",{\"1\":{\"78\":2}}],[\"分数低于70分的人\",{\"1\":{\"56\":2}}],[\"分别根据jdk\",{\"1\":{\"420\":1}}],[\"分别是\",{\"1\":{\"325\":1}}],[\"分别指向两张表的主键\",{\"1\":{\"78\":1}}],[\"分别查询男\",{\"1\":{\"56\":4}}],[\"分类\",{\"1\":{\"60\":1,\"64\":1,\"78\":2}}],[\"分页id\",{\"1\":{\"337\":1}}],[\"分页\",{\"1\":{\"79\":1}}],[\"分页查询\",{\"0\":{\"57\":1},\"1\":{\"57\":2}}],[\"分页限定\",{\"1\":{\"47\":1}}],[\"分析涉及到的多表关系\",{\"1\":{\"25\":1}}],[\"分析\",{\"1\":{\"22\":2,\"24\":1,\"78\":3}}],[\"分析查询语句\",{\"1\":{\"19\":1}}],[\"分⻚\",{\"1\":{\"22\":1}}],[\"分组之后过滤\",{\"1\":{\"79\":1}}],[\"分组之后\",{\"1\":{\"56\":1}}],[\"分组之后查询的字段\",{\"1\":{\"56\":1}}],[\"分组之后的条件限定\",{\"1\":{\"47\":1}}],[\"分组查询\",{\"0\":{\"56\":1},\"1\":{\"56\":1}}],[\"分组字段\",{\"1\":{\"47\":1,\"56\":2}}],[\"分组\",{\"1\":{\"22\":1,\"79\":1}}],[\"分⽀语句\",{\"1\":{\"373\":1}}],[\"分⽀\",{\"1\":{\"16\":1}}],[\"分\",{\"1\":{\"13\":1,\"51\":1}}],[\"器\",{\"1\":{\"13\":1}}],[\"持久化模式\",{\"1\":{\"495\":1}}],[\"持久化\",{\"1\":{\"363\":1}}],[\"持久性\",{\"1\":{\"75\":1}}],[\"持续集成\",{\"0\":{\"437\":1,\"441\":1},\"1\":{\"91\":1}}],[\"持续交付和部署\",{\"1\":{\"91\":1}}],[\"持\",{\"1\":{\"13\":1}}],[\"内部\",{\"1\":{\"373\":1}}],[\"内部分为\",{\"1\":{\"269\":1}}],[\"内部定义函数\",{\"1\":{\"213\":1}}],[\"内部定义函数实现修改\",{\"1\":{\"213\":1}}],[\"内存设置①\",{\"1\":{\"230\":1}}],[\"内网面板地址\",{\"1\":{\"106\":1}}],[\"内很多云服务商都提供了国内加速器服务\",{\"1\":{\"94\":1}}],[\"内置监控页面的首页是\",{\"1\":{\"21\":1}}],[\"内连接查询\",{\"0\":{\"66\":1,\"67\":1},\"1\":{\"67\":1}}],[\"内连接\",{\"1\":{\"13\":1}}],[\"内容并全部复制\",{\"1\":{\"435\":1}}],[\"内容返回给客户端\",{\"1\":{\"280\":1}}],[\"内容改变\",{\"1\":{\"195\":1}}],[\"内容\",{\"1\":{\"10\":1,\"162\":1,\"163\":1}}],[\"内容读取并存储起来\",{\"1\":{\"10\":1}}],[\"⾃动确认收货1\",{\"1\":{\"360\":1}}],[\"⾃动取消\",{\"1\":{\"360\":2}}],[\"⾃动执⾏的sql语句\",{\"1\":{\"15\":1}}],[\"⾃定义标签\",{\"1\":{\"195\":1}}],[\"⾃定义变量\",{\"1\":{\"16\":1}}],[\"⾃然查询\",{\"1\":{\"13\":1}}],[\"⾃增约束\",{\"1\":{\"12\":1,\"218\":1}}],[\"7官网下载mysql\",{\"1\":{\"470\":1}}],[\"7集群搭建\",{\"0\":{\"469\":1}}],[\"78406\",{\"1\":{\"349\":1}}],[\"78de\",{\"1\":{\"179\":1}}],[\"747645\",{\"1\":{\"348\":1,\"349\":1}}],[\"768286\",{\"1\":{\"349\":1}}],[\"768167\",{\"1\":{\"348\":1}}],[\"768197\",{\"1\":{\"346\":1}}],[\"768405\",{\"1\":{\"348\":1}}],[\"758619\",{\"1\":{\"347\":2}}],[\"752776\",{\"1\":{\"346\":1}}],[\"778486\",{\"1\":{\"348\":1,\"349\":1}}],[\"773985\",{\"1\":{\"346\":1}}],[\"777\",{\"1\":{\"108\":1,\"309\":2,\"431\":1,\"432\":1}}],[\"732679675728523\",{\"1\":{\"345\":1}}],[\"797693e+308~\",{\"1\":{\"317\":1}}],[\"7重复注解\",{\"0\":{\"267\":1}}],[\"70\",{\"1\":{\"56\":3}}],[\"7\",{\"0\":{\"194\":1,\"333\":1},\"1\":{\"13\":1,\"19\":1,\"22\":1,\"24\":1,\"26\":1,\"77\":1,\"95\":1,\"98\":1,\"105\":2,\"108\":4,\"109\":2,\"110\":1,\"122\":1,\"146\":1,\"156\":1,\"157\":3,\"200\":1,\"223\":2,\"269\":2,\"284\":1,\"286\":1,\"309\":2,\"310\":1,\"311\":1,\"391\":4,\"398\":1,\"400\":1,\"447\":4,\"471\":1,\"472\":9,\"473\":16,\"493\":4,\"495\":1,\"496\":1,\"497\":2}}],[\"7⼤语句\",{\"0\":{\"13\":1}}],[\"条件是什么\",{\"1\":{\"67\":1}}],[\"条件3\",{\"1\":{\"50\":1}}],[\"条件2\",{\"1\":{\"50\":1}}],[\"条件1\",{\"1\":{\"50\":1}}],[\"条件查询\",{\"0\":{\"49\":1},\"1\":{\"49\":2}}],[\"条件列表\",{\"1\":{\"47\":1}}],[\"条件过滤\",{\"1\":{\"22\":2}}],[\"条件\",{\"1\":{\"13\":3,\"22\":3,\"45\":2,\"46\":1,\"58\":1,\"68\":1,\"70\":1,\"71\":1,\"72\":2}}],[\"值传递\",{\"1\":{\"259\":1}}],[\"值n\",{\"1\":{\"44\":3}}],[\"值2\",{\"1\":{\"44\":3,\"46\":1}}],[\"值1\",{\"1\":{\"44\":3,\"46\":1}}],[\"值\",{\"1\":{\"13\":1,\"259\":1}}],[\"字如其意\",{\"1\":{\"427\":1}}],[\"字节码验证\",{\"1\":{\"236\":1}}],[\"字节大小内存配置\",{\"1\":{\"230\":1}}],[\"字串查询\",{\"0\":{\"52\":1}}],[\"字符串常量池\",{\"1\":{\"283\":1,\"397\":1}}],[\"字符串拼接等\",{\"1\":{\"223\":1}}],[\"字符串匹配\",{\"1\":{\"159\":1}}],[\"字符串长度\",{\"1\":{\"78\":1}}],[\"字符串指定num位置开始截取\",{\"1\":{\"52\":1}}],[\"字符串函数\",{\"1\":{\"52\":2}}],[\"字符串\",{\"1\":{\"39\":1,\"78\":3}}],[\"字符串类型\",{\"1\":{\"12\":1,\"216\":1,\"317\":1}}],[\"字符集名称\",{\"1\":{\"35\":1,\"41\":1}}],[\"字符集名\",{\"1\":{\"33\":1}}],[\"字段列表\",{\"1\":{\"47\":1,\"68\":1,\"70\":1,\"71\":1}}],[\"字段|\",{\"1\":{\"13\":1}}],[\"字段=值\",{\"1\":{\"13\":1}}],[\"字段名2\",{\"1\":{\"48\":2}}],[\"字段名1\",{\"1\":{\"48\":2}}],[\"字段名不能一致\",{\"1\":{\"14\":1}}],[\"字段名\",{\"1\":{\"13\":2,\"19\":1,\"219\":1}}],[\"字段\",{\"1\":{\"13\":1,\"22\":2,\"344\":1}}],[\"g找到问题\",{\"1\":{\"479\":1}}],[\"gh\",{\"1\":{\"392\":1}}],[\"ghproxy\",{\"1\":{\"110\":1,\"311\":1}}],[\"gatewayfilterchain\",{\"1\":{\"380\":1,\"381\":1}}],[\"guest\",{\"1\":{\"351\":1,\"352\":2,\"353\":2}}],[\"guide\",{\"1\":{\"342\":1,\"367\":1,\"489\":1}}],[\"gt\",{\"1\":{\"335\":2,\"371\":2}}],[\"gte\",{\"1\":{\"317\":1,\"335\":1}}],[\"gcm\",{\"1\":{\"464\":2}}],[\"gc\",{\"0\":{\"269\":1},\"1\":{\"258\":1}}],[\"gcc\",{\"1\":{\"157\":1,\"493\":2}}],[\"gz安装包\",{\"1\":{\"447\":1}}],[\"gzip\",{\"1\":{\"157\":1,\"165\":1}}],[\"gz\",{\"1\":{\"157\":2,\"441\":7,\"447\":1,\"481\":1,\"482\":1,\"493\":1}}],[\"glibc2\",{\"1\":{\"138\":2}}],[\"global全局\",{\"1\":{\"381\":1}}],[\"globalfilter\",{\"1\":{\"380\":1,\"381\":1}}],[\"global\",{\"1\":{\"16\":1,\"76\":2,\"198\":1}}],[\"g\",{\"1\":{\"138\":1,\"196\":2,\"199\":1,\"214\":1,\"434\":1,\"459\":1,\"479\":1}}],[\"go\",{\"1\":{\"125\":2}}],[\"golang\",{\"1\":{\"123\":1}}],[\"google\",{\"1\":{\"83\":4,\"396\":1}}],[\"gitscm\",{\"1\":{\"440\":1,\"441\":1}}],[\"git\",{\"1\":{\"146\":3,\"440\":5,\"441\":3,\"446\":2}}],[\"github\",{\"1\":{\"101\":1,\"110\":2,\"125\":3,\"146\":2,\"181\":1,\"308\":1,\"311\":1,\"392\":2,\"482\":1}}],[\"gitee\",{\"1\":{\"91\":1}}],[\"gif|jpg|png|js|css|html\",{\"1\":{\"164\":1}}],[\"gif|jpg|png|js|css\",{\"1\":{\"159\":1}}],[\"gif\",{\"1\":{\"21\":1}}],[\"gbk\",{\"1\":{\"33\":1}}],[\"gem\",{\"1\":{\"495\":1}}],[\"geoboundingboxquerybuilder\",{\"1\":{\"348\":1}}],[\"geoboundingboxquery\",{\"1\":{\"348\":2}}],[\"geodistancequerybuilder\",{\"1\":{\"347\":1}}],[\"geodistancequery\",{\"1\":{\"347\":2}}],[\"geo\",{\"0\":{\"347\":1,\"348\":1,\"349\":1},\"1\":{\"225\":1,\"317\":1,\"346\":5,\"347\":1,\"348\":1,\"349\":1}}],[\"gender\",{\"1\":{\"67\":1}}],[\"generation\",{\"1\":{\"419\":1}}],[\"generators\",{\"1\":{\"28\":1}}],[\"generator\",{\"1\":{\"28\":1}}],[\"generatetraceid\",{\"1\":{\"391\":2}}],[\"generate\",{\"1\":{\"28\":1,\"336\":1}}],[\"getloginpass\",{\"1\":{\"425\":1}}],[\"getloginname\",{\"1\":{\"425\":1}}],[\"getlogger\",{\"1\":{\"352\":1,\"354\":1,\"355\":2,\"360\":2,\"362\":1,\"381\":1,\"385\":1,\"421\":1}}],[\"getrolename\",{\"1\":{\"425\":1}}],[\"getresponse\",{\"1\":{\"380\":1,\"381\":1}}],[\"getrequest\",{\"1\":{\"380\":1,\"381\":1}}],[\"getreader\",{\"1\":{\"8\":1}}],[\"getreader等\",{\"1\":{\"8\":1}}],[\"getproxy\",{\"1\":{\"420\":2}}],[\"getpath\",{\"1\":{\"381\":1}}],[\"getparametermap\",{\"1\":{\"378\":1}}],[\"getparametervalues等方法\",{\"1\":{\"8\":1}}],[\"getparameternames\",{\"1\":{\"8\":1}}],[\"getusername\",{\"1\":{\"396\":3}}],[\"getuserid\",{\"1\":{\"396\":3}}],[\"getuser\",{\"1\":{\"396\":1}}],[\"getdefaultmessage\",{\"1\":{\"385\":1}}],[\"getdoccount\",{\"1\":{\"344\":1}}],[\"getcglibproxy\",{\"1\":{\"421\":2}}],[\"getcontext\",{\"1\":{\"396\":6}}],[\"getcontextpath\",{\"1\":{\"8\":1}}],[\"getcopyofcontextmap\",{\"1\":{\"391\":3}}],[\"getclassloader\",{\"1\":{\"420\":1}}],[\"getclass\",{\"1\":{\"385\":1,\"387\":1,\"420\":2,\"421\":1}}],[\"getfield\",{\"1\":{\"385\":1}}],[\"getfielderrors\",{\"1\":{\"385\":2}}],[\"getfielderrorcount\",{\"1\":{\"385\":1}}],[\"getfromasstring\",{\"1\":{\"344\":1}}],[\"getwriter\",{\"1\":{\"378\":1,\"379\":1}}],[\"getkeyasstring\",{\"1\":{\"344\":1}}],[\"getvalue\",{\"1\":{\"343\":1,\"387\":1,\"396\":5}}],[\"getmin\",{\"1\":{\"345\":1}}],[\"getmax\",{\"1\":{\"345\":1}}],[\"getmapping\",{\"1\":{\"300\":1,\"360\":2,\"361\":1,\"414\":1,\"420\":1,\"421\":1}}],[\"getmessage\",{\"1\":{\"329\":1,\"337\":1,\"385\":1}}],[\"getsmslimitationinterceptor\",{\"1\":{\"390\":2}}],[\"getsourceasmap\",{\"1\":{\"339\":1,\"340\":1}}],[\"getsourceasstring\",{\"1\":{\"329\":1,\"337\":2,\"347\":1,\"348\":1}}],[\"getscrollid\",{\"1\":{\"337\":1}}],[\"getscore\",{\"1\":{\"327\":1}}],[\"getservletpath等方法\",{\"1\":{\"8\":1}}],[\"getservletcontext\",{\"1\":{\"3\":1}}],[\"gethighlightfields\",{\"1\":{\"341\":2}}],[\"gethits\",{\"1\":{\"327\":2,\"329\":2,\"337\":4,\"339\":2,\"340\":2,\"341\":4,\"347\":2,\"348\":2}}],[\"getheader\",{\"1\":{\"379\":1,\"390\":2}}],[\"getheadernames等方法\",{\"1\":{\"8\":1}}],[\"getheaders\",{\"1\":{\"8\":1,\"380\":1,\"381\":2}}],[\"getinterfaces\",{\"1\":{\"420\":1}}],[\"getintheader\",{\"1\":{\"385\":1}}],[\"getinstance\",{\"1\":{\"283\":1,\"397\":1,\"422\":2}}],[\"getinputstream\",{\"1\":{\"5\":1,\"6\":3,\"8\":2,\"9\":1,\"10\":1}}],[\"getelementbyid\",{\"1\":{\"192\":2}}],[\"getopts\",{\"1\":{\"165\":1,\"450\":1}}],[\"get\",{\"1\":{\"93\":1,\"121\":1,\"198\":1,\"300\":2,\"319\":7,\"341\":1,\"343\":1,\"344\":1,\"345\":1,\"346\":1,\"378\":1,\"380\":2,\"381\":2,\"387\":3,\"391\":1,\"396\":3,\"414\":2,\"464\":1}}],[\"getargs\",{\"1\":{\"376\":1}}],[\"getaggregations\",{\"1\":{\"343\":1,\"344\":1,\"345\":1}}],[\"getaopproxy\",{\"1\":{\"84\":1}}],[\"getaliases\",{\"1\":{\"84\":2}}],[\"getattribute\",{\"1\":{\"3\":1}}],[\"gettingstarted\",{\"1\":{\"382\":1}}],[\"gettoasstring\",{\"1\":{\"344\":1}}],[\"gettemplate\",{\"1\":{\"371\":1}}],[\"getter\",{\"1\":{\"213\":1}}],[\"gettext\",{\"1\":{\"83\":6}}],[\"gettype\",{\"1\":{\"84\":2}}],[\"getbindingresult\",{\"1\":{\"385\":1}}],[\"getbody\",{\"1\":{\"354\":1}}],[\"getbodystring出现问题\",{\"1\":{\"9\":1}}],[\"getbodystring\",{\"1\":{\"8\":1,\"9\":1,\"10\":2}}],[\"getbuckets\",{\"1\":{\"344\":1}}],[\"getbean\",{\"1\":{\"84\":4}}],[\"getbytes\",{\"1\":{\"8\":1,\"353\":1,\"381\":1}}],[\"green\",{\"1\":{\"389\":1}}],[\"grep\",{\"1\":{\"117\":1,\"165\":1,\"388\":1,\"430\":3,\"431\":3,\"450\":1,\"472\":2,\"474\":1}}],[\"gray\",{\"1\":{\"389\":1}}],[\"grade\",{\"1\":{\"370\":1,\"371\":1}}],[\"grant6\",{\"1\":{\"216\":1}}],[\"grants\",{\"1\":{\"77\":2}}],[\"grant\",{\"1\":{\"12\":1,\"30\":1,\"77\":3,\"478\":1}}],[\"group=minio\",{\"1\":{\"461\":1}}],[\"group=mysql\",{\"1\":{\"140\":1}}],[\"groups\",{\"1\":{\"447\":1}}],[\"grouptemplate\",{\"1\":{\"371\":2}}],[\"groupadd\",{\"1\":{\"138\":1,\"459\":1}}],[\"groupid>\",{\"1\":{\"28\":1,\"84\":1,\"113\":1,\"132\":1,\"323\":1,\"352\":1,\"369\":1,\"383\":2,\"387\":1,\"491\":1}}],[\"group\",{\"1\":{\"13\":1,\"19\":1,\"22\":4,\"47\":1,\"56\":6,\"79\":1}}],[\"rv\",{\"1\":{\"476\":1}}],[\"rsa\",{\"1\":{\"435\":7,\"464\":2,\"473\":1}}],[\"rk\",{\"1\":{\"360\":3}}],[\"rk=\",{\"1\":{\"360\":1}}],[\"rabbitacklistener\",{\"1\":{\"362\":2}}],[\"rabbitackconfig\",{\"1\":{\"362\":1}}],[\"rabbittransactionmanager\",{\"1\":{\"361\":2}}],[\"rabbittemplate\",{\"1\":{\"352\":3,\"355\":1,\"357\":1,\"360\":4,\"361\":2}}],[\"rabbitdllistener\",{\"1\":{\"360\":2}}],[\"rabbitdlconfig\",{\"1\":{\"360\":3}}],[\"rabbitdlcontroller\",{\"1\":{\"360\":2}}],[\"rabbit\",{\"1\":{\"360\":1}}],[\"rabbitutil\",{\"1\":{\"353\":1}}],[\"rabbithandler\",{\"1\":{\"352\":1,\"354\":1,\"355\":2,\"360\":1,\"362\":1}}],[\"rabbitlistener\",{\"1\":{\"352\":1,\"354\":1,\"355\":2,\"360\":1,\"362\":1}}],[\"rabbitmq的⼿动应答\",{\"1\":{\"366\":1}}],[\"rabbitmq的事务\",{\"1\":{\"366\":1}}],[\"rabbitmq的队列中的消息\",{\"1\":{\"360\":1}}],[\"rabbitmq安装\",{\"1\":{\"366\":1}}],[\"rabbitmq是mq的⼀种\",{\"1\":{\"366\":1}}],[\"rabbitmq防⽌消息的重复消费或者消息丢失的时候\",{\"1\":{\"362\":1}}],[\"rabbitmqtranconfig\",{\"1\":{\"361\":1}}],[\"rabbitmqtransport\",{\"1\":{\"353\":1}}],[\"rabbitmq基于死信实现延迟\",{\"0\":{\"360\":1}}],[\"rabbitmqfanout\",{\"1\":{\"357\":1}}],[\"rabbitmqapplicationtests\",{\"1\":{\"352\":1}}],[\"rabbitmqconfig\",{\"1\":{\"352\":1}}],[\"rabbitmqctl\",{\"1\":{\"351\":5}}],[\"rabbitmq消息中间件\",{\"1\":{\"351\":1}}],[\"rabbitmq5672\",{\"1\":{\"351\":1}}],[\"rabbitmq就把消息持久化到磁盘\",{\"1\":{\"274\":1}}],[\"rabbitmq服务器端如何保证消息不丢失\",{\"1\":{\"363\":1}}],[\"rabbitmq服务器端\",{\"0\":{\"274\":1}}],[\"rabbitmq\",{\"0\":{\"272\":1,\"350\":1},\"1\":{\"273\":4,\"351\":1,\"352\":2,\"363\":1,\"365\":1}}],[\"randomuuid\",{\"1\":{\"390\":1,\"391\":1}}],[\"randomaccess\",{\"1\":{\"241\":1}}],[\"random\",{\"1\":{\"230\":2}}],[\"rand\",{\"1\":{\"79\":1}}],[\"ranges\",{\"1\":{\"344\":3}}],[\"rangequery\",{\"1\":{\"335\":1,\"338\":1,\"340\":1}}],[\"range查询\",{\"0\":{\"335\":1}}],[\"range\",{\"1\":{\"19\":3,\"223\":1,\"317\":6,\"344\":7,\"384\":3,\"385\":1}}],[\"r2\",{\"1\":{\"261\":2}}],[\"rc4\",{\"1\":{\"464\":2}}],[\"rc2\",{\"1\":{\"308\":1}}],[\"rc\",{\"1\":{\"172\":1}}],[\"rpmsave\",{\"1\":{\"445\":2}}],[\"rpm\",{\"1\":{\"172\":1,\"445\":2,\"459\":3,\"471\":2,\"472\":2,\"473\":19}}],[\"rpad\",{\"1\":{\"79\":1}}],[\"rgb\",{\"1\":{\"141\":12}}],[\"rf\",{\"1\":{\"137\":4,\"441\":2,\"445\":4,\"450\":1,\"454\":8,\"472\":1}}],[\"rdb\",{\"1\":{\"496\":2}}],[\"rdb无法保证数据的绝对安全\",{\"1\":{\"227\":1}}],[\"rdb持久化的时机\",{\"1\":{\"227\":1}}],[\"rdb持久化文件\",{\"1\":{\"227\":1}}],[\"rdbrdb是redis默认的持久化机制\",{\"1\":{\"227\":1}}],[\"rdate\",{\"1\":{\"78\":2}}],[\"rds\",{\"1\":{\"28\":1}}],[\"rname\",{\"1\":{\"78\":2}}],[\"rid\",{\"1\":{\"78\":8}}],[\"right\",{\"1\":{\"71\":2,\"348\":1}}],[\"r\",{\"1\":{\"34\":1,\"40\":1,\"108\":1,\"138\":4,\"146\":1,\"376\":1,\"378\":1,\"379\":1,\"381\":1,\"385\":6,\"389\":1,\"432\":3,\"454\":6,\"459\":4}}],[\"rubygems\",{\"1\":{\"495\":1}}],[\"ruby\",{\"1\":{\"495\":1}}],[\"runtimeexception\",{\"1\":{\"420\":1,\"421\":1}}],[\"runtime\",{\"1\":{\"378\":1}}],[\"running或者shutdown\",{\"1\":{\"296\":1,\"410\":1}}],[\"running\",{\"0\":{\"294\":1,\"408\":1},\"1\":{\"293\":1,\"407\":1,\"435\":1,\"479\":3}}],[\"runnable\",{\"1\":{\"261\":1,\"391\":7}}],[\"run\",{\"1\":{\"95\":2,\"97\":1,\"98\":1,\"108\":1,\"109\":1,\"120\":1,\"122\":1,\"128\":1,\"157\":1,\"200\":2,\"261\":1,\"351\":1,\"391\":1,\"439\":1,\"440\":1,\"441\":1,\"454\":2,\"476\":2}}],[\"runs\",{\"1\":{\"21\":1}}],[\"rules\",{\"1\":{\"28\":1}}],[\"rmi\",{\"1\":{\"95\":1}}],[\"rm\",{\"1\":{\"28\":1,\"95\":1,\"137\":4,\"432\":2,\"440\":1,\"441\":3,\"445\":4,\"450\":1,\"454\":8,\"472\":1}}],[\"rom等块设备的信息\",{\"1\":{\"462\":1}}],[\"rot\",{\"1\":{\"457\":1}}],[\"rolename\",{\"1\":{\"425\":1}}],[\"rollingpolicy>\",{\"1\":{\"389\":2}}],[\"rollingfileappender\",{\"1\":{\"389\":2}}],[\"rolling\",{\"1\":{\"389\":4}}],[\"rollbackfor\",{\"1\":{\"361\":1}}],[\"rollback5\",{\"1\":{\"216\":1}}],[\"rollback\",{\"1\":{\"12\":1,\"74\":2,\"146\":3}}],[\"routing\",{\"1\":{\"360\":1}}],[\"router1\",{\"1\":{\"210\":1}}],[\"router\",{\"0\":{\"208\":1},\"1\":{\"203\":1,\"208\":1,\"210\":1}}],[\"route\",{\"1\":{\"78\":3}}],[\"round\",{\"1\":{\"79\":1}}],[\"root>\",{\"1\":{\"389\":1}}],[\"root\",{\"1\":{\"21\":2,\"77\":2,\"97\":2,\"98\":1,\"105\":2,\"122\":1,\"128\":1,\"141\":3,\"162\":1,\"163\":1,\"164\":1,\"165\":3,\"435\":1,\"439\":1,\"460\":2,\"462\":1,\"472\":5,\"473\":1,\"474\":1,\"476\":1,\"488\":1}}],[\"rows\",{\"1\":{\"19\":1,\"22\":1,\"223\":1}}],[\"row\",{\"1\":{\"15\":2,\"143\":1,\"304\":1}}],[\"reqtoken\",{\"1\":{\"464\":1}}],[\"require\",{\"1\":{\"464\":1,\"495\":1}}],[\"requires\",{\"1\":{\"280\":2}}],[\"requirements\",{\"1\":{\"146\":2}}],[\"requirepass\",{\"1\":{\"120\":2,\"121\":2,\"495\":1}}],[\"required\",{\"1\":{\"6\":1,\"10\":1,\"84\":1,\"175\":1,\"280\":2}}],[\"requi\",{\"1\":{\"28\":1}}],[\"requested\",{\"1\":{\"464\":1}}],[\"requestparam\",{\"1\":{\"390\":1}}],[\"requestbody\",{\"1\":{\"385\":1}}],[\"requests的缩写\",{\"1\":{\"383\":1}}],[\"request=\",{\"1\":{\"380\":1}}],[\"requestmapping\",{\"1\":{\"360\":1}}],[\"requestoptions\",{\"1\":{\"327\":1,\"329\":1,\"337\":3,\"338\":1,\"339\":1,\"340\":1,\"341\":1,\"343\":1,\"344\":1,\"345\":1,\"347\":1,\"348\":1}}],[\"requestconfigbuilder\",{\"1\":{\"323\":5}}],[\"requestwrapper\",{\"1\":{\"10\":3}}],[\"request请求体丢失\",{\"0\":{\"4\":1}}],[\"request\",{\"1\":{\"3\":2,\"5\":1,\"6\":1,\"8\":3,\"9\":3,\"10\":3,\"327\":3,\"329\":3,\"337\":5,\"338\":3,\"340\":3,\"341\":3,\"343\":3,\"344\":3,\"345\":3,\"347\":2,\"348\":2,\"378\":2,\"379\":2,\"380\":1,\"381\":3,\"385\":2,\"390\":5}}],[\"reboot\",{\"1\":{\"458\":1}}],[\"remote=\",{\"1\":{\"441\":1}}],[\"remotepath\",{\"1\":{\"441\":10}}],[\"remote\",{\"1\":{\"440\":9,\"441\":23,\"464\":2,\"490\":1}}],[\"remoteconfig\",{\"1\":{\"440\":10}}],[\"removevalue\",{\"1\":{\"396\":1}}],[\"remove\",{\"1\":{\"93\":1,\"110\":1,\"112\":1,\"137\":1,\"311\":1,\"390\":1,\"396\":1,\"445\":1,\"467\":1,\"468\":3}}],[\"renderto\",{\"1\":{\"371\":1}}],[\"rename\",{\"1\":{\"41\":1,\"308\":1}}],[\"red\",{\"1\":{\"341\":1,\"370\":2,\"389\":1}}],[\"redis26340\",{\"1\":{\"498\":2}}],[\"redis26379\",{\"1\":{\"498\":2}}],[\"redis集群需要使用ruby\",{\"1\":{\"495\":1}}],[\"redis集群配置\",{\"0\":{\"495\":1}}],[\"redis集群搭建\",{\"0\":{\"492\":1}}],[\"redis下的redis\",{\"1\":{\"493\":1}}],[\"redis6340\",{\"1\":{\"494\":6}}],[\"redis6379\",{\"1\":{\"494\":4,\"499\":1}}],[\"redis6\",{\"1\":{\"493\":1}}],[\"rediskeyconfig\",{\"1\":{\"379\":1,\"380\":3,\"381\":1}}],[\"redis分布式锁\",{\"1\":{\"279\":1}}],[\"redis实现分布式锁与zookeeper实现分布式锁的思路分别是什么\",{\"1\":{\"279\":1}}],[\"redis和zookeeper如何解决死锁问题\",{\"1\":{\"279\":1}}],[\"redis和zookeeper技术有何不同\",{\"1\":{\"279\":1}}],[\"redis和zookeeper实现分布式锁的区别\",{\"0\":{\"279\":1}}],[\"redisson\",{\"0\":{\"278\":1}}],[\"redis延迟双删的策略1\",{\"1\":{\"232\":1}}],[\"redis一般推荐设置内存为最大物理内存的四分之三\",{\"1\":{\"230\":1}}],[\"redis的设计定位决定了它的数据并不是强一致性的\",{\"1\":{\"279\":1}}],[\"redis的淘汰机制\",{\"0\":{\"230\":1}}],[\"redis的事务\",{\"1\":{\"226\":1}}],[\"redis会在设置过了生存时间的key中干掉一个剩余生存时间最少的key\",{\"1\":{\"230\":1}}],[\"redis会在设置过了生存时间的key中干掉一个最近最少使用的key\",{\"1\":{\"230\":1}}],[\"redis会再全部的key中随机干掉一个\",{\"1\":{\"230\":1}}],[\"redis会再全部的key中干掉一个最近最少频次使用的key\",{\"1\":{\"230\":1}}],[\"redis会再全部的key中干掉一个最近最少使用的key\",{\"1\":{\"230\":1}}],[\"redis会再设置过了生存时间的key中随机干掉一个\",{\"1\":{\"230\":1}}],[\"redis会再设置过了生存时间的key中干掉一个最近最少频次使用的key\",{\"1\":{\"230\":1}}],[\"redis会先查看当前key的生存时间\",{\"1\":{\"229\":1}}],[\"redis会立即删除吗\",{\"0\":{\"229\":1}}],[\"redis每隔一段时间就去会去查看redis设置了过期时间的key\",{\"1\":{\"229\":1}}],[\"redis常见问题\",{\"0\":{\"228\":1}}],[\"redis官方推荐同时开启rdb和aof持久化\",{\"1\":{\"227\":1}}],[\"redis持久化机制\",{\"0\":{\"227\":1}}],[\"redis事物\",{\"0\":{\"226\":1}}],[\"redis存储数据的结构\",{\"0\":{\"225\":1}}],[\"redis创建密码或修改密码\",{\"0\":{\"121\":1}}],[\"redis启动端口\",{\"1\":{\"120\":1}}],[\"redis\",{\"0\":{\"224\":1},\"1\":{\"83\":1,\"120\":3,\"121\":1,\"123\":1,\"233\":1,\"279\":5,\"492\":2,\"493\":24,\"494\":8,\"495\":20,\"496\":2,\"497\":14,\"498\":6,\"499\":3}}],[\"realsubject\",{\"1\":{\"420\":3}}],[\"realm\",{\"1\":{\"175\":1}}],[\"real\",{\"1\":{\"165\":1,\"464\":2,\"490\":1}}],[\"readline\",{\"1\":{\"9\":1}}],[\"readlistener\",{\"1\":{\"8\":2}}],[\"reader\",{\"1\":{\"9\":5}}],[\"read\",{\"1\":{\"8\":2,\"76\":4,\"83\":3,\"165\":1}}],[\"relay\",{\"1\":{\"479\":3}}],[\"relation\",{\"1\":{\"326\":1}}],[\"release\",{\"1\":{\"459\":1,\"466\":1}}],[\"release<\",{\"1\":{\"369\":1}}],[\"releases1https\",{\"1\":{\"392\":1}}],[\"releases\",{\"1\":{\"101\":1,\"110\":2,\"181\":1,\"308\":1,\"311\":1,\"392\":1,\"482\":1,\"492\":1}}],[\"reloadsystemctl\",{\"1\":{\"483\":1,\"484\":1}}],[\"reload命令\",{\"1\":{\"157\":1}}],[\"reload\",{\"1\":{\"94\":1,\"116\":1,\"140\":1,\"141\":1,\"157\":3,\"179\":1,\"458\":1,\"461\":1,\"475\":2,\"488\":1,\"494\":1,\"495\":1,\"497\":1,\"498\":1}}],[\"regexp=\",{\"1\":{\"384\":1}}],[\"regexpquery\",{\"1\":{\"336\":1}}],[\"regexp查询\",{\"0\":{\"336\":1}}],[\"regex\",{\"1\":{\"336\":1}}],[\"reg\",{\"1\":{\"94\":1,\"440\":8}}],[\"registry\",{\"1\":{\"94\":3,\"198\":3,\"378\":3,\"390\":3}}],[\"receiver\",{\"1\":{\"84\":3}}],[\"reponame\",{\"1\":{\"441\":1}}],[\"repo\",{\"1\":{\"440\":2,\"441\":1}}],[\"repos\",{\"1\":{\"93\":1}}],[\"repository\",{\"1\":{\"3\":3}}],[\"replicaof\",{\"1\":{\"496\":1}}],[\"replication\",{\"1\":{\"478\":1,\"496\":1,\"499\":1}}],[\"replicas\",{\"1\":{\"319\":1,\"320\":1,\"346\":1,\"495\":1}}],[\"replace\",{\"1\":{\"389\":1,\"390\":1}}],[\"repeatable\",{\"1\":{\"76\":1,\"267\":1}}],[\"retry\",{\"1\":{\"420\":1,\"421\":1}}],[\"retryinvocationhandler\",{\"1\":{\"420\":4}}],[\"retrieve\",{\"1\":{\"34\":1,\"40\":1}}],[\"retentionpolicy\",{\"1\":{\"378\":1}}],[\"retention\",{\"1\":{\"378\":1}}],[\"returnstdout\",{\"1\":{\"440\":1}}],[\"returns\",{\"1\":{\"16\":1,\"17\":2}}],[\"return\",{\"1\":{\"8\":5,\"9\":2,\"16\":1,\"17\":2,\"83\":4,\"84\":14,\"133\":1,\"194\":1,\"215\":1,\"283\":1,\"300\":2,\"323\":3,\"352\":1,\"355\":1,\"357\":5,\"360\":6,\"361\":2,\"376\":2,\"378\":2,\"379\":3,\"380\":1,\"381\":3,\"385\":4,\"387\":1,\"390\":5,\"391\":9,\"396\":9,\"397\":1,\"414\":2,\"420\":2,\"421\":2,\"422\":2,\"425\":2}}],[\"revoke\",{\"1\":{\"30\":1,\"77\":2}}],[\"responsibility\",{\"1\":{\"425\":2}}],[\"response=exchange\",{\"1\":{\"380\":1}}],[\"response\",{\"1\":{\"10\":2,\"327\":3,\"329\":3,\"337\":4,\"339\":2,\"341\":4,\"378\":3,\"379\":3,\"381\":4,\"390\":3}}],[\"resp\",{\"1\":{\"338\":2,\"340\":2,\"343\":2,\"344\":2,\"345\":2,\"347\":2,\"348\":2}}],[\"restorecon\",{\"1\":{\"476\":1}}],[\"restcontrolleradvice\",{\"1\":{\"385\":1}}],[\"restcontroller\",{\"1\":{\"360\":1}}],[\"restclient\",{\"1\":{\"323\":1}}],[\"restclientbuilder\",{\"1\":{\"323\":1}}],[\"resthighlevelclient\",{\"1\":{\"323\":5}}],[\"rest\",{\"1\":{\"108\":1,\"113\":1}}],[\"restart=on\",{\"1\":{\"140\":1}}],[\"restart=always\",{\"1\":{\"108\":1,\"128\":1,\"461\":1,\"494\":2,\"498\":2}}],[\"restart参数\",{\"1\":{\"104\":3}}],[\"restart\",{\"1\":{\"93\":1,\"94\":1,\"95\":1,\"104\":3,\"105\":2,\"108\":1,\"109\":1,\"140\":1,\"165\":1,\"177\":1,\"309\":2,\"311\":1,\"314\":1,\"430\":1,\"431\":4,\"435\":1,\"445\":1,\"450\":3,\"461\":1,\"476\":1,\"478\":1,\"479\":1,\"489\":1}}],[\"restrict\",{\"1\":{\"79\":1}}],[\"resource\",{\"1\":{\"84\":2,\"323\":1,\"352\":1,\"360\":1}}],[\"reset\",{\"1\":{\"21\":1,\"478\":1}}],[\"result=e\",{\"1\":{\"385\":1}}],[\"resulttype\",{\"1\":{\"341\":1}}],[\"results\",{\"1\":{\"83\":4}}],[\"result\",{\"1\":{\"21\":2,\"83\":11,\"84\":2,\"223\":1,\"385\":4,\"421\":2,\"476\":1}}],[\"reflect\",{\"1\":{\"420\":3,\"421\":1}}],[\"ref=\",{\"1\":{\"389\":4}}],[\"ref>ref>range>index>all\",{\"1\":{\"223\":1}}],[\"reference\",{\"1\":{\"342\":1,\"382\":1}}],[\"references\",{\"1\":{\"64\":3,\"78\":3,\"79\":1}}],[\"referer\",{\"1\":{\"157\":1,\"165\":1}}],[\"refers\",{\"1\":{\"145\":1}}],[\"ref\",{\"1\":{\"19\":6,\"223\":3,\"389\":4,\"440\":1,\"441\":2}}],[\"6个哨兵\",{\"1\":{\"498\":1}}],[\"687834\",{\"1\":{\"349\":1}}],[\"675186\",{\"1\":{\"348\":1,\"349\":1}}],[\"672455\",{\"1\":{\"347\":2}}],[\"695452\",{\"1\":{\"348\":1}}],[\"6996731711975954\",{\"1\":{\"345\":1}}],[\"6931472\",{\"1\":{\"326\":2}}],[\"6接口默认\",{\"0\":{\"266\":1}}],[\"60\",{\"1\":{\"227\":1,\"391\":1}}],[\"600000\",{\"1\":{\"21\":1}}],[\"60000\",{\"1\":{\"21\":1}}],[\"665988\",{\"1\":{\"346\":1}}],[\"669581\",{\"1\":{\"346\":1}}],[\"66\",{\"1\":{\"214\":1,\"391\":1}}],[\"666666\",{\"1\":{\"21\":1,\"109\":1}}],[\"66664785\",{\"1\":{\"19\":1}}],[\"6666\",{\"1\":{\"18\":1}}],[\"6340\",{\"1\":{\"493\":3,\"494\":1,\"495\":4,\"497\":3,\"498\":1}}],[\"6368\",{\"1\":{\"346\":1}}],[\"63\",{\"1\":{\"192\":1}}],[\"6379\",{\"1\":{\"120\":3,\"493\":3,\"494\":1,\"495\":9,\"496\":3,\"497\":5,\"498\":1,\"499\":2}}],[\"624306\",{\"1\":{\"349\":1}}],[\"62\",{\"1\":{\"189\":1}}],[\"616976\",{\"1\":{\"348\":1,\"349\":1}}],[\"616689\",{\"1\":{\"348\":1}}],[\"61\",{\"1\":{\"188\":1}}],[\"64\",{\"1\":{\"115\":1,\"138\":2,\"209\":1,\"308\":3,\"345\":1,\"444\":2,\"445\":2,\"459\":2,\"472\":4,\"473\":11}}],[\"65535\",{\"1\":{\"458\":2}}],[\"65\",{\"1\":{\"95\":1,\"97\":1,\"104\":3,\"157\":1,\"165\":1,\"210\":1}}],[\"6索引\",{\"0\":{\"19\":1}}],[\"6\",{\"0\":{\"59\":1,\"154\":1,\"193\":1,\"207\":1,\"332\":1},\"1\":{\"12\":2,\"13\":1,\"19\":1,\"22\":1,\"24\":1,\"25\":1,\"26\":1,\"39\":1,\"57\":1,\"77\":1,\"95\":1,\"106\":1,\"108\":1,\"109\":1,\"146\":1,\"157\":1,\"200\":2,\"223\":2,\"284\":1,\"310\":2,\"342\":1,\"360\":1,\"381\":1,\"383\":1,\"387\":1,\"398\":1,\"450\":1,\"454\":2,\"459\":1}}],[\"5m\",{\"1\":{\"464\":2}}],[\"5f1b68bfe19b49ad86548ea1e7112b29\",{\"1\":{\"391\":1}}],[\"5bb69626459e42c1b0f88a3965b1de4e\",{\"1\":{\"391\":8}}],[\"53\",{\"1\":{\"391\":9}}],[\"5level\",{\"1\":{\"389\":6}}],[\"5分钟后处理\",{\"1\":{\"360\":1}}],[\"5新时间日期api\",{\"0\":{\"265\":1}}],[\"5倍\",{\"1\":{\"241\":1}}],[\"5秒\",{\"1\":{\"232\":1}}],[\"50m\",{\"1\":{\"490\":1}}],[\"50\",{\"1\":{\"243\":1,\"389\":3}}],[\"504\",{\"1\":{\"162\":1,\"163\":1,\"165\":1,\"179\":1,\"464\":1}}],[\"503\",{\"1\":{\"162\":1,\"163\":1,\"165\":1,\"179\":1,\"464\":1}}],[\"502\",{\"1\":{\"162\":1,\"163\":1,\"165\":1,\"464\":1}}],[\"50x\",{\"1\":{\"162\":3,\"163\":3,\"165\":2}}],[\"5000\",{\"1\":{\"323\":3,\"495\":1}}],[\"500\",{\"1\":{\"74\":4,\"76\":2,\"162\":1,\"163\":1,\"165\":1,\"391\":1,\"464\":1}}],[\"58\",{\"1\":{\"146\":3}}],[\"51\",{\"1\":{\"146\":3,\"476\":3}}],[\"5672\",{\"1\":{\"351\":2,\"352\":1,\"353\":1}}],[\"56\",{\"1\":{\"141\":2,\"161\":1,\"165\":1,\"495\":1}}],[\"5601\",{\"1\":{\"109\":2,\"309\":2,\"310\":1}}],[\"55gb\",{\"1\":{\"125\":1}}],[\"5nf\",{\"1\":{\"78\":1}}],[\"5存储过程\",{\"0\":{\"18\":1}}],[\"5自定义函数\",{\"0\":{\"17\":1}}],[\"5\",{\"0\":{\"26\":1,\"37\":1,\"52\":1,\"58\":1,\"94\":1,\"104\":1,\"105\":1,\"153\":1,\"192\":1,\"206\":1,\"271\":1,\"294\":1,\"295\":1,\"296\":1,\"297\":1,\"298\":1,\"322\":1,\"325\":1,\"326\":1,\"327\":1,\"328\":1,\"329\":1,\"330\":1,\"331\":2,\"332\":1,\"333\":1,\"334\":1,\"335\":1,\"336\":1,\"337\":1,\"338\":1,\"339\":1,\"340\":1,\"341\":1,\"342\":1,\"343\":1,\"344\":1,\"345\":1,\"346\":1,\"347\":1,\"348\":1,\"349\":1,\"408\":1,\"409\":1,\"410\":1,\"411\":1,\"412\":1,\"475\":1},\"1\":{\"12\":2,\"13\":1,\"19\":1,\"21\":1,\"22\":1,\"24\":1,\"26\":1,\"37\":1,\"39\":2,\"41\":1,\"55\":1,\"63\":1,\"77\":1,\"78\":1,\"95\":1,\"98\":1,\"105\":2,\"108\":1,\"109\":1,\"116\":1,\"121\":1,\"122\":1,\"146\":1,\"157\":1,\"175\":1,\"200\":2,\"223\":4,\"231\":1,\"284\":1,\"285\":1,\"308\":1,\"320\":1,\"335\":1,\"339\":1,\"340\":1,\"342\":1,\"344\":8,\"345\":1,\"351\":1,\"352\":1,\"381\":1,\"387\":1,\"391\":2,\"398\":1,\"399\":1,\"471\":1,\"472\":9,\"473\":16,\"492\":1}}],[\"42\",{\"1\":{\"472\":9,\"473\":13}}],[\"4台无error则集群搭建成功\",{\"1\":{\"463\":1}}],[\"4实现版本号的兼容性过滤\",{\"0\":{\"381\":1}}],[\"4种\",{\"1\":{\"366\":1}}],[\"4530\",{\"1\":{\"476\":1}}],[\"45表示乘以10的负45次方\",{\"1\":{\"317\":1}}],[\"45\",{\"1\":{\"317\":2}}],[\"444331676https\",{\"1\":{\"394\":1}}],[\"449\",{\"1\":{\"391\":2}}],[\"448\",{\"1\":{\"391\":3}}],[\"447\",{\"1\":{\"391\":1}}],[\"442\",{\"1\":{\"391\":1}}],[\"44\",{\"1\":{\"310\":1,\"459\":1}}],[\"443\",{\"1\":{\"179\":1,\"391\":2}}],[\"4353453\",{\"1\":{\"321\":1}}],[\"43\",{\"1\":{\"309\":1,\"310\":2,\"323\":1}}],[\"4optional\",{\"0\":{\"264\":1}}],[\"40813329\",{\"1\":{\"394\":1}}],[\"401298e\",{\"1\":{\"317\":1}}],[\"402823e+38\",{\"1\":{\"317\":1}}],[\"40\",{\"1\":{\"179\":1,\"310\":1,\"476\":3}}],[\"47\",{\"1\":{\"141\":6,\"159\":2,\"162\":2,\"163\":2,\"164\":2,\"352\":1,\"353\":1,\"476\":3,\"479\":1,\"485\":3,\"486\":3,\"490\":3}}],[\"411\",{\"1\":{\"481\":2,\"484\":1}}],[\"41\",{\"1\":{\"141\":6}}],[\"465\",{\"1\":{\"84\":2}}],[\"4nf\",{\"1\":{\"78\":1}}],[\"4sql语法\",{\"0\":{\"16\":1}}],[\"4\",{\"0\":{\"25\":1,\"36\":1,\"42\":1,\"51\":1,\"57\":1,\"64\":1,\"93\":1,\"100\":1,\"101\":1,\"102\":1,\"112\":1,\"131\":1,\"132\":1,\"133\":1,\"152\":1,\"161\":1,\"162\":1,\"163\":1,\"174\":1,\"191\":1,\"200\":1,\"205\":1,\"229\":1,\"230\":1,\"231\":1,\"250\":1,\"289\":1,\"290\":1,\"291\":1,\"292\":2,\"298\":1,\"306\":1,\"313\":1,\"314\":1,\"315\":1,\"321\":1,\"330\":1,\"360\":1,\"361\":1,\"362\":1,\"363\":1,\"364\":1,\"365\":1,\"386\":1,\"403\":1,\"404\":1,\"405\":1,\"406\":2,\"412\":1,\"447\":1,\"456\":1,\"463\":1,\"474\":1,\"479\":1,\"489\":1,\"498\":1,\"499\":1},\"1\":{\"12\":2,\"13\":1,\"15\":1,\"19\":1,\"22\":1,\"24\":1,\"26\":1,\"30\":2,\"36\":1,\"39\":2,\"41\":1,\"42\":1,\"48\":1,\"55\":1,\"57\":1,\"62\":1,\"63\":2,\"64\":1,\"77\":3,\"78\":1,\"91\":1,\"92\":1,\"95\":1,\"97\":1,\"101\":1,\"104\":1,\"108\":4,\"109\":3,\"110\":2,\"116\":1,\"121\":1,\"146\":4,\"157\":1,\"164\":2,\"166\":1,\"200\":3,\"219\":1,\"223\":5,\"271\":1,\"283\":1,\"284\":1,\"285\":1,\"308\":1,\"309\":2,\"310\":1,\"311\":2,\"317\":1,\"323\":2,\"338\":2,\"339\":1,\"340\":1,\"341\":1,\"344\":1,\"351\":1,\"352\":1,\"353\":2,\"360\":1,\"366\":1,\"368\":1,\"381\":1,\"383\":1,\"397\":1,\"398\":1,\"399\":1,\"432\":1,\"460\":2,\"482\":1}}],[\"主备切换时\",{\"1\":{\"497\":1}}],[\"主服务器开启二进制日志\",{\"1\":{\"478\":1}}],[\"主服务器配置文件my\",{\"1\":{\"478\":1}}],[\"主从复制\",{\"0\":{\"496\":1}}],[\"主从配置\",{\"0\":{\"477\":1}}],[\"主从架构正常执行\",{\"1\":{\"233\":1}}],[\"主库上有密码的话\",{\"1\":{\"496\":1}}],[\"主库的ip地址\",{\"1\":{\"479\":1}}],[\"主库mysql配置\",{\"0\":{\"478\":1}}],[\"主库根据从库的请求的偏移量位置来推送数据到从库中\",{\"1\":{\"469\":1}}],[\"主库写的命令更新到二进制文件中日志的偏移量4\",{\"1\":{\"469\":1}}],[\"主题\",{\"1\":{\"415\":1}}],[\"主线程\",{\"1\":{\"391\":6}}],[\"主分片2的备份分片\",{\"1\":{\"306\":1}}],[\"主分片2\",{\"1\":{\"306\":1}}],[\"主分片和备份分片在不同的服务器上\",{\"1\":{\"306\":1}}],[\"主流\",{\"1\":{\"302\":1}}],[\"主动权在a手中\",{\"1\":{\"280\":1}}],[\"主要就是从库添加这个参数\",{\"1\":{\"496\":1}}],[\"主要用于简单的文件复制操作\",{\"1\":{\"468\":1}}],[\"主要用于分布式解决方案\",{\"1\":{\"279\":1}}],[\"主要通过这个文件记录多台机器的公钥id\",{\"1\":{\"435\":1}}],[\"主要实现近乎实时的搜索和分析\",{\"1\":{\"302\":1}}],[\"主要是创建了代理bean的factory\",{\"1\":{\"280\":1}}],[\"主要是联合索引\",{\"1\":{\"221\":1}}],[\"主要存储的是\",{\"1\":{\"280\":1}}],[\"主要特点缓存\",{\"1\":{\"279\":1}}],[\"主要为了解决哈希冲突而存在的\",{\"1\":{\"247\":1}}],[\"主节点\",{\"1\":{\"233\":2}}],[\"主属性\",{\"1\":{\"78\":1}}],[\"主机名后面不能带任何的字符串\",{\"1\":{\"159\":1}}],[\"主机名\",{\"1\":{\"77\":6}}],[\"主表列名称\",{\"1\":{\"64\":3}}],[\"主表名称\",{\"1\":{\"64\":3}}],[\"主键索引\",{\"1\":{\"222\":1}}],[\"主键索引2\",{\"1\":{\"19\":1}}],[\"主键就是表中记录的唯一标识\",{\"1\":{\"63\":1}}],[\"主键\",{\"1\":{\"55\":1,\"79\":1}}],[\"主键约束2\",{\"1\":{\"218\":1}}],[\"主键约束\",{\"0\":{\"63\":1},\"1\":{\"12\":1,\"60\":1,\"63\":1}}],[\"主页\",{\"0\":{\"1\":1}}],[\"vs\",{\"1\":{\"419\":1}}],[\"v相同时\",{\"1\":{\"244\":1}}],[\"vector\",{\"0\":{\"243\":1},\"1\":{\"243\":1}}],[\"version=$\",{\"1\":{\"450\":1}}],[\"version=\",{\"1\":{\"389\":1}}],[\"versions\",{\"1\":{\"381\":1}}],[\"versionfilter\",{\"1\":{\"381\":2}}],[\"version>7\",{\"1\":{\"323\":1}}],[\"version>\",{\"1\":{\"28\":1,\"132\":1,\"323\":1,\"369\":1,\"383\":1,\"387\":1}}],[\"version\",{\"1\":{\"16\":1,\"93\":1,\"101\":1,\"104\":1,\"105\":1,\"115\":1,\"165\":1,\"181\":1,\"182\":1,\"184\":1,\"308\":1,\"309\":1,\"310\":4,\"381\":5,\"440\":3,\"441\":1,\"444\":1,\"446\":1,\"450\":1,\"464\":1,\"481\":1,\"495\":1}}],[\"vuepress\",{\"1\":{\"441\":1}}],[\"vue模板\",{\"0\":{\"215\":1}}],[\"vuex使用\",{\"0\":{\"214\":1}}],[\"vuex核心\",{\"0\":{\"213\":1}}],[\"vuex\",{\"0\":{\"212\":1},\"1\":{\"203\":1,\"212\":2,\"214\":1}}],[\"vue组件\",{\"1\":{\"195\":1}}],[\"vue提供了对标签事件的函数绑定\",{\"1\":{\"192\":1}}],[\"vue提供了循环操作\",{\"1\":{\"191\":1}}],[\"vue中也提供了分支语句\",{\"1\":{\"190\":1}}],[\"vue⽀持把vue中的数据绑定到html标签上\",{\"1\":{\"188\":1}}],[\"vue核心\",{\"0\":{\"187\":1}}],[\"vue2\",{\"0\":{\"186\":1}}],[\"vue\",{\"0\":{\"200\":1,\"202\":1,\"208\":1,\"212\":1,\"441\":1},\"1\":{\"185\":1,\"188\":4,\"189\":3,\"190\":3,\"191\":3,\"192\":3,\"194\":2,\"196\":3,\"198\":2,\"199\":2,\"200\":2,\"208\":5,\"212\":2,\"215\":9,\"432\":2}}],[\"v2\",{\"1\":{\"123\":1,\"125\":1,\"392\":1,\"489\":1}}],[\"v7\",{\"1\":{\"110\":1,\"311\":1}}],[\"v\",{\"1\":{\"95\":2,\"97\":1,\"108\":4,\"116\":1,\"128\":2,\"145\":1,\"184\":1,\"189\":3,\"190\":7,\"191\":4,\"192\":1,\"193\":3,\"194\":2,\"195\":6,\"197\":2,\"199\":1,\"396\":1,\"430\":1,\"431\":1,\"447\":1,\"450\":4,\"454\":2,\"493\":1}}],[\"visual\",{\"0\":{\"215\":1}}],[\"vi\",{\"1\":{\"108\":1,\"109\":1,\"141\":1,\"157\":1,\"175\":1,\"309\":1,\"314\":1,\"315\":1,\"497\":2}}],[\"vim\",{\"1\":{\"94\":1,\"97\":1,\"104\":1,\"105\":1,\"139\":1,\"140\":1,\"143\":1,\"157\":1,\"435\":1,\"447\":2,\"460\":1,\"461\":1,\"462\":1,\"479\":1,\"481\":1,\"484\":1,\"486\":1,\"487\":1,\"488\":1,\"489\":1,\"490\":1,\"493\":1,\"494\":2,\"498\":2}}],[\"viewport\",{\"1\":{\"188\":1,\"215\":1}}],[\"view\",{\"1\":{\"14\":5,\"21\":1}}],[\"volume\",{\"1\":{\"439\":1}}],[\"volumes=\",{\"1\":{\"460\":1}}],[\"volumes\",{\"1\":{\"92\":1,\"104\":3,\"309\":1,\"461\":3}}],[\"volatile\",{\"1\":{\"230\":4,\"422\":4}}],[\"void\",{\"1\":{\"8\":1,\"10\":1,\"83\":1,\"84\":3,\"300\":2,\"327\":1,\"329\":1,\"337\":1,\"339\":1,\"343\":1,\"344\":1,\"345\":1,\"347\":1,\"348\":1,\"352\":2,\"353\":1,\"354\":1,\"355\":3,\"357\":1,\"360\":1,\"362\":1,\"371\":1,\"376\":1,\"378\":1,\"387\":1,\"390\":4,\"391\":2,\"396\":4,\"414\":2,\"418\":3,\"420\":1,\"421\":1,\"425\":7}}],[\"v4\",{\"1\":{\"22\":1,\"125\":1,\"473\":1}}],[\"v3\",{\"1\":{\"22\":1}}],[\"valid\",{\"1\":{\"384\":1,\"386\":5}}],[\"validating\",{\"1\":{\"386\":1}}],[\"validation依赖主要是为了引入下面这个依赖\",{\"1\":{\"383\":1}}],[\"validation<\",{\"1\":{\"383\":1}}],[\"validation\",{\"1\":{\"383\":2,\"386\":7}}],[\"validationquery\",{\"1\":{\"21\":1}}],[\"validatehandler\",{\"1\":{\"425\":5}}],[\"validate\",{\"1\":{\"386\":4,\"425\":1}}],[\"validated\",{\"1\":{\"385\":2}}],[\"validates\",{\"1\":{\"384\":1}}],[\"validator<\",{\"1\":{\"383\":2}}],[\"validator\",{\"0\":{\"382\":1},\"1\":{\"382\":2,\"383\":2,\"386\":2}}],[\"value=\",{\"1\":{\"389\":2}}],[\"valueexpression\",{\"1\":{\"387\":2}}],[\"value是这一行的数据\",{\"1\":{\"223\":1}}],[\"value是id值\",{\"1\":{\"223\":1}}],[\"value就是这一行的数据\",{\"1\":{\"222\":1}}],[\"value\",{\"1\":{\"220\":1,\"223\":1,\"286\":1,\"300\":2,\"323\":9,\"325\":1,\"326\":1,\"343\":2,\"353\":2,\"378\":1,\"381\":1,\"396\":5,\"400\":1,\"414\":2}}],[\"values\",{\"1\":{\"13\":1,\"15\":3,\"18\":1,\"44\":3,\"74\":1}}],[\"variable\",{\"1\":{\"461\":1}}],[\"variables\",{\"1\":{\"16\":1,\"143\":2,\"144\":1}}],[\"variance\",{\"1\":{\"345\":1}}],[\"var\",{\"1\":{\"137\":2,\"144\":1,\"145\":2,\"157\":3,\"172\":2,\"176\":1,\"188\":1,\"189\":1,\"190\":1,\"191\":1,\"192\":2,\"194\":1,\"445\":1,\"472\":3,\"474\":1,\"476\":5}}],[\"varchar\",{\"1\":{\"12\":1,\"39\":3,\"61\":3,\"62\":2,\"63\":2,\"74\":1,\"78\":7,\"216\":1}}],[\"⼩数点的位数\",{\"1\":{\"12\":1,\"216\":1}}],[\"⻓度越短\",{\"1\":{\"19\":1,\"22\":1}}],[\"⻓度\",{\"1\":{\"12\":1,\"216\":1}}],[\"数值\",{\"1\":{\"385\":1}}],[\"数值检查\",{\"1\":{\"384\":1}}],[\"数值类型\",{\"1\":{\"317\":1}}],[\"数组结构可配合指针实现一个环形队列\",{\"1\":{\"286\":1,\"400\":1}}],[\"数组+链表组成的\",{\"1\":{\"249\":1}}],[\"数组是\",{\"1\":{\"249\":1}}],[\"数组是hashmap的主体\",{\"1\":{\"247\":1}}],[\"数组是固定长度的\",{\"1\":{\"240\":1}}],[\"数组存储的元素必须是同一个数据类型\",{\"1\":{\"240\":1}}],[\"数组可以存储基本数据类型\",{\"1\":{\"240\":1}}],[\"数组\",{\"1\":{\"191\":1,\"323\":1}}],[\"数目\",{\"1\":{\"157\":1}}],[\"数量已达上线\",{\"1\":{\"284\":1,\"398\":1}}],[\"数量\",{\"1\":{\"22\":1}}],[\"数字类型\",{\"1\":{\"12\":1,\"216\":1}}],[\"数据存放路径\",{\"1\":{\"476\":1}}],[\"数据存储路径\",{\"1\":{\"139\":1}}],[\"数据同步\",{\"0\":{\"468\":1}}],[\"数据备份\",{\"1\":{\"465\":1}}],[\"数据异常\",{\"1\":{\"385\":1}}],[\"数据丢失\",{\"1\":{\"355\":1}}],[\"数据已经发生了改变\",{\"1\":{\"217\":1}}],[\"数据绑定\",{\"1\":{\"195\":1}}],[\"数据恢复的结束位置\",{\"1\":{\"144\":1}}],[\"数据恢复的起始位置\",{\"1\":{\"144\":1}}],[\"数据恢复\",{\"0\":{\"144\":1}}],[\"数据迁移\",{\"1\":{\"135\":1}}],[\"数据文件\",{\"1\":{\"108\":1}}],[\"数据卷\",{\"1\":{\"92\":2}}],[\"数据表中所有记录\",{\"1\":{\"76\":1}}],[\"数据总量不变\",{\"1\":{\"75\":1}}],[\"数据控制语言\",{\"1\":{\"30\":1}}],[\"数据控制语⾔\",{\"1\":{\"12\":1,\"216\":1}}],[\"数据库表结构\",{\"1\":{\"319\":1}}],[\"数据库瞬时压力大\",{\"1\":{\"231\":1}}],[\"数据库瞬时压力增大\",{\"1\":{\"231\":1}}],[\"数据库统计信息不准确\",{\"1\":{\"223\":1}}],[\"数据库也可能选择全表扫描\",{\"1\":{\"223\":1}}],[\"数据库可能会选择全表扫描\",{\"1\":{\"223\":1}}],[\"数据库可能会选择全表扫描而不是使用索引\",{\"1\":{\"223\":1}}],[\"数据库系统可能需要回表到原始表中\",{\"1\":{\"223\":1}}],[\"数据库系统可能会首先对一个表进行全表扫描\",{\"1\":{\"223\":1}}],[\"数据库系统会使用连接操作将扫描到的数据与另一个表的数据进行关联\",{\"1\":{\"223\":1}}],[\"数据库设计的范式\",{\"1\":{\"78\":2}}],[\"数据库设置隔离级别\",{\"1\":{\"76\":1}}],[\"数据库名\",{\"1\":{\"77\":2}}],[\"数据库名称\",{\"1\":{\"33\":3,\"34\":1,\"35\":1,\"36\":2,\"37\":1}}],[\"数据库管理员\",{\"1\":{\"77\":1}}],[\"数据库管理系统mysql数据库的数据类型1\",{\"1\":{\"216\":1}}],[\"数据库管理系统\",{\"1\":{\"12\":1}}],[\"数据库查询隔离级别\",{\"1\":{\"76\":1}}],[\"数据库会持久化的保存数据\",{\"1\":{\"75\":1}}],[\"数据库默认是手动提交事务\",{\"1\":{\"74\":1}}],[\"数据库类型\",{\"1\":{\"39\":1}}],[\"数据库\",{\"1\":{\"30\":1,\"79\":1,\"85\":1,\"304\":1}}],[\"数据库的设计\",{\"0\":{\"78\":1}}],[\"数据库的\",{\"1\":{\"30\":1}}],[\"数据库连接池\",{\"1\":{\"25\":1,\"283\":1,\"397\":1}}],[\"数据删除\",{\"1\":{\"13\":1}}],[\"数据类型n\",{\"1\":{\"39\":1}}],[\"数据类型2\",{\"1\":{\"39\":1}}],[\"数据类型1\",{\"1\":{\"39\":1}}],[\"数据类型\",{\"1\":{\"13\":2,\"16\":1,\"17\":2,\"18\":1,\"41\":1}}],[\"数据查询语言\",{\"1\":{\"30\":1}}],[\"数据查询\",{\"1\":{\"12\":1,\"216\":1}}],[\"数据操作语言\",{\"1\":{\"30\":1}}],[\"数据操作\",{\"1\":{\"12\":1,\"216\":1}}],[\"数据定义语言\",{\"1\":{\"30\":1}}],[\"数据定义\",{\"1\":{\"12\":1,\"216\":1}}],[\"数据\",{\"1\":{\"10\":1,\"30\":1,\"306\":1}}],[\"数据就会被消耗掉\",{\"1\":{\"6\":1}}],[\"mc\",{\"1\":{\"466\":3,\"467\":4,\"468\":13}}],[\"mc安装\",{\"0\":{\"466\":1}}],[\"mx\",{\"1\":{\"464\":1}}],[\"md5\",{\"1\":{\"464\":2}}],[\"mdc\",{\"1\":{\"390\":3,\"391\":11}}],[\"mdc链路追踪\",{\"0\":{\"388\":1}}],[\"mkfs\",{\"1\":{\"462\":1}}],[\"mkdir\",{\"1\":{\"97\":2,\"104\":3,\"108\":2,\"138\":3,\"157\":1,\"173\":1,\"309\":3,\"432\":1,\"439\":1,\"441\":1,\"459\":2,\"473\":1,\"493\":3,\"495\":1}}],[\"m2\",{\"1\":{\"447\":1}}],[\"mnbk6665\",{\"1\":{\"434\":1}}],[\"mq如何防止消息丢失\",{\"0\":{\"363\":1}}],[\"mqid\",{\"1\":{\"351\":1}}],[\"mq\",{\"1\":{\"351\":1}}],[\"mq是什么\",{\"0\":{\"351\":1}}],[\"mq就宕机了\",{\"1\":{\"274\":1}}],[\"mustnot\",{\"1\":{\"339\":1}}],[\"must\",{\"1\":{\"339\":6}}],[\"mutation\",{\"1\":{\"213\":1}}],[\"multiple\",{\"1\":{\"418\":1}}],[\"multicaster\",{\"1\":{\"415\":1}}],[\"multimatchquery\",{\"1\":{\"330\":1}}],[\"multiformatreader\",{\"1\":{\"83\":3}}],[\"multi\",{\"0\":{\"330\":1},\"1\":{\"83\":1,\"226\":1,\"330\":1}}],[\"msg1\",{\"1\":{\"210\":1,\"211\":1}}],[\"msg\",{\"1\":{\"210\":1,\"211\":1,\"352\":2,\"354\":3,\"355\":2,\"360\":6,\"361\":2,\"362\":1,\"389\":8,\"391\":1}}],[\"mvn\",{\"1\":{\"440\":1,\"447\":1}}],[\"mv\",{\"1\":{\"138\":1,\"441\":1,\"493\":1}}],[\"mvc\",{\"1\":{\"21\":1,\"280\":2}}],[\"methodproxy\",{\"1\":{\"421\":3}}],[\"methodinterceptor\",{\"1\":{\"421\":2}}],[\"methodargumentnotvalidexception\",{\"1\":{\"385\":2}}],[\"method\",{\"1\":{\"378\":3,\"379\":2,\"420\":6,\"421\":6}}],[\"methods\",{\"1\":{\"189\":1,\"192\":1,\"215\":1,\"464\":1}}],[\"meters\",{\"1\":{\"347\":1}}],[\"menu\",{\"1\":{\"146\":2}}],[\"messages\",{\"1\":{\"476\":1}}],[\"message=\",{\"1\":{\"354\":1,\"384\":1}}],[\"message\",{\"1\":{\"188\":2,\"351\":1,\"354\":4,\"360\":1}}],[\"mes\",{\"1\":{\"133\":1,\"439\":8,\"440\":3}}],[\"medcl\",{\"1\":{\"110\":2,\"311\":1}}],[\"m\",{\"1\":{\"101\":1,\"389\":2,\"459\":1,\"483\":1,\"488\":1}}],[\"molunerfinn\",{\"1\":{\"392\":2}}],[\"monitor\",{\"1\":{\"497\":1}}],[\"mono\",{\"1\":{\"381\":1}}],[\"mono<void>\",{\"1\":{\"380\":1,\"381\":1}}],[\"month\",{\"1\":{\"79\":1}}],[\"mobile\",{\"1\":{\"336\":1}}],[\"mount\",{\"1\":{\"462\":1}}],[\"mounted\",{\"1\":{\"215\":1}}],[\"mounts\",{\"1\":{\"117\":1}}],[\"modified\",{\"1\":{\"464\":1}}],[\"modify\",{\"1\":{\"41\":1,\"61\":2,\"62\":1,\"63\":4}}],[\"modules\",{\"1\":{\"213\":1,\"450\":2}}],[\"module\",{\"1\":{\"157\":2}}],[\"modeandview\",{\"1\":{\"280\":1}}],[\"model=\",{\"1\":{\"189\":3,\"194\":2}}],[\"model\",{\"1\":{\"189\":1,\"195\":1}}],[\"mode\",{\"1\":{\"28\":1,\"497\":1}}],[\"mymaster\",{\"1\":{\"497\":5}}],[\"myexecutor\",{\"1\":{\"391\":1}}],[\"mythreadpooltaskexecutor\",{\"1\":{\"391\":4}}],[\"myibatis\",{\"1\":{\"389\":1}}],[\"mydata\",{\"1\":{\"108\":8,\"110\":1,\"146\":1,\"165\":1}}],[\"myql\",{\"1\":{\"77\":1}}],[\"mycat\",{\"1\":{\"25\":1}}],[\"my\",{\"1\":{\"23\":2,\"137\":1,\"139\":2,\"143\":1,\"440\":1,\"441\":1,\"472\":1,\"475\":1,\"476\":1,\"479\":2}}],[\"mysql进程\",{\"1\":{\"479\":1}}],[\"mysql进阶\",{\"0\":{\"11\":1}}],[\"mysql配置文件路径\",{\"1\":{\"475\":1}}],[\"mysql5\",{\"0\":{\"469\":1}}],[\"mysql索引优化案例\",{\"1\":{\"223\":1}}],[\"mysqlbinlog\",{\"0\":{\"145\":1},\"1\":{\"145\":2}}],[\"mysqlbasic\",{\"1\":{\"80\":1,\"85\":1}}],[\"mysql数据恢复\",{\"0\":{\"142\":1}}],[\"mysql数据库中事务默认自动提交\",{\"1\":{\"74\":1}}],[\"mysql数据库中有3种变量\",{\"1\":{\"16\":1}}],[\"mysql数据库的数据类型\",{\"1\":{\"12\":1}}],[\"mysqlx\",{\"1\":{\"139\":2}}],[\"mysql8安装\",{\"0\":{\"136\":1}}],[\"mysql等\",{\"1\":{\"123\":1}}],[\"mysql等等\",{\"1\":{\"23\":1}}],[\"mysql2\",{\"1\":{\"105\":1}}],[\"mysql3309\",{\"1\":{\"105\":1}}],[\"mysql3308\",{\"1\":{\"105\":1}}],[\"mysql3307\",{\"1\":{\"98\":1,\"122\":1}}],[\"mysql1\",{\"1\":{\"105\":1}}],[\"mysqldump\",{\"1\":{\"141\":1}}],[\"mysqld\",{\"1\":{\"77\":1,\"137\":1,\"139\":2,\"140\":2,\"141\":2,\"474\":3,\"475\":3,\"476\":10,\"478\":1,\"479\":1}}],[\"mysql默认\",{\"1\":{\"76\":1}}],[\"mysql就是自动提交的\",{\"1\":{\"74\":1}}],[\"mysql就能将该查询转换为⼀个常量\",{\"1\":{\"19\":1}}],[\"mysql基础\",{\"0\":{\"29\":1,\"216\":1}}],[\"mysql本身可以实现主从复制\",{\"1\":{\"27\":1}}],[\"mysql集群\",{\"0\":{\"27\":1},\"1\":{\"80\":1}}],[\"mysql并发量过⼤\",{\"1\":{\"24\":1,\"25\":1}}],[\"mysql的慢查询⽇志\",{\"1\":{\"23\":1}}],[\"mysql中忘记了root用户的密码\",{\"1\":{\"77\":1}}],[\"mysql中的执⾏顺序\",{\"1\":{\"22\":1}}],[\"mysql中⼀个查询语句的执⾏顺序\",{\"1\":{\"22\":1}}],[\"mysql中⽆法利⽤索\",{\"1\":{\"19\":1,\"22\":1}}],[\"mysql\",{\"1\":{\"21\":3,\"28\":3,\"30\":2,\"77\":2,\"80\":1,\"85\":1,\"98\":2,\"105\":6,\"122\":3,\"137\":4,\"138\":19,\"139\":14,\"140\":7,\"141\":23,\"144\":1,\"145\":5,\"146\":3,\"304\":1,\"470\":1,\"472\":13,\"473\":18,\"474\":2,\"476\":5,\"485\":1,\"487\":1}}],[\"mysql在对查询结果排序时使⽤临时表\",{\"1\":{\"19\":1,\"22\":1}}],[\"mysql不⽀\",{\"1\":{\"13\":1}}],[\"mysql约束条件\",{\"1\":{\"12\":1}}],[\"mm\",{\"1\":{\"21\":2,\"28\":2,\"39\":5,\"317\":1,\"320\":3,\"389\":10}}],[\"mariadb\",{\"1\":{\"471\":2,\"473\":1}}],[\"mariadb查看是否有mariadb的安装包\",{\"1\":{\"471\":1}}],[\"marking\",{\"1\":{\"418\":1}}],[\"maven\",{\"1\":{\"447\":8,\"449\":1}}],[\"maven自动打包\",{\"1\":{\"428\":1}}],[\"maven配置\",{\"1\":{\"28\":1}}],[\"may\",{\"1\":{\"386\":1}}],[\"manual\",{\"1\":{\"362\":1}}],[\"manage\",{\"1\":{\"449\":2}}],[\"management\",{\"1\":{\"351\":1}}],[\"manager\",{\"1\":{\"181\":1}}],[\"man得特瑞\",{\"1\":{\"280\":1}}],[\"mandatory\",{\"1\":{\"280\":2}}],[\"manipulation\",{\"1\":{\"30\":1}}],[\"make\",{\"1\":{\"157\":2,\"386\":1,\"493\":2}}],[\"masterauth\",{\"1\":{\"495\":1,\"496\":1}}],[\"master上传成功会自动返回路径\",{\"1\":{\"392\":1}}],[\"master加锁成功后就给客户端返回成功标识了\",{\"1\":{\"279\":1}}],[\"master\",{\"1\":{\"144\":2,\"233\":2,\"319\":1,\"478\":2,\"479\":14}}],[\"mailman\",{\"1\":{\"476\":1}}],[\"mailmessage\",{\"1\":{\"84\":6}}],[\"mailmessage=new\",{\"1\":{\"84\":1}}],[\"mailutil\",{\"1\":{\"84\":3}}],[\"mail<\",{\"1\":{\"84\":1}}],[\"mail\",{\"1\":{\"84\":5}}],[\"maintainer\",{\"1\":{\"117\":1,\"439\":1}}],[\"main\",{\"1\":{\"83\":1,\"157\":2,\"165\":2,\"239\":1,\"387\":1,\"425\":2,\"464\":1,\"490\":1}}],[\"maps\",{\"1\":{\"396\":3}}],[\"mapped\",{\"1\":{\"390\":1}}],[\"mappings\",{\"1\":{\"112\":1,\"320\":1,\"346\":1}}],[\"map=new\",{\"1\":{\"385\":1}}],[\"map<string\",{\"1\":{\"339\":1,\"360\":1,\"371\":1,\"378\":1,\"385\":1,\"387\":2,\"391\":2,\"396\":2}}],[\"map<decodehinttype\",{\"1\":{\"83\":3}}],[\"map接口的实现类主要有\",{\"1\":{\"240\":1}}],[\"map接口和collection接口是所有集合框架的父接口\",{\"1\":{\"240\":1}}],[\"map\",{\"1\":{\"83\":1,\"339\":2,\"346\":5,\"347\":2,\"348\":2,\"349\":1,\"384\":1,\"385\":2,\"387\":1,\"396\":3}}],[\"matidto\",{\"1\":{\"386\":4}}],[\"matimasentity\",{\"1\":{\"386\":7}}],[\"math\",{\"1\":{\"56\":8}}],[\"matchallquery\",{\"1\":{\"337\":1}}],[\"match针对多个field进行检索\",{\"1\":{\"330\":1}}],[\"match针对一个field做检索\",{\"1\":{\"330\":1}}],[\"matchquery\",{\"1\":{\"329\":1,\"339\":2,\"341\":1}}],[\"match\",{\"1\":{\"329\":1}}],[\"match查询属于高层查询\",{\"1\":{\"329\":1}}],[\"match查询\",{\"0\":{\"329\":1,\"330\":1},\"1\":{\"329\":1}}],[\"matcher\",{\"1\":{\"21\":1}}],[\"matching\",{\"1\":{\"21\":1}}],[\"maximum\",{\"1\":{\"461\":2}}],[\"maximumpoolsize\",{\"1\":{\"286\":1,\"400\":1}}],[\"maxattempts\",{\"1\":{\"420\":5,\"421\":5}}],[\"maxfilesize>\",{\"1\":{\"389\":2}}],[\"maxhistory>\",{\"1\":{\"389\":2}}],[\"max=50000\",{\"1\":{\"384\":1}}],[\"max=\",{\"1\":{\"384\":3}}],[\"maxconnectperroute\",{\"1\":{\"323\":4}}],[\"maxconnectnum\",{\"1\":{\"323\":4}}],[\"maxmemory\",{\"1\":{\"230\":2}}],[\"maxopenpreparedstatements\",{\"1\":{\"21\":1}}],[\"max\",{\"1\":{\"13\":1,\"21\":4,\"22\":1,\"55\":1,\"165\":1,\"286\":1,\"312\":1,\"326\":1,\"345\":3,\"384\":2,\"385\":1,\"400\":1,\"464\":2,\"490\":1}}],[\"migration\",{\"1\":{\"495\":1}}],[\"mime\",{\"1\":{\"157\":2,\"165\":1}}],[\"middleware\",{\"1\":{\"490\":6}}],[\"middle\",{\"1\":{\"145\":1}}],[\"mixed\",{\"1\":{\"143\":1}}],[\"microsoft\",{\"1\":{\"124\":1}}],[\"mirror>\",{\"1\":{\"447\":1}}],[\"mirrorof>\",{\"1\":{\"447\":1}}],[\"mirrors>\",{\"1\":{\"447\":1}}],[\"mirrors\",{\"1\":{\"94\":1,\"183\":2}}],[\"mirror\",{\"1\":{\"94\":3,\"183\":2,\"468\":10}}],[\"milliseconds\",{\"1\":{\"497\":1}}],[\"millis\",{\"1\":{\"21\":4,\"320\":1}}],[\"min=10000\",{\"1\":{\"384\":1}}],[\"min=\",{\"1\":{\"384\":3}}],[\"minimum\",{\"1\":{\"310\":2}}],[\"minio数据迁移\",{\"0\":{\"465\":1}}],[\"minio集群配置\",{\"0\":{\"460\":1}}],[\"minio集群搭建\",{\"0\":{\"457\":1},\"1\":{\"134\":1}}],[\"minioclient\",{\"1\":{\"133\":6}}],[\"minioproperties\",{\"1\":{\"133\":1}}],[\"minio<\",{\"1\":{\"132\":1}}],[\"minio使用纠删码\",{\"1\":{\"125\":1}}],[\"minio\",{\"0\":{\"123\":1,\"461\":1},\"1\":{\"123\":1,\"124\":1,\"125\":7,\"127\":2,\"128\":8,\"133\":3,\"135\":1,\"458\":12,\"459\":25,\"460\":9,\"461\":10,\"462\":3,\"463\":1,\"464\":13,\"465\":2,\"466\":1,\"467\":2,\"468\":10}}],[\"minidle\",{\"1\":{\"21\":1}}],[\"minute\",{\"1\":{\"51\":1}}],[\"minus\",{\"1\":{\"26\":1}}],[\"min\",{\"1\":{\"13\":1,\"21\":1,\"22\":1,\"55\":1,\"345\":3,\"384\":2,\"385\":1,\"459\":1,\"461\":1}}],[\"missing\",{\"1\":{\"5\":1,\"6\":1,\"10\":1,\"112\":1,\"386\":1}}],[\"jenkins\",{\"1\":{\"445\":17,\"449\":2}}],[\"jenkins实战\",{\"0\":{\"442\":1}}],[\"jedisutil\",{\"1\":{\"379\":1,\"380\":2,\"381\":1}}],[\"jre\",{\"1\":{\"439\":1,\"481\":3}}],[\"jul\",{\"1\":{\"476\":3}}],[\"juel<\",{\"1\":{\"387\":1}}],[\"juel\",{\"1\":{\"387\":1}}],[\"just\",{\"1\":{\"381\":1}}],[\"jboss\",{\"1\":{\"382\":1}}],[\"jdk目录\",{\"0\":{\"484\":1}}],[\"jdk安装\",{\"0\":{\"481\":1}}],[\"jdk\",{\"1\":{\"421\":1,\"481\":1}}],[\"jdkproxy\",{\"1\":{\"420\":2}}],[\"jdkagent\",{\"1\":{\"420\":2}}],[\"jdk动态代理\",{\"0\":{\"420\":1}}],[\"jdk动态代理适用于需要代理接口的情况\",{\"1\":{\"419\":1}}],[\"jdk动态代理适合于对服务层接口进行代理\",{\"1\":{\"419\":1}}],[\"jdk动态代理要求目标对象实现接口\",{\"1\":{\"419\":1}}],[\"jdk动态代理在执行方法调用时\",{\"1\":{\"419\":1}}],[\"jdk动态代理只能代理实现了接口的类\",{\"1\":{\"419\":1}}],[\"jdk动态代理和cglib代理区别\",{\"0\":{\"419\":1}}],[\"jdk1\",{\"0\":{\"260\":1},\"1\":{\"247\":2,\"269\":1,\"481\":2,\"484\":1}}],[\"jdbc5\",{\"1\":{\"28\":1}}],[\"jdbc4\",{\"1\":{\"28\":1}}],[\"jdbc使⽤drud不能依赖druid\",{\"1\":{\"28\":1}}],[\"jdbc实现mysql集群\",{\"0\":{\"28\":1}}],[\"jdbc7\",{\"1\":{\"25\":1}}],[\"jdbc数进行记录\",{\"1\":{\"21\":1}}],[\"jdbc\",{\"1\":{\"21\":2,\"25\":1,\"28\":6}}],[\"jvm\",{\"0\":{\"269\":1},\"1\":{\"235\":3,\"279\":2,\"445\":2}}],[\"j\",{\"1\":{\"170\":1}}],[\"journalctl\",{\"1\":{\"462\":1,\"476\":1}}],[\"jobbofhe\",{\"1\":{\"170\":1}}],[\"join\",{\"1\":{\"14\":2,\"19\":1,\"22\":4,\"68\":2,\"70\":3,\"71\":2}}],[\"jjjfood\",{\"1\":{\"146\":4}}],[\"jinkins+gitlab\",{\"1\":{\"91\":1}}],[\"j2se\",{\"1\":{\"83\":1}}],[\"jpg\",{\"1\":{\"21\":1,\"83\":2}}],[\"jsr\",{\"1\":{\"383\":2}}],[\"jsr已成为java界的一个重要标准\",{\"1\":{\"383\":1}}],[\"jsr是java\",{\"1\":{\"383\":1}}],[\"jsr303\",{\"1\":{\"386\":5}}],[\"jsr303介绍\",{\"0\":{\"383\":1}}],[\"jsr303校验\",{\"0\":{\"382\":1},\"1\":{\"385\":1}}],[\"jsp模板+对象数据\",{\"1\":{\"368\":1}}],[\"jsp\",{\"1\":{\"368\":1}}],[\"js文件中导入了router\",{\"1\":{\"208\":1}}],[\"js代码\",{\"1\":{\"188\":1}}],[\"jsdelivr\",{\"1\":{\"188\":1,\"189\":1,\"190\":1,\"191\":1,\"192\":1,\"215\":1}}],[\"js版本控制\",{\"1\":{\"184\":2}}],[\"js版本\",{\"1\":{\"184\":1}}],[\"js版本不同导致各种依赖无法兼容\",{\"1\":{\"181\":1}}],[\"js\",{\"0\":{\"197\":1},\"1\":{\"21\":1,\"181\":2,\"182\":1,\"184\":1,\"188\":1,\"189\":1,\"190\":1,\"191\":1,\"192\":1,\"194\":1,\"208\":4,\"212\":1,\"215\":1}}],[\"json\",{\"0\":{\"205\":1},\"1\":{\"10\":1,\"94\":1,\"215\":1,\"378\":2,\"379\":2,\"381\":2}}],[\"jar=codingstart\",{\"1\":{\"431\":1}}],[\"jar运行命令\",{\"1\":{\"117\":1}}],[\"jar\",{\"1\":{\"116\":6,\"117\":5,\"165\":3,\"430\":3,\"431\":7,\"439\":8,\"445\":2,\"450\":10,\"481\":2}}],[\"java连接\",{\"0\":{\"491\":1}}],[\"java2209\",{\"1\":{\"371\":1}}],[\"java源⽂件\",{\"1\":{\"368\":1}}],[\"java操作demo\",{\"0\":{\"327\":1}}],[\"java操作es\",{\"0\":{\"323\":1}}],[\"java代码均为原始操作es\",{\"1\":{\"323\":1}}],[\"java8中threadlocal对象提供了一个lambda构造方式\",{\"1\":{\"396\":1}}],[\"java8开始\",{\"1\":{\"267\":1}}],[\"java8以前的版本使用注解有一个限制是相同的注解在同一位置只能使用一次\",{\"1\":{\"267\":1}}],[\"java只支持单继承\",{\"1\":{\"258\":1}}],[\"java基础\",{\"0\":{\"258\":1}}],[\"javadevelop\",{\"1\":{\"198\":2}}],[\"java程序只能通过与tomcat配合完成\",{\"1\":{\"156\":1}}],[\"javasdk\",{\"1\":{\"125\":1}}],[\"javamailsender=javamailsender\",{\"1\":{\"84\":1}}],[\"javamailsender\",{\"1\":{\"84\":4}}],[\"javamail\",{\"1\":{\"84\":1}}],[\"java\",{\"0\":{\"87\":1},\"1\":{\"83\":5,\"84\":1,\"108\":2,\"115\":2,\"116\":4,\"117\":2,\"118\":1,\"125\":1,\"165\":1,\"235\":1,\"258\":1,\"264\":1,\"267\":1,\"269\":1,\"286\":2,\"309\":1,\"383\":1,\"387\":2,\"389\":3,\"396\":3,\"400\":2,\"420\":3,\"421\":1,\"422\":1,\"430\":1,\"431\":1,\"439\":2,\"444\":3,\"445\":4,\"450\":2,\"481\":4}}],[\"javax\",{\"1\":{\"3\":1,\"83\":1,\"84\":3,\"387\":2}}],[\"jackson\",{\"1\":{\"21\":1,\"28\":1}}],[\"将这些命令数据写入日志文件中\",{\"1\":{\"469\":1}}],[\"将dist文件夹所有内容移动到上一级\",{\"1\":{\"441\":2}}],[\"将dist文件内容copy到dosc中\",{\"1\":{\"432\":1}}],[\"将trackid封装到返回值里\",{\"1\":{\"391\":1}}],[\"将自身mdc中的数据复制给子线程\",{\"1\":{\"391\":2}}],[\"将父线程的trackid传递下去给子线程\",{\"1\":{\"391\":1}}],[\"将must\",{\"1\":{\"339\":1}}],[\"将你的多个查询条件\",{\"1\":{\"339\":1}}],[\"将查询到的数据舍弃一部分\",{\"1\":{\"337\":1}}],[\"将多个term查询的结果给你封装到了一起\",{\"1\":{\"329\":1}}],[\"将当前field进行分词\",{\"1\":{\"317\":1}}],[\"将bean对象封装成beandefintion对象\",{\"1\":{\"280\":1}}],[\"将该消息进⾏消费并将消费记录写进redis或者数据库中\",{\"1\":{\"275\":1,\"364\":1}}],[\"将该消息丢弃\",{\"1\":{\"275\":1,\"364\":1}}],[\"将内存分为各个年代\",{\"1\":{\"271\":1}}],[\"将类的某些信息隐藏在类内部\",{\"1\":{\"258\":1}}],[\"将链表转化为红黑树\",{\"1\":{\"247\":1}}],[\"将null\",{\"1\":{\"231\":1}}],[\"将去查询数据库\",{\"1\":{\"231\":1}}],[\"将客户端发起的请求\",{\"1\":{\"160\":1}}],[\"将会在独立的线程中被执行\",{\"1\":{\"300\":1,\"414\":1}}],[\"将会禁止其他事物访问该行数据\",{\"1\":{\"217\":1}}],[\"将会忽略authtoken\",{\"1\":{\"153\":1}}],[\"将会抛出一个异常\",{\"1\":{\"84\":1}}],[\"将本文件放置于natapp同级目录\",{\"1\":{\"153\":1}}],[\"将子查询一行一列的结果作为外部查询的条件做第二次查询\",{\"1\":{\"72\":1}}],[\"将子查询的结果作为外部查询的一张表\",{\"1\":{\"58\":1}}],[\"将一列数据作为一个整体\",{\"1\":{\"55\":1}}],[\"将指定字符串转换为大写\",{\"1\":{\"52\":1}}],[\"将指定字符串转换为小写\",{\"1\":{\"52\":1}}],[\"将str\",{\"1\":{\"52\":2}}],[\"将\",{\"1\":{\"52\":1,\"108\":1,\"175\":1,\"418\":1}}],[\"将遍历全表以找到匹配的⾏\",{\"1\":{\"19\":1}}],[\"将原有表中的数据再次添加\",{\"1\":{\"19\":1}}],[\"将流写出\",{\"1\":{\"10\":1}}],[\"将请求的\",{\"1\":{\"10\":1}}],[\"而我们的gcc版本默认是4\",{\"1\":{\"492\":1}}],[\"而我们所说的类加载过程即是指jvm虚拟机把\",{\"1\":{\"235\":1}}],[\"而每个部门都有各自的职责\",{\"1\":{\"425\":1}}],[\"而使用双重检查锁可以在不必要的情况下避免加锁和解锁操作\",{\"1\":{\"422\":1}}],[\"而cglib适用于代理类的情况\",{\"1\":{\"419\":1}}],[\"而threadpoolexecutor是java标准库提供的原生线程池实现\",{\"1\":{\"391\":1}}],[\"而threadpoolexecutor是java标准库中的类\",{\"1\":{\"391\":1}}],[\"而threadpoolexecutor需要手动编写代码进行配置\",{\"1\":{\"391\":1}}],[\"而如果使用无界队列\",{\"1\":{\"286\":1,\"400\":1}}],[\"而客户端却关闭了\",{\"1\":{\"282\":1}}],[\"而客户端会等待一段时间\",{\"1\":{\"282\":1}}],[\"而老年代对象存活率高\",{\"1\":{\"271\":1}}],[\"而本地方法栈则为虚拟机使用到的\",{\"1\":{\"269\":1}}],[\"而equals\",{\"1\":{\"259\":1}}],[\"而存在的\",{\"1\":{\"249\":1}}],[\"而\",{\"1\":{\"243\":1,\"421\":1,\"468\":1}}],[\"而不会影响其他线程的副本\",{\"1\":{\"394\":1,\"396\":1}}],[\"而不会重复执行\",{\"1\":{\"10\":1}}],[\"而不是等到同步完slave再发\",{\"1\":{\"279\":1}}],[\"而不是对象的本身\",{\"1\":{\"240\":1}}],[\"而不重写hashcode的方法\",{\"1\":{\"259\":2}}],[\"而且大部分情况下都不会遇到所谓的\",{\"1\":{\"279\":1}}],[\"而且存储的是一个二进制的文件\",{\"1\":{\"227\":1}}],[\"而且select\",{\"1\":{\"223\":1}}],[\"而其他索引的非叶子节点存的索引值是对应的值\",{\"1\":{\"222\":1}}],[\"而事务a再次读取该数据时\",{\"1\":{\"217\":1}}],[\"而无需手动更改\",{\"1\":{\"181\":1}}],[\"而是使存活对象往一端游走\",{\"1\":{\"271\":1}}],[\"而是通过该类提供的方法来实现对隐藏信息的操作和访问\",{\"1\":{\"258\":1}}],[\"而是排查了一下sql是否有模糊查询\",{\"1\":{\"223\":1}}],[\"而是寻找你create或write的数据举例\",{\"1\":{\"145\":1}}],[\"而是jplugin框架进行开发\",{\"1\":{\"3\":1}}],[\"而docker搭建的启动时间很短\",{\"1\":{\"91\":1}}],[\"而docker需要的资源很小\",{\"1\":{\"91\":1}}],[\"它会递归地比较源目录和目标目录中的内容\",{\"1\":{\"468\":1}}],[\"它确保只有一个类的实例存在\",{\"1\":{\"422\":1}}],[\"它定义对象间的一种一对多的依赖关系\",{\"1\":{\"416\":1}}],[\"它定义了对象之间的依赖关系\",{\"1\":{\"415\":1}}],[\"它实现了事件源\",{\"1\":{\"415\":1}}],[\"它接收广播塔发出的信号\",{\"1\":{\"415\":1}}],[\"它们监听并响应特定的事件\",{\"1\":{\"415\":1}}],[\"它们也不一定是相等的\",{\"1\":{\"244\":1}}],[\"它将电台的节目的无线电信号发送到空气中\",{\"1\":{\"415\":1}}],[\"它将事件从事件源传递到监听器\",{\"1\":{\"415\":1}}],[\"它是基于接口的代理\",{\"1\":{\"419\":1}}],[\"它是在spring框架中使用线程池的推荐方式\",{\"1\":{\"391\":1}}],[\"它是concurrentlinkedqueue\",{\"1\":{\"286\":1,\"400\":1}}],[\"它还提供了一些便利的方法和钩子\",{\"1\":{\"391\":1}}],[\"它集成了spring的任务执行框架\",{\"1\":{\"391\":1}}],[\"它提供了可视化的控制台\",{\"1\":{\"426\":1}}],[\"它提供了大量的新闻\",{\"1\":{\"415\":1}}],[\"它提供了各种配置选项和自定义扩展点\",{\"1\":{\"391\":1}}],[\"它提供了以下几个主要功能\",{\"1\":{\"8\":1}}],[\"它继承自threadpoolexecutor类\",{\"1\":{\"391\":1}}],[\"它获取锁的方式简单粗暴\",{\"1\":{\"279\":1}}],[\"它有以下缺点\",{\"1\":{\"279\":1}}],[\"它解决了标记整理不适用于老年代的问题\",{\"1\":{\"271\":1}}],[\"它的优势在于能够代理没有实现接口的类\",{\"1\":{\"419\":1}}],[\"它的优势在于标准化\",{\"1\":{\"419\":1}}],[\"它的方法参数都是函数式接口类型\",{\"1\":{\"263\":1}}],[\"它的本质就是作为函数式接口的实例\",{\"1\":{\"261\":1}}],[\"它只是内容搬运工\",{\"1\":{\"263\":1}}],[\"它只能在\",{\"1\":{\"258\":1}}],[\"它在\",{\"1\":{\"253\":1}}],[\"它采用集中式存储管理应用的所有组件的状态\",{\"1\":{\"212\":1}}],[\"它与\",{\"1\":{\"208\":1}}],[\"它可以保存类型t的值\",{\"1\":{\"264\":1}}],[\"它可以让您在同一台计算机上运行多个\",{\"1\":{\"181\":1}}],[\"它可能会找到多个符合条件的⾏\",{\"1\":{\"19\":1}}],[\"它最初是由dusan\",{\"1\":{\"170\":1}}],[\"它兼容亚马逊s3云存储服务接口\",{\"1\":{\"123\":1}}],[\"它由sharding\",{\"1\":{\"28\":1}}],[\"它返回所有匹配某个单\",{\"1\":{\"19\":1}}],[\"它保证每个请求只会被该过滤器执行一次\",{\"1\":{\"10\":1}}],[\"是因为它能够减少锁的使用次数\",{\"1\":{\"422\":1}}],[\"是java\",{\"1\":{\"383\":1}}],[\"是jvm确定当前绝不会被回收的对象\",{\"1\":{\"270\":1}}],[\"是指向jcp\",{\"1\":{\"383\":1}}],[\"是基础数据结构中\",{\"1\":{\"351\":1}}],[\"是基于\",{\"1\":{\"243\":1}}],[\"是二叉堆实现的无界优先级阻塞队列\",{\"1\":{\"286\":1,\"400\":1}}],[\"是无法解决的\",{\"1\":{\"280\":1}}],[\"是无法先生成类的代理对象\",{\"1\":{\"280\":1}}],[\"是对key设置有效期解决死锁现象分别从性能和可靠性两个角度谈谈redis和zookeeper实现分布式锁的优缺点\",{\"1\":{\"279\":1}}],[\"是对字符串的内容进行比较\",{\"1\":{\"244\":1}}],[\"是nosql数据\",{\"1\":{\"279\":1}}],[\"是在\",{\"1\":{\"258\":1}}],[\"是唯一的\",{\"1\":{\"244\":1}}],[\"是没办法使用索引的\",{\"1\":{\"221\":1}}],[\"是用户名\",{\"1\":{\"173\":1}}],[\"是用于定义和运行多容器\",{\"1\":{\"100\":1}}],[\"是企业网关和isp等网络服务商的常用软件之一\",{\"1\":{\"170\":1}}],[\"是另外一回事\",{\"1\":{\"159\":1}}],[\"是一款由阿里云官方开发的插件\",{\"1\":{\"426\":1}}],[\"是一种常用的多线程编程技术\",{\"1\":{\"422\":1}}],[\"是一种行为设计模式\",{\"1\":{\"415\":1}}],[\"是一种喜新厌旧的拒绝策略\",{\"1\":{\"291\":1,\"405\":1}}],[\"是一种随机访问模式\",{\"1\":{\"241\":1}}],[\"是一回事\",{\"1\":{\"159\":1}}],[\"是一个容器类\",{\"1\":{\"264\":1}}],[\"是一个专为\",{\"1\":{\"212\":1}}],[\"是一个用于管理多个\",{\"1\":{\"181\":1}}],[\"是一个高性能的http和反向代理服务器\",{\"1\":{\"156\":1}}],[\"是一个mysql\",{\"1\":{\"57\":1}}],[\"是一个导入解析数据并返回\",{\"1\":{\"3\":1}}],[\"是个基于\",{\"1\":{\"123\":1}}],[\"是通过yaml文件\",{\"1\":{\"102\":1}}],[\"是不可分割的最小操作单位\",{\"1\":{\"75\":1}}],[\"是当当⽹开源的适⽤于微服务的分布式数据访问基础类库\",{\"1\":{\"28\":1}}],[\"是从前往后检索的\",{\"1\":{\"26\":1}}],[\"是否之前安装过mysql服务\",{\"1\":{\"472\":1}}],[\"是否进行递归验证\",{\"1\":{\"384\":1}}],[\"是否应答\",{\"1\":{\"362\":1}}],[\"是否自动删除\",{\"1\":{\"353\":1}}],[\"是否为排他队列\",{\"1\":{\"353\":1}}],[\"是否持久化\",{\"1\":{\"353\":1}}],[\"是否超时\",{\"1\":{\"326\":1}}],[\"是否需要额外存储\",{\"1\":{\"320\":1}}],[\"是否要采用此种拒绝策略\",{\"1\":{\"291\":1,\"405\":1}}],[\"是否已经到了\",{\"1\":{\"229\":1}}],[\"是否开启\",{\"1\":{\"157\":1}}],[\"是否缓存preparedstatement\",{\"1\":{\"21\":1}}],[\"是否存在索引\",{\"1\":{\"19\":1}}],[\"是⼀种可以提升查询效率的结构\",{\"1\":{\"19\":1,\"219\":1}}],[\"是\",{\"1\":{\"10\":1,\"208\":1,\"383\":1,\"390\":1}}],[\"obsoleted\",{\"1\":{\"473\":1}}],[\"objecttarget\",{\"1\":{\"421\":3}}],[\"objects\",{\"1\":{\"376\":1,\"380\":1,\"381\":2,\"386\":1,\"396\":2,\"421\":2}}],[\"object中hashcode是根据对象的存储地址转换而形成的一个哈希值\",{\"1\":{\"259\":1}}],[\"object数组\",{\"0\":{\"243\":1}}],[\"object\",{\"1\":{\"84\":1,\"258\":1,\"354\":1,\"376\":3,\"378\":1,\"379\":1,\"386\":4,\"387\":1,\"390\":2,\"396\":3,\"420\":7,\"421\":7}}],[\"object>>\",{\"1\":{\"396\":1}}],[\"object>\",{\"1\":{\"83\":6,\"339\":1,\"360\":1,\"371\":1,\"387\":2,\"396\":2}}],[\"overwrite\",{\"1\":{\"468\":4}}],[\"override\",{\"1\":{\"8\":6,\"10\":1,\"84\":1,\"300\":1,\"378\":2,\"379\":1,\"380\":1,\"381\":1,\"390\":3,\"391\":3,\"414\":1,\"418\":2,\"420\":1,\"421\":1,\"425\":3}}],[\"odysseus\",{\"1\":{\"387\":2}}],[\"o操作\",{\"1\":{\"223\":1}}],[\"ok\",{\"1\":{\"174\":1,\"360\":2,\"361\":1}}],[\"octet\",{\"1\":{\"157\":1,\"165\":1}}],[\"off\",{\"1\":{\"175\":1,\"184\":1}}],[\"of\",{\"1\":{\"145\":1,\"319\":2,\"320\":2,\"345\":1,\"346\":2,\"386\":1,\"418\":1,\"461\":1,\"462\":1}}],[\"operatorid\",{\"1\":{\"339\":1}}],[\"operator\",{\"1\":{\"329\":2,\"330\":2}}],[\"opener\",{\"1\":{\"464\":1}}],[\"opened\",{\"1\":{\"461\":1}}],[\"opens\",{\"1\":{\"212\":1,\"317\":1}}],[\"openssl\",{\"1\":{\"157\":2,\"473\":1}}],[\"openjdk\",{\"1\":{\"115\":1,\"439\":2,\"444\":2,\"445\":2}}],[\"open\",{\"1\":{\"21\":1}}],[\"opts\",{\"1\":{\"461\":1}}],[\"opts=\",{\"1\":{\"108\":2,\"309\":1,\"460\":1}}],[\"options\",{\"1\":{\"464\":1}}],[\"optional类的javadoc描述如下\",{\"1\":{\"264\":1}}],[\"optional\",{\"1\":{\"264\":3}}],[\"option>\",{\"1\":{\"189\":4,\"191\":1}}],[\"optarg\",{\"1\":{\"165\":1,\"450\":2}}],[\"opt\",{\"1\":{\"165\":2,\"309\":7,\"450\":2}}],[\"o\",{\"1\":{\"101\":1,\"106\":1,\"376\":2,\"421\":1}}],[\"output\",{\"1\":{\"145\":1,\"215\":1}}],[\"out的文件中\",{\"1\":{\"116\":1}}],[\"outer\",{\"1\":{\"70\":1,\"71\":1}}],[\"out\",{\"1\":{\"18\":2,\"83\":6,\"261\":1,\"326\":1,\"338\":1,\"339\":1,\"340\":1,\"341\":1,\"387\":1,\"425\":5,\"488\":1,\"489\":1}}],[\"online\",{\"1\":{\"461\":2}}],[\"one\",{\"1\":{\"360\":4,\"418\":1}}],[\"ont1\",{\"1\":{\"70\":1}}],[\"on例子\",{\"1\":{\"70\":1}}],[\"on先执⾏\",{\"1\":{\"25\":1}}],[\"onf\",{\"1\":{\"22\":1}}],[\"on\",{\"1\":{\"14\":2,\"15\":2,\"19\":3,\"22\":2,\"64\":4,\"68\":2,\"70\":1,\"71\":2,\"77\":4,\"157\":3,\"165\":3,\"184\":1,\"192\":2,\"195\":1,\"219\":1,\"309\":1,\"320\":1,\"321\":2,\"464\":2,\"476\":1,\"478\":1}}],[\"onceperrequestfilter\",{\"1\":{\"10\":2}}],[\"oj\",{\"1\":{\"13\":1}}],[\"origin\",{\"1\":{\"108\":1,\"314\":1,\"464\":4}}],[\"oracle\",{\"1\":{\"74\":1,\"76\":1}}],[\"org\",{\"1\":{\"28\":1,\"83\":1,\"84\":14,\"157\":1,\"170\":1,\"183\":2,\"198\":1,\"323\":1,\"368\":1,\"382\":1,\"387\":1,\"421\":6,\"447\":1,\"466\":1,\"476\":1}}],[\"order\",{\"1\":{\"13\":1,\"22\":3,\"26\":2,\"47\":1,\"54\":3,\"79\":1,\"146\":1}}],[\"or\",{\"1\":{\"13\":1,\"28\":1,\"49\":4,\"145\":1,\"223\":3,\"328\":2,\"329\":1,\"330\":1,\"339\":1,\"418\":1}}],[\"wmsadmin\",{\"1\":{\"467\":1}}],[\"wrap\",{\"1\":{\"381\":1,\"391\":5}}],[\"writewith\",{\"1\":{\"381\":1}}],[\"write\",{\"1\":{\"165\":1,\"379\":1}}],[\"written\",{\"1\":{\"145\":1}}],[\"w+=20\",{\"1\":{\"192\":1}}],[\"w=100\",{\"1\":{\"192\":1}}],[\"workspace\",{\"1\":{\"439\":1}}],[\"workdir\",{\"1\":{\"439\":1}}],[\"workingdirectory=\",{\"1\":{\"461\":1}}],[\"working\",{\"1\":{\"386\":1}}],[\"work\",{\"1\":{\"355\":5}}],[\"work消息\",{\"0\":{\"355\":1}}],[\"worker\",{\"1\":{\"157\":4,\"164\":2,\"165\":2}}],[\"word⽂件\",{\"1\":{\"368\":1}}],[\"word\",{\"1\":{\"312\":1,\"355\":4}}],[\"word之类的文档转成base64\",{\"1\":{\"111\":1}}],[\"will\",{\"1\":{\"386\":1,\"462\":1}}],[\"wildcardquery\",{\"1\":{\"334\":1}}],[\"wildcard查询\",{\"0\":{\"334\":1}}],[\"wire\",{\"1\":{\"310\":1}}],[\"width=w+\",{\"1\":{\"192\":1}}],[\"width=device\",{\"1\":{\"188\":1,\"215\":1}}],[\"width\",{\"1\":{\"188\":1,\"215\":1}}],[\"withcredentials\",{\"1\":{\"440\":1,\"441\":1}}],[\"withregistry\",{\"1\":{\"440\":1}}],[\"withinitial\",{\"1\":{\"396\":2}}],[\"witharguments\",{\"1\":{\"360\":1}}],[\"with\",{\"1\":{\"141\":1,\"157\":2,\"360\":1,\"386\":1,\"464\":1}}],[\"window\",{\"1\":{\"212\":1,\"317\":1}}],[\"windows下安装\",{\"1\":{\"177\":1}}],[\"windows下客户端测试\",{\"1\":{\"177\":1}}],[\"windows\",{\"1\":{\"23\":1,\"181\":1}}],[\"windos端口占用\",{\"0\":{\"118\":1}}],[\"wget\",{\"1\":{\"106\":2,\"157\":1,\"308\":1,\"459\":1,\"466\":1}}],[\"wcu\",{\"1\":{\"106\":1}}],[\"weight=1\",{\"1\":{\"162\":1}}],[\"weight=2\",{\"1\":{\"162\":1}}],[\"weight=权重比例\",{\"1\":{\"162\":2}}],[\"week\",{\"1\":{\"51\":1}}],[\"webmvcconfigurer添加拦截器\",{\"1\":{\"390\":1}}],[\"webmvcconfigurer\",{\"1\":{\"378\":1,\"390\":1}}],[\"webapps8083\",{\"1\":{\"104\":2}}],[\"webapps8082\",{\"1\":{\"104\":2}}],[\"webapps8081\",{\"1\":{\"97\":4,\"104\":2}}],[\"webapps\",{\"1\":{\"97\":1,\"104\":3}}],[\"web\",{\"1\":{\"21\":1,\"116\":2,\"117\":1,\"157\":1,\"165\":1,\"439\":2,\"440\":1}}],[\"wants=network\",{\"1\":{\"461\":1}}],[\"wantedby=multi\",{\"1\":{\"140\":1,\"157\":1,\"461\":1,\"483\":1,\"494\":2,\"498\":2}}],[\"war\",{\"1\":{\"445\":2}}],[\"warning\",{\"1\":{\"153\":1,\"473\":1}}],[\"warn\",{\"1\":{\"9\":1,\"157\":1,\"360\":3,\"361\":1,\"362\":1}}],[\"wage\",{\"1\":{\"384\":2}}],[\"watch监听自动消除\",{\"1\":{\"226\":1}}],[\"watch\",{\"1\":{\"215\":1,\"468\":5}}],[\"wall\",{\"1\":{\"21\":1}}],[\"wait\",{\"1\":{\"21\":1,\"461\":1}}],[\"wwwroot\",{\"1\":{\"432\":3,\"441\":4}}],[\"www\",{\"1\":{\"13\":1,\"19\":1,\"106\":1,\"170\":1,\"178\":1,\"336\":1,\"342\":1,\"367\":1,\"368\":1,\"432\":3,\"441\":4,\"445\":1}}],[\"whrer\",{\"1\":{\"72\":1}}],[\"whether\",{\"1\":{\"386\":1}}],[\"when\",{\"1\":{\"50\":3,\"386\":1}}],[\"where后面是一个范围查询\",{\"1\":{\"223\":1}}],[\"where后⾯等任何地⽅\",{\"1\":{\"26\":1}}],[\"whereis\",{\"1\":{\"141\":2}}],[\"where子句后跟条件\",{\"1\":{\"49\":2}}],[\"where是从后往前检索\",{\"1\":{\"26\":1}}],[\"whereg\",{\"1\":{\"22\":1}}],[\"where不可以\",{\"1\":{\"14\":1}}],[\"where\",{\"1\":{\"13\":3,\"14\":1,\"19\":10,\"22\":4,\"30\":1,\"45\":2,\"46\":1,\"47\":1,\"49\":13,\"56\":6,\"58\":1,\"67\":1,\"72\":2,\"74\":2,\"76\":2,\"77\":3,\"141\":1,\"196\":1,\"219\":1,\"223\":2,\"328\":2,\"474\":1}}],[\"while\",{\"1\":{\"9\":1,\"18\":2,\"165\":1,\"337\":1,\"420\":1,\"421\":1,\"450\":1}}],[\"npx\",{\"1\":{\"441\":2}}],[\"npm\",{\"1\":{\"183\":4,\"188\":1,\"189\":1,\"190\":1,\"191\":1,\"192\":1,\"196\":1,\"197\":1,\"198\":5,\"199\":1,\"200\":3,\"215\":1,\"441\":2,\"454\":6}}],[\"n<\",{\"1\":{\"389\":3}}],[\"n<行数>\",{\"1\":{\"116\":1}}],[\"n是换行符\",{\"1\":{\"389\":2}}],[\"nio\",{\"1\":{\"391\":7}}],[\"nio有个buffer\",{\"1\":{\"269\":1}}],[\"nickname\",{\"1\":{\"385\":1}}],[\"nignx并发能力越强\",{\"1\":{\"157\":1}}],[\"nvm安装位置\",{\"1\":{\"182\":1}}],[\"nvm文档\",{\"1\":{\"181\":1}}],[\"nvm\",{\"0\":{\"181\":1},\"1\":{\"181\":3,\"182\":1,\"183\":2,\"184\":11,\"185\":1}}],[\"ncsa\",{\"1\":{\"174\":1,\"175\":1}}],[\"nginx转发\",{\"0\":{\"464\":1,\"490\":1}}],[\"nginx绑定域名\",{\"1\":{\"166\":1}}],[\"nginx实现tomcat负载均衡\",{\"1\":{\"166\":1}}],[\"nginx实现反向代理\",{\"1\":{\"166\":1}}],[\"nginx实现静态资源代理服务器\",{\"1\":{\"166\":1}}],[\"nginx实战\",{\"0\":{\"165\":1}}],[\"nginx核心\",{\"0\":{\"166\":1}}],[\"nginx通过动静分离\",{\"1\":{\"164\":1}}],[\"nginx最终的并发能力动态资源需要\",{\"1\":{\"164\":1}}],[\"nginx动静分离\",{\"0\":{\"164\":1}}],[\"nginx为我们默认提供了三种负载均衡的策略\",{\"1\":{\"160\":1}}],[\"nginx负载均衡\",{\"0\":{\"160\":1}}],[\"nginx代理\",{\"0\":{\"158\":1}}],[\"nginx的并发能力公式\",{\"1\":{\"164\":1}}],[\"nginx的并发能力就越强\",{\"1\":{\"157\":1}}],[\"nginx的安装\",{\"0\":{\"157\":1}}],[\"nginx用户\",{\"1\":{\"157\":1}}],[\"nginx提供了⾮常丰富的配置实例\",{\"1\":{\"156\":1}}],[\"nginx作为web\",{\"1\":{\"156\":1}}],[\"nginx是什么\",{\"0\":{\"156\":1}}],[\"nginx\",{\"0\":{\"155\":1},\"1\":{\"156\":5,\"157\":34,\"161\":5,\"162\":2,\"163\":2,\"164\":1,\"165\":2,\"166\":1,\"464\":5,\"490\":1}}],[\"nacos集群\",{\"0\":{\"485\":1}}],[\"nacos集群搭建\",{\"0\":{\"480\":1}}],[\"nacossystemctl\",{\"1\":{\"484\":1}}],[\"nacos\",{\"1\":{\"482\":2,\"483\":6,\"484\":2,\"485\":2,\"486\":1,\"487\":2,\"488\":6,\"489\":4,\"490\":3,\"491\":7}}],[\"nacos单机\",{\"0\":{\"482\":1}}],[\"nack\",{\"1\":{\"273\":1}}],[\"natapp\",{\"0\":{\"147\":1},\"1\":{\"148\":1,\"153\":1}}],[\"native\",{\"1\":{\"141\":1,\"269\":1}}],[\"name>\",{\"1\":{\"447\":1}}],[\"name的索引\",{\"1\":{\"223\":1}}],[\"name的值\",{\"1\":{\"223\":1}}],[\"name这个索引\",{\"1\":{\"223\":1}}],[\"name=dist\",{\"1\":{\"454\":1}}],[\"name=service\",{\"1\":{\"450\":1}}],[\"name=\",{\"1\":{\"188\":1,\"215\":1,\"360\":3,\"389\":10,\"390\":2}}],[\"name=$\",{\"1\":{\"165\":1,\"450\":1}}],[\"name参数\",{\"1\":{\"104\":3}}],[\"name为非空\",{\"1\":{\"61\":1}}],[\"namespace\",{\"1\":{\"491\":2}}],[\"names=1\",{\"1\":{\"476\":1}}],[\"names\",{\"1\":{\"28\":1}}],[\"name\",{\"1\":{\"21\":1,\"28\":3,\"39\":2,\"61\":3,\"63\":2,\"67\":2,\"74\":4,\"78\":2,\"84\":15,\"95\":2,\"97\":1,\"98\":1,\"104\":3,\"105\":2,\"108\":1,\"109\":1,\"120\":2,\"122\":1,\"128\":1,\"133\":1,\"137\":1,\"161\":1,\"162\":1,\"163\":1,\"164\":1,\"165\":4,\"194\":3,\"210\":1,\"215\":1,\"223\":1,\"309\":2,\"310\":2,\"320\":1,\"321\":2,\"323\":1,\"346\":4,\"351\":1,\"360\":7,\"370\":1,\"371\":1,\"390\":4,\"431\":6,\"440\":10,\"441\":3,\"450\":14,\"454\":12,\"464\":2,\"476\":1,\"491\":1,\"496\":2}}],[\"n300\",{\"1\":{\"116\":1}}],[\"nlp\",{\"1\":{\"116\":1,\"165\":1,\"450\":1}}],[\"nexus\",{\"1\":{\"447\":1}}],[\"next\",{\"1\":{\"165\":1,\"425\":13,\"464\":1}}],[\"necessary\",{\"1\":{\"386\":1}}],[\"needed\",{\"1\":{\"473\":1}}],[\"need\",{\"1\":{\"386\":1}}],[\"never\",{\"1\":{\"280\":2}}],[\"nested\",{\"1\":{\"280\":2,\"386\":1}}],[\"netstat\",{\"1\":{\"116\":1,\"118\":2,\"165\":1,\"450\":1}}],[\"network\",{\"1\":{\"92\":1}}],[\"net\",{\"1\":{\"77\":1,\"84\":1,\"116\":1,\"170\":1,\"188\":1,\"189\":1,\"190\":1,\"191\":1,\"192\":1,\"215\":1,\"394\":1,\"434\":1,\"439\":1,\"473\":1,\"496\":1}}],[\"newproxyinstance\",{\"1\":{\"420\":1}}],[\"newhashmap\",{\"1\":{\"396\":2}}],[\"newconnection\",{\"1\":{\"353\":1}}],[\"newfixedthreadpool\",{\"1\":{\"294\":1,\"408\":1}}],[\"newstr\",{\"1\":{\"52\":2}}],[\"new相当于添加时得一个对象\",{\"1\":{\"15\":1}}],[\"new\",{\"1\":{\"3\":3,\"8\":4,\"9\":3,\"10\":1,\"15\":4,\"83\":19,\"84\":1,\"188\":1,\"189\":1,\"190\":1,\"191\":1,\"192\":1,\"194\":1,\"212\":1,\"215\":1,\"237\":1,\"239\":1,\"280\":2,\"283\":2,\"300\":7,\"317\":1,\"323\":6,\"327\":2,\"329\":3,\"337\":5,\"338\":1,\"339\":3,\"340\":3,\"341\":3,\"343\":2,\"344\":2,\"345\":2,\"347\":2,\"348\":2,\"352\":1,\"355\":1,\"357\":3,\"360\":3,\"361\":1,\"371\":2,\"378\":2,\"387\":3,\"390\":2,\"391\":1,\"397\":2,\"414\":7,\"420\":2,\"421\":4,\"422\":2,\"425\":5,\"491\":1}}],[\"n+num\",{\"1\":{\"16\":1}}],[\"n\",{\"1\":{\"16\":1,\"18\":3,\"51\":2,\"83\":2,\"116\":2,\"165\":1,\"388\":1,\"389\":2,\"445\":1,\"450\":4,\"454\":2,\"458\":1}}],[\"num=1\",{\"1\":{\"487\":1}}],[\"num++\",{\"1\":{\"192\":1}}],[\"number\",{\"1\":{\"62\":3,\"310\":1,\"319\":2,\"320\":2,\"346\":2,\"384\":3,\"450\":4,\"454\":10,\"461\":2}}],[\"num3=num1+num2\",{\"1\":{\"18\":1}}],[\"num3\",{\"1\":{\"18\":1}}],[\"num2\",{\"1\":{\"17\":1,\"18\":1}}],[\"num1+num2\",{\"1\":{\"17\":1}}],[\"num1\",{\"1\":{\"17\":1,\"18\":1}}],[\"num\",{\"1\":{\"16\":1,\"18\":1,\"52\":1,\"192\":2,\"370\":1,\"371\":1}}],[\"nullable\",{\"1\":{\"390\":1}}],[\"null值不能使用\",{\"1\":{\"49\":1}}],[\"null参与的运算\",{\"1\":{\"48\":1}}],[\"null和is\",{\"1\":{\"26\":1}}],[\"null\",{\"1\":{\"9\":5,\"13\":1,\"26\":1,\"49\":4,\"60\":1,\"61\":3,\"78\":4,\"83\":2,\"165\":1,\"223\":2,\"231\":1,\"264\":1,\"353\":2,\"378\":1,\"384\":1,\"387\":1,\"391\":3,\"396\":2,\"422\":2,\"425\":3,\"450\":2,\"464\":2}}],[\"nokey\",{\"1\":{\"473\":1}}],[\"nofile\",{\"1\":{\"458\":2}}],[\"noargsconstructor\",{\"1\":{\"386\":1,\"425\":1}}],[\"nonnull\",{\"1\":{\"380\":1,\"381\":2}}],[\"none\",{\"1\":{\"179\":2}}],[\"none=不做记录\",{\"1\":{\"153\":1}}],[\"noeviction\",{\"1\":{\"230\":1}}],[\"no\",{\"1\":{\"227\":1,\"497\":1}}],[\"nobody\",{\"1\":{\"165\":1}}],[\"nopush\",{\"1\":{\"157\":1,\"165\":1}}],[\"nohup\",{\"1\":{\"116\":4,\"165\":1,\"430\":1,\"431\":1,\"445\":1,\"450\":2}}],[\"nodeps\",{\"1\":{\"471\":1,\"472\":1,\"473\":1}}],[\"nodejs\",{\"1\":{\"123\":1,\"182\":1}}],[\"node\",{\"1\":{\"108\":2,\"181\":4,\"183\":2,\"197\":1,\"198\":2,\"441\":2,\"454\":2,\"495\":1,\"496\":1}}],[\"nodes\",{\"1\":{\"28\":1,\"319\":1,\"495\":2,\"496\":3}}],[\"nosuchbeandefinitionexception\",{\"1\":{\"84\":8}}],[\"now\",{\"1\":{\"79\":1,\"223\":1}}],[\"nowcoder\",{\"1\":{\"13\":1}}],[\"notempty\",{\"1\":{\"384\":1}}],[\"notblank\",{\"1\":{\"384\":1,\"385\":2}}],[\"notnull\",{\"1\":{\"384\":1,\"386\":1}}],[\"not中的条件\",{\"1\":{\"339\":1}}],[\"notice\",{\"1\":{\"165\":1}}],[\"notfoundexception\",{\"1\":{\"83\":1}}],[\"not\",{\"1\":{\"13\":1,\"26\":1,\"33\":2,\"49\":2,\"60\":1,\"61\":3,\"78\":4,\"145\":1,\"223\":4,\"280\":2,\"339\":3,\"386\":2,\"461\":1,\"462\":1}}],[\"获取java\",{\"1\":{\"484\":1}}],[\"获取唯一性标识\",{\"1\":{\"391\":1}}],[\"获取请求的消息头\",{\"1\":{\"381\":1}}],[\"获取请求路径\",{\"1\":{\"381\":1}}],[\"获取请求对象和响应对象\",{\"1\":{\"381\":1}}],[\"获取请求body\",{\"1\":{\"9\":1}}],[\"获取传递的令牌\",{\"1\":{\"379\":1}}],[\"获取令牌\",{\"1\":{\"379\":1,\"380\":1}}],[\"获取参数\",{\"1\":{\"378\":1}}],[\"获取方法上的自定义注解\",{\"1\":{\"378\":1,\"379\":1}}],[\"获取变量\",{\"1\":{\"373\":1}}],[\"获取模板\",{\"1\":{\"371\":1}}],[\"获取多边形内的全部数据\",{\"0\":{\"349\":1},\"1\":{\"346\":1}}],[\"获取在矩形内的全部数据\",{\"0\":{\"348\":1},\"1\":{\"346\":1}}],[\"获取存储桶\",{\"1\":{\"344\":1}}],[\"获取高亮数据\",{\"1\":{\"341\":1}}],[\"获取查询结果\",{\"1\":{\"339\":1}}],[\"获取连接的超时时间\",{\"1\":{\"323\":1}}],[\"获取不到锁直接不断尝试获取锁\",{\"1\":{\"279\":1}}],[\"获取锁zookeeper\",{\"1\":{\"279\":1}}],[\"获取数据\",{\"1\":{\"214\":2}}],[\"获取很简单\",{\"1\":{\"131\":1}}],[\"获取accesskey和secretkey\",{\"0\":{\"131\":1}}],[\"获取aop代理对象\",{\"1\":{\"84\":1}}],[\"获取镜像\",{\"0\":{\"127\":1}}],[\"获取类型为requiredtype的对象\",{\"1\":{\"84\":1}}],[\"获取对象\",{\"1\":{\"84\":1}}],[\"获取date1\",{\"1\":{\"51\":1}}],[\"获取时间的分钟值\",{\"1\":{\"51\":1}}],[\"获取指定时间的小时值\",{\"1\":{\"51\":1}}],[\"获取指定日期的年份\",{\"1\":{\"51\":1}}],[\"获取指定日期为一年中的第几周\",{\"1\":{\"51\":1}}],[\"获取当前执行的方法\",{\"1\":{\"378\":1,\"379\":1}}],[\"获取当前方法上的参数\",{\"1\":{\"376\":1}}],[\"获取当前时间\",{\"1\":{\"51\":1}}],[\"获取当前日期\",{\"1\":{\"51\":1}}],[\"获取执⾏慢的sql语句4\",{\"1\":{\"23\":1}}],[\"获取了输入流后\",{\"1\":{\"6\":1}}],[\"8u411\",{\"1\":{\"481\":1}}],[\"8723\",{\"1\":{\"476\":1}}],[\"8589\",{\"1\":{\"476\":1}}],[\"815\",{\"1\":{\"391\":1}}],[\"811\",{\"1\":{\"391\":3}}],[\"8181\",{\"1\":{\"117\":1}}],[\"8hashmap\",{\"0\":{\"268\":1}}],[\"8之前\",{\"1\":{\"267\":1}}],[\"8之前hashmap由数组+链表组成的\",{\"1\":{\"247\":1}}],[\"8新特性\",{\"0\":{\"260\":1}}],[\"8以后在解决哈希冲突时有了较\",{\"1\":{\"247\":1}}],[\"8c3c\",{\"1\":{\"179\":1}}],[\"89\",{\"1\":{\"391\":2}}],[\"8999\",{\"1\":{\"389\":1,\"391\":7,\"440\":3}}],[\"8988\",{\"1\":{\"165\":1}}],[\"89mb\",{\"1\":{\"110\":1}}],[\"805\",{\"1\":{\"391\":1}}],[\"80\",{\"1\":{\"161\":1,\"162\":2,\"163\":2,\"164\":1}}],[\"8083\",{\"1\":{\"104\":1}}],[\"8082\",{\"1\":{\"104\":1}}],[\"8080\",{\"1\":{\"95\":1,\"97\":1,\"104\":3,\"116\":3,\"117\":1,\"159\":1,\"162\":1,\"163\":1,\"164\":1}}],[\"8081\",{\"1\":{\"95\":1,\"97\":1,\"104\":1,\"159\":1,\"162\":1,\"163\":1,\"164\":1}}],[\"8848<\",{\"1\":{\"491\":1}}],[\"8848\",{\"1\":{\"485\":3,\"486\":3,\"490\":5}}],[\"88\",{\"1\":{\"391\":2}}],[\"881551z\",{\"1\":{\"310\":1}}],[\"8892\",{\"1\":{\"161\":2,\"165\":3}}],[\"8888888888888906\",{\"1\":{\"345\":1}}],[\"8888888\",{\"1\":{\"194\":1}}],[\"8888\",{\"1\":{\"21\":2}}],[\"8个字符\",{\"1\":{\"39\":1}}],[\"8\",{\"0\":{\"115\":1,\"195\":1,\"334\":1},\"1\":{\"8\":1,\"9\":1,\"19\":1,\"22\":1,\"26\":1,\"77\":1,\"83\":3,\"95\":1,\"108\":1,\"115\":1,\"117\":1,\"138\":2,\"145\":1,\"161\":1,\"165\":1,\"188\":1,\"200\":1,\"215\":1,\"223\":1,\"267\":1,\"269\":2,\"283\":1,\"310\":2,\"344\":1,\"345\":2,\"369\":1,\"370\":1,\"378\":1,\"379\":1,\"381\":1,\"389\":1,\"397\":1,\"439\":2,\"444\":1,\"464\":2,\"481\":2,\"484\":1,\"492\":1}}],[\"sdb\",{\"1\":{\"462\":3}}],[\"sdk支持\",{\"1\":{\"125\":1}}],[\"sdk\",{\"1\":{\"125\":3}}],[\"src\",{\"1\":{\"441\":1,\"495\":1}}],[\"src=\",{\"1\":{\"188\":1,\"189\":1,\"190\":1,\"191\":1,\"192\":1,\"215\":1}}],[\"same\",{\"1\":{\"464\":1}}],[\"sale\",{\"1\":{\"320\":1,\"321\":2}}],[\"save2\",{\"1\":{\"360\":1}}],[\"save\",{\"1\":{\"227\":3,\"360\":2,\"361\":2}}],[\"safe<\",{\"1\":{\"141\":2}}],[\"safe\",{\"1\":{\"141\":1}}],[\"sneakythrows\",{\"1\":{\"418\":1,\"420\":1,\"421\":1}}],[\"snapshot\",{\"1\":{\"310\":1}}],[\"snippet\",{\"1\":{\"215\":1}}],[\"snippets\",{\"1\":{\"215\":2}}],[\"snowflake\",{\"1\":{\"28\":3}}],[\"specifies\",{\"1\":{\"461\":2}}],[\"specification\",{\"1\":{\"383\":1}}],[\"span>班级的勤劳⼩蜜蜂\",{\"1\":{\"370\":1}}],[\"span>\",{\"1\":{\"370\":1}}],[\"split\",{\"1\":{\"323\":3}}],[\"spool\",{\"1\":{\"172\":1}}],[\"spring的applicationcontext就会作为广播器\",{\"1\":{\"415\":1}}],[\"springcodesudy\",{\"1\":{\"387\":1}}],[\"springmvc拦截器\",{\"1\":{\"378\":1}}],[\"springmvc执行流程\",{\"0\":{\"280\":1}}],[\"spring配置注解\",{\"1\":{\"352\":1}}],[\"spring中的事件监听机制包括事件源\",{\"1\":{\"281\":1}}],[\"spring容器\",{\"1\":{\"281\":1}}],[\"spring事件就是观察者模式的一种\",{\"1\":{\"415\":1}}],[\"spring事件\",{\"0\":{\"281\":1}}],[\"spring主要是通过缓存去解决循环依赖\",{\"1\":{\"280\":1}}],[\"springboot\",{\"0\":{\"436\":1},\"1\":{\"430\":1,\"431\":1}}],[\"springboottest\",{\"1\":{\"352\":1}}],[\"springboot整合minio上传文件\",{\"0\":{\"130\":1}}],[\"springboot配置sql监控\",{\"0\":{\"21\":1}}],[\"spring连接配置\",{\"0\":{\"113\":1}}],[\"spring应用上下文环境\",{\"1\":{\"84\":1}}],[\"spring工具类\",{\"1\":{\"84\":1}}],[\"springutils\",{\"0\":{\"84\":1},\"1\":{\"84\":2}}],[\"springframework\",{\"1\":{\"83\":1,\"84\":15,\"113\":1,\"323\":2,\"352\":1,\"383\":1,\"421\":4,\"491\":1}}],[\"spring\",{\"1\":{\"10\":1,\"21\":2,\"23\":1,\"28\":3,\"84\":1,\"113\":1,\"165\":1,\"280\":2,\"323\":1,\"352\":1,\"383\":1,\"386\":3,\"389\":2,\"431\":2,\"450\":2,\"487\":1,\"491\":7}}],[\"squares\",{\"1\":{\"345\":1}}],[\"squid的日志位于\",{\"1\":{\"176\":1}}],[\"squid支持多种协议\",{\"1\":{\"170\":1}}],[\"squid可以作为代理服务器\",{\"1\":{\"170\":1}}],[\"squid是一款流行的缓存代理服务器软件\",{\"1\":{\"170\":1}}],[\"squid简介\",{\"0\":{\"170\":1}}],[\"squid\",{\"0\":{\"169\":1},\"1\":{\"170\":1,\"171\":1,\"172\":8,\"173\":2,\"174\":2,\"175\":4,\"176\":1,\"177\":6}}],[\"sql回放失败\",{\"1\":{\"479\":1}}],[\"sql线程拿到命令以后在本地数据库进行回放\",{\"1\":{\"469\":1}}],[\"sql线程根据记录中日志文件的偏移量读取日志文件中的命令8\",{\"1\":{\"469\":1}}],[\"sql通用语法\",{\"1\":{\"30\":1}}],[\"sqlsessiontemplate\",{\"1\":{\"28\":1}}],[\"sqlsessionfactory\",{\"1\":{\"28\":1}}],[\"sql语句太⻓\",{\"1\":{\"25\":1}}],[\"sql语句太⻓8\",{\"1\":{\"24\":1}}],[\"sql语句查询条件函数计算\",{\"1\":{\"24\":1,\"25\":1}}],[\"sql语句查询条件的顺序不对\",{\"1\":{\"24\":1,\"25\":1}}],[\"sql语句对应的表的数据量太⼤\",{\"1\":{\"24\":1,\"25\":1}}],[\"sql语句索引失效\",{\"1\":{\"24\":1,\"25\":1}}],[\"sql语句\",{\"1\":{\"24\":1,\"25\":1}}],[\"sql语句有业务逻辑\",{\"1\":{\"24\":1,\"25\":1}}],[\"sql执⾏顺序\",{\"0\":{\"22\":1}}],[\"sql优化之解决\",{\"0\":{\"25\":1}}],[\"sql优化之分析\",{\"0\":{\"24\":1}}],[\"sql优化之定位\",{\"0\":{\"23\":1}}],[\"sql优化三部曲\",{\"1\":{\"22\":1}}],[\"sql优化\",{\"0\":{\"20\":1}}],[\"sql分类\",{\"1\":{\"12\":1,\"30\":1,\"77\":1}}],[\"sql\",{\"0\":{\"146\":1},\"1\":{\"12\":1,\"21\":3,\"30\":2,\"145\":2,\"146\":3,\"389\":3,\"479\":3,\"485\":1}}],[\"syncs\",{\"1\":{\"497\":1}}],[\"synchronousqueue\",{\"1\":{\"286\":2,\"400\":2}}],[\"synchronizedmap\",{\"1\":{\"396\":1}}],[\"synchronized\",{\"1\":{\"243\":1,\"422\":2}}],[\"symbolic\",{\"1\":{\"139\":1,\"476\":1}}],[\"sysctl\",{\"1\":{\"458\":1}}],[\"sysconfig\",{\"1\":{\"445\":1}}],[\"sysdate\",{\"1\":{\"51\":1}}],[\"systemconfig\",{\"1\":{\"379\":1,\"380\":1,\"381\":1,\"385\":1}}],[\"systemctl\",{\"1\":{\"93\":4,\"94\":2,\"140\":3,\"157\":4,\"177\":8,\"435\":6,\"445\":1,\"458\":1,\"461\":3,\"463\":1,\"474\":1,\"475\":5,\"476\":1,\"478\":1,\"479\":1,\"488\":3,\"489\":1,\"494\":7,\"498\":3,\"499\":1}}],[\"system>const存在于理想状态\",{\"1\":{\"223\":1}}],[\"system>const>eq\",{\"1\":{\"223\":1}}],[\"systemd\",{\"1\":{\"157\":1,\"461\":2,\"476\":3,\"483\":1,\"488\":1,\"494\":3,\"498\":3}}],[\"system\",{\"1\":{\"19\":2,\"83\":6,\"157\":1,\"258\":1,\"261\":1,\"300\":1,\"327\":1,\"329\":1,\"337\":5,\"338\":1,\"339\":1,\"340\":1,\"341\":3,\"343\":1,\"344\":4,\"345\":1,\"347\":1,\"348\":1,\"361\":1,\"378\":1,\"379\":1,\"387\":1,\"414\":1,\"418\":2,\"420\":1,\"421\":1,\"425\":5,\"461\":1,\"483\":1,\"488\":1,\"491\":1,\"494\":2,\"498\":2}}],[\"s3兼容\",{\"1\":{\"125\":1}}],[\"s3\",{\"1\":{\"124\":1,\"125\":1}}],[\"smsserviceimpl\",{\"1\":{\"391\":10}}],[\"smslimitationinterceptor\",{\"1\":{\"390\":2}}],[\"smscontent\",{\"1\":{\"339\":2}}],[\"smscontent中包含中国和平安\",{\"1\":{\"339\":1}}],[\"sms\",{\"1\":{\"319\":2,\"321\":1,\"325\":1,\"326\":1,\"327\":1,\"329\":1,\"337\":1,\"339\":1,\"340\":1,\"341\":1,\"343\":2,\"344\":4,\"345\":2}}],[\"smart\",{\"1\":{\"112\":2,\"312\":1}}],[\"smtp\",{\"1\":{\"84\":3}}],[\"s\",{\"1\":{\"101\":2,\"125\":2,\"145\":1,\"157\":4,\"178\":1,\"187\":1,\"329\":1,\"370\":2,\"378\":3,\"386\":3}}],[\"soft\",{\"1\":{\"458\":1}}],[\"so\",{\"1\":{\"386\":1}}],[\"sojson\",{\"1\":{\"336\":1}}],[\"solr\",{\"1\":{\"302\":1}}],[\"sock\",{\"1\":{\"139\":2,\"141\":2,\"476\":2}}],[\"socket\",{\"1\":{\"323\":1,\"476\":2}}],[\"sockettimeout=3000\",{\"1\":{\"487\":1}}],[\"sockettimeout\",{\"1\":{\"323\":4}}],[\"socket=\",{\"1\":{\"139\":2,\"141\":2,\"476\":1}}],[\"socketfactory\",{\"1\":{\"84\":1}}],[\"source\",{\"1\":{\"83\":6,\"141\":1,\"326\":1,\"327\":1,\"329\":1,\"337\":1,\"339\":1,\"340\":1,\"341\":1,\"343\":1,\"344\":1,\"345\":1,\"415\":1,\"430\":3,\"431\":1,\"447\":1,\"450\":1,\"481\":1}}],[\"skip=true\",{\"1\":{\"450\":1}}],[\"skipped\",{\"1\":{\"326\":1}}],[\"skip\",{\"1\":{\"77\":1}}],[\"scrollres\",{\"1\":{\"337\":2}}],[\"scrollreq\",{\"1\":{\"337\":2}}],[\"scrollid\",{\"1\":{\"337\":3}}],[\"scroll\",{\"1\":{\"337\":4}}],[\"scroll查询方式\",{\"1\":{\"337\":1}}],[\"scroll+size在es查询数据的方式\",{\"1\":{\"337\":1}}],[\"script=\",{\"1\":{\"384\":1}}],[\"scriptassert\",{\"1\":{\"384\":1}}],[\"script\",{\"1\":{\"188\":1,\"440\":3,\"441\":1}}],[\"script>\",{\"1\":{\"188\":2,\"189\":2,\"190\":2,\"191\":2,\"192\":2,\"194\":1,\"215\":3}}],[\"schema\",{\"1\":{\"323\":4,\"485\":1}}],[\"schedule\",{\"1\":{\"300\":1,\"414\":1}}],[\"schedulerconfig\",{\"1\":{\"300\":1,\"414\":1}}],[\"scheduledthreadpoolexecutor\",{\"1\":{\"300\":1,\"414\":1}}],[\"scheduledtaskregistrar\",{\"1\":{\"300\":1,\"414\":1}}],[\"scheduledexecutorservice\",{\"1\":{\"300\":1,\"414\":1}}],[\"scheduled\",{\"1\":{\"300\":4,\"414\":4}}],[\"schedulingconfigurer\",{\"1\":{\"300\":3,\"414\":3}}],[\"scheduling\",{\"1\":{\"300\":1,\"414\":1}}],[\"scope>\",{\"1\":{\"383\":1}}],[\"scoped>\",{\"1\":{\"215\":1}}],[\"scores表有80w条数据\",{\"1\":{\"223\":1}}],[\"score\",{\"1\":{\"39\":2,\"326\":2}}],[\"scss\",{\"1\":{\"215\":1}}],[\"scaled\",{\"1\":{\"317\":2}}],[\"scale=1\",{\"1\":{\"188\":1,\"215\":1}}],[\"scan\",{\"1\":{\"19\":2}}],[\"signature\",{\"1\":{\"473\":1}}],[\"since\",{\"1\":{\"464\":1}}],[\"singleton\",{\"1\":{\"422\":11}}],[\"single\",{\"1\":{\"382\":1}}],[\"simply\",{\"1\":{\"386\":1}}],[\"simplecontext\",{\"1\":{\"387\":3}}],[\"simple\",{\"1\":{\"223\":1}}],[\"simplemailmessage\",{\"1\":{\"84\":3}}],[\"sidecar这3款相互独⽴的产品组成\",{\"1\":{\"28\":1}}],[\"sizeandtimebasedrollingpolicy\",{\"1\":{\"389\":2}}],[\"size是有限制的\",{\"1\":{\"337\":1}}],[\"size\",{\"1\":{\"21\":1,\"133\":2,\"165\":4,\"325\":1,\"337\":1,\"370\":2,\"380\":1,\"381\":1,\"384\":1,\"464\":2,\"490\":1}}],[\"slots\",{\"1\":{\"495\":1}}],[\"slow\",{\"1\":{\"21\":2}}],[\"sleep\",{\"1\":{\"420\":1,\"421\":1,\"431\":1}}],[\"slave权限\",{\"1\":{\"478\":1}}],[\"slave\",{\"1\":{\"165\":1,\"478\":2,\"479\":7}}],[\"slf4j提供的一个支持动态打印日志信息的工具\",{\"1\":{\"390\":1}}],[\"slf4j\",{\"1\":{\"9\":1,\"21\":1,\"300\":1,\"414\":1,\"418\":2,\"420\":3,\"421\":2}}],[\"sh文件需要开启权限\",{\"1\":{\"432\":1}}],[\"shell\",{\"1\":{\"431\":2}}],[\"shell脚本文件\",{\"0\":{\"429\":1}}],[\"shelf\",{\"1\":{\"391\":17}}],[\"sh重启项目即可\",{\"1\":{\"428\":1}}],[\"shutdown\",{\"0\":{\"295\":1,\"409\":1},\"1\":{\"293\":1,\"295\":1,\"297\":1,\"300\":2,\"407\":1,\"409\":1,\"411\":1,\"414\":2,\"483\":2}}],[\"should\",{\"1\":{\"339\":4,\"418\":1}}],[\"short\",{\"1\":{\"317\":1}}],[\"shop\",{\"1\":{\"165\":1}}],[\"show\",{\"1\":{\"16\":1,\"19\":3,\"34\":3,\"40\":2,\"77\":2,\"143\":2,\"144\":3,\"219\":1,\"478\":1,\"479\":1}}],[\"sh\",{\"1\":{\"93\":1,\"106\":4,\"141\":1,\"165\":1,\"430\":7,\"431\":1,\"432\":1,\"440\":2,\"441\":4,\"450\":6,\"483\":4,\"484\":1,\"488\":2}}],[\"sha256\",{\"1\":{\"464\":2,\"473\":1}}],[\"shards\",{\"1\":{\"319\":1,\"320\":1,\"326\":1,\"346\":1}}],[\"shardingsphere<\",{\"1\":{\"28\":1}}],[\"shardingsphere\",{\"1\":{\"28\":3}}],[\"shardingsphere是⼀套开源的分布式数据库中间件解决⽅案组成的⽣态圈\",{\"1\":{\"28\":1}}],[\"sharding\",{\"0\":{\"28\":1},\"1\":{\"25\":2,\"28\":8}}],[\"shared\",{\"1\":{\"491\":1}}],[\"share\",{\"1\":{\"108\":3,\"110\":2,\"162\":1,\"163\":1,\"164\":1,\"172\":1,\"309\":3}}],[\"shanghai\",{\"1\":{\"21\":1,\"28\":1,\"104\":3,\"439\":1}}],[\"sshput\",{\"1\":{\"441\":1}}],[\"sshcommand\",{\"1\":{\"440\":3,\"441\":6}}],[\"sshuserprivatekey\",{\"1\":{\"440\":1,\"441\":1}}],[\"ssh\",{\"1\":{\"435\":5,\"440\":3,\"441\":2,\"449\":1}}],[\"sshd\",{\"1\":{\"435\":3}}],[\"ssh连接\",{\"0\":{\"435\":1}}],[\"sss\",{\"1\":{\"389\":3}}],[\"ss||yyyy\",{\"1\":{\"320\":1}}],[\"sso\",{\"1\":{\"162\":2,\"163\":2,\"389\":2,\"391\":16}}],[\"ssl验证相关配置\",{\"1\":{\"464\":2}}],[\"ssl证书地址\",{\"1\":{\"464\":2}}],[\"sslsocketfactory\",{\"1\":{\"84\":1}}],[\"ssl\",{\"1\":{\"84\":2,\"93\":1,\"108\":1,\"157\":1,\"175\":2,\"314\":1,\"464\":14}}],[\"ss\",{\"1\":{\"21\":1,\"28\":2,\"39\":2,\"389\":4}}],[\"success\",{\"1\":{\"391\":2}}],[\"successful\",{\"1\":{\"326\":1}}],[\"sure\",{\"1\":{\"386\":1}}],[\"subject\",{\"1\":{\"415\":1,\"420\":5}}],[\"submit\",{\"1\":{\"391\":4}}],[\"sub消息\",{\"0\":{\"356\":1}}],[\"subquery\",{\"1\":{\"223\":1}}],[\"substring\",{\"1\":{\"52\":1}}],[\"su\",{\"1\":{\"170\":1}}],[\"sudo\",{\"1\":{\"101\":3,\"140\":1,\"157\":5,\"179\":1,\"435\":5,\"440\":3,\"441\":4,\"447\":1,\"458\":3,\"462\":1,\"476\":3,\"484\":1,\"493\":1,\"494\":5,\"496\":2,\"498\":3}}],[\"supplier\",{\"1\":{\"396\":1}}],[\"supported\",{\"1\":{\"280\":2}}],[\"supports\",{\"1\":{\"280\":2}}],[\"support\",{\"1\":{\"140\":1,\"476\":1}}],[\"suppresswarnings\",{\"1\":{\"84\":2}}],[\"super\",{\"1\":{\"8\":1,\"391\":4}}],[\"summerwgl\",{\"1\":{\"116\":1}}],[\"sum\",{\"1\":{\"13\":1,\"22\":1,\"55\":1,\"345\":2}}],[\"sbin启动\",{\"1\":{\"157\":1}}],[\"sbin\",{\"1\":{\"157\":4,\"172\":1,\"476\":1}}],[\"sb\",{\"1\":{\"9\":3}}],[\"stdout\",{\"1\":{\"389\":2}}],[\"stdout=直接屏幕输出\",{\"1\":{\"153\":1}}],[\"std\",{\"1\":{\"345\":2}}],[\"store\",{\"1\":{\"320\":1}}],[\"stopping\",{\"1\":{\"430\":1,\"431\":1}}],[\"stopped\",{\"1\":{\"430\":1,\"431\":1,\"461\":1}}],[\"stop\",{\"0\":{\"296\":1,\"410\":1},\"1\":{\"77\":1,\"93\":1,\"95\":1,\"140\":1,\"145\":3,\"146\":4,\"157\":1,\"177\":2,\"293\":1,\"296\":1,\"407\":1,\"410\":1,\"430\":2,\"431\":5,\"432\":1,\"435\":1,\"445\":1,\"458\":1,\"479\":1,\"494\":1,\"499\":1}}],[\"style>\",{\"1\":{\"215\":1}}],[\"style\",{\"1\":{\"188\":1,\"192\":2}}],[\"style=\",{\"1\":{\"141\":6,\"370\":2}}],[\"steps\",{\"1\":{\"440\":4,\"441\":6}}],[\"stevenkztool\",{\"1\":{\"396\":1}}],[\"steven\",{\"1\":{\"391\":17}}],[\"stefanovic于1996年创建的\",{\"1\":{\"170\":1}}],[\"stereotype\",{\"1\":{\"84\":2,\"421\":1}}],[\"studio\",{\"0\":{\"215\":1}}],[\"student\",{\"1\":{\"39\":1,\"49\":13,\"56\":5,\"57\":3}}],[\"stub\",{\"1\":{\"157\":1}}],[\"stu\",{\"1\":{\"61\":3,\"62\":3,\"63\":7}}],[\"stage\",{\"1\":{\"440\":4,\"441\":7,\"454\":2}}],[\"stages\",{\"1\":{\"440\":1,\"441\":1}}],[\"stable\",{\"1\":{\"382\":1}}],[\"stack以及vector等\",{\"1\":{\"240\":1}}],[\"standard\",{\"1\":{\"28\":1}}],[\"standalone\",{\"1\":{\"28\":1,\"483\":1,\"488\":1}}],[\"startup\",{\"1\":{\"483\":2,\"484\":1,\"488\":2}}],[\"starting\",{\"1\":{\"430\":2,\"431\":2}}],[\"starttls\",{\"1\":{\"84\":1}}],[\"starter\",{\"1\":{\"28\":1,\"84\":1,\"113\":1,\"323\":1,\"352\":1,\"383\":2,\"386\":1,\"491\":1}}],[\"starter<\",{\"1\":{\"28\":1}}],[\"start\",{\"1\":{\"28\":2,\"74\":2,\"76\":1,\"93\":1,\"95\":1,\"140\":2,\"145\":1,\"146\":8,\"157\":1,\"177\":2,\"391\":2,\"430\":2,\"431\":6,\"432\":1,\"435\":1,\"461\":1,\"474\":1,\"475\":2,\"479\":1,\"484\":1,\"488\":2,\"489\":1,\"494\":2}}],[\"stats\",{\"1\":{\"345\":5}}],[\"state\",{\"1\":{\"213\":1,\"214\":1,\"476\":1}}],[\"statement\",{\"1\":{\"21\":3,\"145\":2,\"389\":1}}],[\"status\",{\"1\":{\"93\":1,\"144\":1,\"157\":2,\"177\":1,\"435\":1,\"463\":1,\"475\":1,\"478\":1,\"479\":2,\"484\":1,\"488\":1,\"494\":1}}],[\"statfilter\",{\"1\":{\"21\":1}}],[\"stat\",{\"1\":{\"21\":6}}],[\"stat必须\",{\"1\":{\"21\":1}}],[\"staticaly\",{\"1\":{\"392\":1}}],[\"statics\",{\"1\":{\"164\":1}}],[\"static\",{\"1\":{\"9\":1,\"83\":4,\"84\":10,\"237\":2,\"239\":1,\"266\":1,\"283\":3,\"353\":2,\"360\":4,\"387\":2,\"390\":1,\"391\":5,\"396\":11,\"397\":3,\"420\":1,\"422\":4,\"425\":1}}],[\"stream\",{\"1\":{\"157\":1,\"165\":1,\"263\":1,\"344\":1}}],[\"str\",{\"1\":{\"52\":5,\"370\":1,\"371\":1}}],[\"str2\",{\"1\":{\"52\":1}}],[\"str1\",{\"1\":{\"52\":1}}],[\"structured\",{\"1\":{\"30\":1}}],[\"strategy\",{\"1\":{\"21\":1,\"28\":2}}],[\"stringutils\",{\"1\":{\"390\":1,\"396\":2,\"425\":2}}],[\"string>\",{\"1\":{\"385\":1,\"391\":2}}],[\"strings\",{\"1\":{\"381\":4}}],[\"stringbuffer对方法加了同步锁或者对调用的方法加了同步锁\",{\"1\":{\"259\":1}}],[\"stringbuilder是非线程安全的\",{\"1\":{\"259\":1}}],[\"stringbuilder与stringbuffer都继承自abstractstringbuilder类\",{\"1\":{\"259\":1}}],[\"stringbuilder\",{\"1\":{\"9\":2}}],[\"string\",{\"1\":{\"9\":2,\"10\":1,\"83\":8,\"84\":10,\"133\":4,\"225\":2,\"317\":1,\"323\":8,\"329\":1,\"337\":2,\"352\":1,\"353\":2,\"354\":1,\"355\":2,\"360\":9,\"361\":2,\"362\":1,\"378\":2,\"379\":1,\"380\":1,\"381\":2,\"384\":6,\"385\":2,\"387\":3,\"390\":4,\"391\":2,\"396\":7,\"425\":8}}],[\"semanage\",{\"1\":{\"476\":1}}],[\"sealert\",{\"1\":{\"476\":1}}],[\"searchscrollrequest\",{\"1\":{\"337\":2}}],[\"searchsourcebuilder\",{\"1\":{\"327\":2,\"329\":2,\"337\":2,\"339\":2,\"340\":2,\"341\":2,\"343\":2,\"344\":2,\"345\":2,\"347\":2,\"348\":2}}],[\"searchhit\",{\"1\":{\"327\":2,\"329\":2,\"337\":4,\"339\":2,\"340\":1,\"341\":3,\"347\":1,\"348\":1}}],[\"searchresponse\",{\"1\":{\"327\":1,\"329\":1,\"337\":2,\"339\":1,\"340\":1,\"341\":1,\"343\":1,\"344\":1,\"345\":1,\"347\":1,\"348\":1}}],[\"searchrequest\",{\"1\":{\"327\":2,\"329\":2,\"337\":2,\"339\":5,\"340\":3,\"341\":2,\"343\":3,\"344\":3,\"345\":3,\"347\":3,\"348\":3}}],[\"search\",{\"1\":{\"95\":1,\"310\":1,\"325\":1,\"327\":1,\"329\":1,\"337\":1,\"339\":1,\"340\":1,\"341\":1,\"342\":1,\"343\":2,\"344\":4,\"345\":2,\"346\":1,\"347\":2,\"348\":2,\"349\":1}}],[\"sed\",{\"1\":{\"450\":1,\"454\":2}}],[\"seems\",{\"1\":{\"386\":1}}],[\"sentinel\",{\"1\":{\"497\":15,\"498\":4,\"499\":1}}],[\"sent\",{\"1\":{\"157\":1,\"165\":1}}],[\"sendsigkill=no\",{\"1\":{\"461\":1}}],[\"sendsimplemail\",{\"1\":{\"84\":1}}],[\"sendfile\",{\"1\":{\"157\":1,\"165\":1}}],[\"send\",{\"1\":{\"84\":1,\"165\":1}}],[\"seconds\",{\"1\":{\"283\":1,\"300\":2,\"397\":1,\"414\":2}}],[\"secretkey\",{\"1\":{\"133\":3}}],[\"secret\",{\"1\":{\"128\":3}}],[\"security<\",{\"1\":{\"491\":1}}],[\"security\",{\"1\":{\"108\":2,\"314\":3,\"458\":2}}],[\"secure\",{\"1\":{\"3\":1,\"133\":3}}],[\"serializable\",{\"1\":{\"76\":1}}],[\"serve\",{\"1\":{\"200\":1}}],[\"servertimezone=utc\",{\"1\":{\"487\":1}}],[\"servertimezone=asia\",{\"1\":{\"21\":1,\"28\":1}}],[\"server=utf8\",{\"1\":{\"476\":1}}],[\"server=utf8mb4\",{\"1\":{\"139\":1}}],[\"serverhttpresponse\",{\"1\":{\"380\":1,\"381\":1}}],[\"serverhttprequest\",{\"1\":{\"380\":1,\"381\":1}}],[\"serverwebexchange\",{\"1\":{\"380\":1,\"381\":1}}],[\"servers\",{\"1\":{\"106\":1}}],[\"server\",{\"1\":{\"21\":1,\"128\":1,\"140\":2,\"143\":1,\"157\":1,\"161\":4,\"162\":5,\"163\":5,\"164\":4,\"165\":7,\"389\":1,\"440\":1,\"441\":1,\"450\":7,\"459\":1,\"461\":1,\"464\":14,\"465\":1,\"472\":1,\"473\":1,\"478\":1,\"479\":1,\"482\":1,\"490\":4,\"491\":6,\"493\":2,\"494\":4,\"495\":2,\"498\":2}}],[\"service以下内容\",{\"1\":{\"494\":2}}],[\"service配置\",{\"0\":{\"461\":1}}],[\"service=\",{\"1\":{\"418\":1}}],[\"service\",{\"1\":{\"109\":1,\"140\":2,\"157\":2,\"177\":6,\"280\":1,\"299\":1,\"385\":1,\"391\":10,\"413\":1,\"418\":7,\"431\":8,\"432\":7,\"439\":4,\"445\":1,\"450\":2,\"458\":1,\"461\":5,\"462\":1,\"476\":3,\"483\":3,\"488\":1,\"491\":1,\"494\":4,\"498\":4}}],[\"services\",{\"1\":{\"104\":1,\"105\":1,\"309\":1}}],[\"servletexception\",{\"1\":{\"10\":1}}],[\"servletrequest\",{\"1\":{\"9\":1,\"10\":1}}],[\"servletinputstream\",{\"1\":{\"8\":2}}],[\"servlet容器会从请求中读取输入流的数据\",{\"1\":{\"6\":1}}],[\"servlet中\",{\"1\":{\"6\":1}}],[\"servletfileupload\",{\"1\":{\"3\":2}}],[\"servlet\",{\"1\":{\"3\":1,\"21\":1,\"280\":1,\"389\":1}}],[\"servletcontext\",{\"1\":{\"3\":3}}],[\"sex==2\",{\"1\":{\"190\":1}}],[\"sex==1\",{\"1\":{\"190\":1,\"370\":1}}],[\"sex==1时\",{\"1\":{\"190\":1}}],[\"sex\",{\"1\":{\"56\":10,\"78\":2,\"190\":1,\"371\":1,\"385\":1}}],[\"selinux\",{\"1\":{\"476\":2}}],[\"self\",{\"1\":{\"28\":1}}],[\"select4\",{\"1\":{\"216\":1}}],[\"select>\",{\"1\":{\"189\":1,\"191\":1}}],[\"select⼦句中避免使⽤\",{\"1\":{\"26\":1}}],[\"selectb\",{\"1\":{\"22\":1}}],[\"select\",{\"1\":{\"12\":1,\"13\":1,\"14\":3,\"15\":1,\"16\":3,\"17\":2,\"18\":2,\"19\":9,\"21\":1,\"22\":2,\"30\":1,\"37\":1,\"47\":1,\"48\":3,\"49\":13,\"51\":1,\"52\":1,\"56\":5,\"57\":3,\"58\":1,\"59\":8,\"67\":1,\"68\":2,\"70\":3,\"71\":2,\"72\":3,\"74\":2,\"76\":1,\"77\":1,\"79\":1,\"189\":1,\"195\":1,\"223\":3}}],[\"session的最大个数\",{\"1\":{\"21\":1}}],[\"session\",{\"1\":{\"21\":2,\"464\":2}}],[\"set=utf8\",{\"1\":{\"476\":1}}],[\"setroubleshoot\",{\"1\":{\"476\":1}}],[\"setrolename\",{\"1\":{\"425\":1}}],[\"setrequestconfigcallback\",{\"1\":{\"323\":1}}],[\"setreadlistener\",{\"1\":{\"8\":1}}],[\"setrepository\",{\"1\":{\"3\":1}}],[\"setifabsent\",{\"1\":{\"396\":1}}],[\"setvalue\",{\"1\":{\"396\":2}}],[\"setvariable\",{\"1\":{\"387\":1}}],[\"setkeepaliveseconds\",{\"1\":{\"391\":1}}],[\"setqueuecapacity\",{\"1\":{\"391\":1}}],[\"setquery\",{\"1\":{\"338\":1}}],[\"setmaxpoolsize\",{\"1\":{\"391\":1}}],[\"setmaxconnperroute\",{\"1\":{\"323\":1}}],[\"setmaxconntotal\",{\"1\":{\"323\":1}}],[\"setpassword\",{\"1\":{\"353\":1}}],[\"setport\",{\"1\":{\"353\":1}}],[\"setuser\",{\"1\":{\"396\":1}}],[\"setusername\",{\"1\":{\"353\":1}}],[\"setup\",{\"1\":{\"108\":1,\"314\":1}}],[\"sethost\",{\"1\":{\"353\":1}}],[\"sethttpclientconfigcallback\",{\"1\":{\"323\":1}}],[\"setdefaultcredentialsprovider\",{\"1\":{\"323\":1}}],[\"setcallback\",{\"1\":{\"421\":1}}],[\"setchanneltransacted\",{\"1\":{\"361\":1}}],[\"setcorepoolsize\",{\"1\":{\"391\":1}}],[\"setcorners\",{\"1\":{\"348\":1}}],[\"setcontextmap\",{\"1\":{\"391\":2}}],[\"setcontenttype\",{\"1\":{\"378\":1,\"379\":1}}],[\"setconnectionrequesttimeout\",{\"1\":{\"323\":1}}],[\"setconnecttimeout\",{\"1\":{\"323\":1}}],[\"setcredentials\",{\"1\":{\"323\":1}}],[\"setnameformat\",{\"1\":{\"300\":2,\"414\":2}}],[\"set接口的实现类主要有\",{\"1\":{\"240\":1}}],[\"set接口和list接口\",{\"1\":{\"240\":1}}],[\"setthreadnameprefix\",{\"1\":{\"391\":1}}],[\"settraceidifabsent\",{\"1\":{\"391\":3}}],[\"settings\",{\"1\":{\"319\":1,\"320\":1,\"346\":1,\"447\":1}}],[\"settest\",{\"1\":{\"214\":1}}],[\"settext\",{\"1\":{\"84\":1}}],[\"setto\",{\"1\":{\"84\":1}}],[\"setfrom\",{\"1\":{\"84\":1}}],[\"setsuperclass\",{\"1\":{\"421\":1}}],[\"setsubject\",{\"1\":{\"84\":1}}],[\"setsockettimeout\",{\"1\":{\"323\":1}}],[\"setscheduler\",{\"1\":{\"300\":1,\"414\":1}}],[\"setsentdate\",{\"1\":{\"84\":1}}],[\"setsizemax\",{\"1\":{\"3\":1}}],[\"set\",{\"1\":{\"13\":1,\"16\":2,\"18\":3,\"21\":2,\"33\":2,\"35\":1,\"41\":1,\"46\":1,\"74\":4,\"76\":4,\"77\":5,\"83\":3,\"121\":1,\"139\":1,\"141\":1,\"145\":1,\"165\":5,\"198\":3,\"225\":2,\"240\":1,\"351\":1,\"396\":1,\"458\":4,\"461\":1,\"464\":10,\"474\":2,\"476\":1,\"481\":1,\"490\":3}}],[\"pem文件的路径\",{\"1\":{\"464\":2}}],[\"pem\",{\"1\":{\"464\":2}}],[\"perl\",{\"1\":{\"473\":1}}],[\"persons\",{\"1\":{\"370\":1,\"371\":1}}],[\"performance\",{\"1\":{\"157\":1}}],[\"permanent查询端口号80\",{\"1\":{\"157\":1}}],[\"permanent\",{\"1\":{\"116\":1,\"141\":1,\"177\":1,\"179\":2,\"445\":1,\"458\":2,\"475\":1,\"484\":1,\"495\":4,\"497\":2}}],[\"platform=mysql\",{\"1\":{\"487\":1}}],[\"pl\",{\"1\":{\"450\":1}}],[\"plugin\",{\"1\":{\"110\":4,\"111\":1,\"141\":2,\"311\":4}}],[\"plugins\",{\"1\":{\"108\":2,\"110\":2,\"309\":3,\"449\":1}}],[\"pkg\",{\"1\":{\"439\":1,\"440\":1}}],[\"pt\",{\"1\":{\"376\":2}}],[\"ptitle\",{\"1\":{\"14\":2}}],[\"p=new\",{\"1\":{\"371\":1}}],[\"p2ptwo\",{\"1\":{\"354\":1}}],[\"p2p\",{\"1\":{\"352\":6}}],[\"p2p消息\",{\"0\":{\"352\":1}}],[\"pwd\",{\"0\":{\"314\":1,\"315\":1}}],[\"pwd=tnnd\",{\"1\":{\"187\":1}}],[\"px\",{\"1\":{\"192\":2}}],[\"php\",{\"1\":{\"156\":1}}],[\"phone\",{\"1\":{\"62\":3,\"379\":1,\"380\":1}}],[\"p3307\",{\"1\":{\"146\":4}}],[\"p999999\",{\"1\":{\"145\":1,\"146\":1}}],[\"python\",{\"1\":{\"146\":5}}],[\"pythonsdk\",{\"1\":{\"125\":1}}],[\"py\",{\"1\":{\"125\":1,\"146\":4}}],[\"picgo\",{\"0\":{\"392\":1},\"1\":{\"392\":3}}],[\"pip\",{\"1\":{\"146\":2}}],[\"pipeline\",{\"1\":{\"112\":1,\"440\":1,\"441\":1}}],[\"pidfile\",{\"1\":{\"495\":1}}],[\"pid=$\",{\"1\":{\"165\":1,\"430\":1,\"431\":1,\"450\":1}}],[\"pid\",{\"1\":{\"14\":2,\"15\":3,\"18\":1,\"116\":1,\"118\":2,\"139\":2,\"141\":4,\"157\":3,\"165\":2,\"476\":2,\"495\":2}}],[\"ps\",{\"1\":{\"95\":3,\"104\":1,\"116\":1,\"430\":1,\"431\":1}}],[\"pscache对支持游标的数据库性能提升巨大\",{\"1\":{\"21\":1}}],[\"pub文件\",{\"1\":{\"435\":1}}],[\"publisher\",{\"1\":{\"415\":1}}],[\"public<\",{\"1\":{\"447\":1}}],[\"public\",{\"1\":{\"8\":8,\"9\":2,\"10\":1,\"83\":4,\"84\":12,\"133\":2,\"283\":3,\"300\":5,\"323\":2,\"327\":1,\"329\":1,\"337\":1,\"339\":1,\"343\":1,\"344\":1,\"345\":1,\"347\":1,\"348\":1,\"352\":4,\"353\":2,\"354\":2,\"355\":5,\"357\":7,\"360\":13,\"361\":2,\"362\":2,\"371\":1,\"376\":3,\"378\":5,\"379\":2,\"380\":2,\"381\":2,\"385\":5,\"386\":1,\"387\":3,\"390\":8,\"391\":12,\"396\":12,\"397\":3,\"414\":5,\"418\":6,\"420\":5,\"421\":4,\"422\":4,\"425\":14,\"439\":2}}],[\"pub\",{\"0\":{\"356\":1},\"1\":{\"435\":2}}],[\"push\",{\"1\":{\"210\":3,\"440\":1}}],[\"pull\",{\"1\":{\"95\":1,\"108\":1,\"109\":1,\"127\":1}}],[\"pure\",{\"1\":{\"83\":1}}],[\"putifabsent\",{\"1\":{\"396\":1}}],[\"put\",{\"1\":{\"83\":5,\"112\":2,\"286\":1,\"319\":2,\"320\":1,\"321\":3,\"346\":4,\"360\":3,\"371\":7,\"385\":1,\"387\":2,\"390\":1,\"391\":1,\"396\":1,\"400\":1}}],[\"pojo\",{\"1\":{\"425\":2}}],[\"pom\",{\"1\":{\"386\":1}}],[\"polygon\",{\"0\":{\"349\":1},\"1\":{\"346\":1,\"349\":1}}],[\"policy\",{\"1\":{\"230\":1,\"464\":2}}],[\"pointcut\",{\"1\":{\"376\":1}}],[\"points\",{\"1\":{\"349\":1}}],[\"point类型的索引\",{\"1\":{\"346\":1}}],[\"point\",{\"1\":{\"317\":1,\"346\":2,\"347\":1,\"376\":3}}],[\"pos=154\",{\"1\":{\"479\":1}}],[\"position\",{\"1\":{\"145\":1}}],[\"position=4335\",{\"1\":{\"146\":1}}],[\"position=3270\",{\"1\":{\"146\":1}}],[\"position=1305\",{\"1\":{\"145\":1}}],[\"position=299\",{\"1\":{\"145\":1}}],[\"postmapping\",{\"1\":{\"385\":1,\"390\":1}}],[\"posttags\",{\"1\":{\"341\":1}}],[\"post\",{\"1\":{\"312\":3,\"314\":1,\"325\":1,\"343\":1,\"344\":3,\"345\":1,\"347\":1,\"348\":1,\"349\":1,\"464\":1}}],[\"posthandle\",{\"1\":{\"254\":1,\"256\":1}}],[\"postconstruct\",{\"1\":{\"84\":3}}],[\"postprocessbeanfactory\",{\"1\":{\"84\":1}}],[\"pos\",{\"1\":{\"52\":2,\"479\":1}}],[\"possible\",{\"1\":{\"19\":2,\"22\":2,\"223\":1,\"386\":1}}],[\"poolsingle\",{\"1\":{\"283\":1,\"397\":1}}],[\"poolsingle=new\",{\"1\":{\"283\":1,\"397\":1}}],[\"poolpreparedstatements自动触发修改为true\",{\"1\":{\"21\":1}}],[\"poolpreparedstatements\",{\"1\":{\"21\":1}}],[\"pool\",{\"1\":{\"21\":1,\"28\":1}}],[\"port=26340\",{\"1\":{\"497\":1}}],[\"port=26379\",{\"1\":{\"497\":1}}],[\"port=16340\",{\"1\":{\"495\":1}}],[\"port=16379\",{\"1\":{\"495\":1}}],[\"port=6340\",{\"1\":{\"495\":1}}],[\"port=6379\",{\"1\":{\"495\":1}}],[\"port=9001\",{\"1\":{\"458\":1}}],[\"port=9000\",{\"1\":{\"458\":1}}],[\"port=9205\",{\"1\":{\"450\":1}}],[\"port=\",{\"1\":{\"384\":1}}],[\"port=3307\",{\"1\":{\"475\":1,\"479\":1}}],[\"port=3306\",{\"1\":{\"139\":1,\"141\":2,\"179\":2}}],[\"port=3128\",{\"1\":{\"177\":1}}],[\"port=$port\",{\"1\":{\"165\":1,\"450\":2}}],[\"port=8848\",{\"1\":{\"484\":1}}],[\"port=8892\",{\"1\":{\"165\":1}}],[\"port=8080\",{\"1\":{\"445\":1}}],[\"port=80\",{\"1\":{\"157\":2}}],[\"port=端口号\",{\"1\":{\"116\":1}}],[\"ports改为http\",{\"1\":{\"175\":1}}],[\"ports\",{\"1\":{\"104\":3,\"105\":2,\"175\":1,\"309\":2,\"475\":1}}],[\"port\",{\"1\":{\"21\":1,\"84\":2,\"133\":3,\"175\":2,\"323\":2,\"352\":1,\"389\":1,\"440\":2,\"450\":1,\"476\":5,\"479\":1,\"485\":1,\"495\":1,\"497\":1}}],[\"png\",{\"1\":{\"16\":1,\"21\":1,\"138\":1,\"151\":2,\"158\":1,\"221\":1,\"222\":1,\"225\":1,\"278\":1,\"305\":1,\"309\":1,\"319\":1,\"359\":1,\"360\":1,\"415\":1,\"425\":1,\"435\":2,\"450\":1,\"451\":1,\"462\":1,\"463\":1,\"464\":1,\"487\":1,\"488\":1,\"489\":1,\"494\":1,\"496\":1,\"497\":1}}],[\"pcdocument\",{\"1\":{\"341\":1}}],[\"pcre\",{\"1\":{\"157\":1}}],[\"pcview\",{\"1\":{\"14\":3}}],[\"pcallall\",{\"1\":{\"19\":1}}],[\"pcall表的新增\",{\"1\":{\"15\":1}}],[\"pcall\",{\"1\":{\"14\":2,\"15\":4,\"18\":2,\"19\":17}}],[\"pc\",{\"1\":{\"14\":2,\"15\":4}}],[\"p\",{\"1\":{\"14\":8,\"18\":5,\"95\":3,\"97\":3,\"98\":1,\"104\":3,\"108\":6,\"109\":1,\"120\":2,\"122\":2,\"128\":3,\"138\":3,\"141\":1,\"146\":3,\"279\":1,\"309\":3,\"351\":2,\"371\":3,\"389\":2,\"394\":1,\"439\":1,\"440\":3,\"441\":3,\"450\":1,\"458\":1,\"466\":1,\"474\":1,\"476\":1,\"493\":3,\"495\":2,\"497\":1,\"499\":3}}],[\"past\",{\"1\":{\"384\":1}}],[\"pass\",{\"1\":{\"159\":2,\"161\":1,\"162\":1,\"163\":1,\"164\":1,\"165\":1,\"464\":2,\"490\":1,\"497\":1}}],[\"password>\",{\"1\":{\"491\":1}}],[\"password=\",{\"1\":{\"479\":1}}],[\"password=minioadmin\",{\"1\":{\"460\":1}}],[\"password=123456\",{\"1\":{\"98\":1,\"122\":1}}],[\"passwordvariable\",{\"1\":{\"440\":1}}],[\"passwords\",{\"1\":{\"108\":1,\"173\":1,\"174\":1,\"175\":1,\"314\":1}}],[\"password\",{\"1\":{\"21\":2,\"28\":1,\"77\":10,\"78\":2,\"84\":1,\"105\":2,\"106\":1,\"109\":1,\"113\":2,\"141\":1,\"194\":4,\"314\":2,\"315\":1,\"323\":4,\"351\":1,\"352\":1,\"440\":2,\"467\":1,\"474\":3,\"479\":1,\"487\":1,\"491\":4}}],[\"pan\",{\"1\":{\"187\":1}}],[\"page\",{\"1\":{\"162\":1,\"163\":1,\"165\":1}}],[\"page=1\",{\"1\":{\"13\":1}}],[\"package\",{\"1\":{\"84\":1,\"387\":1,\"396\":1,\"425\":1,\"450\":1}}],[\"pattern>\",{\"1\":{\"389\":5}}],[\"patternlayoutencoder\",{\"1\":{\"389\":2}}],[\"pattern\",{\"1\":{\"21\":2,\"384\":1,\"389\":1}}],[\"patterns\",{\"1\":{\"21\":1}}],[\"path=\",{\"1\":{\"481\":1}}],[\"path=$path\",{\"1\":{\"141\":1,\"447\":1,\"481\":1}}],[\"pathvariable\",{\"1\":{\"360\":1}}],[\"path自动配置境变量\",{\"1\":{\"197\":1}}],[\"path\",{\"1\":{\"21\":1,\"83\":8,\"181\":1,\"210\":1,\"389\":1,\"440\":1,\"481\":2}}],[\"pathmatch\",{\"1\":{\"21\":1}}],[\"part\",{\"1\":{\"462\":1}}],[\"partition\",{\"1\":{\"279\":1}}],[\"partial\",{\"1\":{\"145\":1}}],[\"parseint\",{\"1\":{\"323\":1}}],[\"parserequest\",{\"1\":{\"3\":1}}],[\"parallel\",{\"1\":{\"497\":1}}],[\"parallelstream\",{\"1\":{\"263\":1}}],[\"paraminterceptor\",{\"1\":{\"378\":2}}],[\"paramaspect\",{\"1\":{\"376\":1}}],[\"params=new\",{\"1\":{\"371\":1}}],[\"params取参数\",{\"1\":{\"211\":1}}],[\"params\",{\"1\":{\"210\":1,\"211\":1,\"360\":5,\"371\":8,\"378\":3}}],[\"param\",{\"1\":{\"9\":1,\"83\":1,\"84\":11,\"175\":4,\"390\":3,\"391\":5,\"396\":2}}],[\"preventing\",{\"1\":{\"476\":1}}],[\"prefer\",{\"1\":{\"464\":2}}],[\"prefixlength\",{\"1\":{\"333\":1}}],[\"prefixlength指定前面几个字符是不允许出现错误的\",{\"1\":{\"333\":1}}],[\"prefixquery\",{\"1\":{\"332\":1}}],[\"prefix查询\",{\"0\":{\"332\":1}}],[\"prefix\",{\"1\":{\"133\":1,\"198\":1,\"215\":2}}],[\"preparedstatement\",{\"1\":{\"389\":1}}],[\"pretags\",{\"1\":{\"341\":1}}],[\"prehandle方法\",{\"1\":{\"280\":1}}],[\"prehandle\",{\"1\":{\"254\":1,\"256\":1,\"257\":1,\"378\":1,\"379\":1,\"390\":1}}],[\"project\",{\"1\":{\"386\":4,\"440\":1}}],[\"provided\",{\"1\":{\"386\":1}}],[\"province\",{\"1\":{\"325\":1,\"327\":1,\"328\":5,\"329\":1,\"330\":1,\"331\":1,\"332\":1,\"339\":2,\"343\":4}}],[\"proxifier\",{\"1\":{\"177\":1}}],[\"proxy=\",{\"1\":{\"153\":1}}],[\"proxy\",{\"1\":{\"28\":1,\"159\":2,\"161\":1,\"162\":1,\"163\":1,\"164\":1,\"165\":15,\"175\":2,\"178\":1,\"420\":3,\"421\":3,\"464\":14,\"490\":4}}],[\"program\",{\"1\":{\"175\":1}}],[\"profile>\",{\"1\":{\"491\":1}}],[\"profile\",{\"1\":{\"141\":2,\"430\":1,\"431\":1,\"447\":2,\"450\":1,\"481\":2}}],[\"profiles>\",{\"1\":{\"491\":1}}],[\"profiles\",{\"1\":{\"21\":1,\"165\":1,\"440\":1,\"450\":2,\"491\":7}}],[\"proceed\",{\"1\":{\"376\":1}}],[\"proceedingjoinpoint\",{\"1\":{\"376\":1}}],[\"process\",{\"1\":{\"383\":1,\"461\":3}}],[\"processes他的数值越大\",{\"1\":{\"157\":1}}],[\"processes\",{\"1\":{\"157\":1,\"164\":1,\"165\":1}}],[\"processors\",{\"1\":{\"112\":1}}],[\"procedure\",{\"1\":{\"18\":7}}],[\"protectproc=invisible\",{\"1\":{\"461\":1}}],[\"protected\",{\"1\":{\"10\":1,\"425\":1,\"497\":1}}],[\"protocols\",{\"1\":{\"464\":2}}],[\"protocol=\",{\"1\":{\"384\":1}}],[\"protocol\",{\"1\":{\"84\":1,\"440\":1}}],[\"properly\",{\"1\":{\"386\":2}}],[\"properties>\",{\"1\":{\"491\":1}}],[\"properties\",{\"1\":{\"84\":1,\"112\":2,\"320\":1,\"346\":1,\"487\":1,\"489\":1}}],[\"property\",{\"1\":{\"28\":1}}],[\"propagation\",{\"1\":{\"280\":14}}],[\"props\",{\"1\":{\"28\":1,\"215\":1}}],[\"product\",{\"1\":{\"22\":1,\"146\":1}}],[\"priorityblockingqueue\",{\"1\":{\"286\":1,\"400\":1}}],[\"priority\",{\"1\":{\"233\":1}}],[\"privileges\",{\"1\":{\"141\":2,\"474\":1}}],[\"privileged=true\",{\"1\":{\"108\":1}}],[\"privatekeyfilepath\",{\"1\":{\"440\":2,\"441\":2}}],[\"private属性\",{\"1\":{\"258\":1}}],[\"privatetmp=true\",{\"1\":{\"157\":1,\"483\":1,\"494\":2,\"498\":2}}],[\"private\",{\"1\":{\"8\":1,\"84\":3,\"133\":8,\"283\":3,\"323\":10,\"352\":2,\"353\":1,\"354\":1,\"355\":2,\"360\":3,\"362\":1,\"381\":1,\"384\":1,\"385\":5,\"386\":2,\"390\":3,\"391\":1,\"396\":2,\"397\":3,\"418\":2,\"420\":1,\"421\":2,\"422\":4,\"425\":3}}],[\"print\",{\"1\":{\"165\":4,\"215\":1,\"430\":1,\"431\":1,\"450\":4}}],[\"println\",{\"1\":{\"83\":6,\"261\":1,\"300\":1,\"327\":1,\"329\":1,\"337\":5,\"338\":1,\"339\":1,\"340\":1,\"341\":3,\"343\":1,\"344\":4,\"345\":1,\"347\":1,\"348\":1,\"361\":1,\"378\":2,\"379\":1,\"387\":1,\"414\":1,\"418\":2,\"420\":1,\"421\":1,\"425\":5,\"491\":1}}],[\"printstacktrace\",{\"1\":{\"9\":2,\"83\":2,\"385\":1,\"418\":1}}],[\"price\",{\"1\":{\"78\":2}}],[\"primary的实现类\",{\"1\":{\"418\":1}}],[\"primary放到接口的某个实现类上边\",{\"1\":{\"418\":1}}],[\"primary注解\",{\"1\":{\"418\":1}}],[\"primarykey\",{\"1\":{\"79\":1}}],[\"primary\",{\"1\":{\"60\":1,\"63\":5,\"74\":1,\"78\":4,\"223\":1,\"418\":1}}],[\"您不是管理员\",{\"1\":{\"425\":1}}],[\"您需要根据自己的需求继承它并实现自己的定制逻辑\",{\"1\":{\"8\":1}}],[\"您可以在不修改原始请求对象的情况下\",{\"1\":{\"8\":1}}],[\"需jdk11进行运行\",{\"1\":{\"443\":1}}],[\"需要在从库添加这个参数\",{\"1\":{\"496\":1}}],[\"需要在本地完成拼接后\",{\"1\":{\"440\":1}}],[\"需要清空该目录\",{\"1\":{\"472\":1}}],[\"需要为每一个被代理的对象都创建一个代理类\",{\"1\":{\"418\":1}}],[\"需要为队列多加点消费者代码实现\",{\"1\":{\"355\":1}}],[\"需要手动引入java\",{\"1\":{\"391\":1}}],[\"需要携带请求消息头\",{\"1\":{\"381\":1}}],[\"需要开启事务\",{\"1\":{\"361\":1}}],[\"需要重新设置kibana的配置文件\",{\"1\":{\"314\":1}}],[\"需要使用\",{\"1\":{\"300\":1,\"414\":1,\"422\":1}}],[\"需要通知所有相关的事件监听器来进行处理\",{\"1\":{\"281\":1}}],[\"需要通过di注入方式\",{\"1\":{\"280\":1}}],[\"需要判断同一个锁的id\",{\"1\":{\"279\":1}}],[\"需要持续的复制工作\",{\"1\":{\"271\":1}}],[\"需要将可用内存缩小一半\",{\"1\":{\"271\":1}}],[\"需要再次强调一点的是当某一个拦截器的\",{\"1\":{\"257\":1}}],[\"需要依赖接口\",{\"1\":{\"255\":1}}],[\"需要做一次元素复制操作\",{\"1\":{\"241\":1}}],[\"需要注意的点上述中\",{\"1\":{\"232\":1}}],[\"需要注意的是\",{\"1\":{\"8\":1,\"422\":1}}],[\"需要同步redis中缓存的数据所以存在两种方法\",{\"1\":{\"232\":1}}],[\"需要加载一个持久化文件\",{\"1\":{\"227\":1}}],[\"需要\",{\"1\":{\"223\":1}}],[\"需要安装在服务器上的\",{\"1\":{\"166\":1}}],[\"需要安装在⽤户的电脑上\",{\"1\":{\"166\":1}}],[\"需要执行flush\",{\"1\":{\"144\":1}}],[\"需要先查看容器的⽇志\",{\"1\":{\"95\":1}}],[\"需要先开启事务\",{\"1\":{\"74\":1}}],[\"需要遵循的一些规范\",{\"1\":{\"78\":1}}],[\"需要管理员运行该cmd\",{\"1\":{\"77\":1}}],[\"需要当⼼的where⼦句\",{\"1\":{\"26\":1}}],[\"需要刷题\",{\"1\":{\"13\":1}}],[\"需求\",{\"1\":{\"3\":1}}],[\"如spring\",{\"1\":{\"419\":1}}],[\"如异步执行\",{\"1\":{\"391\":1}}],[\"如何实现\",{\"0\":{\"390\":1}}],[\"如何实现延迟双删所以此时我们需要使用第三种方案\",{\"1\":{\"232\":1}}],[\"如何理解先向上转型在向下转型\",{\"0\":{\"259\":1}}],[\"如何使用\",{\"1\":{\"189\":1,\"190\":1,\"191\":1}}],[\"如计算\",{\"1\":{\"223\":1}}],[\"如下图\",{\"1\":{\"131\":1,\"133\":1,\"164\":1,\"306\":1}}],[\"如下\",{\"1\":{\"129\":1,\"132\":1,\"133\":1}}],[\"如下1\",{\"1\":{\"129\":1}}],[\"如下所示\",{\"1\":{\"102\":1,\"105\":1}}],[\"如今它已积累了⾜够的底蕴\",{\"1\":{\"28\":1}}],[\"如distinct\",{\"1\":{\"26\":1}}],[\"如\",{\"1\":{\"19\":1,\"22\":1,\"78\":6,\"153\":1,\"156\":1,\"223\":2}}],[\"如将主键置于where列表中\",{\"1\":{\"19\":1}}],[\"如getinputstream\",{\"1\":{\"8\":1}}],[\"如果gcc版本太低\",{\"1\":{\"493\":1}}],[\"如果配置错了停止掉重新配置即可\",{\"1\":{\"479\":1}}],[\"如果你的mysql配置文件路径不同\",{\"1\":{\"476\":1}}],[\"如果你执行事务\",{\"1\":{\"226\":1}}],[\"如果之前安装过mysql\",{\"1\":{\"472\":1}}],[\"如果之前安装过\",{\"1\":{\"472\":1}}],[\"如果从库试探二进制文件发现偏移量与从记录的偏移量值不同则表示主库有更新\",{\"1\":{\"469\":1}}],[\"如果发现有更新则发送请求到来获取主库中新的内容2\",{\"1\":{\"469\":1}}],[\"如果源目录中的文件被删除了\",{\"1\":{\"468\":1}}],[\"如果目标目录中不存在源目录中的文件\",{\"1\":{\"468\":1}}],[\"如果实例未被实例化\",{\"1\":{\"422\":1}}],[\"如果想要被代理的类\",{\"1\":{\"420\":1}}],[\"如果关联对象是个集合或者数组\",{\"1\":{\"384\":1}}],[\"如果⼀个队列⽣成了死信\",{\"1\":{\"366\":1}}],[\"如果存在发送的快\",{\"1\":{\"355\":1}}],[\"如果存在代理对象的循环依赖\",{\"1\":{\"280\":1}}],[\"如果我们要在几亿条数据中检索出几条想要的数据\",{\"1\":{\"306\":1}}],[\"如果我们只查询自己用到的列\",{\"1\":{\"223\":1}}],[\"如果使用有界队列\",{\"1\":{\"286\":1,\"400\":1}}],[\"如果任务过多\",{\"1\":{\"285\":1,\"399\":1}}],[\"如果任务超过核心线程得数量\",{\"1\":{\"285\":1,\"399\":1}}],[\"如果当前线程池\",{\"1\":{\"284\":1,\"398\":1}}],[\"如果当前任务超过核心线程数\",{\"1\":{\"284\":1,\"398\":1}}],[\"如果当你去查询一个已经过了生存时间的key时\",{\"1\":{\"229\":1}}],[\"如果中间存在类的代理对象的循环依赖\",{\"1\":{\"280\":1}}],[\"如果获取不到锁\",{\"1\":{\"279\":1}}],[\"如果session会话连接关闭的话\",{\"1\":{\"279\":1}}],[\"如果slave还没同步完成\",{\"1\":{\"279\":1}}],[\"如果加锁失败的情况下\",{\"1\":{\"278\":1}}],[\"如果宕机了自然就在有效期失效后自动解锁\",{\"1\":{\"278\":1}}],[\"如果该临时节点被删除的话\",{\"1\":{\"279\":1}}],[\"如果该消息已经消费过\",{\"1\":{\"275\":1,\"364\":1}}],[\"如果该字段为null后的替换值\",{\"1\":{\"48\":1}}],[\"如果超过⼀定时间还没接收到这个消息的回调\",{\"1\":{\"273\":1}}],[\"如果超过幸存者区一半的大小\",{\"1\":{\"271\":1}}],[\"如果收到了消息\",{\"1\":{\"273\":1}}],[\"如果说消费端处理消息异常\",{\"1\":{\"275\":1}}],[\"如果说这个消息成功写⼊rabbitmq\",{\"1\":{\"273\":1}}],[\"如果说这个消息没有成功被\",{\"1\":{\"273\":1}}],[\"如果说有user\",{\"1\":{\"223\":1}}],[\"如果这块幸存者1内存不够\",{\"1\":{\"271\":1}}],[\"如果到达15岁就会进入到老年代\",{\"1\":{\"271\":1}}],[\"如果值存在则ispresent\",{\"1\":{\"264\":1}}],[\"如果一个接口中\",{\"1\":{\"262\":1}}],[\"如果一个包含多个步骤的业务操作\",{\"1\":{\"74\":1}}],[\"如果判断相同则会进行覆盖\",{\"1\":{\"259\":1}}],[\"如果只重写了equals方法\",{\"1\":{\"259\":1}}],[\"如果两个对象相等\",{\"1\":{\"244\":1}}],[\"如果父类还未初始化\",{\"1\":{\"239\":1}}],[\"如果延迟时间小于写入redis的时间\",{\"1\":{\"232\":1}}],[\"如果rdb执行了持久化\",{\"1\":{\"227\":1}}],[\"如果先开启了rdb\",{\"1\":{\"227\":1}}],[\"如果同时开启了aof和rdb持久化\",{\"1\":{\"227\":1}}],[\"如果取消了事务\",{\"1\":{\"226\":1}}],[\"如果数据库的统计信息不准确\",{\"1\":{\"223\":1}}],[\"如果索引列的区分度不高\",{\"1\":{\"223\":1}}],[\"如果索引是\",{\"1\":{\"223\":1}}],[\"如果索引是复合索引\",{\"1\":{\"223\":1}}],[\"如果\",{\"1\":{\"223\":1,\"235\":1,\"237\":2,\"273\":1,\"306\":1}}],[\"如果通配符\",{\"1\":{\"223\":1}}],[\"如果通过a属性\",{\"1\":{\"78\":2}}],[\"如果查询是keyword类型就使用term\",{\"1\":{\"325\":1}}],[\"如果查询的列没有完全被索引覆盖\",{\"1\":{\"223\":1}}],[\"如果查询的列超出了索引的范围\",{\"1\":{\"223\":1}}],[\"如果查询条件中的列与复合索引中的列顺序不一致\",{\"1\":{\"223\":1}}],[\"如果查询所有字段\",{\"1\":{\"48\":1}}],[\"如果没有指定某个属性\",{\"1\":{\"321\":1}}],[\"如果没有就创建线程\",{\"1\":{\"285\":1,\"399\":1}}],[\"如果没有消费过\",{\"1\":{\"275\":1,\"364\":1}}],[\"如果没有重写hashcode\",{\"1\":{\"244\":1}}],[\"如果没有索引那么效率会非常低\",{\"1\":{\"223\":2}}],[\"如果没有user\",{\"1\":{\"223\":1}}],[\"如果没有同时出现using\",{\"1\":{\"19\":1,\"22\":1}}],[\"如果要保证完全一致性\",{\"1\":{\"279\":1}}],[\"如果要复制的元素很多\",{\"1\":{\"241\":1}}],[\"如果要找\",{\"1\":{\"220\":1}}],[\"如果要删除所有记录\",{\"1\":{\"45\":1}}],[\"如果页面有keep\",{\"1\":{\"215\":1}}],[\"如果内容包含了html标签\",{\"1\":{\"188\":1}}],[\"如果文件不存在则在同一目录下查找同名的目录\",{\"1\":{\"165\":1}}],[\"如果文件存在则直接返回该文件内容\",{\"1\":{\"165\":1}}],[\"如果执行了事务\",{\"1\":{\"226\":1}}],[\"如果执行提示se\",{\"1\":{\"145\":1}}],[\"如果执⾏超过2秒\",{\"1\":{\"23\":1}}],[\"如果出现kibana\",{\"1\":{\"109\":1}}],[\"如果无法访问\",{\"1\":{\"98\":1}}],[\"如果容器出了问题\",{\"1\":{\"95\":1}}],[\"如果镜像不存在\",{\"1\":{\"95\":1}}],[\"如果用传统虚拟机搭建\",{\"1\":{\"91\":1}}],[\"如果给定的bean名字在bean定义中有别名\",{\"1\":{\"84\":1}}],[\"如果与给定名字相应的bean定义没有被找到\",{\"1\":{\"84\":1}}],[\"如果beanfactory包含一个与所给名称匹配的bean定义\",{\"1\":{\"84\":1}}],[\"如果在安装过程中遇到了缺少依赖的报错\",{\"1\":{\"473\":1}}],[\"如果在一张表中\",{\"1\":{\"78\":1}}],[\"如果在deny列表中\",{\"1\":{\"21\":1}}],[\"如果a是一个属性组\",{\"1\":{\"78\":2}}],[\"如果allow没有配置或者为空\",{\"1\":{\"21\":1}}],[\"如果员工有部门\",{\"1\":{\"70\":2}}],[\"如果某一列是数值类型的\",{\"1\":{\"63\":1}}],[\"如果不感兴趣则进行转发\",{\"1\":{\"425\":1}}],[\"如果不使用\",{\"1\":{\"422\":1}}],[\"如果不使用分布式锁\",{\"1\":{\"277\":1}}],[\"如果不设置内存大小或者设置内存大小为0\",{\"1\":{\"230\":1}}],[\"如果不能访问\",{\"1\":{\"97\":1}}],[\"如果不满足结果\",{\"1\":{\"56\":1}}],[\"如果不满足条件\",{\"1\":{\"56\":1}}],[\"如果不加任何条件\",{\"1\":{\"46\":1}}],[\"如果不加条件\",{\"1\":{\"45\":1}}],[\"如果有异常出\",{\"1\":{\"361\":1}}],[\"如果有使用过\",{\"1\":{\"300\":1,\"414\":1}}],[\"如果有较多的客户端频繁的申请加锁\",{\"1\":{\"279\":1}}],[\"如果有其他客户端修改了我监听的key\",{\"1\":{\"226\":1}}],[\"如果有多个用\",{\"1\":{\"323\":1}}],[\"如果有多个id\",{\"1\":{\"223\":1}}],[\"如果有多个location的正则能匹配的话\",{\"1\":{\"159\":1}}],[\"如果有多个排序条件\",{\"1\":{\"54\":1}}],[\"如果有可能的话\",{\"1\":{\"26\":1}}],[\"如果表名后\",{\"1\":{\"44\":1}}],[\"如果将来不给这个字段赋值\",{\"1\":{\"39\":1}}],[\"如果为空就拦截处理\",{\"1\":{\"378\":1}}],[\"如果为true\",{\"1\":{\"21\":2}}],[\"如果为null\",{\"1\":{\"19\":1,\"22\":1,\"384\":1}}],[\"如果是一个map\",{\"1\":{\"384\":1}}],[\"如果是比较关键的业务\",{\"1\":{\"289\":1,\"403\":1}}],[\"如果是写事物\",{\"1\":{\"217\":1}}],[\"如果是\",{\"1\":{\"21\":1}}],[\"如果是⼦查询\",{\"1\":{\"19\":1}}],[\"如果把书⽐喻成表\",{\"1\":{\"19\":1}}],[\"如果新增了\",{\"1\":{\"15\":1}}],[\"如果需要多次读取输入流的数据\",{\"1\":{\"6\":1}}],[\"如果后续代码再次调用request\",{\"1\":{\"6\":1}}],[\"以确保多线程下的可见性和正确性\",{\"1\":{\"422\":1}}],[\"以下是示例代码\",{\"1\":{\"422\":1}}],[\"以防止其他代码创建实例\",{\"1\":{\"422\":1}}],[\"以上边的示例来说\",{\"1\":{\"418\":1}}],[\"以上统称为全局块\",{\"1\":{\"157\":1}}],[\"以便后续使用\",{\"1\":{\"422\":1}}],[\"以便无线电接收器\",{\"1\":{\"415\":1}}],[\"以便于在spring框架中使用\",{\"1\":{\"391\":1}}],[\"以向java平台增添新的api和服务\",{\"1\":{\"383\":1}}],[\"以多个点\",{\"0\":{\"349\":1},\"1\":{\"346\":1}}],[\"以两个点确定一个矩形\",{\"0\":{\"348\":1},\"1\":{\"346\":1}}],[\"以一定的逻辑组合在一起\",{\"1\":{\"339\":1}}],[\"以达到解耦和灵活性的目的\",{\"1\":{\"281\":1}}],[\"以后\",{\"1\":{\"280\":1}}],[\"以减少搜索时间\",{\"1\":{\"247\":1}}],[\"以减少后续连接操作的数据量\",{\"1\":{\"223\":1}}],[\"以及对已添加的任务进行处理\",{\"1\":{\"294\":1,\"408\":1}}],[\"以及字符串常量\",{\"1\":{\"237\":1}}],[\"以及表数据修改\",{\"1\":{\"143\":1}}],[\"以获取查询中使用的所有列的数据\",{\"1\":{\"223\":1}}],[\"以方便查询具体位置\",{\"1\":{\"145\":1}}],[\"以事件形式记录了对mysql数据库执行更改的所有操作\",{\"1\":{\"143\":1}}],[\"以单节点运行\",{\"1\":{\"108\":1}}],[\"以分号结尾\",{\"1\":{\"30\":1}}],[\"以克服\",{\"1\":{\"10\":1}}],[\"以实现对请求对象的个性化处理和定制化逻辑\",{\"1\":{\"8\":1}}],[\"以提供对输入流的多次读取支持\",{\"1\":{\"6\":1}}],[\"1同步到minio\",{\"1\":{\"468\":1}}],[\"1安装插件\",{\"0\":{\"456\":1}}],[\"1配置\",{\"1\":{\"428\":1}}],[\"1rabbit\",{\"0\":{\"363\":1}}],[\"1rabbitmq事务\",{\"0\":{\"361\":1}}],[\"1fanout类型\",{\"0\":{\"357\":1}}],[\"1原生的发送\",{\"0\":{\"353\":1}}],[\"1l\",{\"1\":{\"337\":2}}],[\"1lomdba\",{\"0\":{\"261\":1}}],[\"1qds\",{\"1\":{\"310\":1}}],[\"1elasticsearch的特性\",{\"0\":{\"303\":1}}],[\"1abortpolicy\",{\"0\":{\"289\":1,\"403\":1}}],[\"1+幸存者区2\",{\"1\":{\"269\":1}}],[\"1nuarmnkunlwhy\",{\"1\":{\"187\":1}}],[\"1nf\",{\"1\":{\"78\":2}}],[\"1查看ip\",{\"0\":{\"179\":1}}],[\"1实名认证\",{\"0\":{\"150\":1}}],[\"1<\",{\"1\":{\"132\":1}}],[\"1进入kibana定义文本抽取管道\",{\"0\":{\"112\":1}}],[\"192\",{\"1\":{\"458\":8,\"467\":2,\"472\":5,\"473\":1,\"476\":4,\"479\":1,\"485\":3,\"486\":3,\"487\":1,\"488\":1,\"490\":3,\"495\":7,\"496\":1,\"497\":1}}],[\"1992542\",{\"1\":{\"367\":1}}],[\"1985\",{\"1\":{\"321\":2}}],[\"19\",{\"1\":{\"26\":1,\"360\":1}}],[\"183\",{\"1\":{\"179\":1}}],[\"18322\",{\"1\":{\"141\":1}}],[\"180000\",{\"1\":{\"497\":1}}],[\"180s\",{\"1\":{\"165\":3}}],[\"18092\",{\"1\":{\"141\":2}}],[\"18112\",{\"1\":{\"118\":1}}],[\"18岁\",{\"1\":{\"49\":1}}],[\"18\",{\"1\":{\"26\":1,\"49\":2,\"141\":2,\"459\":1}}],[\"1851599\",{\"1\":{\"18\":1}}],[\"175\",{\"1\":{\"161\":1}}],[\"17\",{\"0\":{\"346\":1,\"347\":1,\"348\":1,\"349\":1},\"1\":{\"26\":1,\"146\":6,\"376\":1,\"378\":1,\"379\":1,\"380\":1,\"381\":1,\"459\":1}}],[\"168\",{\"1\":{\"352\":1,\"353\":1,\"458\":8,\"467\":2,\"476\":3,\"479\":1,\"485\":3,\"486\":3,\"487\":1,\"490\":3,\"495\":7,\"496\":1,\"497\":1}}],[\"1681310475\",{\"1\":{\"179\":1}}],[\"1681287846955\",{\"1\":{\"170\":1}}],[\"163\",{\"1\":{\"117\":1}}],[\"16\",{\"0\":{\"342\":1,\"343\":1,\"344\":1,\"345\":1},\"1\":{\"26\":1,\"146\":3,\"207\":1,\"441\":2}}],[\"15672\",{\"1\":{\"351\":3}}],[\"157\",{\"1\":{\"344\":1}}],[\"15000\",{\"1\":{\"496\":1}}],[\"150\",{\"1\":{\"156\":1}}],[\"15\",{\"0\":{\"341\":1},\"1\":{\"26\":1,\"207\":1}}],[\"143\",{\"1\":{\"352\":1,\"353\":1}}],[\"14\",{\"0\":{\"340\":1},\"1\":{\"26\":1,\"95\":1,\"184\":2,\"206\":1,\"308\":1,\"359\":1}}],[\"134\",{\"1\":{\"485\":1,\"486\":1,\"490\":1}}],[\"133\",{\"1\":{\"485\":1,\"486\":1,\"490\":1}}],[\"132\",{\"1\":{\"476\":3,\"479\":1,\"485\":1,\"486\":1,\"490\":1}}],[\"131\",{\"1\":{\"458\":2}}],[\"130\",{\"1\":{\"458\":2,\"495\":2,\"497\":1}}],[\"1300\",{\"1\":{\"179\":1}}],[\"13|14|15|18|17\",{\"1\":{\"336\":1}}],[\"139\",{\"1\":{\"161\":1,\"165\":1}}],[\"13\",{\"0\":{\"339\":1},\"1\":{\"26\":1,\"95\":1,\"157\":3,\"184\":2,\"205\":1}}],[\"116\",{\"1\":{\"391\":2}}],[\"112\",{\"1\":{\"391\":2,\"458\":8,\"467\":1,\"495\":6,\"496\":1}}],[\"113\",{\"1\":{\"346\":3,\"347\":2,\"348\":4,\"349\":4}}],[\"114\",{\"1\":{\"161\":1,\"165\":1}}],[\"11\",{\"0\":{\"337\":1},\"1\":{\"22\":1,\"26\":1,\"78\":2,\"95\":1,\"203\":1,\"223\":2,\"391\":8,\"444\":1,\"445\":4,\"450\":1}}],[\"1110\",{\"1\":{\"371\":1}}],[\"1111111111111111\",{\"1\":{\"300\":1,\"414\":1}}],[\"111\",{\"1\":{\"15\":1,\"391\":2,\"425\":1}}],[\"129\",{\"1\":{\"458\":2,\"495\":2}}],[\"128\",{\"1\":{\"458\":2,\"467\":1,\"495\":2,\"496\":1}}],[\"128~127\",{\"1\":{\"317\":1}}],[\"124290304\",{\"1\":{\"394\":1}}],[\"120\",{\"1\":{\"309\":1,\"310\":2,\"323\":1}}],[\"125423926\",{\"1\":{\"116\":1}}],[\"123123\",{\"1\":{\"425\":1}}],[\"1231223\",{\"1\":{\"15\":1}}],[\"12306订单30分钟不付款\",{\"1\":{\"360\":1}}],[\"123456\",{\"1\":{\"120\":1,\"141\":1,\"314\":1,\"474\":1,\"478\":1,\"479\":1,\"495\":4,\"496\":2,\"497\":1,\"499\":2}}],[\"123\",{\"1\":{\"77\":1,\"153\":1,\"161\":1,\"165\":1}}],[\"12\",{\"0\":{\"338\":1},\"1\":{\"26\":1,\"95\":1,\"138\":2,\"204\":1,\"223\":1,\"283\":1,\"345\":1,\"397\":1}}],[\"127\",{\"1\":{\"21\":1,\"344\":1,\"495\":1}}],[\"108580120\",{\"1\":{\"496\":1}}],[\"103\",{\"1\":{\"495\":1}}],[\"102\",{\"1\":{\"467\":1}}],[\"1024\",{\"1\":{\"3\":2,\"157\":1,\"165\":1}}],[\"10g\",{\"1\":{\"464\":2}}],[\"107\",{\"1\":{\"391\":2}}],[\"1073741824\",{\"1\":{\"133\":1}}],[\"10是指上下10行\",{\"1\":{\"388\":1}}],[\"10秒之内没有消费者接收\",{\"1\":{\"360\":1}}],[\"105\",{\"1\":{\"309\":1,\"310\":2,\"323\":1,\"391\":2}}],[\"105561452\",{\"1\":{\"170\":1}}],[\"106\",{\"1\":{\"159\":2,\"162\":2,\"163\":2,\"164\":2}}],[\"10485760\",{\"1\":{\"133\":1}}],[\"1099\",{\"1\":{\"118\":1}}],[\"10\",{\"0\":{\"336\":1},\"1\":{\"21\":1,\"22\":1,\"26\":1,\"74\":1,\"95\":1,\"116\":1,\"153\":3,\"172\":1,\"202\":1,\"223\":1,\"227\":1,\"283\":3,\"300\":1,\"310\":1,\"335\":1,\"341\":1,\"344\":9,\"355\":1,\"376\":1,\"378\":1,\"379\":1,\"380\":1,\"381\":1,\"388\":1,\"391\":9,\"397\":3,\"414\":1}}],[\"10060\",{\"1\":{\"179\":2}}],[\"100m\",{\"1\":{\"165\":1}}],[\"100f\",{\"1\":{\"116\":1}}],[\"10000000\",{\"1\":{\"321\":1}}],[\"10000\",{\"1\":{\"227\":1,\"300\":1,\"360\":1,\"414\":1}}],[\"1000\",{\"1\":{\"21\":1,\"74\":3,\"420\":1,\"421\":1,\"445\":1}}],[\"100\",{\"1\":{\"16\":1,\"17\":1,\"18\":1,\"78\":10,\"116\":1,\"233\":1,\"317\":1,\"323\":2}}],[\"1mysql基础\",{\"0\":{\"12\":1}}],[\"1\",{\"0\":{\"8\":1,\"12\":1,\"14\":1,\"15\":1,\"16\":1,\"17\":1,\"18\":1,\"19\":1,\"22\":1,\"28\":1,\"33\":1,\"39\":1,\"44\":1,\"48\":1,\"54\":1,\"61\":1,\"66\":1,\"67\":2,\"68\":1,\"70\":1,\"74\":1,\"90\":2,\"91\":1,\"92\":1,\"93\":1,\"94\":1,\"97\":1,\"100\":1,\"104\":1,\"120\":2,\"121\":1,\"127\":1,\"131\":1,\"139\":1,\"145\":1,\"148\":1,\"159\":1,\"161\":1,\"171\":2,\"172\":1,\"173\":1,\"174\":1,\"176\":1,\"188\":1,\"197\":1,\"202\":1,\"209\":1,\"213\":1,\"229\":1,\"241\":2,\"242\":1,\"243\":1,\"244\":1,\"247\":1,\"255\":1,\"261\":1,\"262\":1,\"263\":1,\"264\":1,\"265\":1,\"266\":1,\"267\":1,\"268\":1,\"273\":2,\"274\":1,\"275\":1,\"294\":1,\"303\":1,\"304\":1,\"305\":1,\"306\":1,\"308\":1,\"310\":1,\"314\":1,\"317\":1,\"320\":1,\"325\":1,\"326\":1,\"327\":1,\"343\":1,\"347\":1,\"351\":1,\"352\":1,\"353\":1,\"354\":1,\"373\":1,\"379\":1,\"383\":1,\"408\":1,\"430\":1,\"438\":1,\"444\":2,\"445\":1,\"446\":1,\"447\":1,\"449\":1,\"453\":1,\"460\":1,\"471\":2,\"472\":1,\"473\":1,\"474\":1,\"475\":1,\"478\":1,\"479\":1,\"483\":1,\"486\":1,\"498\":1},\"1\":{\"12\":3,\"13\":1,\"14\":1,\"15\":3,\"17\":2,\"18\":5,\"19\":3,\"21\":2,\"22\":9,\"23\":1,\"24\":1,\"25\":1,\"26\":1,\"28\":2,\"30\":3,\"33\":2,\"39\":4,\"41\":1,\"44\":2,\"45\":2,\"46\":1,\"47\":1,\"48\":1,\"49\":1,\"54\":1,\"55\":3,\"56\":2,\"57\":2,\"58\":1,\"61\":1,\"63\":2,\"64\":3,\"67\":3,\"74\":6,\"76\":1,\"77\":6,\"78\":8,\"91\":1,\"92\":1,\"93\":2,\"94\":1,\"95\":1,\"97\":1,\"98\":1,\"100\":1,\"101\":2,\"102\":1,\"104\":2,\"105\":2,\"108\":1,\"109\":1,\"115\":1,\"116\":1,\"117\":1,\"121\":1,\"141\":1,\"146\":5,\"156\":1,\"157\":5,\"165\":5,\"166\":2,\"172\":1,\"177\":1,\"188\":1,\"190\":1,\"192\":1,\"194\":1,\"200\":2,\"213\":1,\"214\":1,\"215\":1,\"216\":1,\"218\":1,\"219\":1,\"222\":1,\"223\":5,\"227\":2,\"230\":1,\"231\":1,\"232\":2,\"243\":1,\"269\":2,\"273\":3,\"275\":1,\"278\":1,\"279\":1,\"282\":1,\"283\":1,\"284\":1,\"285\":1,\"304\":2,\"308\":2,\"309\":1,\"317\":6,\"319\":1,\"320\":1,\"321\":2,\"323\":1,\"327\":1,\"329\":1,\"338\":1,\"339\":1,\"340\":1,\"341\":1,\"343\":1,\"344\":2,\"345\":3,\"346\":2,\"347\":1,\"348\":1,\"351\":1,\"352\":1,\"353\":6,\"355\":1,\"357\":4,\"360\":3,\"361\":2,\"362\":1,\"363\":1,\"364\":1,\"366\":4,\"368\":1,\"371\":2,\"373\":1,\"374\":1,\"376\":1,\"378\":2,\"379\":1,\"380\":1,\"381\":1,\"385\":1,\"387\":1,\"389\":6,\"390\":1,\"391\":10,\"397\":1,\"398\":1,\"399\":1,\"430\":3,\"431\":3,\"432\":2,\"441\":2,\"444\":1,\"445\":1,\"446\":1,\"447\":1,\"450\":3,\"459\":2,\"460\":2,\"461\":1,\"464\":4,\"467\":1,\"468\":3,\"472\":4,\"473\":10,\"476\":3,\"478\":1,\"482\":1,\"495\":4,\"497\":1}}],[\"3以上\",{\"1\":{\"492\":1}}],[\"3a79bd29\",{\"1\":{\"473\":1}}],[\"3a164288b6aa43d8bc568b8fa5ca4bc2\",{\"1\":{\"391\":3}}],[\"3<\",{\"1\":{\"387\":1}}],[\"3实现令牌续命\",{\"0\":{\"380\":1}}],[\"3rabbitmq集群模式\",{\"0\":{\"365\":1}}],[\"3topic类型\",{\"0\":{\"359\":1}}],[\"3tidying\",{\"0\":{\"297\":1,\"411\":1}}],[\"34\",{\"1\":{\"346\":3,\"347\":2,\"348\":4,\"349\":4}}],[\"345\",{\"1\":{\"317\":1}}],[\"376\",{\"1\":{\"345\":1}}],[\"333333333333333\",{\"1\":{\"345\":1}}],[\"3309\",{\"1\":{\"105\":1}}],[\"3308\",{\"1\":{\"105\":1}}],[\"3307\",{\"1\":{\"98\":1,\"122\":1,\"476\":4}}],[\"3306\",{\"1\":{\"21\":1,\"98\":1,\"105\":2,\"122\":1,\"487\":1}}],[\"3gecdd0mog\",{\"1\":{\"310\":1}}],[\"3stream\",{\"0\":{\"263\":1}}],[\"397\",{\"1\":{\"391\":3}}],[\"39\",{\"1\":{\"159\":2,\"162\":2,\"163\":2,\"164\":2}}],[\"3128\",{\"1\":{\"153\":1,\"175\":2}}],[\"36\",{\"1\":{\"141\":6}}],[\"35gb\",{\"1\":{\"125\":1}}],[\"3nf\",{\"1\":{\"78\":2}}],[\"303\",{\"1\":{\"383\":2}}],[\"30px\",{\"1\":{\"370\":2}}],[\"3000\",{\"1\":{\"497\":1}}],[\"300\",{\"1\":{\"227\":1}}],[\"30\",{\"1\":{\"49\":1,\"78\":2,\"223\":1,\"300\":1,\"414\":1}}],[\"324表示乘以10的负324次方\",{\"1\":{\"317\":1}}],[\"324\",{\"1\":{\"317\":1}}],[\"32768~32767\",{\"1\":{\"317\":1}}],[\"32117\",{\"1\":{\"106\":1}}],[\"32\",{\"1\":{\"39\":1,\"138\":2,\"389\":2}}],[\"38til\",{\"1\":{\"22\":1}}],[\"3触发器\",{\"0\":{\"15\":1}}],[\"3过滤器\",{\"0\":{\"10\":1}}],[\"3\",{\"0\":{\"8\":1,\"9\":1,\"10\":1,\"24\":1,\"35\":1,\"41\":1,\"46\":1,\"50\":1,\"56\":1,\"63\":1,\"72\":1,\"76\":1,\"92\":1,\"97\":1,\"98\":1,\"102\":1,\"127\":1,\"128\":1,\"129\":2,\"133\":1,\"141\":1,\"151\":1,\"159\":1,\"163\":1,\"173\":1,\"178\":1,\"179\":1,\"190\":1,\"199\":1,\"204\":1,\"211\":1,\"231\":1,\"243\":1,\"246\":1,\"247\":1,\"248\":1,\"249\":2,\"250\":1,\"257\":1,\"275\":1,\"291\":1,\"296\":1,\"305\":1,\"311\":1,\"312\":1,\"317\":1,\"318\":1,\"319\":2,\"320\":2,\"321\":1,\"322\":1,\"327\":1,\"329\":1,\"345\":1,\"349\":1,\"356\":1,\"357\":1,\"358\":1,\"359\":1,\"383\":1,\"384\":1,\"385\":2,\"386\":1,\"405\":1,\"410\":1,\"430\":1,\"431\":1,\"438\":1,\"439\":1,\"440\":2,\"446\":1,\"451\":1,\"453\":1,\"454\":1,\"462\":1,\"473\":1,\"478\":1,\"486\":1,\"487\":1,\"488\":2,\"489\":1},\"1\":{\"12\":3,\"13\":1,\"15\":1,\"18\":3,\"19\":1,\"22\":1,\"24\":1,\"26\":1,\"28\":2,\"30\":4,\"35\":1,\"39\":1,\"41\":2,\"44\":1,\"46\":1,\"48\":1,\"49\":1,\"55\":1,\"57\":5,\"61\":1,\"62\":1,\"63\":2,\"64\":1,\"67\":1,\"74\":2,\"77\":4,\"78\":5,\"91\":1,\"92\":1,\"93\":2,\"95\":1,\"97\":1,\"101\":1,\"104\":2,\"105\":1,\"108\":1,\"109\":1,\"116\":1,\"121\":2,\"146\":1,\"157\":1,\"166\":2,\"172\":1,\"188\":1,\"194\":2,\"200\":2,\"214\":1,\"223\":4,\"227\":2,\"232\":1,\"271\":1,\"275\":1,\"282\":1,\"283\":1,\"284\":1,\"285\":1,\"300\":2,\"304\":1,\"308\":1,\"309\":1,\"317\":2,\"319\":1,\"326\":2,\"337\":1,\"338\":1,\"339\":1,\"340\":1,\"343\":1,\"344\":1,\"345\":2,\"346\":2,\"347\":1,\"348\":1,\"351\":1,\"352\":2,\"353\":3,\"355\":1,\"357\":2,\"360\":2,\"362\":1,\"363\":1,\"364\":1,\"366\":2,\"368\":1,\"371\":1,\"373\":1,\"376\":1,\"378\":1,\"379\":1,\"380\":1,\"381\":1,\"387\":1,\"391\":1,\"392\":1,\"397\":1,\"398\":1,\"399\":1,\"414\":2,\"420\":1,\"421\":1,\"432\":1,\"441\":2,\"447\":5,\"487\":1,\"495\":1}}],[\"三台机器redis数据需要删除\",{\"1\":{\"496\":1}}],[\"三主三从\",{\"0\":{\"495\":1}}],[\"三次握手主要就是解决网络信道不可靠问题\",{\"1\":{\"282\":1}}],[\"三次握手是客户端首先给服务端发送一个syn包\",{\"1\":{\"282\":1}}],[\"三级缓存\",{\"1\":{\"280\":1}}],[\"三者不可得兼\",{\"1\":{\"279\":1}}],[\"三个索引\",{\"1\":{\"19\":1}}],[\"三\",{\"0\":{\"7\":1,\"27\":1,\"43\":1,\"96\":1,\"110\":1,\"117\":1,\"126\":1,\"158\":1,\"184\":1,\"201\":1,\"222\":1,\"227\":1,\"237\":1,\"286\":1,\"316\":1,\"370\":1,\"382\":1,\"391\":1,\"396\":1,\"400\":1,\"420\":1,\"429\":1,\"436\":1,\"452\":1,\"464\":1,\"468\":1,\"477\":1,\"485\":1,\"495\":1},\"1\":{\"84\":1,\"177\":1}}],[\"h\",{\"1\":{\"495\":2}}],[\"hyperloglog\",{\"1\":{\"225\":1}}],[\"hybridbinarizer\",{\"1\":{\"83\":4}}],[\"help\",{\"1\":{\"431\":6}}],[\"hello\",{\"1\":{\"371\":1,\"390\":1,\"391\":1}}],[\"here\",{\"1\":{\"386\":1}}],[\"health\",{\"1\":{\"319\":1}}],[\"head>\",{\"1\":{\"188\":1,\"215\":1,\"370\":1}}],[\"header类型\",{\"1\":{\"366\":1}}],[\"header\",{\"1\":{\"165\":7,\"356\":1,\"362\":1,\"379\":1,\"380\":1,\"381\":1,\"385\":1,\"464\":17,\"473\":1,\"490\":3}}],[\"headers\",{\"1\":{\"108\":1,\"314\":1,\"464\":1}}],[\"height=w+\",{\"1\":{\"192\":1}}],[\"h2><\",{\"1\":{\"370\":2}}],[\"h2>\",{\"1\":{\"190\":2,\"194\":1}}],[\"h1>\",{\"1\":{\"188\":1,\"189\":1,\"190\":1,\"192\":1,\"194\":2,\"211\":2,\"214\":1,\"370\":3}}],[\"h1><\",{\"1\":{\"188\":1,\"191\":1}}],[\"h127\",{\"1\":{\"146\":4}}],[\"humqaxew\",{\"1\":{\"187\":1}}],[\"hub\",{\"1\":{\"94\":1}}],[\"hibernate\",{\"1\":{\"382\":1,\"383\":3}}],[\"hit1\",{\"1\":{\"337\":2}}],[\"hit\",{\"1\":{\"327\":2,\"329\":2,\"337\":2,\"339\":2,\"340\":2,\"341\":5,\"347\":2,\"348\":2}}],[\"hits1\",{\"1\":{\"337\":3}}],[\"hits\",{\"1\":{\"326\":2,\"327\":2,\"329\":2,\"337\":2,\"339\":2,\"341\":2}}],[\"history\",{\"1\":{\"208\":1}}],[\"hier\",{\"1\":{\"179\":1}}],[\"highlight\",{\"1\":{\"389\":2}}],[\"highlighter\",{\"1\":{\"341\":1}}],[\"highlightbuilder\",{\"1\":{\"341\":5}}],[\"high\",{\"1\":{\"157\":1,\"464\":2}}],[\"hints\",{\"1\":{\"83\":12}}],[\"how\",{\"1\":{\"386\":1}}],[\"however\",{\"1\":{\"386\":1}}],[\"hostname\",{\"1\":{\"458\":4}}],[\"hostnamectl\",{\"1\":{\"458\":4}}],[\"hostlist\",{\"1\":{\"323\":2}}],[\"hostlists\",{\"1\":{\"323\":3}}],[\"host=\",{\"1\":{\"141\":1,\"384\":1,\"474\":1,\"479\":1}}],[\"hosts\",{\"1\":{\"109\":1,\"458\":1,\"490\":1}}],[\"hosts=http\",{\"1\":{\"109\":1}}],[\"host\",{\"1\":{\"84\":1,\"108\":1,\"165\":1,\"309\":1,\"323\":2,\"352\":1,\"440\":7,\"441\":2,\"458\":1,\"464\":6,\"467\":4,\"479\":1,\"490\":1}}],[\"home=\",{\"1\":{\"445\":2,\"447\":1,\"481\":2}}],[\"home\",{\"1\":{\"83\":2,\"128\":2,\"138\":6,\"139\":7,\"141\":7,\"389\":4,\"439\":4,\"440\":1,\"445\":6,\"447\":4,\"450\":3,\"454\":1,\"459\":9,\"460\":1,\"461\":1,\"462\":3,\"464\":1,\"481\":7,\"482\":1,\"483\":4,\"484\":3,\"485\":1,\"486\":1,\"487\":1,\"488\":3,\"489\":2,\"490\":1}}],[\"hour\",{\"1\":{\"51\":1}}],[\"hh\",{\"1\":{\"21\":1,\"28\":1,\"39\":2,\"320\":1,\"389\":4}}],[\"htpasswd\",{\"1\":{\"173\":1}}],[\"htm\",{\"1\":{\"165\":2}}],[\"html格式日志结束\",{\"1\":{\"389\":1}}],[\"html格式日志开始\",{\"1\":{\"389\":1}}],[\"html<\",{\"1\":{\"389\":2}}],[\"htmllayout\",{\"1\":{\"389\":2}}],[\"html模板+对象数据=html⻚⾯https\",{\"1\":{\"368\":1}}],[\"html⽹⻚\",{\"1\":{\"368\":1}}],[\"html5\",{\"1\":{\"208\":1}}],[\"html标签\",{\"1\":{\"188\":1}}],[\"html=\",{\"1\":{\"188\":1}}],[\"html>\",{\"1\":{\"188\":2,\"215\":2,\"370\":2}}],[\"html\",{\"1\":{\"19\":1,\"21\":2,\"97\":1,\"159\":1,\"162\":3,\"163\":3,\"165\":7,\"166\":1,\"195\":1,\"280\":1,\"342\":1,\"368\":1,\"371\":1,\"382\":1,\"389\":6,\"440\":1,\"489\":1}}],[\"httpclientbuilder\",{\"1\":{\"323\":4}}],[\"httphost\",{\"1\":{\"323\":6}}],[\"httphelper\",{\"1\":{\"8\":1,\"9\":1,\"10\":2}}],[\"httpd\",{\"1\":{\"171\":1}}],[\"http块\",{\"1\":{\"157\":1}}],[\"http\",{\"1\":{\"21\":1,\"22\":1,\"108\":4,\"109\":1,\"129\":1,\"133\":1,\"153\":2,\"157\":4,\"159\":2,\"161\":1,\"162\":1,\"163\":1,\"164\":1,\"165\":3,\"170\":1,\"175\":5,\"309\":1,\"310\":2,\"314\":3,\"323\":3,\"391\":7,\"440\":1,\"460\":1,\"464\":7,\"466\":1,\"467\":2,\"476\":1,\"490\":1}}],[\"https>\",{\"1\":{\"467\":2}}],[\"https\",{\"1\":{\"13\":1,\"19\":1,\"28\":1,\"93\":1,\"94\":3,\"101\":1,\"106\":2,\"110\":3,\"116\":1,\"125\":3,\"138\":1,\"146\":2,\"148\":1,\"170\":2,\"178\":1,\"181\":2,\"183\":2,\"187\":1,\"188\":1,\"189\":1,\"190\":1,\"191\":1,\"192\":1,\"198\":1,\"215\":1,\"308\":1,\"311\":2,\"367\":1,\"382\":1,\"392\":2,\"394\":1,\"434\":1,\"445\":1,\"447\":1,\"459\":1,\"470\":1,\"482\":1,\"489\":1,\"492\":2,\"496\":1}}],[\"httpservletresponse\",{\"1\":{\"10\":1,\"378\":1,\"379\":1,\"390\":2}}],[\"httpservletrequest\",{\"1\":{\"8\":1,\"10\":1,\"378\":1,\"379\":1,\"385\":1,\"390\":2}}],[\"httpservletrequestwrapper\",{\"1\":{\"8\":1}}],[\"httpservletrequestwrapper本身是一个抽象类\",{\"1\":{\"8\":1}}],[\"httpservletrequestwrapper的主要作用是对原始的httpservletrequest进行包装和增强\",{\"1\":{\"8\":1}}],[\"http请求的输入流只能读取一次\",{\"1\":{\"6\":1}}],[\"hard\",{\"1\":{\"458\":1}}],[\"harder\",{\"1\":{\"83\":1}}],[\"handleexception\",{\"1\":{\"385\":1}}],[\"handlevalidexception\",{\"1\":{\"385\":1}}],[\"handlermethod\",{\"1\":{\"378\":3,\"379\":3}}],[\"handlermapping\",{\"1\":{\"280\":1}}],[\"handlerinterceptor\",{\"1\":{\"378\":1,\"379\":1,\"390\":1}}],[\"handler\",{\"1\":{\"3\":1,\"376\":1,\"378\":3,\"379\":3,\"390\":3,\"420\":3,\"425\":9}}],[\"has\",{\"1\":{\"476\":1}}],[\"hasmethodannotation\",{\"1\":{\"378\":1,\"379\":1}}],[\"hashcode是jdk根据对象的地址或者字符串或者数字算出来的int类型的数值\",{\"1\":{\"244\":1}}],[\"hashcode\",{\"1\":{\"244\":2}}],[\"hashset与hashmap的区别\",{\"0\":{\"251\":1}}],[\"hashset如何检查重复\",{\"1\":{\"244\":1}}],[\"hashset的值存放于hashmap的key\",{\"1\":{\"243\":1}}],[\"hashset\",{\"0\":{\"244\":1},\"1\":{\"240\":1,\"243\":3,\"244\":2,\"245\":1}}],[\"hashtable\",{\"0\":{\"249\":1},\"1\":{\"240\":1}}],[\"hash实现\",{\"1\":{\"163\":1}}],[\"hash\",{\"0\":{\"163\":1},\"1\":{\"160\":1,\"163\":1,\"164\":1,\"166\":1,\"208\":1,\"225\":2,\"310\":1,\"464\":1,\"490\":1}}],[\"hashmap<>\",{\"1\":{\"360\":1,\"371\":1,\"387\":1}}],[\"hashmap<decodehinttype\",{\"1\":{\"83\":3}}],[\"hashmap\",{\"0\":{\"247\":1},\"1\":{\"83\":1,\"240\":1,\"243\":1,\"244\":4,\"245\":1,\"248\":1,\"249\":1,\"385\":1,\"387\":1}}],[\"half\",{\"1\":{\"317\":1}}],[\"have\",{\"1\":{\"145\":1,\"386\":4}}],[\"having可以进行聚合函数的判断\",{\"1\":{\"56\":1}}],[\"having在分组之后进行限定\",{\"1\":{\"56\":1}}],[\"havingi\",{\"1\":{\"22\":1}}],[\"having\",{\"1\":{\"13\":1,\"22\":2,\"47\":1,\"56\":3,\"79\":1,\"386\":1}}],[\"haiziwang\",{\"1\":{\"84\":1}}],[\"并确保两个目录中的文件保持同步状态\",{\"1\":{\"468\":1}}],[\"并确保它们保持同步\",{\"1\":{\"468\":1}}],[\"并允许节点自身决定是否进行请求处理或转发\",{\"1\":{\"425\":1}}],[\"并维护一个下一个处理节点对象的应用\",{\"1\":{\"425\":1}}],[\"并将里面的内容全部拷贝到authorized\",{\"1\":{\"435\":1}}],[\"并将其保存在静态变量中\",{\"1\":{\"422\":2}}],[\"并将它发布出去\",{\"1\":{\"415\":1}}],[\"并通过invocationhandler接口来处理方法调用\",{\"1\":{\"419\":1}}],[\"并提供全局访问点\",{\"1\":{\"422\":1}}],[\"并提供了更多的功能和灵活性\",{\"1\":{\"391\":1}}],[\"并提交了事务\",{\"1\":{\"217\":1}}],[\"并⽤来⽣成输出⽂本\",{\"1\":{\"368\":1}}],[\"并添加测试数据\",{\"1\":{\"346\":1}}],[\"并行流\",{\"1\":{\"263\":1}}],[\"并能扩展新的能力\",{\"1\":{\"258\":1}}],[\"并被执行到时\",{\"1\":{\"257\":1}}],[\"并进行解析生成对应的class对象的过程\",{\"1\":{\"235\":1}}],[\"并以相应的规则保证状态以一种可预测的方式发生变化\",{\"1\":{\"212\":1}}],[\"并发能⼒强\",{\"1\":{\"156\":1}}],[\"并发能力强\",{\"1\":{\"156\":1}}],[\"并不是定位delete\",{\"1\":{\"145\":1}}],[\"并形成一个全局的命名空间\",{\"1\":{\"125\":1}}],[\"并制定字符集为gbk\",{\"1\":{\"33\":1}}],[\"并指定字符集\",{\"1\":{\"33\":1}}],[\"并初步实现了柔性事务\",{\"1\":{\"28\":1}}],[\"并且有1台从机\",{\"1\":{\"498\":1}}],[\"并且指定当有2台哨兵认为主机挂了\",{\"1\":{\"497\":1}}],[\"并且给用户授予replication\",{\"1\":{\"478\":1}}],[\"并且给用户返回一个空值\",{\"1\":{\"229\":1}}],[\"并且会中断正在执行的任务\",{\"1\":{\"296\":1,\"410\":1}}],[\"并且线程池中的任务数为0\",{\"1\":{\"294\":1,\"408\":1}}],[\"并且可以避免空指针异常\",{\"1\":{\"264\":1}}],[\"并且可以隐藏服务器真正的ip地址\",{\"1\":{\"158\":1}}],[\"并且附带一个语句块表示这段语句最终一定被执行\",{\"1\":{\"258\":1}}],[\"并且其内部是通过\",{\"1\":{\"245\":1}}],[\"并且在hashmap中如果k\",{\"1\":{\"244\":1}}],[\"并且查询没有使用索引列的前缀\",{\"1\":{\"223\":1}}],[\"并且这些列都用到了索引\",{\"1\":{\"223\":1}}],[\"并且能够在它们之间快速切换\",{\"1\":{\"181\":1}}],[\"并且2004年发布的第一个版本\",{\"1\":{\"156\":1}}],[\"并且设置这个桶的隐私规则为public\",{\"1\":{\"129\":1}}],[\"并且支持跨越多个数据中心\",{\"1\":{\"125\":1}}],[\"并且minio\",{\"1\":{\"125\":1}}],[\"并且完成主键自增长\",{\"1\":{\"63\":1}}],[\"并且testonborrow为false时\",{\"1\":{\"21\":1}}],[\"并且将其缓存起来供后续使用\",{\"1\":{\"6\":1}}],[\"并删除⾃增\",{\"1\":{\"13\":1}}],[\"并在特定操作完成后触发相应的事件动作\",{\"1\":{\"281\":1}}],[\"并在每次调用getinputstream\",{\"1\":{\"6\":1}}],[\"并在包装类中重写getinputstream\",{\"1\":{\"6\":1}}],[\"错误处理和自定义行为\",{\"1\":{\"391\":1}}],[\"错误页面跳转\",{\"1\":{\"162\":1,\"163\":1}}],[\"错误\",{\"1\":{\"6\":1,\"63\":1,\"83\":1,\"179\":1}}],[\"当在redis实例中开启了requirepass\",{\"1\":{\"497\":1}}],[\"当然vscode也是可以的\",{\"1\":{\"426\":1}}],[\"当然这种方式不具备灵活性解决方案二\",{\"1\":{\"418\":1}}],[\"当然是要写一个genericfilterbean来进行校验\",{\"1\":{\"396\":1}}],[\"当spring应用程序中发生某个行为时\",{\"1\":{\"415\":1}}],[\"当其状态发生变化时\",{\"1\":{\"415\":1}}],[\"当一个请求从链式的首段发出时\",{\"1\":{\"424\":1}}],[\"当一个对象的状态发生改变时\",{\"1\":{\"415\":1,\"416\":1}}],[\"当一个线程池调用shutdown\",{\"1\":{\"295\":1,\"409\":1}}],[\"当每个线程访问这个\",{\"1\":{\"396\":1}}],[\"当超过了核心线程出之外的线程在空闲时间到达之后会被销毁\",{\"1\":{\"391\":1}}],[\"当时登录传入的令牌\",{\"1\":{\"379\":1}}],[\"当消息满⾜以下条件之⼀\",{\"1\":{\"366\":1}}],[\"当消息正确处理完成后\",{\"1\":{\"275\":1}}],[\"当es检索压力特别大的时候\",{\"1\":{\"306\":1}}],[\"当钩子函数terminated\",{\"1\":{\"298\":1,\"412\":1}}],[\"当线程池在stop状态下\",{\"1\":{\"297\":1,\"411\":1}}],[\"当线程池在shutdown状态下\",{\"1\":{\"297\":1,\"411\":1}}],[\"当线程池变为tidying状态时\",{\"1\":{\"297\":1,\"411\":1}}],[\"当线程数量大于最大线程时\",{\"1\":{\"287\":1,\"401\":1}}],[\"当所有的任务已终止\",{\"1\":{\"297\":1,\"411\":1}}],[\"当队列饱和时并超过最大线程数时就会执行拒绝策略\",{\"1\":{\"286\":1,\"400\":1}}],[\"当任务处理完毕得时候\",{\"1\":{\"285\":1,\"399\":1}}],[\"当阻塞队列已满并且线程池已达最大线程数得时候\",{\"1\":{\"285\":1,\"399\":1}}],[\"当创建线程池得时候就已经存在了核心线程\",{\"1\":{\"285\":1,\"399\":1}}],[\"当对象a运行需要b时\",{\"1\":{\"280\":1}}],[\"当进入阻塞等待的其他客户端收到锁释放的消息后\",{\"1\":{\"278\":1}}],[\"当持有锁的客户端释放锁的时候\",{\"1\":{\"278\":1}}],[\"当加锁失败后\",{\"1\":{\"278\":1}}],[\"当加锁成功后\",{\"1\":{\"278\":1}}],[\"当下一个请求进来的时候\",{\"1\":{\"277\":1}}],[\"当第一个请求进来的时候\",{\"1\":{\"277\":1}}],[\"当⽣产者把消息成功写⼊rabbitmq之后\",{\"1\":{\"274\":1}}],[\"当这块回收之后把未回收的复制到另一块内存中\",{\"1\":{\"271\":1}}],[\"当伊甸区内存不足时会发生gc时\",{\"1\":{\"271\":1}}],[\"当容器销毁\",{\"1\":{\"253\":1}}],[\"当链表长度大于阈值\",{\"1\":{\"247\":1}}],[\"当有任务进来得时候\",{\"1\":{\"285\":1,\"399\":1}}],[\"当有多个拦截器时\",{\"1\":{\"257\":1}}],[\"当有一个\",{\"1\":{\"233\":1}}],[\"当有排序的时候不需要进行回旋查找\",{\"1\":{\"220\":1}}],[\"当请求1执行清除缓存后\",{\"1\":{\"232\":1}}],[\"当请求1执行update操作后\",{\"1\":{\"232\":1}}],[\"当存在并发请求时\",{\"1\":{\"232\":1}}],[\"当\",{\"1\":{\"223\":1}}],[\"当查询时用到了table1\",{\"1\":{\"223\":1}}],[\"当查询条件中的列与索引列类型不匹配时\",{\"1\":{\"223\":1}}],[\"当查询条件使用\",{\"1\":{\"223\":1}}],[\"当查询的第一个a值使用大于小于号的时候\",{\"1\":{\"221\":1}}],[\"当a相等时\",{\"1\":{\"221\":1}}],[\"当需要恢复数据时\",{\"1\":{\"144\":1}}],[\"当用\",{\"1\":{\"116\":1}}],[\"当账户退出或终端关闭时\",{\"1\":{\"116\":1}}],[\"当配置某一个加速器地址之后\",{\"1\":{\"94\":1}}],[\"当事务提交或回滚后\",{\"1\":{\"75\":1}}],[\"当前线程\",{\"1\":{\"394\":1}}],[\"当前field不会被分词\",{\"1\":{\"317\":1}}],[\"当前集群中\",{\"1\":{\"306\":1}}],[\"当前对象初始化完成后\",{\"1\":{\"84\":1}}],[\"当前时间\",{\"1\":{\"79\":1}}],[\"当前日期\",{\"1\":{\"79\":1}}],[\"当前的页码\",{\"1\":{\"57\":1}}],[\"当前系统时间\",{\"1\":{\"51\":1}}],[\"当大于0时\",{\"1\":{\"21\":1}}],[\"当应用使用完连接\",{\"1\":{\"21\":1}}],[\"当拦截器中第一次调用request\",{\"1\":{\"6\":1}}],[\"当调用request\",{\"1\":{\"6\":1}}],[\"当我用post自测的时候\",{\"1\":{\"3\":1}}],[\"这边是一种池化写法\",{\"1\":{\"460\":1}}],[\"这块是文件磁盘的位置\",{\"1\":{\"460\":1}}],[\"这就是spring事件模型的工作原理\",{\"1\":{\"415\":1}}],[\"这就是控制反转\",{\"1\":{\"280\":1}}],[\"这也是一行info日志\",{\"1\":{\"390\":1,\"391\":2}}],[\"这时springboot相当于另一个一样的消费者进行强夺这些消费者之间是竞争关系\",{\"1\":{\"355\":1}}],[\"这时候客户端使用事件监听\",{\"1\":{\"279\":1}}],[\"这时候就有可能因为没有重写hashcode方法\",{\"1\":{\"259\":1}}],[\"这时候如果只重写了equals\",{\"1\":{\"259\":1}}],[\"这台服务器上\",{\"1\":{\"306\":1}}],[\"这两种对象都是可变的string中的对象是不可变的\",{\"1\":{\"259\":1}}],[\"这两个字段作为第三张表的外键\",{\"1\":{\"78\":1}}],[\"这使得同一个属性或方法在父类及其各个子类中具有不同的含义\",{\"1\":{\"258\":1}}],[\"这称之为\",{\"1\":{\"231\":1}}],[\"这将导致这个不存在的数据每次查询\",{\"1\":{\"231\":1}}],[\"这一行查询\",{\"1\":{\"223\":1}}],[\"这些配置可以通过spring配置文件或注解进行灵活配置\",{\"1\":{\"391\":1}}],[\"这些消费者之间\",{\"1\":{\"355\":1}}],[\"这些方法将在执行的时候\",{\"1\":{\"300\":1,\"414\":1}}],[\"这些监听器统一存储在事件监听器注册表中\",{\"1\":{\"281\":1}}],[\"这些碎片太多可能会使存储大对象会触发gc回收\",{\"1\":{\"271\":1}}],[\"这些操作符可能导致索引失效\",{\"1\":{\"223\":1}}],[\"这些⼈就是负载均衡\",{\"1\":{\"166\":1}}],[\"这些不同的规范要求被称为不同的范式\",{\"1\":{\"78\":1}}],[\"这多个⼈就形成了集群\",{\"1\":{\"166\":1}}],[\"这种模式\",{\"1\":{\"365\":1}}],[\"这种算法适合老生代\",{\"1\":{\"271\":1}}],[\"这种算法运行简单\",{\"1\":{\"271\":1}}],[\"这种算法的缺点是\",{\"1\":{\"271\":1}}],[\"这种架构还有一种问题\",{\"1\":{\"233\":1}}],[\"这种情况下\",{\"1\":{\"223\":1}}],[\"这种情况下查询的相关字段都能走索引\",{\"1\":{\"223\":1}}],[\"这种情况针对最左匹配原则\",{\"1\":{\"221\":1}}],[\"这种方法会把日志文件输入到你指定的文件中\",{\"1\":{\"116\":1}}],[\"这种方式特点是ssh窗口关闭时\",{\"1\":{\"116\":1}}],[\"这种范围扫描索引⽐全表扫描要好\",{\"1\":{\"19\":1}}],[\"这三种环境需要一样\",{\"1\":{\"91\":1}}],[\"这样如果此接口有多个实现类\",{\"1\":{\"418\":1}}],[\"这样可以在不修改原目标对象的前提下\",{\"1\":{\"417\":1}}],[\"这样每个线程都可以修改自己所拥有的副本\",{\"1\":{\"394\":1,\"396\":1}}],[\"这样在之后的代码中就可以直接使用该实例\",{\"1\":{\"422\":1}}],[\"这样在一定程度上保证了数据的安全性\",{\"1\":{\"306\":1}}],[\"这样在系统不能承载更大的并发量的时候\",{\"1\":{\"289\":1,\"403\":1}}],[\"这样做的好处\",{\"1\":{\"306\":1}}],[\"这样做可以检查它是否是一个函数式接口\",{\"1\":{\"262\":1}}],[\"这样太过耗费性能\",{\"1\":{\"278\":1}}],[\"这样mq会把这条消息重新发送\",{\"1\":{\"275\":1}}],[\"这样就会消息堆积\",{\"1\":{\"355\":1}}],[\"这样就算rabbitmq挂掉了\",{\"1\":{\"274\":1}}],[\"这样就可以将输入流的数据保存在一个缓存中\",{\"1\":{\"6\":1}}],[\"这样既可以避免不连续空间出现\",{\"1\":{\"271\":1}}],[\"这样相同的注解可以在同一地方使用多次\",{\"1\":{\"267\":1}}],[\"这样\",{\"1\":{\"231\":1}}],[\"这样写会同时监听ipv6和ipv4的端口\",{\"1\":{\"175\":1}}],[\"这样使用率特别高\",{\"1\":{\"91\":1}}],[\"这⾥遇到⼀个bug\",{\"1\":{\"28\":1}}],[\"这通常⽐all快\",{\"1\":{\"19\":1}}],[\"这个共享变量只是针对自己线程里面共享\",{\"1\":{\"395\":1}}],[\"这个约束的参数是一个通过bigdecimal定义的最小值的字符串表示\",{\"1\":{\"384\":1}}],[\"这个约束的参数是一个通过bigdecimal定义的最大值的字符串表示\",{\"1\":{\"384\":1}}],[\"这个类型就是用来存储经纬度的\",{\"1\":{\"346\":1}}],[\"这个属性会被覆盖掉\",{\"1\":{\"321\":1}}],[\"这个注解其实大家并不陌生\",{\"1\":{\"300\":1,\"414\":1}}],[\"这个时候我们在代码里面使用里面的对象\",{\"1\":{\"280\":1}}],[\"这个时候根据二分法也是可以找到b对应的值\",{\"1\":{\"221\":1}}],[\"这个一般就是商品的id值\",{\"1\":{\"277\":1}}],[\"这个方法采用lambda方式传入实现了\",{\"1\":{\"396\":1}}],[\"这个方法在\",{\"1\":{\"258\":1}}],[\"这个方法必须执行成功\",{\"1\":{\"253\":1}}],[\"这个值越小\",{\"1\":{\"233\":1}}],[\"这个配置\",{\"1\":{\"233\":1}}],[\"这个接口的查询速度非常慢\",{\"1\":{\"223\":1}}],[\"这个做的实际上还是回表的操作\",{\"1\":{\"223\":1}}],[\"这个函数会触发\",{\"1\":{\"215\":1}}],[\"这个文本\",{\"1\":{\"146\":1}}],[\"这个也可以忽略不计\",{\"1\":{\"19\":1}}],[\"这个过滤器的作用是在请求被处理前\",{\"1\":{\"10\":1}}],[\"这是创建的制品名称\",{\"1\":{\"441\":1}}],[\"这是主题状态改变的具体表示\",{\"1\":{\"415\":1}}],[\"这是一行error日志\",{\"1\":{\"390\":1,\"391\":2}}],[\"这是一行info日志\",{\"1\":{\"390\":1,\"391\":2}}],[\"这是一个可以为null的容器对象\",{\"1\":{\"264\":1}}],[\"这是所谓的静态链接过程\",{\"1\":{\"238\":1}}],[\"这是因为全表扫描通常比使用索引更高效\",{\"1\":{\"223\":1}}],[\"这是因为http请求是基于流式传输的\",{\"1\":{\"6\":1}}],[\"这是mysql\",{\"1\":{\"21\":1}}],[\"这是const类型的特列\",{\"1\":{\"19\":1}}],[\"这里设置为三分钟\",{\"1\":{\"497\":1}}],[\"这里设置为默认的1\",{\"1\":{\"497\":1}}],[\"这里设置了主机多少秒无响应\",{\"1\":{\"497\":1}}],[\"这里就需要提供密码\",{\"1\":{\"497\":1}}],[\"这里就用到了threadlocal\",{\"1\":{\"396\":1}}],[\"这里权限直接拉到最大\",{\"1\":{\"431\":1}}],[\"这里使用的是jdk动态代理\",{\"1\":{\"420\":1}}],[\"这里推荐几种方式\",{\"1\":{\"375\":1}}],[\"这里面会包括视图名称和需要传递给视图的模型数据\",{\"1\":{\"280\":1}}],[\"这里是不能使用<>号的\",{\"1\":{\"221\":1}}],[\"这里是对food数据库开启bin\",{\"1\":{\"143\":1}}],[\"这里是20mb\",{\"1\":{\"3\":1}}],[\"这里的accesskey和secretkey并不是图形界面登录名和密码\",{\"1\":{\"131\":1}}],[\"这里判断如果识别不了带logo的图片\",{\"1\":{\"83\":1}}],[\"这里一定要注意返回的request必须是我们重写之后的\",{\"1\":{\"10\":1}}],[\"这对于在过滤器或拦截器中对请求进行预处理\",{\"1\":{\"8\":1}}],[\"在后台运行\",{\"1\":{\"495\":1}}],[\"在当前目录下\",{\"1\":{\"473\":1}}],[\"在所有服务器全部执行vim\",{\"1\":{\"458\":1}}],[\"在所有服务器分别执行\",{\"1\":{\"458\":1}}],[\"在所难免就要实现mysql的集群搭建\",{\"1\":{\"27\":1}}],[\"在非root目录下执行命令解压\",{\"1\":{\"447\":1}}],[\"在配置nginx就可以了\",{\"1\":{\"432\":1}}],[\"在日常生活中责任链模式还是很常见的\",{\"1\":{\"425\":1}}],[\"在使用双重检查锁模式时\",{\"1\":{\"422\":1}}],[\"在使用sdk连接需要用到\",{\"1\":{\"128\":1}}],[\"在对共享资源进行访问时\",{\"1\":{\"422\":1}}],[\"在类加载时就实例化一个对象\",{\"1\":{\"422\":1}}],[\"在代理类中的处理还是原生的处理逻辑\",{\"1\":{\"418\":1}}],[\"在调用的时候调用的是代理类\",{\"1\":{\"418\":1}}],[\"在例子中\",{\"1\":{\"415\":1}}],[\"在拦截器中使用反射获取方法上是否有该注解\",{\"1\":{\"378\":1}}],[\"在拦截器中获取流之后request\",{\"1\":{\"5\":1}}],[\"在编程中⼀个幂等操作的特点是其任意多次执⾏所产⽣的结果与⼀次执⾏的产⽣的结果相同\",{\"1\":{\"364\":1}}],[\"在消费者代码实现\",{\"1\":{\"362\":1}}],[\"在消费者消费消息之前\",{\"1\":{\"275\":1,\"364\":1}}],[\"在发送时开启事务\",{\"1\":{\"361\":1}}],[\"在字符串中指定通配符\",{\"1\":{\"334\":1}}],[\"在kibana\",{\"1\":{\"315\":1}}],[\"在es的配置文件中添加以下配置\",{\"1\":{\"314\":1}}],[\"在集群服务器中\",{\"1\":{\"306\":1}}],[\"在index\",{\"1\":{\"304\":1}}],[\"在idea创建项目之后默认在main\",{\"1\":{\"208\":1}}],[\"在idea中创建标准的vue\",{\"0\":{\"201\":1}}],[\"在spring中\",{\"1\":{\"300\":1,\"414\":1,\"415\":1}}],[\"在running状态下\",{\"1\":{\"294\":1,\"408\":1}}],[\"在redisson框架实现分布式锁的思路\",{\"1\":{\"278\":1}}],[\"在redis内存已经满的时候\",{\"1\":{\"230\":1}}],[\"在未指明容量时\",{\"1\":{\"286\":1,\"400\":1}}],[\"在设置得回收时间内\",{\"1\":{\"285\":1,\"399\":1}}],[\"在我们使用a对象和b对象时\",{\"1\":{\"280\":1}}],[\"在我们项目启动的时候会读取配置文件中的bean\",{\"1\":{\"280\":1}}],[\"在之后我们是需要手动创建b对象\",{\"1\":{\"280\":1}}],[\"在某些复杂场景下\",{\"1\":{\"279\":1}}],[\"在某些极端情况下\",{\"1\":{\"279\":1}}],[\"在某一刻的高并发访问\",{\"1\":{\"231\":1}}],[\"在删除的redis\",{\"1\":{\"279\":1}}],[\"在释放锁的时候\",{\"1\":{\"279\":1}}],[\"在同一时刻是否同样的值\",{\"1\":{\"279\":1}}],[\"在同一个事务中\",{\"1\":{\"76\":1}}],[\"在不明确指定接收者的情况下\",{\"1\":{\"425\":1}}],[\"在不同年代使用不同的算法\",{\"1\":{\"271\":1}}],[\"在不损失精确性的情况下\",{\"1\":{\"19\":1,\"22\":1}}],[\"在abstractstringbuilder中也是使用字符数组保存字符串\",{\"1\":{\"259\":1}}],[\"在aplication\",{\"1\":{\"133\":1}}],[\"在java\",{\"1\":{\"267\":1}}],[\"在java中的一些容器中\",{\"1\":{\"259\":1}}],[\"在java代码中整合数据8\",{\"1\":{\"25\":1}}],[\"在过滤器\",{\"1\":{\"253\":1}}],[\"在上面结构的基础上\",{\"1\":{\"248\":1}}],[\"在上述代码中\",{\"1\":{\"6\":1}}],[\"在顺序添加一个元素的时候非常方便\",{\"1\":{\"241\":1}}],[\"在运行期也无法反射\",{\"1\":{\"235\":1}}],[\"在从机中选出新的主节点\",{\"1\":{\"233\":1}}],[\"在原有的过期时间上\",{\"1\":{\"231\":1}}],[\"在32位操作系统下最多使用3gb内存\",{\"1\":{\"230\":1}}],[\"在300秒内\",{\"1\":{\"227\":1}}],[\"在64位操作系统下不限制内存大小\",{\"1\":{\"230\":1}}],[\"在60秒内\",{\"1\":{\"227\":1}}],[\"在内存不足时\",{\"1\":{\"230\":8}}],[\"在一定时间内执行一次持久化\",{\"1\":{\"227\":1}}],[\"在900秒内\",{\"1\":{\"227\":1}}],[\"在开启事务之后\",{\"1\":{\"226\":1}}],[\"在开启事务之前\",{\"1\":{\"226\":1}}],[\"在这个例子中\",{\"1\":{\"415\":1}}],[\"在这个模式中\",{\"1\":{\"415\":1}}],[\"在这个事物还未结束时\",{\"1\":{\"217\":1}}],[\"在这之后小高直接就是加上了一个联合索引\",{\"1\":{\"223\":1}}],[\"在索引列上进行计算\",{\"1\":{\"223\":1}}],[\"在索引列使⽤not会导致索引失效\",{\"1\":{\"26\":1}}],[\"在查询中使用函数\",{\"1\":{\"223\":1}}],[\"在关联查询中\",{\"1\":{\"223\":1}}],[\"在根据主键key来一次聚簇索引拿到数据\",{\"1\":{\"222\":1}}],[\"在最后添加\",{\"1\":{\"175\":1}}],[\"在最高冗余度配置下\",{\"1\":{\"125\":1}}],[\"在搭建集群后\",{\"1\":{\"156\":1}}],[\"在命令行参数模式如\",{\"1\":{\"153\":1}}],[\"在flush\",{\"1\":{\"146\":1}}],[\"在服务器内执行\",{\"1\":{\"145\":1}}],[\"在\",{\"1\":{\"143\":1,\"231\":1,\"286\":1,\"306\":1,\"400\":1,\"422\":1}}],[\"在mq中\",{\"1\":{\"364\":1}}],[\"在minio中也可以看到存储的文件\",{\"1\":{\"133\":1}}],[\"在mysql的配置⽂件中\",{\"1\":{\"23\":1}}],[\"在标准硬件条件下\",{\"1\":{\"125\":1}}],[\"在linux服务器上运行jar文件时通常的方法是\",{\"1\":{\"116\":1}}],[\"在分布式系统中的所有数据备份\",{\"1\":{\"279\":1}}],[\"在分布式集群状态下\",{\"1\":{\"108\":1}}],[\"在分组之前进行限定\",{\"1\":{\"56\":1}}],[\"在镜像仓库搜索对应的镜像是否存在\",{\"1\":{\"95\":1}}],[\"在两者之间\",{\"1\":{\"79\":1}}],[\"在2nf基础上消除传递依赖\",{\"1\":{\"78\":1}}],[\"在2nf基础上\",{\"1\":{\"78\":1}}],[\"在通过b属性\",{\"1\":{\"78\":1}}],[\"在1nf基础上消除非主属性对主码的部分函数依赖\",{\"1\":{\"78\":1}}],[\"在1nf的基础上\",{\"1\":{\"78\":1}}],[\"在多的一方建立外键\",{\"1\":{\"78\":1}}],[\"在任意数据库任意表上\",{\"1\":{\"77\":1}}],[\"在表创建完后\",{\"1\":{\"62\":1}}],[\"在创建表时\",{\"1\":{\"62\":1,\"63\":2,\"64\":1}}],[\"在经历了整体架构的数次精\",{\"1\":{\"28\":1}}],[\"在⾼并发下\",{\"1\":{\"27\":1}}],[\"在druid中\",{\"1\":{\"21\":1}}],[\"在http协议中\",{\"1\":{\"6\":1}}],[\"二进制类型\",{\"1\":{\"317\":1}}],[\"二进制命令\",{\"1\":{\"172\":1}}],[\"二是\",{\"1\":{\"306\":1}}],[\"二级缓存\",{\"1\":{\"280\":1}}],[\"二维码图片路径\",{\"1\":{\"83\":1}}],[\"二维码图片识别工具类\",{\"0\":{\"83\":1},\"1\":{\"83\":1}}],[\"二\",{\"0\":{\"6\":1,\"20\":1,\"31\":1,\"84\":1,\"95\":1,\"109\":1,\"116\":1,\"122\":1,\"125\":1,\"138\":1,\"144\":1,\"157\":1,\"175\":1,\"183\":1,\"196\":1,\"218\":1,\"221\":1,\"226\":1,\"236\":1,\"254\":1,\"285\":1,\"307\":1,\"369\":1,\"377\":1,\"390\":1,\"395\":1,\"399\":1,\"419\":1,\"428\":1,\"435\":1,\"448\":1,\"459\":1,\"467\":1,\"476\":1,\"482\":1,\"494\":1}}],[\"bcryptpasswordencoder\",{\"1\":{\"491\":1}}],[\"bcnf\",{\"1\":{\"78\":1}}],[\"branch\",{\"1\":{\"440\":1}}],[\"branches\",{\"1\":{\"440\":1,\"441\":1}}],[\"break\",{\"1\":{\"337\":1}}],[\"black\",{\"1\":{\"389\":1}}],[\"block\",{\"1\":{\"386\":2}}],[\"blockingqueue\",{\"1\":{\"286\":1,\"400\":1}}],[\"blogs\",{\"1\":{\"441\":1}}],[\"blog\",{\"1\":{\"116\":1,\"170\":1,\"394\":1,\"496\":1}}],[\"bbs\",{\"1\":{\"368\":1}}],[\"bbb开头的路径\",{\"1\":{\"159\":2}}],[\"bbb\",{\"1\":{\"159\":4}}],[\"b无事物\",{\"1\":{\"280\":1}}],[\"b无事务\",{\"1\":{\"280\":5}}],[\"b抛异常\",{\"1\":{\"280\":4}}],[\"b以无事务方式执行\",{\"1\":{\"280\":2}}],[\"b加入到a事务中\",{\"1\":{\"280\":4}}],[\"b异常不影响a\",{\"1\":{\"280\":2}}],[\"b新建一个事务\",{\"1\":{\"280\":1}}],[\"b新建一个a的子事务\",{\"1\":{\"280\":2}}],[\"b新建事务\",{\"1\":{\"280\":6}}],[\"b和a事务合并成一个事务\",{\"1\":{\"280\":2}}],[\"b依赖a\",{\"1\":{\"280\":1}}],[\"b对象\",{\"1\":{\"280\":1}}],[\"b的值也是有序的\",{\"1\":{\"221\":1}}],[\"b树的每一个结点都存储了key\",{\"1\":{\"220\":1}}],[\"bundle\",{\"1\":{\"473\":1}}],[\"bulkbyscrollresponse\",{\"1\":{\"338\":1}}],[\"button>\",{\"1\":{\"192\":2,\"193\":1}}],[\"busy\",{\"1\":{\"165\":1}}],[\"build\",{\"1\":{\"133\":1,\"200\":1,\"310\":5,\"360\":1,\"440\":3,\"441\":3,\"450\":1,\"454\":2}}],[\"builder\",{\"1\":{\"133\":1,\"323\":5,\"327\":3,\"328\":1,\"329\":3,\"330\":1,\"331\":1,\"332\":1,\"333\":1,\"334\":1,\"335\":1,\"336\":1,\"337\":4,\"339\":3,\"340\":3,\"341\":4,\"343\":3,\"344\":3,\"345\":3,\"347\":2,\"348\":2}}],[\"buckets\",{\"1\":{\"344\":1}}],[\"bucketname\",{\"1\":{\"133\":1}}],[\"bucket\",{\"1\":{\"133\":1,\"342\":1,\"344\":5,\"468\":1}}],[\"bufferfactory\",{\"1\":{\"381\":1}}],[\"buffers\",{\"1\":{\"165\":2}}],[\"bufferedimage\",{\"1\":{\"83\":3}}],[\"bufferedimageluminancesource\",{\"1\":{\"83\":4}}],[\"bufferedreader\",{\"1\":{\"8\":2,\"9\":2}}],[\"buffer调⼤⼀些\",{\"1\":{\"19\":1,\"22\":1}}],[\"buffer\",{\"1\":{\"19\":1,\"22\":1,\"165\":1}}],[\"btl\",{\"1\":{\"371\":1}}],[\"btl模板+对象数据=⽂件http\",{\"1\":{\"368\":1}}],[\"btn1\",{\"1\":{\"192\":3}}],[\"bt\",{\"1\":{\"106\":2}}],[\"bit\",{\"1\":{\"225\":1,\"457\":1}}],[\"bigdecimal\",{\"1\":{\"384\":1}}],[\"bigsize\",{\"1\":{\"192\":2}}],[\"big\",{\"1\":{\"192\":2}}],[\"bigint\",{\"1\":{\"12\":1,\"13\":1,\"216\":1}}],[\"bin下\",{\"1\":{\"493\":1}}],[\"bin=master\",{\"1\":{\"478\":1}}],[\"bin=mysql\",{\"1\":{\"143\":1}}],[\"bink\",{\"1\":{\"193\":1}}],[\"binlog2无法查询和反编译到增删改语句\",{\"1\":{\"146\":1}}],[\"binlog2sql\",{\"1\":{\"146\":9}}],[\"binlog2\",{\"0\":{\"146\":1}}],[\"binlog\",{\"1\":{\"143\":4}}],[\"binlog是记录所有数据库表结构变更\",{\"1\":{\"143\":1}}],[\"binlog基本概念binlog基本概念二进制日志\",{\"1\":{\"143\":1}}],[\"binnary\",{\"1\":{\"143\":1}}],[\"bind\",{\"1\":{\"139\":1,\"193\":3,\"195\":1,\"357\":2,\"360\":1,\"476\":1,\"495\":1}}],[\"bindingresult\",{\"1\":{\"385\":2}}],[\"bindingbuilder\",{\"1\":{\"357\":2,\"360\":1}}],[\"binding\",{\"1\":{\"28\":1,\"357\":2,\"360\":1,\"371\":1}}],[\"bin目录下\",{\"1\":{\"110\":1,\"311\":1}}],[\"bin\",{\"1\":{\"101\":4,\"108\":3,\"109\":1,\"110\":1,\"111\":2,\"121\":1,\"122\":1,\"139\":1,\"141\":4,\"143\":2,\"144\":1,\"145\":2,\"146\":4,\"308\":2,\"311\":1,\"314\":2,\"315\":1,\"430\":3,\"445\":2,\"447\":3,\"450\":2,\"454\":1,\"461\":3,\"466\":3,\"478\":1,\"479\":3,\"481\":2,\"483\":4,\"484\":1,\"488\":2,\"493\":5,\"494\":2,\"495\":2,\"497\":2,\"498\":2}}],[\"binary类型暂时支持base64\",{\"1\":{\"317\":1}}],[\"binarybitmap\",{\"1\":{\"83\":13}}],[\"binarizer\",{\"1\":{\"83\":9}}],[\"birthday\",{\"1\":{\"39\":1,\"78\":2,\"385\":1}}],[\"bp1fi52ghqu598b39lo\",{\"1\":{\"28\":1}}],[\"b×a\",{\"1\":{\"22\":1}}],[\"b中元素为第二元素构成有序对\",{\"1\":{\"22\":1}}],[\"b为集合\",{\"1\":{\"22\":1}}],[\"b\",{\"1\":{\"22\":12,\"78\":1,\"146\":2,\"159\":1,\"220\":1,\"221\":1,\"223\":2}}],[\"be\",{\"1\":{\"386\":1,\"418\":1,\"461\":1,\"462\":1}}],[\"because\",{\"1\":{\"386\":1}}],[\"beetl总结\",{\"0\":{\"372\":1}}],[\"beetl3\",{\"1\":{\"367\":1}}],[\"beetl\",{\"0\":{\"367\":1},\"1\":{\"368\":1}}],[\"been\",{\"1\":{\"145\":1}}],[\"beta1\",{\"1\":{\"310\":1}}],[\"between\",{\"1\":{\"13\":1,\"21\":1,\"49\":2,\"79\":1,\"223\":1,\"384\":1}}],[\"bean\",{\"1\":{\"133\":1,\"300\":2,\"323\":1,\"352\":1,\"355\":1,\"357\":5,\"360\":4,\"361\":1,\"383\":1,\"384\":1,\"390\":2,\"391\":1,\"414\":2,\"418\":1}}],[\"beanfactory\",{\"1\":{\"84\":10}}],[\"beanfactorypostprocessor\",{\"1\":{\"84\":2}}],[\"beansexception\",{\"1\":{\"84\":6}}],[\"beans\",{\"1\":{\"84\":9,\"418\":2}}],[\"begin\",{\"1\":{\"15\":2,\"16\":1,\"17\":2,\"18\":3}}],[\"beforedestroy\",{\"1\":{\"215\":1}}],[\"beforeupdate\",{\"1\":{\"215\":1}}],[\"beforemount\",{\"1\":{\"215\":1}}],[\"beforecreate\",{\"1\":{\"215\":1}}],[\"before|after\",{\"1\":{\"15\":1}}],[\"before\",{\"1\":{\"15\":3}}],[\"by等\",{\"1\":{\"26\":1}}],[\"byj\",{\"1\":{\"22\":1}}],[\"byh\",{\"1\":{\"22\":1}}],[\"by和分组查询\",{\"1\":{\"19\":1,\"22\":1}}],[\"by后面可以跟聚合函数\",{\"1\":{\"14\":1}}],[\"by\",{\"0\":{\"338\":1},\"1\":{\"13\":2,\"19\":1,\"22\":5,\"26\":1,\"47\":2,\"54\":3,\"56\":6,\"77\":1,\"79\":2,\"141\":1,\"221\":1,\"386\":1,\"461\":1,\"473\":2,\"478\":1}}],[\"bytes\",{\"1\":{\"157\":1,\"165\":1}}],[\"bytearrayinputstream\",{\"1\":{\"8\":2}}],[\"byte\",{\"1\":{\"8\":1,\"317\":1}}],[\"boldmagenta\",{\"1\":{\"389\":1}}],[\"bottom\",{\"1\":{\"348\":1}}],[\"box\",{\"0\":{\"348\":1},\"1\":{\"346\":1,\"348\":1}}],[\"bounding\",{\"0\":{\"348\":1},\"1\":{\"346\":1,\"348\":1}}],[\"bounds\",{\"1\":{\"345\":1}}],[\"booelan检查\",{\"1\":{\"384\":1}}],[\"boolquery\",{\"1\":{\"340\":4}}],[\"boolquerybuilder\",{\"1\":{\"339\":9,\"340\":2}}],[\"bool\",{\"1\":{\"339\":1}}],[\"bool查询\",{\"0\":{\"339\":1}}],[\"boolean表达式\",{\"1\":{\"373\":1}}],[\"boolean类型\",{\"1\":{\"190\":1,\"317\":1}}],[\"boolean属性名\",{\"1\":{\"190\":1}}],[\"boolean\",{\"1\":{\"8\":2,\"83\":2,\"84\":4,\"133\":1,\"378\":1,\"379\":1,\"384\":2,\"387\":3,\"390\":1}}],[\"book\",{\"1\":{\"319\":1,\"320\":1,\"321\":3}}],[\"boot<\",{\"1\":{\"84\":1,\"113\":1,\"323\":1,\"352\":1,\"383\":1,\"491\":1}}],[\"boot\",{\"1\":{\"21\":1,\"28\":2,\"84\":1,\"113\":1,\"323\":1,\"352\":1,\"383\":2,\"386\":3,\"431\":2,\"491\":1}}],[\"body>\",{\"1\":{\"188\":1,\"189\":1,\"190\":1,\"191\":1,\"192\":1,\"194\":1,\"215\":1,\"370\":1}}],[\"bodyreaderhttpservletrequestwrapper\",{\"1\":{\"8\":2,\"10\":1}}],[\"body\",{\"1\":{\"5\":1,\"6\":1,\"8\":3,\"10\":4,\"165\":1,\"215\":2,\"464\":2,\"490\":1}}],[\"barrier\",{\"1\":{\"495\":1}}],[\"barcode\",{\"1\":{\"83\":1}}],[\"baidu\",{\"1\":{\"187\":1}}],[\"bais\",{\"1\":{\"8\":2}}],[\"background\",{\"1\":{\"141\":6}}],[\"basepackages\",{\"1\":{\"385\":1}}],[\"basedir=\",{\"1\":{\"139\":2,\"141\":1}}],[\"based\",{\"1\":{\"3\":1}}],[\"basicack机制\",{\"1\":{\"363\":1}}],[\"basicack\",{\"1\":{\"362\":1}}],[\"basicnack\",{\"1\":{\"362\":1}}],[\"basicpublish\",{\"1\":{\"353\":1}}],[\"basiccredentialsprovider\",{\"1\":{\"323\":1}}],[\"basic\",{\"1\":{\"174\":1,\"175\":5}}],[\"bash\",{\"1\":{\"95\":1,\"108\":2,\"109\":1,\"110\":1,\"111\":1,\"121\":1,\"122\":1,\"311\":1,\"314\":1,\"315\":1,\"351\":1,\"430\":3,\"450\":1,\"454\":1,\"461\":1}}],[\"balance\",{\"1\":{\"74\":7,\"76\":4}}],[\"一主两从\",{\"1\":{\"496\":1}}],[\"一主二从\",{\"0\":{\"496\":1}}],[\"一定要查看所在目录的位置\",{\"1\":{\"472\":1}}],[\"一定要使用我们重写后得类去创建线程池\",{\"1\":{\"391\":1}}],[\"一共使用三个分片\",{\"1\":{\"326\":1}}],[\"一把被用于全文检索\",{\"1\":{\"317\":1}}],[\"一是\",{\"1\":{\"306\":1}}],[\"一种对索引进行分片的机制\",{\"1\":{\"306\":1}}],[\"一种特殊的函数\",{\"1\":{\"18\":1}}],[\"一行数据\",{\"1\":{\"304\":1}}],[\"一直在等待\",{\"1\":{\"282\":1}}],[\"一级缓存\",{\"1\":{\"280\":1}}],[\"一键安装上面四个依赖\",{\"1\":{\"157\":1}}],[\"一次性\",{\"1\":{\"353\":1}}],[\"一次性可以创建多个容器\",{\"1\":{\"102\":1}}],[\"一次事务操作\",{\"1\":{\"226\":1}}],[\"一次8081vim\",{\"1\":{\"161\":1}}],[\"一次8080\",{\"1\":{\"161\":1}}],[\"一次执行恢复数据\",{\"1\":{\"146\":1}}],[\"一条数据的inset如何定位\",{\"1\":{\"145\":1}}],[\"一条dml\",{\"1\":{\"74\":1}}],[\"一旦匹配\",{\"1\":{\"159\":2}}],[\"一旦过了这个有效期将会失效\",{\"1\":{\"133\":1}}],[\"一旦读取了输入流的数据\",{\"1\":{\"6\":1}}],[\"一旦读取了输入流中的数据\",{\"1\":{\"6\":1}}],[\"一旦读取了流中的数据\",{\"1\":{\"6\":1}}],[\"一致的运行环境\",{\"1\":{\"91\":1}}],[\"一致性\",{\"1\":{\"75\":1,\"279\":2}}],[\"一对多\",{\"1\":{\"78\":2}}],[\"一对一关系实现\",{\"1\":{\"78\":1}}],[\"一对一\",{\"1\":{\"78\":2}}],[\"一个字段可以等于多个值\",{\"1\":{\"328\":1}}],[\"一个是美玉无瑕\",{\"1\":{\"321\":2}}],[\"一个是阆苑仙葩\",{\"1\":{\"321\":2}}],[\"一个索引\",{\"1\":{\"306\":1}}],[\"一个不存储元素的阻塞队列\",{\"1\":{\"286\":1,\"400\":1}}],[\"一个支持优先级排序的无界阻塞队列\",{\"1\":{\"286\":1,\"400\":1}}],[\"一个由链表结构组成的有界阻塞队列\",{\"1\":{\"286\":1,\"400\":1}}],[\"一个由数组结构组成的有界阻塞队列\",{\"1\":{\"286\":1,\"400\":1}}],[\"一个子类只能继承一个父类\",{\"1\":{\"258\":1}}],[\"一个对象的\",{\"1\":{\"258\":1}}],[\"一个java文件从编码完成到最终执行\",{\"1\":{\"235\":1}}],[\"一个\",{\"1\":{\"233\":1}}],[\"一个redis\",{\"1\":{\"233\":1}}],[\"一个队列中的命令全部作废\",{\"1\":{\"226\":1}}],[\"一个key对应一个有序的集合\",{\"1\":{\"225\":1}}],[\"一个key对应一个集合\",{\"1\":{\"225\":1}}],[\"一个key对应一个列表\",{\"1\":{\"225\":1}}],[\"一个key对应一个map\",{\"1\":{\"225\":1}}],[\"一个key对应一个值\",{\"1\":{\"225\":1}}],[\"一个事物成功完成后它对于数据库的改变是永久性的\",{\"1\":{\"217\":1}}],[\"一个事务操作\",{\"1\":{\"76\":1}}],[\"一个事务\",{\"1\":{\"76\":1}}],[\"一个以所给名字注册的bean的实例\",{\"1\":{\"84\":1}}],[\"一个属性或属性组\",{\"1\":{\"78\":1}}],[\"一个课程也可以被很多学生选择\",{\"1\":{\"78\":1}}],[\"一个学生可以选择很多门课程\",{\"1\":{\"78\":1}}],[\"一个员工只能对应一个部门\",{\"1\":{\"78\":1}}],[\"一个部门有多个员工\",{\"1\":{\"78\":1}}],[\"一个身份证只能对应一个人\",{\"1\":{\"78\":1}}],[\"一个人只有一个身份证\",{\"1\":{\"78\":1}}],[\"一张表只能有一个字段为主键\",{\"1\":{\"63\":1}}],[\"一般yum安装包中有自带的mariadb\",{\"1\":{\"471\":1}}],[\"一般都会加在消费者的controller层上\",{\"1\":{\"378\":1}}],[\"一般在方法中销毁或关闭资源\",{\"1\":{\"253\":1}}],[\"一般主要包括两个过程\",{\"1\":{\"235\":1}}],[\"一般为3\",{\"1\":{\"232\":1}}],[\"一般不需要手动执行unwatch\",{\"1\":{\"226\":1}}],[\"一般用于存储一个值\",{\"1\":{\"225\":1}}],[\"一般存储的也是一个字符串\",{\"1\":{\"225\":1}}],[\"一般出现在groupby中\",{\"1\":{\"223\":1}}],[\"一般选择非空的列\",{\"1\":{\"55\":1}}],[\"一般只会进行数值型的计算\",{\"1\":{\"48\":1}}],[\"一般可以使用四则运算计算一些列的值\",{\"1\":{\"48\":1}}],[\"一库多表\",{\"1\":{\"28\":1}}],[\"一\",{\"0\":{\"5\":1,\"30\":1,\"83\":1,\"89\":1,\"108\":1,\"115\":1,\"119\":1,\"124\":1,\"137\":1,\"143\":1,\"156\":1,\"170\":1,\"182\":1,\"187\":1,\"217\":1,\"220\":1,\"225\":1,\"235\":1,\"253\":1,\"284\":1,\"302\":1,\"368\":1,\"376\":1,\"389\":1,\"394\":1,\"398\":1,\"418\":1,\"427\":1,\"434\":1,\"443\":1,\"458\":1,\"466\":1,\"470\":1,\"481\":1,\"493\":1}}],[\"一系列错误之后\",{\"1\":{\"3\":1}}],[\"ld\",{\"1\":{\"459\":1}}],[\"lsblk\",{\"1\":{\"462\":2}}],[\"ls\",{\"1\":{\"441\":1,\"450\":1,\"454\":2,\"459\":1}}],[\"l<\",{\"1\":{\"389\":2}}],[\"lte\",{\"1\":{\"317\":1,\"335\":2,\"340\":1}}],[\"lt\",{\"1\":{\"317\":1,\"335\":1,\"338\":1}}],[\"lucene\",{\"1\":{\"302\":3,\"310\":1}}],[\"luminancesource\",{\"1\":{\"83\":3}}],[\"lfu\",{\"1\":{\"230\":2}}],[\"lru\",{\"1\":{\"230\":2}}],[\"layout>\",{\"1\":{\"389\":2}}],[\"layoutwrappingencoder\",{\"1\":{\"389\":2}}],[\"lat\",{\"1\":{\"346\":3,\"347\":1,\"348\":2,\"349\":4}}],[\"lambda\",{\"1\":{\"263\":1}}],[\"label><input\",{\"1\":{\"194\":2}}],[\"label>\",{\"1\":{\"189\":1}}],[\"lang\",{\"1\":{\"258\":1,\"420\":3,\"421\":1}}],[\"lang=\",{\"1\":{\"188\":1,\"215\":2,\"370\":1,\"384\":1}}],[\"language\",{\"1\":{\"30\":5}}],[\"ln\",{\"1\":{\"101\":1}}],[\"l\",{\"1\":{\"101\":1,\"191\":4,\"389\":3,\"476\":1}}],[\"lpad\",{\"1\":{\"79\":1}}],[\"let\",{\"1\":{\"461\":1}}],[\"letter\",{\"1\":{\"360\":2}}],[\"level=\",{\"1\":{\"389\":5}}],[\"level>\",{\"1\":{\"389\":1}}],[\"level\",{\"1\":{\"76\":2}}],[\"left\",{\"1\":{\"70\":3,\"348\":1}}],[\"length>0\",{\"1\":{\"337\":1}}],[\"length\",{\"1\":{\"83\":1,\"380\":1,\"381\":1,\"384\":1}}],[\"len\",{\"1\":{\"19\":1,\"22\":1,\"52\":4,\"223\":2}}],[\"lombok\",{\"1\":{\"420\":1}}],[\"lomdba表达式就是使代码更简洁\",{\"1\":{\"261\":1}}],[\"loader\",{\"1\":{\"371\":1}}],[\"loader=new\",{\"1\":{\"371\":1}}],[\"loadclass\",{\"1\":{\"239\":1}}],[\"lon\",{\"1\":{\"346\":3,\"347\":1,\"348\":2,\"349\":4}}],[\"long\",{\"1\":{\"112\":1,\"133\":2,\"317\":3,\"320\":1,\"343\":1,\"362\":1}}],[\"locking\",{\"1\":{\"279\":1,\"422\":1}}],[\"locaiton\",{\"1\":{\"346\":1}}],[\"localtime\",{\"1\":{\"265\":1}}],[\"localdate\",{\"1\":{\"265\":1}}],[\"localdatetime\",{\"1\":{\"265\":1}}],[\"local\",{\"1\":{\"97\":1,\"101\":3,\"104\":5,\"105\":2,\"121\":1,\"138\":2,\"139\":3,\"140\":1,\"141\":5,\"157\":10,\"161\":2,\"165\":2,\"308\":2,\"396\":8,\"430\":3,\"431\":1,\"440\":1,\"461\":2,\"466\":3,\"473\":1,\"481\":3,\"484\":1,\"493\":16,\"494\":4,\"495\":8,\"496\":1,\"497\":11,\"498\":4}}],[\"localhost\",{\"1\":{\"21\":2,\"77\":2,\"141\":1,\"161\":1,\"162\":1,\"163\":1,\"164\":1,\"165\":1,\"348\":3}}],[\"location\",{\"1\":{\"3\":1,\"159\":13,\"161\":1,\"162\":2,\"163\":2,\"164\":2,\"165\":4,\"346\":4,\"347\":5,\"348\":2,\"349\":1,\"464\":2,\"490\":1}}],[\"lower\",{\"1\":{\"52\":1,\"79\":1,\"345\":1,\"476\":1}}],[\"logfile\",{\"1\":{\"495\":1,\"497\":1}}],[\"log=relay\",{\"1\":{\"479\":1}}],[\"log=none\",{\"1\":{\"153\":1}}],[\"logic\",{\"1\":{\"461\":1}}],[\"loginservice\",{\"1\":{\"425\":5}}],[\"loginhandler\",{\"1\":{\"425\":5}}],[\"loginpass=loginpass\",{\"1\":{\"425\":1}}],[\"loginpass\",{\"1\":{\"425\":4}}],[\"loginname=loginname\",{\"1\":{\"425\":1}}],[\"loginname\",{\"1\":{\"425\":4}}],[\"logininfo\",{\"1\":{\"396\":17,\"425\":22}}],[\"loginterceptor\",{\"1\":{\"390\":2}}],[\"login\",{\"1\":{\"21\":2,\"28\":1,\"129\":1,\"379\":1,\"380\":3,\"425\":3,\"440\":1}}],[\"log<\",{\"1\":{\"389\":1}}],[\"logback\",{\"1\":{\"389\":15}}],[\"logging\",{\"1\":{\"389\":1}}],[\"loggerfactory\",{\"1\":{\"352\":1,\"354\":1,\"355\":2,\"360\":2,\"362\":1,\"381\":1,\"385\":1,\"421\":2}}],[\"logger=\",{\"1\":{\"352\":1,\"354\":1,\"355\":2,\"360\":2,\"362\":1,\"381\":1,\"385\":1}}],[\"logger\",{\"1\":{\"352\":2,\"354\":3,\"355\":4,\"360\":5,\"361\":1,\"362\":2,\"381\":1,\"385\":2,\"389\":3,\"421\":4}}],[\"loglevel=error\",{\"1\":{\"153\":1}}],[\"log日志mysql命令\",{\"1\":{\"143\":1}}],[\"log服务\",{\"1\":{\"143\":1}}],[\"log为row类别\",{\"1\":{\"143\":1}}],[\"log文件名即为bin\",{\"1\":{\"143\":1}}],[\"logs之前所有的binlog日志文件执行上述命令\",{\"1\":{\"146\":1}}],[\"logs\",{\"1\":{\"95\":2,\"116\":2,\"138\":2,\"139\":3,\"141\":3,\"144\":2,\"146\":1,\"165\":6,\"309\":1,\"325\":1,\"326\":1,\"327\":1,\"329\":1,\"337\":1,\"339\":1,\"340\":1,\"341\":1,\"343\":2,\"344\":4,\"345\":2,\"389\":1,\"450\":1,\"464\":1,\"488\":1,\"489\":1,\"490\":1,\"495\":3,\"497\":1}}],[\"log⽇志⽂件\",{\"1\":{\"23\":1}}],[\"log4j2\",{\"1\":{\"21\":1}}],[\"log\",{\"0\":{\"143\":1},\"1\":{\"9\":1,\"21\":6,\"116\":5,\"137\":2,\"139\":3,\"141\":2,\"143\":7,\"144\":1,\"153\":1,\"157\":8,\"165\":10,\"172\":1,\"176\":1,\"215\":1,\"319\":2,\"321\":1,\"388\":2,\"389\":6,\"390\":5,\"420\":1,\"430\":1,\"431\":1,\"445\":2,\"450\":1,\"464\":2,\"474\":2,\"476\":3,\"478\":2,\"479\":6,\"490\":2,\"495\":1,\"497\":1}}],[\"liummmin\",{\"1\":{\"496\":1}}],[\"libaio\",{\"1\":{\"473\":1}}],[\"libs\",{\"1\":{\"471\":1,\"472\":2,\"473\":7}}],[\"library\",{\"1\":{\"309\":2,\"419\":1}}],[\"lib64\",{\"1\":{\"174\":1,\"175\":1}}],[\"lib\",{\"1\":{\"137\":1,\"141\":1,\"144\":1,\"145\":2,\"445\":2,\"447\":1,\"461\":1,\"472\":3,\"476\":3,\"481\":3,\"483\":1,\"488\":1}}],[\"license\",{\"1\":{\"123\":1}}],[\"listinfo\",{\"1\":{\"476\":1}}],[\"lists\",{\"1\":{\"476\":1}}],[\"list<matiitementity>\",{\"1\":{\"386\":1}}],[\"list<string>\",{\"1\":{\"371\":1,\"380\":1,\"381\":1}}],[\"list<httphost>\",{\"1\":{\"323\":1}}],[\"list<fileitem>\",{\"1\":{\"3\":1}}],[\"list接口的实现类主要有\",{\"1\":{\"240\":1}}],[\"listener\",{\"1\":{\"352\":1,\"354\":1,\"355\":2,\"415\":1}}],[\"listen\",{\"1\":{\"161\":1,\"162\":2,\"163\":2,\"164\":1,\"165\":2,\"464\":2,\"490\":1}}],[\"list\",{\"1\":{\"93\":1,\"110\":2,\"184\":3,\"225\":2,\"240\":1,\"311\":2,\"351\":1,\"475\":1}}],[\"lisi\",{\"1\":{\"74\":2,\"77\":3}}],[\"linkedtransferqueue\",{\"1\":{\"286\":1,\"400\":1}}],[\"linkedblockingdeque<>\",{\"1\":{\"300\":1,\"414\":1}}],[\"linkedblockingdeque\",{\"1\":{\"286\":1,\"400\":1}}],[\"linkedblockingqueue\",{\"1\":{\"286\":3,\"400\":3}}],[\"linkedhashmap\",{\"0\":{\"248\":1},\"1\":{\"245\":1,\"248\":2}}],[\"linkedhashset\",{\"0\":{\"245\":1},\"1\":{\"245\":2}}],[\"linkedhashset等\",{\"1\":{\"240\":1}}],[\"linkedlist\",{\"0\":{\"242\":1},\"1\":{\"240\":1,\"242\":3}}],[\"links=0\",{\"1\":{\"139\":1,\"476\":1}}],[\"link\",{\"1\":{\"83\":1}}],[\"linux服务器的路径地址\",{\"1\":{\"95\":1}}],[\"linux的操作系统\",{\"1\":{\"93\":1}}],[\"linux安装docker\",{\"0\":{\"93\":1,\"101\":1}}],[\"linux\",{\"0\":{\"115\":1,\"116\":1},\"1\":{\"23\":1,\"106\":1,\"138\":2,\"308\":3,\"459\":1,\"466\":1,\"481\":1}}],[\"line\",{\"1\":{\"9\":3}}],[\"limitnofile=1048576\",{\"1\":{\"461\":1}}],[\"limits\",{\"1\":{\"458\":2}}],[\"limit\",{\"1\":{\"13\":1,\"22\":3,\"47\":1,\"57\":6,\"79\":1,\"325\":1}}],[\"like使用or导致索引失效in使用不当order\",{\"1\":{\"221\":1}}],[\"like\",{\"1\":{\"13\":1,\"14\":1,\"39\":1,\"49\":1,\"143\":2,\"144\":1,\"223\":1}}],[\"2rabbitmq如何保证消息的幂等性\",{\"0\":{\"364\":1}}],[\"2rabbitmq手动应答\",{\"0\":{\"362\":1}}],[\"2direct类型\",{\"0\":{\"358\":1}}],[\"2原生的接收\",{\"0\":{\"354\":1}}],[\"2<\",{\"1\":{\"323\":1}}],[\"2的7次方到2的7次方\",{\"1\":{\"317\":1}}],[\"2的15次方到2的15次方\",{\"1\":{\"317\":1}}],[\"2的31次方到2的31次方\",{\"1\":{\"317\":1}}],[\"2的63次方到2的63次方\",{\"1\":{\"317\":1}}],[\"2的磁盘也能恢复数据\",{\"1\":{\"125\":1}}],[\"28t20\",{\"1\":{\"310\":1}}],[\"2f90bbf7b93631e52bafb59b3b049cb44ec25e96\",{\"1\":{\"310\":1}}],[\"2fd261b080fb\",{\"1\":{\"310\":1}}],[\"26379\",{\"1\":{\"497\":2,\"499\":1}}],[\"26\",{\"1\":{\"309\":1,\"310\":2,\"323\":1,\"391\":9}}],[\"2函数式接口\",{\"0\":{\"262\":1}}],[\"2>\",{\"1\":{\"165\":1,\"430\":1,\"431\":1,\"445\":1,\"450\":2}}],[\"2m\",{\"1\":{\"165\":4}}],[\"29\",{\"1\":{\"101\":1}}],[\"2nf\",{\"1\":{\"78\":2}}],[\"256\",{\"1\":{\"165\":1}}],[\"254\",{\"1\":{\"161\":1,\"165\":1}}],[\"25\",{\"1\":{\"49\":2}}],[\"25岁的信息\",{\"1\":{\"49\":1}}],[\"2个字符\",{\"1\":{\"39\":1}}],[\"2409\",{\"1\":{\"179\":1}}],[\"24⼩时不间断运⾏\",{\"1\":{\"156\":1}}],[\"248\",{\"1\":{\"141\":6}}],[\"246\",{\"1\":{\"141\":6}}],[\"244\",{\"1\":{\"141\":6}}],[\"24\",{\"1\":{\"26\":1,\"391\":8}}],[\"231\",{\"1\":{\"497\":1}}],[\"23\",{\"1\":{\"26\":1,\"159\":2,\"162\":2,\"163\":2,\"164\":2,\"445\":2}}],[\"22\",{\"1\":{\"26\":1,\"49\":2,\"391\":17}}],[\"2147483648~2147483647\",{\"1\":{\"317\":1}}],[\"21\",{\"1\":{\"26\":1,\"179\":1,\"326\":1,\"487\":1}}],[\"2种⽅案\",{\"1\":{\"25\":1}}],[\"27\",{\"1\":{\"19\":1,\"476\":3}}],[\"2019\",{\"1\":{\"310\":1}}],[\"2016\",{\"1\":{\"28\":1}}],[\"206\",{\"1\":{\"179\":1}}],[\"202\",{\"1\":{\"467\":1}}],[\"2023\",{\"1\":{\"391\":17}}],[\"20230316231244317\",{\"1\":{\"381\":1}}],[\"20230316231315154\",{\"1\":{\"380\":1}}],[\"20230312194636171\",{\"1\":{\"92\":1}}],[\"20230309133951356\",{\"1\":{\"118\":1}}],[\"2022\",{\"1\":{\"283\":1,\"376\":1,\"378\":1,\"379\":1,\"380\":1,\"381\":1,\"397\":1}}],[\"20240113075303\",{\"1\":{\"459\":2}}],[\"2024\",{\"1\":{\"146\":6}}],[\"2000\",{\"1\":{\"21\":2,\"344\":2,\"347\":2}}],[\"20\",{\"1\":{\"16\":1,\"21\":2,\"26\":1,\"39\":1,\"49\":8,\"61\":3,\"62\":2,\"63\":2,\"117\":1,\"283\":1,\"325\":1,\"397\":1,\"441\":2}}],[\"2获取输入流内容\",{\"0\":{\"9\":1}}],[\"2\",{\"0\":{\"14\":1,\"22\":1,\"23\":2,\"24\":1,\"25\":1,\"26\":1,\"34\":1,\"40\":1,\"45\":1,\"49\":1,\"55\":1,\"62\":1,\"68\":1,\"69\":1,\"70\":1,\"71\":2,\"75\":1,\"91\":1,\"98\":1,\"101\":1,\"105\":1,\"121\":1,\"128\":1,\"132\":1,\"139\":1,\"140\":2,\"141\":1,\"145\":1,\"146\":2,\"149\":1,\"150\":1,\"162\":1,\"172\":1,\"176\":1,\"177\":2,\"189\":1,\"198\":1,\"203\":1,\"210\":1,\"214\":1,\"230\":1,\"242\":1,\"244\":1,\"245\":2,\"246\":1,\"248\":1,\"256\":1,\"274\":1,\"290\":1,\"295\":1,\"304\":1,\"308\":1,\"309\":2,\"310\":2,\"311\":1,\"312\":2,\"313\":1,\"314\":1,\"315\":2,\"318\":1,\"326\":1,\"328\":1,\"344\":1,\"348\":1,\"355\":1,\"374\":1,\"378\":1,\"379\":1,\"380\":1,\"381\":1,\"384\":1,\"404\":1,\"409\":1,\"431\":1,\"439\":1,\"445\":1,\"449\":1,\"450\":2,\"451\":1,\"454\":1,\"460\":1,\"461\":2,\"462\":1,\"463\":1,\"472\":1,\"483\":1,\"484\":2,\"487\":1,\"499\":1},\"1\":{\"3\":1,\"12\":3,\"13\":1,\"15\":3,\"18\":3,\"19\":1,\"22\":9,\"24\":1,\"25\":1,\"26\":1,\"28\":4,\"30\":3,\"34\":1,\"39\":3,\"40\":1,\"41\":1,\"44\":1,\"45\":3,\"48\":2,\"49\":1,\"55\":3,\"56\":5,\"57\":1,\"58\":1,\"61\":1,\"63\":2,\"64\":3,\"67\":1,\"74\":5,\"76\":1,\"77\":6,\"78\":7,\"91\":1,\"92\":1,\"93\":2,\"94\":1,\"95\":1,\"97\":1,\"98\":1,\"100\":1,\"101\":2,\"102\":1,\"104\":1,\"105\":1,\"108\":4,\"109\":3,\"110\":2,\"116\":1,\"121\":1,\"132\":1,\"146\":1,\"157\":1,\"164\":2,\"166\":2,\"177\":1,\"188\":1,\"194\":2,\"198\":1,\"200\":2,\"214\":1,\"215\":1,\"216\":1,\"222\":1,\"223\":4,\"227\":1,\"230\":1,\"232\":3,\"271\":2,\"273\":1,\"275\":1,\"278\":1,\"282\":1,\"283\":1,\"284\":1,\"285\":1,\"300\":1,\"304\":4,\"308\":1,\"309\":2,\"310\":2,\"311\":2,\"323\":1,\"326\":2,\"327\":1,\"329\":1,\"333\":1,\"337\":1,\"338\":1,\"339\":2,\"340\":1,\"341\":1,\"343\":1,\"344\":2,\"345\":2,\"346\":1,\"347\":1,\"348\":1,\"351\":1,\"352\":2,\"353\":3,\"355\":1,\"357\":4,\"360\":3,\"361\":2,\"362\":1,\"363\":1,\"364\":1,\"366\":4,\"368\":1,\"371\":1,\"373\":1,\"374\":1,\"376\":1,\"378\":2,\"379\":1,\"380\":1,\"381\":1,\"383\":1,\"385\":1,\"389\":1,\"390\":3,\"397\":1,\"398\":1,\"399\":1,\"414\":1,\"416\":1,\"428\":1,\"431\":1,\"432\":1,\"441\":4,\"445\":2,\"446\":1,\"447\":1,\"459\":1,\"464\":2,\"467\":1,\"468\":4,\"479\":1,\"482\":1,\"493\":4,\"495\":1,\"496\":1,\"497\":3}}],[\"ulimit\",{\"1\":{\"458\":2}}],[\"uuid\",{\"1\":{\"310\":1,\"390\":1,\"391\":1}}],[\"ui\",{\"1\":{\"454\":3}}],[\"uihtm\",{\"1\":{\"181\":1}}],[\"uid\",{\"1\":{\"78\":8}}],[\"uroot\",{\"1\":{\"122\":1,\"145\":1,\"146\":4,\"474\":1}}],[\"uris\",{\"1\":{\"113\":1,\"323\":1}}],[\"url>\",{\"1\":{\"447\":1}}],[\"url=http\",{\"1\":{\"309\":1}}],[\"url\",{\"1\":{\"21\":3,\"28\":1,\"208\":1,\"381\":2,\"384\":1,\"391\":1,\"440\":4,\"441\":2,\"487\":1}}],[\"util\",{\"1\":{\"83\":3,\"84\":2,\"264\":1,\"387\":4,\"391\":1,\"396\":3}}],[\"utf8\",{\"1\":{\"485\":1}}],[\"utf\",{\"1\":{\"8\":1,\"9\":1,\"83\":3,\"188\":1,\"215\":1,\"370\":1,\"389\":1,\"464\":2}}],[\"until\",{\"1\":{\"461\":1}}],[\"unzip\",{\"1\":{\"110\":1}}],[\"uname\",{\"1\":{\"101\":2}}],[\"unclear\",{\"1\":{\"386\":1}}],[\"unchecked\",{\"1\":{\"84\":2}}],[\"uncommitted\",{\"1\":{\"76\":2}}],[\"uninstall\",{\"1\":{\"184\":1,\"196\":2}}],[\"unino\",{\"1\":{\"59\":1}}],[\"unit\",{\"1\":{\"140\":1,\"146\":1,\"157\":1,\"461\":1,\"476\":2,\"483\":1,\"494\":2,\"498\":2}}],[\"unique\",{\"1\":{\"60\":1,\"62\":3,\"78\":3,\"79\":1,\"219\":1}}],[\"union\",{\"1\":{\"26\":1,\"59\":3,\"223\":4}}],[\"u\",{\"1\":{\"35\":1,\"41\":1,\"141\":1,\"440\":2,\"462\":1}}],[\"us\",{\"1\":{\"382\":1}}],[\"usr\",{\"1\":{\"97\":1,\"101\":4,\"104\":5,\"105\":2,\"108\":3,\"110\":2,\"121\":1,\"138\":2,\"139\":3,\"140\":1,\"141\":5,\"157\":9,\"161\":2,\"162\":1,\"163\":1,\"164\":1,\"165\":1,\"172\":2,\"174\":1,\"175\":1,\"308\":2,\"309\":3,\"430\":3,\"431\":1,\"445\":2,\"461\":3,\"466\":3,\"473\":1,\"476\":1,\"481\":3,\"483\":1,\"484\":1,\"488\":1,\"493\":16,\"494\":4,\"495\":8,\"496\":1,\"497\":11,\"498\":4}}],[\"using\",{\"1\":{\"19\":4,\"22\":4,\"145\":1,\"223\":4,\"386\":1,\"418\":1}}],[\"usessl=false\",{\"1\":{\"487\":1}}],[\"useunicode=true\",{\"1\":{\"487\":1}}],[\"use\",{\"1\":{\"37\":1,\"77\":2,\"141\":1,\"184\":2,\"386\":1}}],[\"userremoteconfigs\",{\"1\":{\"440\":1,\"441\":1}}],[\"userinfocontext\",{\"1\":{\"396\":1}}],[\"userdetailupdatedto\",{\"1\":{\"385\":2}}],[\"users\",{\"1\":{\"351\":1,\"491\":1}}],[\"user=minio\",{\"1\":{\"461\":1}}],[\"user=mysql\",{\"1\":{\"139\":2,\"140\":1,\"474\":1}}],[\"user=admin\",{\"1\":{\"460\":1}}],[\"user=\",{\"1\":{\"141\":1,\"474\":1,\"479\":1}}],[\"useradd\",{\"1\":{\"138\":1,\"459\":1}}],[\"user$\",{\"1\":{\"28\":2}}],[\"user\",{\"1\":{\"28\":4,\"77\":9,\"78\":3,\"140\":1,\"141\":2,\"157\":4,\"165\":3,\"194\":5,\"223\":1,\"314\":1,\"351\":3,\"385\":1,\"396\":4,\"440\":2,\"441\":2,\"459\":13,\"461\":3,\"464\":1,\"474\":1,\"479\":1,\"483\":1,\"487\":1,\"489\":1,\"494\":2,\"498\":2}}],[\"username>\",{\"1\":{\"491\":1}}],[\"usernamevariable\",{\"1\":{\"440\":1}}],[\"usernamepassword\",{\"1\":{\"440\":1}}],[\"usernamepasswordcredentials\",{\"1\":{\"323\":1}}],[\"username\",{\"1\":{\"21\":2,\"28\":1,\"78\":2,\"84\":1,\"106\":1,\"109\":1,\"113\":2,\"315\":1,\"323\":4,\"333\":1,\"334\":1,\"340\":1,\"351\":1,\"352\":1,\"440\":2,\"491\":4}}],[\"user1\",{\"1\":{\"16\":2}}],[\"used\",{\"1\":{\"3\":1,\"386\":1,\"462\":1}}],[\"um16\",{\"1\":{\"19\":1}}],[\"updating\",{\"1\":{\"418\":1}}],[\"updates=true\",{\"1\":{\"478\":1}}],[\"updated\",{\"1\":{\"215\":1}}],[\"update\",{\"1\":{\"12\":1,\"13\":1,\"15\":1,\"30\":1,\"35\":1,\"41\":1,\"46\":1,\"64\":2,\"74\":3,\"76\":2,\"77\":4,\"79\":1,\"141\":1,\"143\":1,\"216\":1,\"385\":3,\"474\":1}}],[\"upgrade\",{\"1\":{\"165\":3,\"464\":3}}],[\"upstream\",{\"1\":{\"161\":1,\"162\":1,\"163\":1,\"164\":1,\"165\":2,\"464\":3,\"490\":1}}],[\"up\",{\"1\":{\"104\":1,\"105\":1,\"309\":1}}],[\"upper\",{\"1\":{\"52\":1,\"79\":1,\"345\":1}}],[\"upload\",{\"1\":{\"3\":4}}],[\"ivh\",{\"1\":{\"473\":6}}],[\"ibatis\",{\"1\":{\"389\":1}}],[\"ibeetl<\",{\"1\":{\"369\":1}}],[\"ibeetl\",{\"1\":{\"368\":1}}],[\"ignore\",{\"1\":{\"112\":1}}],[\"ipaddr\",{\"1\":{\"344\":1}}],[\"ipaddress\",{\"1\":{\"109\":1}}],[\"ip方式\",{\"1\":{\"344\":1}}],[\"ip范围\",{\"1\":{\"344\":1}}],[\"ip类型\",{\"1\":{\"317\":1}}],[\"ip改为elasticsearch的网络ip\",{\"1\":{\"109\":1}}],[\"ip\",{\"0\":{\"163\":1},\"1\":{\"109\":2,\"113\":1,\"129\":1,\"160\":1,\"162\":1,\"163\":3,\"164\":1,\"165\":1,\"166\":1,\"317\":2,\"323\":1,\"344\":2,\"458\":1,\"464\":3,\"485\":1,\"490\":2}}],[\"ikaros\",{\"1\":{\"174\":1}}],[\"ik分词器\",{\"0\":{\"311\":1},\"1\":{\"110\":1,\"311\":1,\"312\":2}}],[\"ik\",{\"1\":{\"108\":1,\"110\":6,\"112\":2,\"311\":4,\"312\":2}}],[\"itementitylist\",{\"1\":{\"386\":1}}],[\"items\",{\"1\":{\"3\":2}}],[\"itd\",{\"1\":{\"120\":1}}],[\"it\",{\"1\":{\"95\":1,\"108\":2,\"109\":1,\"110\":1,\"111\":1,\"121\":1,\"122\":1,\"311\":1,\"314\":1,\"315\":1,\"351\":1,\"386\":5}}],[\"i++\",{\"1\":{\"83\":1,\"355\":1}}],[\"iodh实现\",{\"1\":{\"283\":1,\"397\":1}}],[\"ioc创建对象\",{\"1\":{\"381\":1}}],[\"ioc创建容器\",{\"1\":{\"357\":1,\"376\":1}}],[\"ioc自动创建\",{\"1\":{\"352\":1,\"360\":1}}],[\"ioc会自动创建b对象注入到需要的地方\",{\"1\":{\"280\":1}}],[\"ioc容器\",{\"1\":{\"280\":1}}],[\"io\",{\"1\":{\"83\":2,\"93\":1,\"309\":2,\"445\":1,\"459\":1,\"461\":1,\"479\":2,\"489\":1,\"492\":2}}],[\"ioexception\",{\"1\":{\"8\":4,\"9\":3,\"10\":1,\"83\":2,\"339\":1,\"343\":1,\"344\":1,\"345\":1,\"347\":1,\"348\":1,\"353\":1,\"362\":1,\"371\":1}}],[\"ico\",{\"1\":{\"21\":1}}],[\"i=i+1\",{\"1\":{\"18\":1}}],[\"i<num\",{\"1\":{\"18\":1}}],[\"i\",{\"1\":{\"18\":3,\"19\":3,\"83\":4,\"318\":1,\"355\":3,\"389\":2,\"450\":1,\"454\":2,\"459\":1}}],[\"im\",{\"1\":{\"118\":1}}],[\"impl\",{\"1\":{\"391\":10}}],[\"implements\",{\"1\":{\"84\":1,\"300\":1,\"378\":2,\"379\":1,\"380\":1,\"381\":1,\"390\":2,\"414\":1,\"418\":2,\"420\":1,\"421\":1}}],[\"import\",{\"1\":{\"83\":11,\"84\":12,\"323\":1,\"387\":6,\"396\":4,\"420\":4,\"421\":7,\"425\":1}}],[\"imagesize\",{\"1\":{\"133\":1}}],[\"images\",{\"1\":{\"95\":1}}],[\"imageio\",{\"1\":{\"83\":5}}],[\"image\",{\"1\":{\"16\":1,\"83\":9,\"92\":2,\"104\":3,\"105\":2,\"118\":1,\"133\":1,\"138\":1,\"143\":1,\"151\":2,\"158\":1,\"221\":1,\"222\":1,\"225\":1,\"278\":1,\"305\":1,\"309\":3,\"319\":1,\"380\":1,\"381\":1,\"415\":1,\"425\":1,\"435\":2,\"440\":9,\"450\":1,\"451\":1,\"462\":1,\"463\":1,\"464\":1,\"487\":1,\"488\":1,\"489\":1,\"494\":1,\"496\":1,\"497\":1}}],[\"img3\",{\"1\":{\"106\":1}}],[\"img2\",{\"1\":{\"106\":1}}],[\"img1\",{\"1\":{\"106\":1}}],[\"img4\",{\"1\":{\"106\":1}}],[\"imgs=\",{\"1\":{\"19\":1}}],[\"imgs\",{\"1\":{\"15\":3,\"18\":1,\"19\":2}}],[\"img\",{\"1\":{\"14\":2,\"15\":2,\"234\":1}}],[\"id>\",{\"1\":{\"447\":1,\"491\":1}}],[\"identityfile\",{\"1\":{\"440\":1,\"441\":1}}],[\"identify\",{\"1\":{\"418\":1}}],[\"identified\",{\"1\":{\"77\":1,\"141\":1,\"478\":1}}],[\"ide\",{\"1\":{\"426\":1}}],[\"idea中集成使用\",{\"1\":{\"426\":1}}],[\"idsquery\",{\"1\":{\"331\":1}}],[\"ids查询\",{\"0\":{\"331\":1}}],[\"id一致相当于update\",{\"1\":{\"323\":1}}],[\"id值越大越优先查询\",{\"1\":{\"223\":1}}],[\"id值越⼤优先级越⾼\",{\"1\":{\"19\":1}}],[\"id值不同\",{\"1\":{\"223\":1}}],[\"id值相同\",{\"1\":{\"223\":1}}],[\"id`\",{\"1\":{\"67\":1,\"68\":1,\"70\":1,\"71\":1}}],[\"idle\",{\"1\":{\"21\":2}}],[\"id的序号会递增\",{\"1\":{\"19\":1}}],[\"id不同\",{\"1\":{\"19\":1}}],[\"id相同的可以认为是⼀组\",{\"1\":{\"19\":1}}],[\"id相同不同\",{\"1\":{\"19\":1}}],[\"id相同\",{\"1\":{\"19\":1}}],[\"id=dontkillme\",{\"1\":{\"450\":1}}],[\"id=\",{\"1\":{\"188\":1,\"189\":1,\"190\":1,\"191\":1,\"192\":2,\"193\":1,\"194\":1,\"215\":1}}],[\"id=1\",{\"1\":{\"143\":1}}],[\"id=100\",{\"1\":{\"19\":1}}],[\"id=a\",{\"1\":{\"14\":2}}],[\"id性能最高\",{\"1\":{\"19\":1,\"219\":1}}],[\"id\",{\"1\":{\"15\":2,\"17\":1,\"19\":1,\"28\":3,\"39\":1,\"56\":5,\"61\":1,\"62\":1,\"63\":6,\"74\":1,\"76\":2,\"78\":2,\"112\":1,\"223\":1,\"273\":2,\"319\":1,\"321\":1,\"326\":1,\"389\":2,\"390\":6,\"391\":4,\"435\":3,\"440\":3,\"441\":1,\"473\":1,\"478\":1,\"479\":1}}],[\"if=\",{\"1\":{\"190\":4}}],[\"if可以实现条件判断\",{\"1\":{\"190\":1}}],[\"ifnull函数\",{\"1\":{\"55\":1}}],[\"ifnull\",{\"1\":{\"48\":1}}],[\"if\",{\"1\":{\"9\":2,\"33\":2,\"36\":1,\"42\":1,\"165\":2,\"195\":1,\"337\":1,\"354\":1,\"370\":1,\"373\":1,\"376\":1,\"378\":3,\"379\":3,\"380\":3,\"381\":4,\"385\":1,\"386\":1,\"387\":1,\"390\":1,\"391\":3,\"396\":3,\"420\":1,\"421\":1,\"422\":2,\"425\":5,\"430\":1,\"431\":1,\"450\":3,\"461\":1,\"464\":1}}],[\"iname\",{\"1\":{\"445\":1}}],[\"indices\",{\"1\":{\"319\":1}}],[\"index=slave\",{\"1\":{\"479\":1}}],[\"index与all区别为index类型只遍历索引树\",{\"1\":{\"19\":1}}],[\"index\",{\"1\":{\"19\":14,\"21\":1,\"22\":2,\"62\":1,\"97\":1,\"112\":1,\"165\":7,\"219\":3,\"223\":2,\"304\":3,\"306\":1,\"310\":1,\"320\":1,\"325\":1,\"326\":2,\"327\":1,\"329\":1,\"337\":1,\"338\":1,\"339\":1,\"340\":1,\"341\":1,\"343\":2,\"344\":4,\"345\":2,\"479\":1}}],[\"innodb存储原理\",{\"0\":{\"222\":1}}],[\"inner|left|right\",{\"1\":{\"22\":1}}],[\"inner\",{\"1\":{\"14\":2,\"68\":1}}],[\"input>\",{\"1\":{\"189\":1}}],[\"input\",{\"1\":{\"189\":1,\"195\":1}}],[\"inputstreamreader\",{\"1\":{\"8\":1,\"9\":1}}],[\"inputstream\",{\"1\":{\"6\":1,\"9\":6}}],[\"invocation\",{\"1\":{\"420\":2,\"421\":2}}],[\"invocationhandler\",{\"1\":{\"420\":3}}],[\"invoke\",{\"1\":{\"420\":2,\"421\":1}}],[\"invoker\",{\"1\":{\"84\":2}}],[\"invalid\",{\"1\":{\"165\":1,\"464\":1}}],[\"included\",{\"1\":{\"384\":1}}],[\"include代表引入一个外部的文件\",{\"1\":{\"157\":1}}],[\"include\",{\"1\":{\"157\":3,\"165\":2,\"386\":1}}],[\"increment\",{\"1\":{\"63\":3,\"74\":1,\"78\":3,\"79\":1}}],[\"ingest\",{\"1\":{\"111\":1,\"112\":1}}],[\"inspect\",{\"1\":{\"95\":1,\"109\":1,\"117\":1}}],[\"install命令\",{\"1\":{\"157\":1}}],[\"install\",{\"1\":{\"106\":5,\"110\":1,\"111\":1,\"115\":1,\"140\":1,\"146\":2,\"157\":3,\"171\":2,\"184\":2,\"199\":1,\"200\":1,\"311\":1,\"440\":1,\"441\":1,\"444\":2,\"446\":1,\"450\":1,\"454\":2,\"461\":1,\"473\":2,\"483\":1,\"493\":2,\"494\":2,\"495\":3,\"498\":2}}],[\"installed\",{\"1\":{\"93\":1}}],[\"instanceof\",{\"1\":{\"354\":1,\"378\":1,\"379\":1}}],[\"instance\",{\"1\":{\"84\":2,\"422\":11}}],[\"instance=new\",{\"1\":{\"84\":1}}],[\"insert|update|delete\",{\"1\":{\"15\":1}}],[\"insert\",{\"1\":{\"12\":1,\"13\":1,\"15\":5,\"18\":1,\"19\":1,\"30\":1,\"39\":1,\"44\":3,\"52\":1,\"74\":1,\"79\":1,\"143\":1,\"216\":1}}],[\"inline\",{\"1\":{\"28\":3}}],[\"ini文件\",{\"1\":{\"153\":1}}],[\"init\",{\"1\":{\"84\":1,\"140\":5,\"172\":1,\"253\":2,\"445\":1}}],[\"initialize\",{\"1\":{\"139\":1,\"391\":1,\"474\":1}}],[\"initial\",{\"1\":{\"21\":1,\"188\":1,\"215\":1}}],[\"ini\",{\"1\":{\"23\":1,\"153\":1}}],[\"in等的查询\",{\"1\":{\"19\":1}}],[\"information\",{\"1\":{\"112\":1}}],[\"info\",{\"1\":{\"19\":1,\"153\":1,\"165\":2,\"385\":1,\"388\":2,\"389\":1,\"390\":4,\"391\":15,\"396\":4,\"450\":1,\"495\":1,\"496\":1,\"497\":1,\"499\":2}}],[\"inout\",{\"1\":{\"18\":1}}],[\"in\",{\"1\":{\"13\":1,\"18\":4,\"26\":1,\"49\":3,\"72\":1,\"145\":1,\"165\":1,\"191\":3,\"223\":4,\"328\":1,\"370\":1,\"373\":1,\"386\":7,\"431\":1,\"432\":1,\"450\":1,\"461\":1}}],[\"integration\",{\"1\":{\"449\":1}}],[\"integer=\",{\"1\":{\"384\":1}}],[\"integer为null\",{\"1\":{\"384\":1}}],[\"integer类型\",{\"1\":{\"384\":1}}],[\"integer\",{\"1\":{\"133\":1,\"286\":1,\"317\":2,\"323\":1,\"400\":1}}],[\"internal\",{\"1\":{\"391\":1}}],[\"interruptedexception\",{\"1\":{\"390\":1}}],[\"interger指定整数精度\",{\"1\":{\"384\":1}}],[\"interface\",{\"1\":{\"378\":1,\"418\":1}}],[\"intercept\",{\"1\":{\"421\":1}}],[\"interceptorregistry\",{\"1\":{\"378\":1,\"390\":1}}],[\"interceptorconfig\",{\"1\":{\"378\":1,\"390\":1}}],[\"interceptor\",{\"1\":{\"252\":3}}],[\"intercaputer\",{\"0\":{\"254\":1}}],[\"interactive\",{\"1\":{\"108\":1,\"314\":1}}],[\"interval\",{\"1\":{\"79\":1}}],[\"intersect\",{\"1\":{\"26\":1}}],[\"into\",{\"1\":{\"13\":1,\"15\":3,\"18\":1,\"19\":1,\"44\":3,\"74\":1,\"441\":1}}],[\"int\",{\"1\":{\"8\":1,\"12\":1,\"16\":3,\"17\":3,\"18\":5,\"39\":4,\"61\":1,\"62\":1,\"63\":6,\"74\":1,\"78\":6,\"83\":1,\"216\":1,\"323\":5,\"355\":1,\"385\":1,\"420\":2,\"421\":2}}],[\"isempty\",{\"1\":{\"390\":1,\"396\":2,\"425\":2}}],[\"isnull\",{\"1\":{\"376\":1,\"396\":1}}],[\"issue\",{\"1\":{\"386\":1}}],[\"issucceeded\",{\"1\":{\"337\":1}}],[\"issingleton\",{\"1\":{\"84\":2}}],[\"isolation\",{\"1\":{\"76\":3}}],[\"isready\",{\"1\":{\"8\":1}}],[\"isfinished\",{\"1\":{\"8\":1}}],[\"is\",{\"1\":{\"3\":1,\"5\":1,\"6\":1,\"10\":1,\"13\":1,\"49\":3,\"223\":2,\"384\":1,\"386\":3,\"430\":1,\"431\":1,\"461\":1,\"462\":1,\"473\":2,\"476\":2}}],[\"tlsv1\",{\"1\":{\"464\":6}}],[\"t|caller\",{\"1\":{\"389\":1}}],[\"two\",{\"1\":{\"360\":3}}],[\"tws123456\",{\"1\":{\"28\":1}}],[\"t3\",{\"1\":{\"357\":1}}],[\"ttl\",{\"1\":{\"230\":1,\"360\":1}}],[\"tmethods\",{\"1\":{\"215\":1}}],[\"tdata\",{\"1\":{\"215\":1}}],[\"tvar\",{\"1\":{\"215\":1}}],[\"t<script>\",{\"1\":{\"215\":1}}],[\"t<script\",{\"1\":{\"215\":1}}],[\"t<\",{\"1\":{\"215\":2}}],[\"t<div\",{\"1\":{\"215\":1}}],[\"t<title>vueapp<\",{\"1\":{\"215\":1}}],[\"t<meta\",{\"1\":{\"215\":2}}],[\"tnnd\",{\"1\":{\"187\":1}}],[\"t参数\",{\"1\":{\"118\":1}}],[\"take\",{\"1\":{\"286\":1,\"400\":1}}],[\"taobao\",{\"1\":{\"183\":2,\"198\":1}}],[\"tags\",{\"1\":{\"351\":1}}],[\"tagline\",{\"1\":{\"310\":1}}],[\"tag\",{\"1\":{\"179\":1,\"362\":4,\"392\":1,\"440\":1}}],[\"target\",{\"1\":{\"140\":2,\"157\":2,\"378\":1,\"421\":3,\"439\":2,\"450\":2,\"461\":3,\"483\":2,\"494\":4,\"498\":4}}],[\"tar\",{\"1\":{\"138\":2,\"157\":3,\"441\":9,\"447\":3,\"473\":2,\"481\":2,\"482\":2,\"493\":2}}],[\"tasksmax=infinity\",{\"1\":{\"461\":1}}],[\"task\",{\"1\":{\"391\":6}}],[\"taskexecutor\",{\"1\":{\"300\":2,\"414\":2}}],[\"taskregistrar\",{\"1\":{\"300\":2,\"414\":2}}],[\"taskkill\",{\"1\":{\"118\":1}}],[\"tasklist|findstr\",{\"1\":{\"118\":1}}],[\"tail\",{\"1\":{\"116\":6,\"165\":2,\"450\":2,\"488\":1,\"489\":1}}],[\"tail命令\",{\"1\":{\"116\":1}}],[\"tab\",{\"1\":{\"78\":11}}],[\"tab=sql篇\",{\"1\":{\"13\":1}}],[\"table1类型是derived\",{\"1\":{\"223\":1}}],[\"table2的类型是union\",{\"1\":{\"223\":1}}],[\"table2\",{\"1\":{\"223\":1}}],[\"tables\",{\"1\":{\"28\":2,\"40\":1,\"77\":1}}],[\"table\",{\"1\":{\"13\":3,\"19\":3,\"28\":1,\"39\":3,\"41\":6,\"42\":3,\"45\":1,\"61\":3,\"62\":3,\"63\":7,\"64\":4,\"74\":1,\"78\":4,\"143\":1,\"219\":1,\"223\":1,\"304\":1,\"476\":1}}],[\"tcpsudo\",{\"1\":{\"484\":1}}],[\"tcp的丢包问题\",{\"1\":{\"282\":1}}],[\"tcp协议主要就是三次握手和四次挥手\",{\"1\":{\"282\":1}}],[\"tcp重启防火墙\",{\"1\":{\"157\":1}}],[\"tcp\",{\"0\":{\"282\":1},\"1\":{\"116\":1,\"141\":1,\"157\":2,\"165\":1,\"177\":1,\"179\":2,\"445\":1,\"458\":2,\"475\":1,\"476\":2,\"495\":4,\"497\":2}}],[\"tcl\",{\"1\":{\"12\":1,\"216\":1}}],[\"tz=\",{\"1\":{\"439\":1}}],[\"tz\",{\"1\":{\"104\":3}}],[\"txcommit\",{\"1\":{\"273\":1}}],[\"txrollback\",{\"1\":{\"273\":1}}],[\"txselect\",{\"1\":{\"273\":1}}],[\"txt\",{\"1\":{\"116\":1,\"146\":2}}],[\"tx\",{\"1\":{\"76\":1}}],[\"t2\",{\"1\":{\"59\":2,\"67\":3,\"70\":5,\"71\":2}}],[\"t1\",{\"1\":{\"59\":2,\"67\":4,\"70\":4,\"71\":2,\"355\":1,\"371\":1}}],[\"thymeleaf\",{\"1\":{\"368\":2}}],[\"thresholdfilter\",{\"1\":{\"389\":1}}],[\"threads\",{\"1\":{\"461\":1}}],[\"thread线程可以拥有多个threadlocal维护的自己线程独享的共享变量\",{\"1\":{\"395\":1}}],[\"threadlocal<map<string\",{\"1\":{\"396\":1}}],[\"threadlocal会为每个线程提供一份变量\",{\"1\":{\"396\":1}}],[\"threadlocals\",{\"1\":{\"396\":6}}],[\"threadlocalmap之间的关系\",{\"0\":{\"395\":1}}],[\"threadlocal与thread\",{\"0\":{\"395\":1}}],[\"threadlocal为变量在每个线程中都创建了一个副本\",{\"1\":{\"394\":1}}],[\"threadlocal叫做\",{\"1\":{\"394\":1}}],[\"threadlocal介绍\",{\"0\":{\"394\":1}}],[\"threadlocal\",{\"0\":{\"393\":1},\"1\":{\"394\":1,\"396\":3}}],[\"threadmdcutil\",{\"1\":{\"391\":4}}],[\"thread表示线程名\",{\"1\":{\"389\":2}}],[\"thread\",{\"1\":{\"389\":4,\"396\":8,\"420\":1,\"421\":1}}],[\"threadfactorybuilder\",{\"1\":{\"300\":2,\"414\":2}}],[\"threadfactory\",{\"1\":{\"300\":6,\"414\":6}}],[\"threadinner\",{\"1\":{\"283\":2,\"397\":2}}],[\"threadpoolconfig\",{\"1\":{\"391\":1}}],[\"threadpooltaskexecutor提供了丰富的监控和管理功能\",{\"1\":{\"391\":1}}],[\"threadpooltaskexecutor提供了更多的配置选项和属性\",{\"1\":{\"391\":1}}],[\"threadpooltaskexecutor是对threadpoolexecutor的增强和封装\",{\"1\":{\"391\":1}}],[\"threadpooltaskexecutor是对threadpoolexecutor的封装\",{\"1\":{\"391\":1}}],[\"threadpooltaskexecutor是spring框架的一部分\",{\"1\":{\"391\":1}}],[\"threadpooltaskexecutor是spring框架对threadpoolexecutor的封装\",{\"1\":{\"391\":1}}],[\"threadpooltaskexecutor\",{\"1\":{\"391\":1}}],[\"threadpoolexecutor\",{\"1\":{\"283\":3,\"286\":1,\"287\":4,\"300\":4,\"397\":3,\"400\":1,\"401\":4,\"414\":4}}],[\"threadpoolsingle\",{\"1\":{\"283\":5,\"397\":5}}],[\"threadpool\",{\"0\":{\"283\":1,\"397\":1}}],[\"throwable\",{\"1\":{\"376\":1,\"385\":2,\"420\":1,\"421\":1}}],[\"throw\",{\"1\":{\"329\":1,\"337\":1,\"420\":2,\"421\":2}}],[\"throws\",{\"1\":{\"8\":4,\"10\":1,\"84\":11,\"339\":1,\"343\":1,\"344\":1,\"345\":1,\"347\":1,\"348\":1,\"353\":1,\"362\":1,\"371\":1,\"376\":1,\"378\":1,\"379\":1,\"387\":2,\"390\":1,\"420\":1,\"421\":1}}],[\"this\",{\"1\":{\"192\":1,\"210\":5,\"211\":2,\"214\":3,\"418\":1,\"420\":1,\"421\":2,\"425\":3,\"461\":3}}],[\"the\",{\"1\":{\"145\":3,\"384\":1,\"386\":17,\"418\":3,\"461\":2,\"476\":2}}],[\"then\",{\"1\":{\"50\":3,\"165\":2,\"430\":1,\"431\":1,\"450\":3,\"461\":1}}],[\"that\",{\"1\":{\"145\":1,\"384\":1,\"386\":6,\"418\":1,\"461\":1}}],[\"types中放着大量的媒体类型\",{\"1\":{\"157\":1}}],[\"types\",{\"1\":{\"157\":1,\"165\":1}}],[\"type=notify\",{\"1\":{\"461\":1}}],[\"type=\",{\"1\":{\"194\":1}}],[\"type=forking\",{\"1\":{\"140\":1,\"157\":1,\"483\":1,\"494\":2,\"498\":2}}],[\"type=single\",{\"1\":{\"108\":2}}],[\"type\",{\"1\":{\"19\":1,\"21\":2,\"28\":4,\"83\":1,\"112\":3,\"157\":1,\"165\":1,\"223\":2,\"304\":3,\"310\":1,\"320\":5,\"326\":1,\"338\":1,\"346\":2,\"347\":1,\"381\":1,\"464\":1}}],[\"type包含的类型包括如下图所示的⼏种\",{\"1\":{\"19\":2}}],[\"type所显示的是查询使⽤了哪种类型\",{\"1\":{\"19\":2}}],[\"t\",{\"1\":{\"14\":4,\"15\":7,\"17\":1,\"18\":2,\"19\":15,\"22\":1,\"28\":6,\"84\":8,\"118\":1,\"146\":4,\"215\":15,\"300\":1,\"371\":3,\"386\":1,\"396\":2,\"414\":1,\"435\":1,\"450\":1,\"454\":2,\"476\":2}}],[\"tid\",{\"1\":{\"390\":3}}],[\"tidying\",{\"1\":{\"293\":1,\"297\":2,\"298\":1,\"407\":1,\"411\":2,\"412\":1}}],[\"tips\",{\"1\":{\"159\":1,\"473\":1,\"475\":1,\"479\":1}}],[\"timevaluemillis\",{\"1\":{\"337\":2}}],[\"timevalue\",{\"1\":{\"337\":2}}],[\"timed\",{\"1\":{\"326\":1}}],[\"timeunit\",{\"1\":{\"283\":1,\"300\":3,\"397\":1,\"414\":3}}],[\"timeoutstopsec=infinity\",{\"1\":{\"461\":1}}],[\"timeoutexception\",{\"1\":{\"353\":1}}],[\"timeout\",{\"1\":{\"157\":1,\"165\":6,\"461\":1,\"464\":3,\"495\":1,\"496\":1,\"497\":1}}],[\"timestamp=true\",{\"1\":{\"139\":1}}],[\"timestamp\",{\"1\":{\"39\":2}}],[\"time\",{\"1\":{\"21\":3,\"39\":1,\"51\":2,\"212\":1,\"380\":1}}],[\"title>\",{\"1\":{\"188\":1,\"215\":1,\"370\":1}}],[\"title=\",{\"1\":{\"19\":2}}],[\"title\",{\"1\":{\"14\":3,\"15\":2,\"19\":2,\"84\":3,\"370\":1,\"371\":1}}],[\"tinyint\",{\"1\":{\"12\":1,\"216\":1}}],[\"treeset\",{\"0\":{\"246\":1},\"1\":{\"240\":1}}],[\"treemap\",{\"0\":{\"250\":1},\"1\":{\"240\":1}}],[\"tree\",{\"1\":{\"220\":1}}],[\"traceid\",{\"1\":{\"391\":1}}],[\"traceinterceptor\",{\"1\":{\"390\":3}}],[\"trace\",{\"1\":{\"389\":3,\"390\":6,\"391\":4}}],[\"tran\",{\"1\":{\"361\":1}}],[\"transport\",{\"1\":{\"108\":1,\"314\":1}}],[\"transactional\",{\"1\":{\"361\":1}}],[\"transaction\",{\"1\":{\"74\":2,\"76\":3}}],[\"travel\",{\"1\":{\"212\":1}}],[\"true\",{\"1\":{\"21\":10,\"83\":1,\"84\":4,\"108\":3,\"112\":1,\"257\":1,\"299\":1,\"314\":3,\"320\":1,\"337\":1,\"361\":1,\"362\":3,\"378\":1,\"379\":2,\"384\":1,\"390\":1,\"391\":1,\"413\":1,\"440\":6,\"441\":1,\"464\":1}}],[\"truncate等\",{\"1\":{\"143\":1}}],[\"truncate\",{\"1\":{\"13\":1,\"45\":1}}],[\"triggered\",{\"1\":{\"386\":1}}],[\"trigger\",{\"1\":{\"15\":7}}],[\"try\",{\"1\":{\"9\":3,\"83\":4,\"165\":1,\"258\":1,\"329\":1,\"337\":1,\"391\":2,\"418\":1,\"420\":1,\"421\":1}}],[\"tpl\",{\"1\":{\"12\":1,\"216\":1}}],[\"team\",{\"1\":{\"440\":1}}],[\"teatarea\",{\"1\":{\"195\":1}}],[\"termsquery\",{\"1\":{\"328\":1}}],[\"terms\",{\"1\":{\"328\":1}}],[\"terms是在针对一个字段包含多个值的时候使用\",{\"1\":{\"328\":1}}],[\"terms和term的查询机制是一样\",{\"1\":{\"328\":1}}],[\"terms查询\",{\"0\":{\"328\":1}}],[\"termsearch\",{\"1\":{\"327\":1}}],[\"termquery\",{\"1\":{\"327\":1,\"339\":3,\"340\":1}}],[\"term\",{\"1\":{\"325\":2,\"328\":1}}],[\"term完整匹配\",{\"1\":{\"325\":1}}],[\"term的查询是代表完全匹配\",{\"1\":{\"325\":1}}],[\"term查询\",{\"0\":{\"325\":1}}],[\"terminated\",{\"0\":{\"298\":1,\"412\":1},\"1\":{\"293\":1,\"298\":1,\"407\":1,\"412\":1}}],[\"telling\",{\"1\":{\"386\":1}}],[\"tel\",{\"1\":{\"215\":1}}],[\"telephone\",{\"1\":{\"78\":2}}],[\"tencentyun\",{\"1\":{\"94\":1}}],[\"testtrace2\",{\"1\":{\"390\":2}}],[\"testtrace\",{\"1\":{\"390\":2}}],[\"test2\",{\"1\":{\"319\":2}}],[\"test1\",{\"1\":{\"319\":1}}],[\"testonreturn\",{\"1\":{\"21\":1}}],[\"testonborrow\",{\"1\":{\"21\":1}}],[\"testwhileidle\",{\"1\":{\"21\":1}}],[\"test\",{\"1\":{\"16\":2,\"83\":2,\"116\":8,\"214\":1,\"223\":1,\"300\":1,\"319\":2,\"321\":1,\"341\":3,\"344\":6,\"345\":2,\"352\":1,\"355\":1,\"357\":1,\"371\":1,\"414\":1,\"418\":4,\"420\":1,\"421\":1,\"450\":2,\"468\":2}}],[\"text3\",{\"1\":{\"216\":1}}],[\"textarea\",{\"1\":{\"189\":1}}],[\"text\",{\"1\":{\"12\":1,\"112\":2,\"312\":3,\"317\":1,\"320\":2,\"325\":1,\"346\":1}}],[\"templates\",{\"1\":{\"371\":1}}],[\"template>\",{\"1\":{\"215\":1}}],[\"template\",{\"1\":{\"194\":1,\"371\":1}}],[\"temporary\",{\"1\":{\"19\":1,\"22\":1,\"223\":1,\"474\":1}}],[\"tempdir\",{\"1\":{\"3\":1}}],[\"temp\",{\"1\":{\"3\":1,\"165\":1}}],[\"touch\",{\"1\":{\"441\":1}}],[\"tolowercase\",{\"1\":{\"440\":1}}],[\"tolerance\",{\"1\":{\"279\":1}}],[\"tointeger\",{\"1\":{\"440\":1}}],[\"todo\",{\"1\":{\"385\":1}}],[\"token+token\",{\"1\":{\"380\":2}}],[\"tokens\",{\"1\":{\"380\":4}}],[\"tokenfilter\",{\"1\":{\"380\":1,\"391\":1}}],[\"token\",{\"1\":{\"379\":5,\"380\":4,\"385\":1}}],[\"tokeninterceptor\",{\"1\":{\"378\":1,\"379\":1}}],[\"tojsonstring\",{\"1\":{\"378\":1,\"379\":1,\"381\":1}}],[\"topic类型对消息过滤\",{\"1\":{\"366\":1}}],[\"topic类型\",{\"1\":{\"359\":1}}],[\"topic\",{\"1\":{\"356\":1}}],[\"topicid=268\",{\"1\":{\"13\":1}}],[\"top\",{\"1\":{\"348\":1}}],[\"total\",{\"1\":{\"326\":2}}],[\"toolkit\",{\"0\":{\"426\":1},\"1\":{\"426\":1}}],[\"tool\",{\"1\":{\"396\":1}}],[\"tools\",{\"1\":{\"171\":1,\"449\":1,\"473\":1,\"481\":1}}],[\"took\",{\"1\":{\"326\":1}}],[\"toarray\",{\"1\":{\"323\":1}}],[\"tomcat3\",{\"1\":{\"104\":1}}],[\"tomcat8083\",{\"1\":{\"104\":1}}],[\"tomcat8082\",{\"1\":{\"104\":1}}],[\"tomcat8081\",{\"1\":{\"95\":1,\"97\":1,\"104\":1}}],[\"tomcat2\",{\"1\":{\"104\":1}}],[\"tomcat1\",{\"1\":{\"104\":1}}],[\"tomcat\",{\"1\":{\"95\":1,\"97\":6,\"104\":14,\"156\":2}}],[\"tostring\",{\"1\":{\"9\":1,\"338\":1,\"387\":1,\"390\":1,\"391\":1}}],[\"to\",{\"1\":{\"3\":1,\"41\":1,\"77\":2,\"110\":1,\"145\":2,\"197\":1,\"215\":2,\"279\":1,\"344\":6,\"357\":2,\"360\":1,\"386\":8,\"418\":2,\"478\":1,\"479\":1}}],[\"ecdh\",{\"1\":{\"464\":2}}],[\"ecdhe\",{\"1\":{\"464\":4}}],[\"echo\",{\"1\":{\"108\":1,\"309\":1,\"430\":5,\"431\":14,\"432\":5,\"440\":2,\"441\":7,\"450\":10,\"454\":13,\"458\":2,\"461\":1,\"484\":1}}],[\"ef\",{\"1\":{\"430\":1,\"431\":1}}],[\"ee\",{\"1\":{\"383\":1}}],[\"e+38表示是乘以10的38次方\",{\"1\":{\"317\":1}}],[\"e+308表示是乘以10的308次方\",{\"1\":{\"317\":1}}],[\"err\",{\"1\":{\"300\":1,\"327\":1,\"329\":1,\"337\":5,\"341\":2,\"343\":1,\"344\":4,\"345\":1,\"347\":1,\"348\":1,\"361\":1,\"378\":1,\"379\":1,\"414\":1,\"418\":2,\"420\":1,\"421\":1,\"491\":1}}],[\"errorstring\",{\"1\":{\"462\":1}}],[\"errors\",{\"1\":{\"462\":1}}],[\"error=\",{\"1\":{\"139\":1,\"141\":1,\"476\":1}}],[\"error\",{\"1\":{\"21\":1,\"153\":1,\"157\":3,\"162\":1,\"163\":1,\"165\":8,\"352\":1,\"354\":2,\"355\":2,\"385\":1,\"389\":3,\"390\":1,\"391\":2,\"420\":1,\"421\":1,\"462\":1,\"464\":1,\"473\":1}}],[\"eden放不下\",{\"1\":{\"271\":1}}],[\"ed8484bec\",{\"1\":{\"106\":1}}],[\"e524\",{\"1\":{\"179\":1}}],[\"everysec\",{\"1\":{\"227\":1,\"495\":1}}],[\"eventlistener\",{\"1\":{\"281\":1}}],[\"events块\",{\"1\":{\"157\":1}}],[\"events\",{\"1\":{\"157\":1,\"165\":1}}],[\"event\",{\"1\":{\"145\":2,\"415\":3}}],[\"evictable\",{\"1\":{\"21\":2}}],[\"eviction\",{\"1\":{\"21\":1}}],[\"es中提供了一个数据类型\",{\"1\":{\"346\":1}}],[\"es提供的统计数据的方式多种多样https\",{\"1\":{\"342\":1}}],[\"es的地图检索方式\",{\"1\":{\"346\":1}}],[\"es的聚合查询相比mysql要强大的多\",{\"1\":{\"342\":1}}],[\"es的聚合查询和mysql的聚合查询类似\",{\"1\":{\"342\":1}}],[\"es的服务中\",{\"1\":{\"306\":1}}],[\"es对from\",{\"1\":{\"337\":1}}],[\"es就可以去根据输入的内容大概去匹配一下结果\",{\"1\":{\"333\":1}}],[\"es查询\",{\"0\":{\"324\":1}}],[\"esclient\",{\"1\":{\"323\":1,\"327\":1,\"329\":1,\"337\":3,\"339\":1,\"340\":1,\"341\":1,\"343\":1,\"344\":1,\"345\":1,\"347\":1,\"348\":1}}],[\"es操作\",{\"0\":{\"316\":1}}],[\"es服务1\",{\"1\":{\"306\":1}}],[\"es结构\",{\"0\":{\"306\":1}}],[\"esac\",{\"1\":{\"165\":1,\"431\":1,\"432\":1,\"450\":1}}],[\"es\",{\"0\":{\"314\":1,\"317\":1},\"1\":{\"108\":5,\"306\":3,\"309\":1,\"310\":1,\"314\":2}}],[\"el7\",{\"1\":{\"445\":2,\"472\":4,\"473\":10}}],[\"el表达式\",{\"0\":{\"387\":1}}],[\"elementtype\",{\"1\":{\"378\":1}}],[\"elk\",{\"1\":{\"302\":1}}],[\"el\",{\"1\":{\"188\":1,\"189\":1,\"190\":1,\"191\":1,\"192\":1,\"194\":1,\"387\":9}}],[\"elastic\",{\"1\":{\"109\":1,\"314\":1,\"315\":1,\"323\":1,\"342\":1}}],[\"elasticsearchconfiguration\",{\"1\":{\"323\":1}}],[\"elasticsearchresttemplate\",{\"1\":{\"323\":1}}],[\"elasticsearch是基于lucene开发的分布式搜索框架\",{\"1\":{\"303\":1}}],[\"elasticsearch是什么\",{\"0\":{\"302\":1}}],[\"elasticsearch<\",{\"1\":{\"113\":1,\"323\":1}}],[\"elasticsearch\",{\"0\":{\"301\":1},\"1\":{\"108\":24,\"109\":5,\"110\":13,\"111\":2,\"113\":1,\"302\":4,\"304\":2,\"309\":18,\"310\":1,\"311\":7,\"314\":2,\"315\":2,\"323\":13,\"342\":1}}],[\"else>无效<\",{\"1\":{\"190\":1}}],[\"else\",{\"1\":{\"50\":1,\"190\":3,\"337\":1,\"354\":1,\"379\":1,\"391\":2,\"430\":1,\"431\":1}}],[\"etc\",{\"1\":{\"93\":1,\"94\":1,\"137\":1,\"139\":2,\"140\":5,\"141\":2,\"143\":1,\"157\":4,\"172\":2,\"173\":2,\"174\":1,\"175\":2,\"430\":1,\"431\":1,\"445\":2,\"447\":2,\"450\":1,\"458\":3,\"460\":2,\"461\":2,\"462\":1,\"464\":4,\"472\":1,\"475\":1,\"476\":1,\"479\":2,\"481\":2,\"490\":1,\"493\":7,\"494\":4,\"495\":2,\"497\":6,\"498\":4}}],[\"e1\",{\"1\":{\"83\":2}}],[\"embedder\",{\"1\":{\"464\":1}}],[\"email\",{\"1\":{\"78\":2,\"384\":1}}],[\"emp\",{\"1\":{\"67\":1,\"68\":2,\"70\":2,\"71\":1,\"164\":2}}],[\"eg2\",{\"1\":{\"22\":1}}],[\"eg1\",{\"1\":{\"22\":1}}],[\"equals\",{\"1\":{\"244\":1,\"425\":1}}],[\"equals是判断两个变量或实例所指向的内存空间的值是不是相同\",{\"1\":{\"244\":1}}],[\"equals方法被覆盖过\",{\"1\":{\"244\":1}}],[\"eq\",{\"1\":{\"19\":3,\"223\":1,\"326\":1}}],[\"env\",{\"1\":{\"439\":1,\"441\":1}}],[\"environmentfile=\",{\"1\":{\"461\":1}}],[\"environment\",{\"1\":{\"104\":3,\"105\":2,\"309\":2,\"440\":1,\"481\":1}}],[\"enhancer\",{\"1\":{\"421\":7}}],[\"encoding=\",{\"1\":{\"389\":1}}],[\"encoder>\",{\"1\":{\"389\":4}}],[\"encoder\",{\"1\":{\"389\":4}}],[\"encode\",{\"1\":{\"317\":1,\"491\":1}}],[\"entered\",{\"1\":{\"476\":1}}],[\"enter\",{\"1\":{\"318\":1}}],[\"entrypoint\",{\"1\":{\"117\":1,\"439\":1}}],[\"en\",{\"1\":{\"188\":1,\"215\":1,\"342\":1,\"370\":1,\"382\":1}}],[\"engine\",{\"1\":{\"93\":1}}],[\"english\",{\"1\":{\"49\":3}}],[\"enableasync\",{\"1\":{\"300\":1,\"391\":1,\"414\":1}}],[\"enablescheduling\",{\"1\":{\"300\":1,\"414\":1}}],[\"enable\",{\"1\":{\"21\":2,\"84\":2,\"140\":1,\"157\":1,\"177\":1,\"386\":1,\"435\":1,\"461\":1,\"475\":1,\"483\":1,\"494\":2,\"498\":2}}],[\"enabled\",{\"1\":{\"21\":9,\"108\":3,\"314\":3,\"495\":1,\"496\":1}}],[\"endpoint\",{\"1\":{\"133\":4}}],[\"end\",{\"1\":{\"18\":2,\"50\":1,\"391\":2,\"431\":1,\"432\":1}}],[\"end$\",{\"1\":{\"15\":2,\"16\":1,\"17\":2,\"18\":2}}],[\"ensure\",{\"1\":{\"3\":1}}],[\"each\",{\"1\":{\"15\":2}}],[\"easyexcle无法解析非文件流\",{\"1\":{\"3\":1}}],[\"ex\",{\"1\":{\"357\":2,\"390\":1}}],[\"exit\",{\"1\":{\"108\":1,\"109\":1,\"165\":1,\"258\":1,\"431\":1,\"432\":1,\"450\":2,\"461\":1}}],[\"existsset\",{\"1\":{\"381\":1}}],[\"exists\",{\"1\":{\"33\":2,\"36\":1,\"42\":1,\"79\":1,\"379\":1,\"380\":1}}],[\"exists替代not\",{\"1\":{\"26\":1}}],[\"exchange\",{\"1\":{\"360\":5,\"380\":3,\"381\":5}}],[\"exchange交换器\",{\"1\":{\"357\":1}}],[\"exchange的常⽤的交换器类型\",{\"1\":{\"357\":1}}],[\"excelfinal\",{\"1\":{\"84\":1}}],[\"exceptionhandler\",{\"1\":{\"385\":2}}],[\"exception\",{\"1\":{\"83\":2,\"329\":1,\"337\":1,\"361\":1,\"378\":1,\"379\":1,\"387\":2,\"390\":1,\"418\":1,\"420\":1,\"421\":1}}],[\"exclusions\",{\"1\":{\"21\":1}}],[\"execute\",{\"1\":{\"391\":2}}],[\"execution\",{\"1\":{\"376\":2}}],[\"executors\",{\"1\":{\"283\":1,\"397\":1}}],[\"executor=new\",{\"1\":{\"283\":1,\"397\":1}}],[\"executor\",{\"1\":{\"283\":1,\"299\":1,\"391\":9,\"397\":1,\"413\":1}}],[\"execreload=\",{\"1\":{\"140\":1,\"157\":1,\"483\":1}}],[\"execstartpre=\",{\"1\":{\"461\":1}}],[\"execstart=\",{\"1\":{\"140\":1,\"157\":1,\"461\":1,\"483\":2,\"488\":2,\"494\":2,\"498\":2}}],[\"execstop=\",{\"1\":{\"140\":1,\"157\":1,\"483\":1}}],[\"exec\",{\"1\":{\"95\":1,\"108\":2,\"109\":1,\"110\":1,\"111\":1,\"121\":1,\"122\":1,\"226\":1,\"311\":1,\"314\":1,\"315\":1,\"351\":1,\"391\":7}}],[\"exe\",{\"1\":{\"77\":1,\"118\":1}}],[\"expire\",{\"1\":{\"380\":1}}],[\"export\",{\"1\":{\"141\":1,\"215\":1,\"447\":3,\"481\":1}}],[\"expose\",{\"1\":{\"117\":1}}],[\"explicit\",{\"1\":{\"139\":1}}],[\"explain关键字\",{\"1\":{\"223\":1}}],[\"explain的结果分析\",{\"1\":{\"19\":1}}],[\"explain的结果说明\",{\"1\":{\"19\":1}}],[\"explain\",{\"1\":{\"19\":5,\"219\":1}}],[\"expressionfactory\",{\"1\":{\"387\":2}}],[\"expressionfactoryimpl\",{\"1\":{\"387\":2}}],[\"expression\",{\"1\":{\"28\":1}}],[\"extern\",{\"1\":{\"420\":1}}],[\"external\",{\"1\":{\"391\":1}}],[\"extendedstats\",{\"1\":{\"345\":3}}],[\"extended\",{\"1\":{\"345\":2}}],[\"extends\",{\"1\":{\"8\":1,\"10\":1,\"391\":1,\"425\":3}}],[\"extension\",{\"1\":{\"212\":1,\"491\":2}}],[\"extra需要尤其注重\",{\"1\":{\"223\":1}}],[\"extract\",{\"1\":{\"112\":1}}],[\"extra\",{\"1\":{\"19\":1,\"22\":1,\"223\":1}}],[\"example\",{\"1\":{\"386\":2,\"425\":2,\"486\":1}}],[\"exam\",{\"1\":{\"13\":1}}],[\"e\",{\"1\":{\"9\":5,\"22\":1,\"83\":4,\"98\":1,\"108\":4,\"109\":1,\"122\":1,\"128\":2,\"198\":2,\"317\":2,\"329\":2,\"337\":2,\"385\":5,\"387\":2,\"418\":2,\"420\":2,\"421\":2,\"440\":1,\"445\":1,\"471\":1,\"472\":1,\"479\":1}}],[\"c++\",{\"1\":{\"493\":1}}],[\"cb5bcdb2e5fc\",{\"1\":{\"476\":1}}],[\"cgi\",{\"1\":{\"447\":1}}],[\"cglbagent\",{\"1\":{\"421\":2}}],[\"cglibproxy\",{\"1\":{\"421\":2}}],[\"cglibtest\",{\"1\":{\"421\":6}}],[\"cglibretryproxyhandler\",{\"1\":{\"421\":3}}],[\"cglib代理\",{\"0\":{\"421\":1}}],[\"cglib实现重试机制案例\",{\"1\":{\"420\":1}}],[\"cglib适合于对具体业务类进行代理\",{\"1\":{\"419\":1}}],[\"cglib可以代理没有实现接口的类\",{\"1\":{\"419\":1}}],[\"cglib的性能可能会更差\",{\"1\":{\"419\":1}}],[\"cglib使用继承的方式创建代理对象\",{\"1\":{\"419\":1}}],[\"cglib\",{\"1\":{\"419\":1,\"421\":4}}],[\"cyan\",{\"1\":{\"389\":1}}],[\"cfg\",{\"1\":{\"371\":2}}],[\"ctrl\",{\"1\":{\"318\":3}}],[\"ctrl+c退出\",{\"1\":{\"174\":1}}],[\"centos7\",{\"1\":{\"471\":1}}],[\"centos7环境之rpm方式离线安装mysql5\",{\"1\":{\"470\":1}}],[\"center\",{\"1\":{\"146\":2}}],[\"cert\",{\"1\":{\"464\":4}}],[\"certificate\",{\"1\":{\"464\":4}}],[\"certain\",{\"1\":{\"386\":1}}],[\"ce\",{\"1\":{\"371\":3}}],[\"ceil\",{\"1\":{\"79\":1}}],[\"c<数目>\",{\"1\":{\"116\":1}}],[\"cp\",{\"1\":{\"110\":1,\"140\":1,\"279\":2,\"432\":1,\"450\":2,\"454\":4,\"468\":5,\"486\":1,\"493\":2,\"497\":2}}],[\"cci\",{\"1\":{\"440\":3}}],[\"ccc\",{\"1\":{\"159\":2}}],[\"ccs\",{\"1\":{\"94\":1}}],[\"ccl\",{\"1\":{\"12\":1,\"216\":1}}],[\"cd3oautlj3zqzjyrebs3\",{\"1\":{\"467\":1}}],[\"cdn\",{\"1\":{\"188\":1,\"189\":1,\"190\":1,\"191\":1,\"192\":1,\"215\":1,\"392\":1}}],[\"cd\",{\"1\":{\"91\":1,\"93\":1,\"110\":1,\"121\":1,\"138\":1,\"139\":1,\"146\":2,\"157\":5,\"173\":1,\"308\":1,\"311\":1,\"435\":1,\"450\":3,\"454\":3,\"459\":1,\"462\":1,\"466\":1,\"472\":1,\"473\":1,\"481\":1,\"482\":1,\"484\":1,\"486\":1,\"487\":1,\"489\":1,\"493\":2,\"495\":1,\"496\":1,\"497\":2}}],[\"ciphers\",{\"1\":{\"464\":4}}],[\"ci\",{\"1\":{\"91\":1}}],[\"cid\",{\"1\":{\"78\":6}}],[\"ch\",{\"1\":{\"389\":13}}],[\"children\",{\"1\":{\"175\":1}}],[\"choiajsd\",{\"1\":{\"170\":1}}],[\"chown\",{\"1\":{\"138\":3,\"459\":4}}],[\"chmod\",{\"1\":{\"101\":1,\"108\":1,\"140\":1,\"308\":1,\"309\":2,\"431\":1,\"432\":1,\"466\":1}}],[\"checkout\",{\"1\":{\"440\":1,\"441\":1}}],[\"checked\",{\"1\":{\"422\":1}}],[\"checkformdatabyruleel\",{\"1\":{\"387\":2}}],[\"checkparam\",{\"1\":{\"378\":2}}],[\"checksum来防止硬件错误和静默数据污染\",{\"1\":{\"125\":1}}],[\"check\",{\"1\":{\"79\":1}}],[\"chain\",{\"1\":{\"380\":2,\"381\":3}}],[\"channel可以理解为一个先进先出的消息队列\",{\"1\":{\"362\":1}}],[\"channel=connection\",{\"1\":{\"353\":1}}],[\"channel\",{\"1\":{\"273\":3,\"353\":4,\"362\":4}}],[\"change\",{\"1\":{\"41\":1,\"351\":1,\"479\":1}}],[\"chat\",{\"1\":{\"170\":1}}],[\"characterencoding=utf8\",{\"1\":{\"487\":1}}],[\"character\",{\"1\":{\"33\":2,\"35\":1,\"41\":1,\"79\":1,\"83\":3,\"139\":2,\"476\":2}}],[\"char\",{\"1\":{\"12\":1,\"78\":1,\"216\":1}}],[\"charset=\",{\"1\":{\"188\":1,\"215\":1,\"370\":1}}],[\"charset=utf\",{\"1\":{\"145\":1,\"378\":1,\"379\":1,\"381\":1}}],[\"charset\",{\"1\":{\"8\":1,\"9\":1,\"464\":2,\"485\":1}}],[\"cmd\",{\"1\":{\"77\":1,\"116\":2,\"141\":2,\"157\":3,\"177\":1,\"179\":3,\"439\":1,\"445\":1,\"458\":3,\"475\":3,\"484\":2,\"495\":5,\"497\":3}}],[\"cross\",{\"1\":{\"464\":2}}],[\"cred\",{\"1\":{\"440\":1,\"441\":1}}],[\"creditcardnumber\",{\"1\":{\"384\":1}}],[\"credentialsid\",{\"1\":{\"440\":3,\"441\":2}}],[\"credentialsprovider\",{\"1\":{\"323\":4}}],[\"credentials\",{\"1\":{\"133\":1,\"440\":3,\"441\":1,\"464\":1}}],[\"createvalueexpression\",{\"1\":{\"387\":2}}],[\"createmodel\",{\"1\":{\"382\":1}}],[\"createbe2\",{\"1\":{\"357\":1}}],[\"createbe1\",{\"1\":{\"357\":1}}],[\"createfe\",{\"1\":{\"357\":1}}],[\"createexq2\",{\"1\":{\"357\":2}}],[\"createexq1\",{\"1\":{\"357\":2}}],[\"createqueue2\",{\"1\":{\"355\":1}}],[\"createqueue1\",{\"1\":{\"352\":1}}],[\"createchannel\",{\"1\":{\"353\":1}}],[\"createdlbe\",{\"1\":{\"360\":1}}],[\"createdlec\",{\"1\":{\"360\":1}}],[\"createdl2\",{\"1\":{\"360\":2}}],[\"createdl1\",{\"1\":{\"360\":1}}],[\"createdate\",{\"1\":{\"344\":1}}],[\"created\",{\"1\":{\"215\":1}}],[\"create\",{\"0\":{\"202\":1},\"1\":{\"3\":2,\"12\":1,\"13\":1,\"14\":2,\"15\":2,\"16\":1,\"17\":2,\"18\":3,\"19\":3,\"21\":1,\"30\":1,\"33\":6,\"34\":1,\"39\":5,\"61\":1,\"62\":1,\"63\":2,\"64\":1,\"74\":1,\"77\":1,\"78\":4,\"200\":2,\"216\":1,\"219\":1,\"361\":1,\"421\":1,\"461\":1,\"485\":1,\"495\":1}}],[\"crud\",{\"1\":{\"33\":1,\"263\":1}}],[\"curl\",{\"1\":{\"93\":1,\"101\":1}}],[\"curtime\",{\"1\":{\"51\":1,\"79\":1}}],[\"curdate\",{\"1\":{\"51\":1,\"79\":1}}],[\"currenttimemillis\",{\"1\":{\"360\":3,\"361\":1}}],[\"currentproxy\",{\"1\":{\"84\":1}}],[\"current\",{\"1\":{\"28\":1,\"440\":3}}],[\"cursor\",{\"1\":{\"12\":1,\"216\":1}}],[\"csdn\",{\"1\":{\"22\":1,\"116\":1,\"170\":1,\"394\":1,\"496\":1}}],[\"css样式\",{\"1\":{\"188\":1}}],[\"css\",{\"1\":{\"21\":1,\"208\":1}}],[\"c\",{\"1\":{\"22\":1,\"33\":1,\"39\":1,\"78\":1,\"83\":2,\"157\":1,\"159\":1,\"279\":1,\"391\":10,\"441\":2,\"461\":1,\"473\":1,\"479\":1,\"495\":2}}],[\"cj\",{\"1\":{\"21\":1,\"28\":1}}],[\"cnpm\",{\"1\":{\"196\":1}}],[\"cname\",{\"1\":{\"78\":2}}],[\"cnf里面加入\",{\"1\":{\"478\":1}}],[\"cnfmysql自动进行systemctl托管\",{\"1\":{\"475\":1}}],[\"cnf\",{\"0\":{\"476\":1},\"1\":{\"23\":1,\"137\":1,\"139\":2,\"143\":1,\"472\":1,\"476\":1,\"479\":2}}],[\"cn\",{\"1\":{\"19\":1,\"22\":1,\"28\":1,\"94\":1,\"106\":2,\"148\":1,\"367\":1,\"368\":1,\"466\":1,\"489\":1}}],[\"can\",{\"1\":{\"386\":2,\"461\":2}}],[\"calendar\",{\"1\":{\"384\":2}}],[\"callable\",{\"1\":{\"391\":3}}],[\"callable<t>\",{\"1\":{\"391\":3}}],[\"caller\",{\"1\":{\"389\":1}}],[\"callerrunspolicy\",{\"0\":{\"292\":1,\"406\":1},\"1\":{\"287\":1,\"401\":1}}],[\"call\",{\"1\":{\"18\":4,\"391\":1}}],[\"cap原则的精髓就是要么ap\",{\"1\":{\"279\":1}}],[\"cap原则上分析\",{\"1\":{\"279\":1}}],[\"cap原则又称cap定理\",{\"1\":{\"279\":1}}],[\"cardinality\",{\"1\":{\"343\":3}}],[\"car\",{\"1\":{\"189\":3}}],[\"cartesian\",{\"1\":{\"22\":1}}],[\"cache\",{\"1\":{\"170\":1,\"198\":2,\"445\":1,\"454\":2,\"464\":1}}],[\"cat\",{\"1\":{\"139\":1,\"319\":4,\"388\":1,\"435\":2,\"472\":1,\"474\":1}}],[\"category\",{\"1\":{\"78\":3}}],[\"catch\",{\"1\":{\"9\":3,\"83\":4,\"258\":1,\"329\":1,\"337\":1,\"418\":1,\"420\":1,\"421\":1}}],[\"cascade\",{\"1\":{\"64\":4,\"79\":1}}],[\"casesensitive\",{\"1\":{\"175\":1}}],[\"case\",{\"1\":{\"50\":1,\"165\":1,\"431\":1,\"432\":1,\"450\":1,\"476\":1}}],[\"coverage\",{\"1\":{\"495\":1}}],[\"covering\",{\"1\":{\"19\":1,\"22\":1}}],[\"co\",{\"1\":{\"342\":1}}],[\"copyuser\",{\"1\":{\"478\":1,\"479\":1}}],[\"copy\",{\"1\":{\"146\":1,\"439\":2}}],[\"copied\",{\"1\":{\"110\":1}}],[\"codingartifactsgeneric\",{\"1\":{\"441\":1}}],[\"coding概述\",{\"1\":{\"433\":1}}],[\"coding\",{\"0\":{\"433\":1},\"1\":{\"434\":1,\"439\":2,\"440\":14}}],[\"codingstart\",{\"1\":{\"117\":1,\"430\":3,\"431\":1}}],[\"code\",{\"0\":{\"215\":1},\"1\":{\"21\":1,\"117\":2,\"215\":2,\"386\":3,\"391\":1,\"419\":1}}],[\"corp\",{\"1\":{\"464\":1}}],[\"cors\",{\"1\":{\"108\":3,\"314\":3}}],[\"corsconfig\",{\"1\":{\"10\":1}}],[\"coreybutler\",{\"1\":{\"181\":1}}],[\"core\",{\"1\":{\"28\":1,\"323\":1,\"389\":8}}],[\"collect\",{\"1\":{\"396\":1}}],[\"collections\",{\"1\":{\"396\":2}}],[\"collection\",{\"1\":{\"384\":1}}],[\"collection接口的子接口包括\",{\"1\":{\"240\":1}}],[\"color=\",{\"1\":{\"341\":1}}],[\"color\",{\"1\":{\"141\":12,\"370\":2,\"389\":1}}],[\"column\",{\"1\":{\"28\":2}}],[\"col3\",{\"1\":{\"19\":2}}],[\"col2\",{\"1\":{\"19\":3}}],[\"col1\",{\"1\":{\"19\":4}}],[\"complete\",{\"1\":{\"476\":1}}],[\"compat\",{\"1\":{\"472\":1,\"473\":1}}],[\"compatibility\",{\"1\":{\"310\":2}}],[\"comparator\",{\"1\":{\"286\":1,\"400\":1}}],[\"comparable\",{\"1\":{\"286\":1,\"400\":1}}],[\"computed\",{\"1\":{\"215\":1}}],[\"compose创建2个mysql容器\",{\"1\":{\"105\":1}}],[\"compose创建3个tomcat容器\",{\"1\":{\"104\":1}}],[\"compose搭建环境\",{\"0\":{\"103\":1}}],[\"compose实现创建\",{\"1\":{\"102\":1}}],[\"compose也是用来创建容器\",{\"1\":{\"102\":1}}],[\"compose的工作步骤\",{\"0\":{\"102\":1}}],[\"compose\",{\"0\":{\"99\":1,\"100\":1,\"101\":1,\"308\":1},\"1\":{\"100\":4,\"101\":7,\"104\":1,\"105\":1,\"308\":7,\"309\":3,\"311\":1}}],[\"components\",{\"1\":{\"215\":1}}],[\"component\",{\"1\":{\"84\":4,\"194\":1,\"280\":1,\"352\":1,\"354\":1,\"355\":2,\"360\":1,\"362\":1,\"376\":1,\"380\":1,\"381\":1,\"421\":2}}],[\"com>\",{\"1\":{\"117\":1}}],[\"command\",{\"1\":{\"440\":3,\"441\":6}}],[\"community\",{\"1\":{\"138\":1,\"140\":1,\"383\":1,\"470\":1,\"472\":4,\"473\":10}}],[\"common\",{\"1\":{\"83\":1,\"396\":1,\"473\":2}}],[\"committed\",{\"1\":{\"76\":1}}],[\"commit\",{\"1\":{\"12\":1,\"74\":2,\"214\":1,\"216\":1,\"440\":1}}],[\"com\",{\"1\":{\"13\":1,\"21\":3,\"28\":3,\"83\":4,\"84\":2,\"94\":3,\"101\":1,\"110\":3,\"125\":3,\"138\":1,\"146\":2,\"170\":1,\"178\":1,\"181\":2,\"187\":1,\"308\":1,\"311\":2,\"336\":1,\"368\":1,\"376\":1,\"385\":1,\"387\":1,\"389\":1,\"391\":7,\"392\":3,\"394\":1,\"396\":2,\"425\":2,\"447\":1,\"470\":1,\"482\":1}}],[\"count\",{\"1\":{\"13\":1,\"19\":1,\"21\":1,\"22\":1,\"26\":2,\"55\":2,\"56\":5,\"79\":1,\"320\":1,\"321\":2,\"344\":3,\"345\":1}}],[\"conditionelutil\",{\"1\":{\"387\":1}}],[\"convertandsend\",{\"1\":{\"352\":1,\"355\":1,\"357\":1,\"360\":2,\"361\":1}}],[\"concurrent包\",{\"1\":{\"391\":1}}],[\"concurrenthashmap底层结构\",{\"0\":{\"268\":1}}],[\"concurrenthashmap以及properties等\",{\"1\":{\"240\":1}}],[\"concat\",{\"1\":{\"18\":2,\"52\":1,\"79\":1}}],[\"concat合并\",{\"1\":{\"18\":1}}],[\"connecttimeout=1000\",{\"1\":{\"487\":1}}],[\"connecttimeout\",{\"1\":{\"323\":4}}],[\"connect\",{\"1\":{\"165\":1,\"175\":2,\"179\":1}}],[\"connection=\",{\"1\":{\"353\":1}}],[\"connectionfactory\",{\"1\":{\"353\":2,\"361\":1}}],[\"connectionrequesttimeout\",{\"1\":{\"323\":4}}],[\"connections他的数值越大\",{\"1\":{\"157\":1}}],[\"connections\",{\"1\":{\"157\":1,\"164\":1,\"165\":1}}],[\"connection\",{\"1\":{\"83\":1,\"165\":1,\"353\":2,\"389\":1,\"464\":1}}],[\"conf复制\",{\"1\":{\"493\":1}}],[\"confirm\",{\"1\":{\"273\":1,\"363\":1}}],[\"confirm机制\",{\"1\":{\"273\":1}}],[\"configs\",{\"1\":{\"491\":1}}],[\"config=\",{\"1\":{\"153\":1}}],[\"config\",{\"1\":{\"84\":2,\"108\":5,\"109\":1,\"121\":2,\"128\":1,\"139\":1,\"153\":1,\"198\":4,\"309\":5,\"314\":1,\"315\":1,\"389\":1,\"391\":1,\"467\":4,\"485\":1,\"487\":1,\"491\":2,\"495\":1,\"496\":1}}],[\"configurablelistablebeanfactory\",{\"1\":{\"84\":3}}],[\"configuration>\",{\"1\":{\"389\":1}}],[\"configurationproperties\",{\"1\":{\"133\":1}}],[\"configuration\",{\"1\":{\"10\":1,\"133\":1,\"300\":1,\"323\":2,\"352\":1,\"357\":1,\"371\":2,\"378\":1,\"390\":1,\"391\":1,\"414\":1}}],[\"configured\",{\"1\":{\"386\":3}}],[\"configuretasks\",{\"1\":{\"300\":1,\"414\":1}}],[\"configure\",{\"1\":{\"3\":1,\"157\":1,\"386\":1,\"389\":1}}],[\"conf文件\",{\"0\":{\"175\":1}}],[\"conf文件说明\",{\"1\":{\"157\":1}}],[\"conf配置\",{\"1\":{\"165\":1}}],[\"conf为结尾的配置文件\",{\"1\":{\"157\":1}}],[\"conf\",{\"1\":{\"157\":9,\"161\":4,\"165\":3,\"172\":1,\"175\":1,\"447\":1,\"458\":2,\"485\":1,\"486\":4,\"487\":1,\"488\":1,\"489\":1,\"493\":5,\"494\":2,\"495\":3,\"496\":3,\"497\":6,\"498\":2}}],[\"consumed原因分析\",{\"1\":{\"418\":1}}],[\"consumer\",{\"1\":{\"418\":1}}],[\"consider\",{\"1\":{\"418\":1}}],[\"consistency\",{\"1\":{\"279\":1}}],[\"console的登陆密码\",{\"1\":{\"460\":1}}],[\"console的登陆账号\",{\"1\":{\"460\":1}}],[\"console的地址\",{\"1\":{\"460\":1}}],[\"consoleappender\",{\"1\":{\"389\":1}}],[\"console\",{\"1\":{\"128\":1,\"215\":2,\"460\":1}}],[\"consts\",{\"1\":{\"396\":4}}],[\"constraint\",{\"1\":{\"64\":3,\"79\":1,\"383\":2}}],[\"const⽤于⽐较primary\",{\"1\":{\"19\":1}}],[\"const\",{\"1\":{\"19\":3,\"223\":1}}],[\"contract\",{\"1\":{\"420\":1,\"421\":1}}],[\"controlle\",{\"1\":{\"280\":1}}],[\"controllerexceptionadvice\",{\"1\":{\"385\":2}}],[\"controller\",{\"1\":{\"280\":3,\"376\":1,\"385\":1,\"391\":6}}],[\"controller类\",{\"1\":{\"280\":1}}],[\"control\",{\"1\":{\"30\":1,\"464\":5}}],[\"contains\",{\"1\":{\"381\":1}}],[\"containsbean\",{\"1\":{\"84\":2}}],[\"container\",{\"1\":{\"92\":1,\"104\":3,\"105\":2,\"309\":2}}],[\"contens\",{\"1\":{\"106\":1}}],[\"content=\",{\"1\":{\"188\":1,\"215\":1}}],[\"content\",{\"1\":{\"83\":9,\"84\":3,\"112\":3,\"381\":1,\"447\":1,\"464\":1}}],[\"contextname\",{\"1\":{\"389\":1}}],[\"contextloads\",{\"1\":{\"352\":1}}],[\"context\",{\"1\":{\"3\":1,\"387\":4,\"389\":1,\"390\":1,\"391\":8,\"396\":9,\"440\":1}}],[\"clean\",{\"1\":{\"440\":1,\"450\":2,\"454\":2}}],[\"clear\",{\"1\":{\"391\":4}}],[\"clearscroll\",{\"1\":{\"337\":1}}],[\"clearscrollresponse\",{\"1\":{\"337\":3}}],[\"clearscrollrequest\",{\"1\":{\"337\":5}}],[\"clazz\",{\"1\":{\"396\":1}}],[\"classic\",{\"1\":{\"389\":5}}],[\"classpath=$classpath\",{\"1\":{\"447\":1}}],[\"classpath\",{\"1\":{\"389\":1}}],[\"classpathresourceloader\",{\"1\":{\"371\":2}}],[\"class文件中类信息加载进内存\",{\"1\":{\"235\":1}}],[\"class文件交给java虚拟机\",{\"1\":{\"235\":1}}],[\"class文件\",{\"1\":{\"235\":1}}],[\"class=\",{\"1\":{\"215\":1,\"389\":13}}],[\"class<\",{\"1\":{\"84\":1}}],[\"class<t>\",{\"1\":{\"84\":1,\"396\":1}}],[\"class\",{\"1\":{\"8\":1,\"9\":1,\"10\":1,\"21\":1,\"28\":1,\"83\":1,\"84\":4,\"133\":1,\"239\":3,\"283\":2,\"300\":1,\"323\":1,\"341\":1,\"352\":4,\"353\":1,\"354\":2,\"355\":4,\"357\":1,\"360\":4,\"361\":1,\"362\":2,\"376\":1,\"378\":3,\"379\":2,\"380\":1,\"381\":2,\"385\":5,\"386\":4,\"387\":2,\"390\":2,\"391\":3,\"396\":5,\"397\":2,\"414\":1,\"418\":2,\"420\":1,\"421\":2,\"422\":3,\"425\":6,\"481\":2}}],[\"cluster\",{\"1\":{\"310\":2,\"464\":2,\"486\":3,\"490\":2,\"495\":10,\"496\":3}}],[\"cloud\",{\"0\":{\"426\":1},\"1\":{\"426\":1,\"491\":2}}],[\"clone\",{\"1\":{\"146\":1}}],[\"close\",{\"1\":{\"9\":2,\"21\":2,\"353\":2}}],[\"click=\",{\"1\":{\"192\":2}}],[\"cli\",{\"0\":{\"196\":1,\"199\":1,\"200\":1,\"201\":1},\"1\":{\"121\":1,\"125\":1,\"185\":1,\"196\":2,\"199\":1,\"493\":1,\"495\":3,\"496\":1,\"497\":1,\"499\":3}}],[\"clienttoken=\",{\"1\":{\"153\":1}}],[\"client\",{\"1\":{\"83\":1,\"125\":1,\"165\":1,\"338\":1,\"464\":2,\"465\":1,\"466\":1,\"468\":1,\"472\":1,\"473\":1,\"476\":1,\"490\":1}}],[\"clz\",{\"1\":{\"84\":3}}],[\"=代理实现类上即可\",{\"1\":{\"418\":1}}],[\"=null\",{\"1\":{\"380\":1}}],[\"=html⻚⾯\",{\"1\":{\"368\":1}}],[\"===\",{\"1\":{\"431\":12,\"432\":2}}],[\"==是指对内存地址进行比较\",{\"1\":{\"244\":1}}],[\"==是判断两个变量或实例是不是指向同一个内存空间\",{\"1\":{\"244\":1}}],[\"==与equals的区别\",{\"1\":{\"244\":1}}],[\"==\",{\"1\":{\"165\":1,\"378\":1,\"387\":1,\"391\":3,\"396\":2,\"422\":2,\"450\":1}}],[\"=1\",{\"1\":{\"16\":1}}],[\"=\",{\"1\":{\"3\":5,\"8\":2,\"9\":10,\"10\":2,\"18\":1,\"22\":6,\"46\":2,\"49\":9,\"57\":1,\"67\":1,\"68\":1,\"70\":1,\"71\":1,\"74\":6,\"76\":4,\"77\":8,\"83\":25,\"84\":2,\"133\":2,\"143\":1,\"159\":2,\"162\":1,\"163\":1,\"164\":1,\"165\":1,\"188\":1,\"189\":1,\"190\":1,\"191\":1,\"192\":1,\"194\":1,\"215\":1,\"223\":2,\"261\":1,\"280\":7,\"300\":8,\"323\":8,\"327\":4,\"328\":4,\"329\":4,\"337\":10,\"338\":2,\"339\":6,\"340\":4,\"341\":5,\"343\":5,\"344\":4,\"345\":6,\"347\":4,\"348\":4,\"352\":1,\"354\":1,\"355\":3,\"360\":2,\"361\":1,\"362\":2,\"371\":3,\"376\":1,\"378\":3,\"379\":2,\"380\":2,\"381\":5,\"385\":3,\"387\":6,\"390\":3,\"391\":2,\"396\":5,\"414\":8,\"420\":5,\"421\":8,\"422\":2,\"425\":9,\"440\":11,\"441\":7,\"474\":1,\"476\":4,\"478\":1,\"479\":1}}],[\"dt\",{\"1\":{\"481\":1}}],[\"dto\",{\"1\":{\"385\":2}}],[\"dnt\",{\"1\":{\"464\":1}}],[\"dmaven\",{\"1\":{\"450\":1}}],[\"dml\",{\"0\":{\"43\":1},\"1\":{\"12\":1,\"30\":1,\"76\":1,\"77\":1,\"216\":1}}],[\"djenkins\",{\"1\":{\"445\":2}}],[\"d表示日期\",{\"1\":{\"389\":2}}],[\"dump\",{\"1\":{\"496\":1}}],[\"durable\",{\"1\":{\"360\":1}}],[\"duo\",{\"1\":{\"83\":2}}],[\"dllistener\",{\"1\":{\"360\":1}}],[\"dl\",{\"1\":{\"360\":17,\"459\":1,\"466\":1}}],[\"d目录下的以\",{\"1\":{\"157\":1}}],[\"dfood\",{\"1\":{\"146\":4}}],[\"diagnostic\",{\"1\":{\"390\":1}}],[\"digits\",{\"1\":{\"384\":2}}],[\"dir\",{\"1\":{\"431\":1,\"432\":2,\"450\":2,\"454\":13}}],[\"directexchange\",{\"1\":{\"360\":3}}],[\"direct类型对消息过滤\",{\"1\":{\"366\":1}}],[\"direct类型\",{\"1\":{\"358\":1}}],[\"direct\",{\"1\":{\"356\":1}}],[\"dir=service\",{\"1\":{\"450\":1}}],[\"dir=\",{\"1\":{\"141\":1,\"431\":1,\"432\":1,\"454\":1}}],[\"div\",{\"1\":{\"194\":1}}],[\"div>\",{\"1\":{\"188\":1,\"189\":1,\"190\":1,\"191\":2,\"192\":2,\"194\":5,\"215\":2,\"370\":6}}],[\"dispatcherserlvet\",{\"1\":{\"280\":1}}],[\"discardoldestpolicy\",{\"0\":{\"291\":1,\"405\":1},\"1\":{\"287\":1,\"401\":1}}],[\"discardpolicy\",{\"0\":{\"290\":1,\"404\":1},\"1\":{\"287\":1,\"300\":2,\"401\":1,\"414\":2}}],[\"discard\",{\"1\":{\"226\":1}}],[\"discovery\",{\"1\":{\"108\":2,\"491\":1}}],[\"disable\",{\"1\":{\"177\":1,\"435\":1,\"461\":1}}],[\"distanceunit\",{\"1\":{\"347\":1}}],[\"distance\",{\"0\":{\"347\":1},\"1\":{\"346\":1,\"347\":4}}],[\"distant\",{\"1\":{\"343\":1}}],[\"distributed\",{\"1\":{\"279\":1}}],[\"dist\",{\"1\":{\"165\":1,\"188\":1,\"189\":1,\"190\":1,\"191\":1,\"192\":1,\"215\":1,\"432\":1,\"441\":9,\"454\":8}}],[\"distinct\",{\"1\":{\"22\":3,\"48\":1}}],[\"diskfileitemfactory\",{\"1\":{\"3\":2}}],[\"disk\",{\"1\":{\"3\":1}}],[\"d\",{\"1\":{\"36\":1,\"42\":1,\"93\":1,\"95\":2,\"97\":1,\"98\":1,\"104\":1,\"105\":1,\"108\":2,\"109\":1,\"122\":1,\"128\":1,\"140\":5,\"157\":2,\"159\":1,\"165\":1,\"172\":2,\"300\":2,\"309\":1,\"351\":1,\"389\":8,\"414\":2,\"440\":1,\"445\":1}}],[\"ds\",{\"1\":{\"28\":3}}],[\"db=food\",{\"1\":{\"143\":1}}],[\"db即可\",{\"1\":{\"143\":1}}],[\"db3\",{\"1\":{\"77\":1}}],[\"dba\",{\"1\":{\"77\":1}}],[\"db4\",{\"1\":{\"33\":1}}],[\"db\",{\"1\":{\"21\":1,\"28\":1,\"487\":4}}],[\"dbms\",{\"1\":{\"12\":1,\"216\":1}}],[\"dashboard\",{\"1\":{\"449\":2,\"450\":1}}],[\"danfengcao\",{\"1\":{\"146\":2}}],[\"daemonize\",{\"1\":{\"495\":1,\"497\":1}}],[\"daemon\",{\"1\":{\"94\":2,\"140\":1,\"157\":1,\"461\":1,\"475\":1,\"483\":1,\"488\":1,\"494\":1,\"498\":1}}],[\"day\",{\"1\":{\"79\":1}}],[\"daocloud\",{\"1\":{\"93\":1,\"309\":2}}],[\"dao\",{\"1\":{\"21\":1}}],[\"datadir\",{\"1\":{\"472\":2}}],[\"datadir目录下会有数据存在\",{\"1\":{\"472\":1}}],[\"datadir=\",{\"1\":{\"139\":2,\"141\":2,\"472\":1,\"476\":1}}],[\"database1\",{\"1\":{\"304\":1}}],[\"databases\",{\"1\":{\"34\":1,\"79\":1}}],[\"database\",{\"0\":{\"80\":1},\"1\":{\"33\":4,\"34\":1,\"35\":1,\"36\":2,\"37\":1,\"304\":1,\"485\":1}}],[\"data\",{\"1\":{\"28\":1,\"30\":4,\"83\":1,\"92\":1,\"108\":3,\"113\":1,\"128\":3,\"133\":1,\"138\":2,\"139\":4,\"141\":4,\"188\":1,\"189\":1,\"190\":1,\"191\":1,\"192\":1,\"194\":1,\"215\":1,\"309\":4,\"323\":2,\"385\":1,\"386\":1,\"391\":1,\"425\":1,\"459\":5,\"460\":1,\"462\":3}}],[\"datasource\",{\"1\":{\"21\":1,\"28\":1,\"487\":1}}],[\"data方式请求\",{\"1\":{\"3\":1}}],[\"datehistogram\",{\"1\":{\"342\":1}}],[\"date类型\",{\"1\":{\"317\":1}}],[\"date2\",{\"1\":{\"51\":2}}],[\"date1\",{\"1\":{\"51\":1}}],[\"datediff\",{\"1\":{\"51\":1,\"79\":1}}],[\"datetimesql分类\",{\"1\":{\"216\":1}}],[\"datetime=\",{\"1\":{\"146\":6}}],[\"datetime\",{\"1\":{\"12\":1,\"39\":1,\"78\":1,\"145\":1}}],[\"date\",{\"1\":{\"12\":1,\"21\":1,\"28\":1,\"39\":2,\"51\":3,\"78\":4,\"84\":2,\"216\":1,\"283\":1,\"310\":1,\"317\":1,\"320\":1,\"344\":2,\"376\":1,\"378\":1,\"379\":1,\"380\":1,\"381\":1,\"384\":2,\"385\":1,\"397\":1}}],[\"drive\",{\"1\":{\"462\":2}}],[\"driver\",{\"1\":{\"21\":2,\"28\":2}}],[\"drwxr\",{\"1\":{\"459\":1}}],[\"druid的sql监控\",{\"1\":{\"23\":1}}],[\"druid连接池\",{\"1\":{\"21\":1}}],[\"druiddatasource\",{\"1\":{\"21\":1,\"28\":1}}],[\"druid\",{\"1\":{\"21\":6,\"28\":2}}],[\"drop的数据位置\",{\"1\":{\"145\":1}}],[\"drop等\",{\"1\":{\"143\":1}}],[\"drop\",{\"1\":{\"12\":1,\"13\":2,\"14\":2,\"15\":2,\"17\":2,\"18\":2,\"19\":2,\"30\":1,\"36\":3,\"41\":1,\"42\":3,\"62\":1,\"63\":1,\"64\":1,\"77\":1,\"216\":1,\"219\":1}}],[\"dd||epoch\",{\"1\":{\"320\":1}}],[\"dd\",{\"1\":{\"21\":1,\"39\":3,\"317\":1,\"320\":1,\"389\":6}}],[\"ddl\",{\"0\":{\"31\":1},\"1\":{\"12\":1,\"30\":1,\"77\":1,\"216\":1}}],[\"dcl\",{\"0\":{\"77\":1},\"1\":{\"12\":1,\"30\":1,\"77\":2,\"216\":1}}],[\"dql\",{\"0\":{\"47\":1,\"53\":1},\"1\":{\"12\":1,\"30\":1,\"77\":1,\"216\":1}}],[\"de34\",{\"1\":{\"476\":1}}],[\"denied\",{\"1\":{\"431\":1}}],[\"deny优先于allow\",{\"1\":{\"21\":1}}],[\"deny\",{\"1\":{\"21\":1,\"175\":1}}],[\"de\",{\"1\":{\"360\":2,\"387\":1}}],[\"dead\",{\"1\":{\"360\":2}}],[\"demoproxy\",{\"1\":{\"418\":2}}],[\"demoserviceproxy\",{\"1\":{\"418\":2}}],[\"demoserviceimpl\",{\"1\":{\"418\":2}}],[\"demoservice\",{\"1\":{\"418\":8,\"420\":3}}],[\"democon\",{\"1\":{\"391\":6}}],[\"demo\",{\"0\":{\"323\":1},\"1\":{\"425\":2}}],[\"demoexecutor\",{\"1\":{\"300\":4,\"391\":5,\"414\":4}}],[\"demo反向代理\",{\"1\":{\"165\":1}}],[\"derived\",{\"1\":{\"223\":1}}],[\"destroymethod\",{\"1\":{\"300\":2,\"414\":2}}],[\"destroy\",{\"1\":{\"253\":2}}],[\"destroyed\",{\"1\":{\"215\":1}}],[\"descriptor\",{\"1\":{\"461\":1}}],[\"description=redis\",{\"1\":{\"494\":2,\"498\":2}}],[\"description=nacos\",{\"1\":{\"483\":1}}],[\"description=nginx\",{\"1\":{\"157\":1}}],[\"description=minio\",{\"1\":{\"461\":1}}],[\"description=mysql\",{\"1\":{\"140\":1}}],[\"description\",{\"1\":{\"112\":1,\"215\":2,\"376\":1}}],[\"descr\",{\"1\":{\"320\":1,\"321\":2}}],[\"desc\",{\"1\":{\"40\":1,\"54\":1,\"79\":1}}],[\"details\",{\"1\":{\"116\":1,\"170\":1,\"394\":1,\"496\":1}}],[\"deterministic\",{\"1\":{\"16\":1,\"17\":2}}],[\"deencodebypath\",{\"1\":{\"83\":2}}],[\"deploy\",{\"1\":{\"432\":6}}],[\"deploy=\",{\"1\":{\"432\":1}}],[\"dependency\",{\"1\":{\"386\":1}}],[\"dependency>\",{\"1\":{\"28\":1,\"84\":1,\"113\":1,\"132\":1,\"323\":1,\"352\":1,\"369\":1,\"383\":2,\"387\":1,\"491\":1}}],[\"dependencies\",{\"1\":{\"386\":1,\"473\":1}}],[\"depends\",{\"1\":{\"309\":1}}],[\"dept\",{\"1\":{\"67\":1,\"68\":2,\"70\":2,\"71\":1}}],[\"def\",{\"1\":{\"440\":2,\"441\":3}}],[\"definition\",{\"1\":{\"30\":1}}],[\"defaultconfiguration\",{\"1\":{\"371\":1}}],[\"defaultthreadfactory\",{\"1\":{\"283\":1,\"397\":1}}],[\"defaults\",{\"1\":{\"139\":2,\"462\":1}}],[\"default\",{\"1\":{\"16\":1,\"18\":1,\"78\":1,\"79\":1,\"153\":2,\"157\":1,\"165\":1,\"215\":1,\"266\":1,\"310\":1,\"327\":1,\"329\":1,\"337\":3,\"338\":1,\"339\":1,\"340\":1,\"341\":1,\"343\":1,\"344\":1,\"345\":1,\"347\":1,\"348\":1,\"460\":2,\"461\":2,\"476\":1}}],[\"debug=\",{\"1\":{\"389\":1}}],[\"debug\",{\"1\":{\"22\":1,\"153\":2,\"389\":3}}],[\"dev<\",{\"1\":{\"491\":2}}],[\"devops\",{\"1\":{\"433\":1}}],[\"deviation\",{\"1\":{\"345\":2}}],[\"devtools\",{\"1\":{\"212\":1}}],[\"devel\",{\"1\":{\"115\":1,\"157\":3,\"444\":1,\"473\":1,\"476\":1}}],[\"dev\",{\"1\":{\"21\":1,\"165\":1,\"450\":5,\"462\":3}}],[\"decode\",{\"1\":{\"83\":3}}],[\"decodehinttype\",{\"1\":{\"83\":5}}],[\"decodemultiple\",{\"1\":{\"83\":3}}],[\"decodeutils\",{\"1\":{\"83\":1}}],[\"declare\",{\"1\":{\"16\":2,\"18\":1}}],[\"decimalmin\",{\"1\":{\"384\":1}}],[\"decimalmax\",{\"1\":{\"384\":1}}],[\"decimal\",{\"1\":{\"12\":1,\"13\":1,\"216\":1}}],[\"delivery\",{\"1\":{\"362\":1}}],[\"delimiter\",{\"1\":{\"15\":2,\"16\":1,\"17\":2,\"18\":2}}],[\"delayed\",{\"1\":{\"286\":1,\"400\":1}}],[\"delayqueue\",{\"1\":{\"286\":1,\"400\":1}}],[\"deletebyquery\",{\"1\":{\"338\":1}}],[\"deletebyqueryrequest\",{\"1\":{\"338\":2}}],[\"delete3\",{\"1\":{\"216\":1}}],[\"delete\",{\"0\":{\"338\":1},\"1\":{\"12\":1,\"13\":2,\"15\":1,\"30\":1,\"36\":1,\"42\":1,\"45\":3,\"64\":2,\"79\":1,\"143\":1,\"319\":1,\"321\":1,\"351\":1}}],[\"down\",{\"1\":{\"497\":1}}],[\"downloads\",{\"1\":{\"138\":1,\"470\":1,\"492\":1}}],[\"download\",{\"1\":{\"101\":1,\"106\":1,\"110\":1,\"157\":1,\"308\":1,\"311\":1,\"445\":1,\"447\":1,\"492\":1}}],[\"domain\",{\"1\":{\"440\":1}}],[\"dohandler\",{\"1\":{\"425\":8}}],[\"dotestt\",{\"1\":{\"391\":1}}],[\"dotest\",{\"1\":{\"390\":2}}],[\"don\",{\"1\":{\"386\":1}}],[\"done\",{\"1\":{\"165\":1,\"450\":1}}],[\"do结尾\",{\"1\":{\"381\":2}}],[\"doble\",{\"1\":{\"189\":3}}],[\"docs\",{\"1\":{\"382\":1,\"432\":2,\"461\":1,\"489\":1}}],[\"doctype\",{\"1\":{\"188\":1,\"215\":1,\"370\":1}}],[\"doc\",{\"1\":{\"172\":1,\"304\":1,\"319\":2,\"321\":5,\"326\":1,\"344\":3,\"346\":3,\"440\":1}}],[\"dockerimage\",{\"1\":{\"440\":2}}],[\"dockerfile\",{\"0\":{\"439\":1},\"1\":{\"440\":1}}],[\"dockerfile文件\",{\"1\":{\"102\":1}}],[\"dockerrabbitmq的消息\",{\"1\":{\"366\":1}}],[\"docker查看容器地址\",{\"1\":{\"117\":1}}],[\"docker查看容器日志\",{\"1\":{\"116\":1}}],[\"docker部署\",{\"0\":{\"117\":1}}],[\"docker安装mysql\",{\"0\":{\"122\":1}}],[\"docker安装kibana\",{\"0\":{\"109\":1}}],[\"docker安装es\",{\"0\":{\"107\":1,\"108\":1}}],[\"docker搭建mysql\",{\"0\":{\"98\":1}}],[\"docker搭建tomcat\",{\"0\":{\"97\":1}}],[\"docker搭建的软件就叫容器\",{\"1\":{\"90\":1}}],[\"docker基于命令搭建环境\",{\"0\":{\"96\":1}}],[\"docker命令创建容器\",{\"1\":{\"100\":1}}],[\"docker命令\",{\"0\":{\"95\":1}}],[\"docker配置镜像加速器\",{\"0\":{\"94\":1}}],[\"docker组成\",{\"0\":{\"92\":1}}],[\"docker只要搭建了一种环境\",{\"1\":{\"91\":1}}],[\"docker好处\",{\"0\":{\"91\":1}}],[\"docker是什么\",{\"0\":{\"90\":1}}],[\"docker\",{\"0\":{\"88\":1,\"89\":1,\"99\":1,\"100\":1,\"102\":1,\"103\":1},\"1\":{\"90\":1,\"93\":8,\"94\":8,\"95\":16,\"97\":5,\"98\":1,\"100\":5,\"101\":7,\"102\":1,\"104\":8,\"105\":1,\"108\":5,\"109\":5,\"110\":2,\"111\":1,\"116\":2,\"117\":1,\"120\":1,\"121\":1,\"122\":2,\"127\":1,\"128\":1,\"308\":7,\"309\":10,\"310\":1,\"311\":2,\"314\":2,\"315\":1,\"351\":2,\"439\":2,\"440\":27}}],[\"documentation=https\",{\"1\":{\"461\":1}}],[\"document\",{\"1\":{\"28\":1,\"192\":2,\"304\":4}}],[\"do\",{\"1\":{\"18\":1,\"143\":2,\"165\":1,\"279\":1,\"360\":1,\"361\":1,\"381\":1,\"385\":1,\"450\":1}}],[\"double\",{\"1\":{\"12\":1,\"39\":3,\"74\":1,\"78\":1,\"216\":1,\"317\":2,\"345\":2,\"422\":1}}],[\"dofilter\",{\"1\":{\"10\":1,\"253\":2}}],[\"dofilterinternal\",{\"1\":{\"10\":1}}],[\"fstab\",{\"1\":{\"462\":1}}],[\"ftl模板+对象数据=⽂件http\",{\"1\":{\"368\":1}}],[\"ftp等\",{\"1\":{\"170\":1}}],[\"fe\",{\"1\":{\"357\":4}}],[\"feel\",{\"1\":{\"450\":5,\"454\":1,\"491\":1}}],[\"fee\",{\"1\":{\"335\":1,\"340\":1,\"344\":2,\"345\":2}}],[\"feri\",{\"1\":{\"21\":1}}],[\"font\",{\"1\":{\"370\":2}}],[\"font><font\",{\"1\":{\"141\":2}}],[\"font>\",{\"1\":{\"141\":4,\"341\":1}}],[\"foofun\",{\"1\":{\"368\":1}}],[\"food\",{\"1\":{\"161\":2,\"165\":5}}],[\"force\",{\"1\":{\"454\":2,\"473\":1}}],[\"foreach\",{\"1\":{\"344\":1}}],[\"foreign\",{\"1\":{\"60\":1,\"64\":6,\"78\":3,\"79\":1}}],[\"formdata\",{\"1\":{\"387\":9}}],[\"form>\",{\"1\":{\"194\":1}}],[\"format指定日期格式\",{\"1\":{\"344\":1}}],[\"format=row\",{\"1\":{\"143\":1}}],[\"format\",{\"1\":{\"21\":1,\"28\":1,\"157\":1,\"165\":1,\"317\":1,\"320\":1,\"329\":1,\"337\":1}}],[\"for=\",{\"1\":{\"191\":3}}],[\"forwarded\",{\"1\":{\"157\":1,\"165\":3,\"464\":4}}],[\"forname\",{\"1\":{\"8\":1,\"9\":1,\"239\":2}}],[\"for\",{\"1\":{\"3\":1,\"15\":2,\"77\":4,\"83\":1,\"139\":1,\"157\":1,\"165\":3,\"191\":1,\"195\":1,\"310\":1,\"323\":1,\"327\":1,\"329\":1,\"337\":2,\"339\":1,\"340\":1,\"341\":2,\"347\":1,\"348\":1,\"355\":1,\"370\":1,\"373\":1,\"376\":1,\"378\":1,\"385\":1,\"386\":3,\"387\":1,\"464\":4,\"476\":1}}],[\"float\",{\"1\":{\"317\":4}}],[\"floor\",{\"1\":{\"79\":1}}],[\"flavor\",{\"1\":{\"310\":1}}],[\"flags=\",{\"1\":{\"384\":1}}],[\"flag\",{\"1\":{\"165\":2,\"450\":2}}],[\"flag=$\",{\"1\":{\"165\":1,\"450\":1}}],[\"flashback\",{\"1\":{\"146\":1}}],[\"flush\",{\"1\":{\"141\":2,\"474\":1}}],[\"f参数\",{\"1\":{\"118\":1}}],[\"fn\",{\"1\":{\"116\":1}}],[\"future<\",{\"1\":{\"391\":1}}],[\"future<t>\",{\"1\":{\"391\":1}}],[\"future\",{\"1\":{\"384\":1}}],[\"fuzzyquery\",{\"1\":{\"333\":1}}],[\"fuzzy查询\",{\"0\":{\"333\":1}}],[\"full\",{\"1\":{\"19\":2,\"143\":1,\"495\":1}}],[\"fun\",{\"1\":{\"16\":2}}],[\"functionalinterface\",{\"1\":{\"262\":1}}],[\"function\",{\"1\":{\"16\":1,\"17\":5,\"194\":1}}],[\"f\",{\"1\":{\"17\":4,\"104\":1,\"105\":1,\"116\":4,\"118\":1,\"165\":5,\"309\":1,\"389\":2,\"432\":3,\"440\":2,\"441\":1,\"450\":7,\"488\":1,\"489\":1}}],[\"freedesktop\",{\"1\":{\"476\":1}}],[\"freemarker\",{\"1\":{\"368\":2}}],[\"fraction指定小数精度\",{\"1\":{\"384\":1}}],[\"fraction=\",{\"1\":{\"384\":1}}],[\"framework\",{\"1\":{\"10\":1,\"84\":1}}],[\"from+size在es查询数据的方式\",{\"1\":{\"337\":1}}],[\"from和size二者之和不能超过1w\",{\"1\":{\"337\":1}}],[\"frome\",{\"1\":{\"48\":1}}],[\"fromd\",{\"1\":{\"22\":1}}],[\"from\",{\"1\":{\"13\":2,\"14\":3,\"15\":1,\"17\":1,\"18\":1,\"19\":12,\"22\":2,\"26\":1,\"45\":3,\"47\":1,\"48\":2,\"49\":13,\"56\":5,\"57\":3,\"58\":1,\"59\":8,\"67\":1,\"68\":2,\"70\":3,\"71\":2,\"72\":3,\"74\":1,\"77\":3,\"84\":3,\"117\":1,\"145\":1,\"146\":1,\"219\":1,\"223\":1,\"325\":1,\"344\":6,\"386\":3,\"439\":2,\"441\":1,\"476\":1}}],[\"fanout类型直接转发\",{\"1\":{\"366\":1}}],[\"fanoutexchange\",{\"1\":{\"357\":4}}],[\"fanout\",{\"1\":{\"356\":1,\"357\":5}}],[\"failover\",{\"1\":{\"497\":1}}],[\"failing\",{\"1\":{\"386\":1}}],[\"fail\",{\"1\":{\"376\":1,\"378\":1,\"379\":1,\"381\":1,\"385\":3}}],[\"failed\",{\"1\":{\"326\":1,\"420\":2,\"421\":2,\"473\":1,\"476\":4}}],[\"failure\",{\"1\":{\"140\":1}}],[\"favorite\",{\"1\":{\"78\":2}}],[\"false失败\",{\"1\":{\"362\":1}}],[\"false\",{\"1\":{\"8\":2,\"21\":7,\"133\":1,\"239\":1,\"310\":1,\"320\":1,\"326\":1,\"353\":3,\"362\":1,\"378\":1,\"379\":1,\"384\":1,\"389\":1,\"441\":4}}],[\"factory=new\",{\"1\":{\"353\":1}}],[\"factory\",{\"1\":{\"3\":4,\"84\":6,\"353\":5,\"361\":2,\"387\":3}}],[\"fixedrate\",{\"1\":{\"300\":1,\"414\":1}}],[\"fifo\",{\"1\":{\"286\":1,\"400\":1}}],[\"fi\",{\"1\":{\"165\":2,\"430\":1,\"431\":1,\"450\":3,\"461\":1}}],[\"find\",{\"1\":{\"137\":1,\"165\":1,\"445\":1,\"450\":1,\"496\":2}}],[\"final<\",{\"1\":{\"383\":1}}],[\"finalize\",{\"1\":{\"258\":6}}],[\"final修饰的形参\",{\"1\":{\"258\":1}}],[\"finally\",{\"1\":{\"9\":1,\"258\":2,\"391\":2}}],[\"final\",{\"1\":{\"8\":2,\"84\":1,\"237\":2,\"239\":1,\"258\":6,\"283\":1,\"323\":1,\"360\":4,\"390\":1,\"391\":7,\"396\":1,\"397\":1,\"420\":1,\"422\":1}}],[\"firewalld\",{\"1\":{\"177\":2,\"445\":1,\"458\":1,\"475\":1}}],[\"firewall\",{\"1\":{\"116\":2,\"141\":2,\"157\":3,\"177\":1,\"179\":3,\"445\":1,\"458\":3,\"475\":3,\"484\":2,\"495\":5,\"497\":3}}],[\"fields\",{\"1\":{\"386\":1}}],[\"fielderror\",{\"1\":{\"385\":4}}],[\"field是text或者keyword\",{\"1\":{\"325\":1}}],[\"field属性名\",{\"1\":{\"320\":1}}],[\"field可以指定类型\",{\"0\":{\"317\":1}}],[\"field\",{\"1\":{\"112\":2,\"341\":1,\"343\":3,\"344\":4,\"345\":2,\"386\":1}}],[\"filo\",{\"1\":{\"286\":1,\"400\":1}}],[\"filter>\",{\"1\":{\"389\":1}}],[\"filter查询\",{\"0\":{\"340\":1}}],[\"filter\",{\"0\":{\"253\":1},\"1\":{\"21\":2,\"252\":1,\"253\":3,\"340\":2,\"380\":2,\"381\":3,\"389\":1,\"391\":1}}],[\"filters\",{\"1\":{\"21\":1}}],[\"filterchain\",{\"1\":{\"10\":3,\"253\":1}}],[\"file>\",{\"1\":{\"389\":1}}],[\"fileappender\",{\"1\":{\"389\":1}}],[\"filenamepattern>\",{\"1\":{\"389\":2}}],[\"filewriter\",{\"1\":{\"371\":1}}],[\"file=mysql\",{\"1\":{\"146\":1}}],[\"file=\",{\"1\":{\"139\":2,\"141\":2,\"146\":3,\"476\":1,\"479\":1}}],[\"files\",{\"1\":{\"140\":1,\"165\":1,\"441\":1}}],[\"filesize\",{\"1\":{\"133\":1}}],[\"filesort\",{\"1\":{\"19\":1,\"22\":1,\"223\":1}}],[\"file\",{\"1\":{\"3\":4,\"83\":4,\"133\":1,\"165\":1,\"386\":1,\"389\":4,\"461\":1,\"479\":1,\"491\":2,\"495\":1,\"496\":1}}],[\"ainietjlbpnq3bgj4zimdsv9byufznbqfkkf0hlf\",{\"1\":{\"467\":1}}],[\"aichatos\",{\"1\":{\"170\":1}}],[\"aes\",{\"1\":{\"464\":2}}],[\"aes128\",{\"1\":{\"464\":2}}],[\"attempt\",{\"1\":{\"420\":1,\"421\":1}}],[\"attempts++\",{\"1\":{\"420\":1,\"421\":1}}],[\"attempts\",{\"1\":{\"420\":5,\"421\":5}}],[\"attachment\",{\"0\":{\"111\":1},\"1\":{\"111\":2,\"112\":4}}],[\"a415ad50dbf84e99b1b56a31aacd209c\",{\"1\":{\"388\":2}}],[\"amd64\",{\"1\":{\"459\":1,\"466\":1}}],[\"amd\",{\"1\":{\"450\":1}}],[\"am\",{\"1\":{\"450\":1}}],[\"amqpheaders\",{\"1\":{\"362\":1}}],[\"amqp<\",{\"1\":{\"352\":1}}],[\"amazon\",{\"1\":{\"124\":1,\"125\":2}}],[\"agg\",{\"1\":{\"343\":2,\"344\":2,\"345\":2}}],[\"aggs\",{\"1\":{\"343\":1,\"344\":3,\"345\":1}}],[\"aggregationtwo\",{\"1\":{\"344\":1}}],[\"aggregationbuilders\",{\"1\":{\"343\":1,\"344\":1,\"345\":1}}],[\"aggregation\",{\"1\":{\"342\":1,\"343\":2,\"344\":1,\"345\":1}}],[\"aggregations\",{\"1\":{\"342\":1,\"344\":1,\"345\":1}}],[\"agent\",{\"1\":{\"157\":1,\"165\":1,\"440\":1,\"441\":1,\"449\":1,\"464\":1}}],[\"age\",{\"1\":{\"39\":2,\"49\":14,\"223\":1}}],[\"a方法无事务\",{\"1\":{\"280\":1}}],[\"a方法有事务时\",{\"1\":{\"280\":1}}],[\"a方法有事物时候\",{\"1\":{\"280\":5}}],[\"a方法有事物时候b新建一个事务\",{\"1\":{\"280\":1}}],[\"a异常影响b\",{\"1\":{\"280\":2}}],[\"a无事物的时候\",{\"1\":{\"280\":7}}],[\"a依赖b\",{\"1\":{\"280\":1}}],[\"a对象依赖b\",{\"1\":{\"280\":1}}],[\"a得值就是不确定的\",{\"1\":{\"221\":1}}],[\"abstract\",{\"1\":{\"425\":2}}],[\"abortpolicy\",{\"1\":{\"283\":1,\"287\":1,\"397\":1,\"401\":1}}],[\"about\",{\"1\":{\"210\":3}}],[\"abc\",{\"1\":{\"77\":1,\"159\":2}}],[\"availability\",{\"1\":{\"279\":1}}],[\"available\",{\"1\":{\"184\":1,\"449\":1}}],[\"avg\",{\"1\":{\"13\":1,\"22\":1,\"55\":1,\"56\":5,\"79\":1,\"345\":1}}],[\"aaa\",{\"1\":{\"159\":6}}],[\"awk\",{\"1\":{\"165\":4,\"430\":1,\"431\":1,\"450\":4}}],[\"aws\",{\"1\":{\"125\":2}}],[\"awt\",{\"1\":{\"83\":1}}],[\"azure\",{\"1\":{\"124\":1}}],[\"aof\",{\"1\":{\"495\":4}}],[\"aof相对rdb更安全\",{\"1\":{\"227\":1}}],[\"aof持久化时机\",{\"1\":{\"227\":1}}],[\"aof持久化的速度\",{\"1\":{\"227\":1}}],[\"aofaof持久化机制默认是关闭的\",{\"1\":{\"227\":1}}],[\"aon|findstr\",{\"1\":{\"118\":1}}],[\"aop中的代理对象\",{\"1\":{\"419\":1}}],[\"aopcontext\",{\"1\":{\"84\":2}}],[\"aop的环绕通知\",{\"1\":{\"23\":1}}],[\"aop实现查询语句的记录\",{\"1\":{\"23\":1}}],[\"aop\",{\"1\":{\"21\":1,\"84\":1,\"376\":1}}],[\"aug\",{\"1\":{\"459\":1}}],[\"aux\",{\"1\":{\"116\":1}}],[\"authhandler\",{\"1\":{\"425\":4}}],[\"authscope\",{\"1\":{\"323\":1}}],[\"authorized\",{\"1\":{\"435\":2}}],[\"authorization\",{\"1\":{\"108\":1,\"314\":1,\"464\":1}}],[\"author\",{\"1\":{\"283\":1,\"320\":1,\"321\":2,\"376\":1,\"378\":1,\"379\":1,\"380\":1,\"381\":1,\"397\":1,\"439\":1}}],[\"authenticated\",{\"1\":{\"175\":2}}],[\"authtoken=\",{\"1\":{\"153\":1}}],[\"authtoken=xxx\",{\"1\":{\"153\":1}}],[\"auth\",{\"1\":{\"84\":1,\"121\":1,\"174\":1,\"175\":6,\"376\":1,\"425\":1,\"489\":1,\"497\":1,\"499\":1}}],[\"autoreconnect=true\",{\"1\":{\"487\":1}}],[\"autowired\",{\"1\":{\"418\":1}}],[\"autowired注入一个接口\",{\"1\":{\"418\":1}}],[\"autowired是通过类型来注入的\",{\"1\":{\"418\":1}}],[\"automatically\",{\"1\":{\"386\":1}}],[\"autocommit\",{\"1\":{\"74\":2,\"476\":1}}],[\"auto\",{\"1\":{\"15\":2,\"63\":3,\"74\":1,\"78\":3,\"79\":1}}],[\"adh\",{\"1\":{\"464\":2}}],[\"administrator\",{\"1\":{\"351\":1}}],[\"admin\",{\"1\":{\"106\":1,\"194\":1}}],[\"addpathpatterns\",{\"1\":{\"378\":2,\"390\":2}}],[\"adding\",{\"1\":{\"386\":1}}],[\"addinterceptor\",{\"1\":{\"378\":2,\"390\":2}}],[\"addinterceptors\",{\"1\":{\"378\":1,\"390\":1}}],[\"addids\",{\"1\":{\"331\":1}}],[\"addunboundedfrom\",{\"1\":{\"344\":1}}],[\"addunboundedto\",{\"1\":{\"344\":1}}],[\"addscrollid\",{\"1\":{\"337\":1}}],[\"addr>\",{\"1\":{\"491\":1}}],[\"addr>ip\",{\"1\":{\"491\":1}}],[\"addrange\",{\"1\":{\"344\":1}}],[\"addr\",{\"1\":{\"157\":1,\"165\":3,\"323\":3,\"464\":4,\"490\":3,\"491\":4}}],[\"address=0\",{\"1\":{\"139\":1}}],[\"address\",{\"1\":{\"128\":2,\"323\":4,\"460\":1,\"485\":1}}],[\"adddtae\",{\"1\":{\"51\":1}}],[\"add\",{\"1\":{\"13\":1,\"17\":4,\"18\":3,\"41\":1,\"64\":2,\"116\":1,\"117\":1,\"141\":1,\"157\":1,\"165\":2,\"177\":1,\"179\":2,\"323\":1,\"351\":1,\"371\":2,\"381\":1,\"386\":1,\"445\":1,\"458\":2,\"464\":8,\"467\":3,\"475\":1,\"484\":1,\"495\":4,\"497\":2}}],[\"around\",{\"1\":{\"376\":1}}],[\"archive\",{\"1\":{\"459\":1}}],[\"archives\",{\"1\":{\"138\":1,\"470\":1}}],[\"arc\",{\"1\":{\"347\":1}}],[\"array\",{\"1\":{\"384\":1}}],[\"arrayblockingqueue\",{\"1\":{\"286\":1,\"400\":1}}],[\"arrayblockingqueue<>\",{\"1\":{\"283\":1,\"397\":1}}],[\"arraylist<>\",{\"1\":{\"323\":1,\"371\":1}}],[\"arraylist\",{\"0\":{\"241\":1},\"1\":{\"240\":1,\"241\":4,\"243\":1}}],[\"arr\",{\"1\":{\"191\":2}}],[\"artifacts\",{\"1\":{\"440\":2}}],[\"artifactid>\",{\"1\":{\"28\":1,\"84\":1,\"113\":1,\"132\":1,\"323\":1,\"352\":1,\"369\":1,\"383\":2,\"387\":1,\"491\":1}}],[\"article\",{\"1\":{\"116\":1,\"170\":1,\"394\":1,\"496\":1}}],[\"args\",{\"1\":{\"83\":1,\"376\":2,\"387\":1,\"420\":2,\"425\":1}}],[\"are\",{\"1\":{\"28\":1,\"145\":1,\"386\":3}}],[\"ap\",{\"1\":{\"279\":1}}],[\"api的端口\",{\"1\":{\"133\":1}}],[\"api\",{\"1\":{\"125\":1,\"165\":1,\"170\":1,\"360\":1,\"376\":1}}],[\"api请求\",{\"1\":{\"108\":1}}],[\"appears\",{\"1\":{\"386\":1}}],[\"appexception\",{\"1\":{\"329\":1,\"337\":1}}],[\"appendfilename\",{\"1\":{\"495\":1}}],[\"appendfsync\",{\"1\":{\"227\":3,\"495\":1}}],[\"appendonly\",{\"1\":{\"495\":2}}],[\"appender>\",{\"1\":{\"389\":4}}],[\"append\",{\"1\":{\"9\":1}}],[\"app\",{\"1\":{\"178\":1,\"188\":3,\"189\":3,\"190\":3,\"191\":3,\"192\":3,\"194\":3,\"215\":3}}],[\"applicationcontext\",{\"1\":{\"281\":1}}],[\"applicationlistener\",{\"1\":{\"281\":1}}],[\"applicationevent事件监听器\",{\"1\":{\"281\":1}}],[\"application\",{\"1\":{\"28\":1,\"157\":1,\"165\":1,\"378\":1,\"379\":1,\"381\":1,\"389\":1,\"430\":4,\"431\":4,\"487\":1,\"489\":1,\"491\":2}}],[\"apache\",{\"1\":{\"28\":2,\"387\":1,\"389\":1,\"447\":4}}],[\"a×b\",{\"1\":{\"22\":1}}],[\"a×b=\",{\"1\":{\"22\":1}}],[\"anull\",{\"1\":{\"464\":2}}],[\"annotated\",{\"1\":{\"384\":1}}],[\"annotation\",{\"1\":{\"84\":2,\"378\":1,\"386\":5}}],[\"any\",{\"1\":{\"323\":1,\"440\":1,\"441\":1}}],[\"an\",{\"1\":{\"145\":1,\"386\":2}}],[\"ano\",{\"1\":{\"118\":1}}],[\"analyze\",{\"1\":{\"312\":3}}],[\"analyzer\",{\"1\":{\"112\":2,\"312\":2}}],[\"analysis\",{\"1\":{\"110\":4,\"311\":4}}],[\"ant\",{\"1\":{\"21\":1}}],[\"and\",{\"1\":{\"13\":2,\"49\":4,\"339\":1,\"384\":1,\"386\":2,\"461\":1}}],[\"acklistener\",{\"1\":{\"362\":1}}],[\"ackmode\",{\"1\":{\"362\":1}}],[\"ack\",{\"1\":{\"273\":1,\"275\":1,\"362\":1}}],[\"acl\",{\"1\":{\"175\":1}}],[\"accept\",{\"1\":{\"418\":1}}],[\"accesskey\",{\"1\":{\"133\":3}}],[\"access\",{\"1\":{\"128\":3,\"157\":2,\"165\":2,\"175\":4,\"464\":5,\"476\":1,\"490\":1}}],[\"accountadd\",{\"1\":{\"18\":2}}],[\"account\",{\"1\":{\"17\":1,\"74\":6,\"76\":2}}],[\"activation>\",{\"1\":{\"491\":1}}],[\"activated\",{\"1\":{\"215\":1}}],[\"activebydefault>\",{\"1\":{\"491\":1}}],[\"active>\",{\"1\":{\"491\":1}}],[\"active>test\",{\"1\":{\"491\":1}}],[\"active=test\",{\"1\":{\"450\":1}}],[\"active=store\",{\"1\":{\"450\":1}}],[\"active=dev\",{\"1\":{\"165\":1}}],[\"active\",{\"1\":{\"21\":2,\"435\":1,\"491\":5}}],[\"action\",{\"1\":{\"79\":1,\"213\":1}}],[\"actual\",{\"1\":{\"28\":1}}],[\"already\",{\"1\":{\"430\":1,\"431\":1}}],[\"always\",{\"1\":{\"104\":3,\"105\":2,\"227\":1,\"309\":2,\"461\":1}}],[\"algorithms\",{\"1\":{\"28\":1}}],[\"algorithm\",{\"1\":{\"28\":2}}],[\"alive\",{\"1\":{\"464\":1}}],[\"alive缓存功能\",{\"1\":{\"215\":1}}],[\"aliyun<\",{\"1\":{\"447\":2}}],[\"aliyundrive\",{\"1\":{\"178\":1}}],[\"aliyun\",{\"1\":{\"84\":1,\"447\":1}}],[\"aliyuncs\",{\"1\":{\"28\":1}}],[\"alias=\",{\"1\":{\"384\":1}}],[\"alias\",{\"1\":{\"26\":1}}],[\"alibaba\",{\"0\":{\"426\":1},\"1\":{\"21\":1,\"28\":1,\"426\":1,\"482\":1}}],[\"allargsconstructor\",{\"1\":{\"386\":1,\"425\":1}}],[\"allkeys\",{\"1\":{\"230\":3}}],[\"allowanyhosts\",{\"1\":{\"440\":1,\"441\":1}}],[\"allowcorethreadtimeout\",{\"1\":{\"299\":1,\"413\":1}}],[\"allow\",{\"1\":{\"21\":1,\"108\":2,\"175\":3,\"314\":2,\"464\":4}}],[\"all\",{\"1\":{\"19\":2,\"26\":1,\"59\":2,\"77\":1,\"175\":1,\"191\":2,\"223\":1}}],[\"all查看表上的索引\",{\"1\":{\"19\":1}}],[\"alter2\",{\"1\":{\"216\":1}}],[\"alter\",{\"1\":{\"12\":1,\"13\":1,\"19\":2,\"30\":1,\"35\":2,\"41\":7,\"61\":2,\"62\":2,\"63\":5,\"64\":3,\"79\":1,\"141\":1,\"143\":1,\"219\":1}}],[\"aftercompletion\",{\"1\":{\"254\":1,\"256\":1,\"257\":1,\"390\":1}}],[\"after=network\",{\"1\":{\"140\":1,\"157\":1,\"461\":1,\"483\":1,\"494\":2,\"498\":2}}],[\"after\",{\"1\":{\"15\":2,\"21\":4,\"420\":1,\"421\":1,\"497\":1}}],[\"assuming\",{\"1\":{\"386\":1}}],[\"assertfileisexecutable=\",{\"1\":{\"461\":1}}],[\"assertfalse\",{\"1\":{\"384\":1}}],[\"asserttrue\",{\"1\":{\"384\":1}}],[\"aspect\",{\"1\":{\"376\":1}}],[\"asyncjcccc1\",{\"1\":{\"391\":5}}],[\"asyncjcccc\",{\"1\":{\"391\":1}}],[\"asyncexecutort\",{\"1\":{\"391\":1}}],[\"async标注的方法\",{\"1\":{\"300\":1,\"414\":1}}],[\"async\",{\"1\":{\"300\":2,\"414\":2}}],[\"asia\",{\"1\":{\"104\":3,\"439\":1}}],[\"asc\",{\"1\":{\"54\":1,\"79\":1}}],[\"asc|desc\",{\"1\":{\"22\":1}}],[\"as也可以省略\",{\"1\":{\"48\":1}}],[\"as\",{\"1\":{\"14\":2,\"48\":1,\"418\":1}}],[\"a\",{\"1\":{\"3\":4,\"14\":4,\"22\":13,\"78\":4,\"95\":1,\"117\":1,\"145\":2,\"159\":1,\"221\":1,\"223\":1,\"279\":1,\"386\":3,\"458\":1,\"476\":1,\"495\":3,\"496\":1,\"499\":1}}],[\"就启动io线程向主库请求从从某个偏移量开始到而二进制日期文件结束位置之间的所有数据5\",{\"1\":{\"469\":1}}],[\"就想着把前端也搞明白\",{\"1\":{\"432\":1}}],[\"就相当于一个新的事件被发布了\",{\"1\":{\"415\":1}}],[\"就续命\",{\"1\":{\"380\":1}}],[\"就像是mysql\",{\"1\":{\"304\":1}}],[\"就需要使⽤全⽂检索技术\",{\"1\":{\"302\":1}}],[\"就需要集群了redis集群在保证主从加哨兵的基本功能之外\",{\"1\":{\"233\":1}}],[\"就变成terminated状态\",{\"1\":{\"298\":1,\"412\":1}}],[\"就处于running状态\",{\"1\":{\"294\":1,\"408\":1}}],[\"就能保证一直持有锁\",{\"1\":{\"278\":1}}],[\"就使用watchdog机制实现锁的续期\",{\"1\":{\"278\":1}}],[\"就可能造成消息丢失改为手动ack\",{\"1\":{\"275\":1}}],[\"就可以\",{\"1\":{\"378\":1}}],[\"就可以从\",{\"1\":{\"100\":1}}],[\"就可以具备移植性\",{\"1\":{\"91\":1}}],[\"就可以登录成功\",{\"1\":{\"77\":1}}],[\"就可以实现数据从主库⾃动到从库\",{\"1\":{\"27\":1}}],[\"就认为是大对象\",{\"1\":{\"271\":1}}],[\"就认为是慢sql\",{\"1\":{\"21\":1}}],[\"就是web界面控制台\",{\"1\":{\"460\":1}}],[\"就是新闻\",{\"1\":{\"415\":1}}],[\"就是demo级别的\",{\"1\":{\"365\":1}}],[\"就是事物之间的嵌套问题\",{\"1\":{\"280\":1}}],[\"就是为了防止超卖的\",{\"1\":{\"277\":1}}],[\"就是当有两个客户同时购买一个商品的时候\",{\"1\":{\"277\":1}}],[\"就是这个消息他接收失败了\",{\"1\":{\"273\":1}}],[\"就是在生产者开启\",{\"1\":{\"273\":1}}],[\"就是在你的service或者一个方法前调用一个方法\",{\"1\":{\"255\":1}}],[\"就是⽣产者发送数据之前开启\",{\"1\":{\"273\":1}}],[\"就是记录运行时需要的内存空间\",{\"1\":{\"269\":1}}],[\"就是把事物封装成类\",{\"1\":{\"258\":1}}],[\"就是\",{\"1\":{\"233\":1}}],[\"就是因为这个原因\",{\"1\":{\"3\":1}}],[\"就执行rdb持久化\",{\"1\":{\"227\":3}}],[\"就只需要两个连接数\",{\"1\":{\"164\":1}}],[\"就行\",{\"1\":{\"157\":1}}],[\"就不能依赖这个包\",{\"1\":{\"28\":1}}],[\"就记录sql语句3\",{\"1\":{\"23\":1}}],[\"就算在allow列表中\",{\"1\":{\"21\":1}}],[\"就自动在t\",{\"1\":{\"15\":1}}],[\"就会根据事件的类型和内容\",{\"1\":{\"415\":1}}],[\"就会创建一个事件\",{\"1\":{\"415\":1}}],[\"就会校验参数\",{\"1\":{\"378\":1}}],[\"就会由\",{\"1\":{\"297\":1,\"298\":1,\"411\":1,\"412\":1}}],[\"就会对改线程进行回收\",{\"1\":{\"285\":1,\"399\":1}}],[\"就会存到阻塞队列中\",{\"1\":{\"285\":1,\"399\":1}}],[\"就会先走核心线程\",{\"1\":{\"285\":1,\"399\":1}}],[\"就会触发拒绝策略\",{\"1\":{\"284\":1,\"398\":1}}],[\"就会放到阻塞队列中\",{\"1\":{\"284\":1,\"398\":1}}],[\"就会出现循环依赖问题\",{\"1\":{\"280\":1}}],[\"就会按照顺序执行拦截器里面的\",{\"1\":{\"280\":1}}],[\"就会有问题\",{\"1\":{\"279\":1}}],[\"就会进不来\",{\"1\":{\"277\":1}}],[\"就会线程不安全\",{\"1\":{\"277\":1}}],[\"就会调用⼀个\",{\"1\":{\"273\":1}}],[\"就会把伊甸区存活对象和幸存者1存货的对象放到幸存者2上\",{\"1\":{\"271\":1}}],[\"就会自动启动这个容器\",{\"1\":{\"104\":3}}],[\"就会⾃动执⾏sql语句\",{\"1\":{\"15\":1}}],[\"就会导致\",{\"1\":{\"6\":1}}],[\"就会抛异常\",{\"1\":{\"3\":1}}],[\"就无法再次获取同一个输入流\",{\"1\":{\"6\":1}}],[\"就无法再次读取\",{\"1\":{\"6\":1}}],[\"浅浅的说一个吧\",{\"1\":{\"3\":1}}],[\"奇奇怪怪的问题\",{\"1\":{\"3\":1}}],[\"说明如何定位起止行数\",{\"1\":{\"145\":1}}],[\"说明mysql会对数据使⽤⼀个外部的索引排序\",{\"1\":{\"19\":1,\"22\":1}}],[\"说明\",{\"1\":{\"3\":1,\"52\":1,\"120\":1,\"141\":1,\"222\":1,\"223\":5,\"325\":1,\"346\":1}}],[\"遇见的奇葩问题\",{\"0\":{\"3\":1}}]],\"serializationVersion\":2}}")).map(([e,t])=>[e,zt(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:s,options:n}})=>{e==="suggest"?self.postMessage(st(t,v[s],n)):e==="search"?self.postMessage(et(t,v[s],n)):self.postMessage({suggestions:st(t,v[s],n),results:et(t,v[s],n)})};
//# sourceMappingURL=index.js.map
